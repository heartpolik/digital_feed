
C:\Temp\arduino_build_20379/Digital_Feed_7e2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c2       	rjmp	.+1092   	; 0x446 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 d6 7e 	jmp	0xfdac	; 0xfdac <__vector_1>
       8:	0c 94 86 7e 	jmp	0xfd0c	; 0xfd0c <__vector_2>
       c:	0c 94 51 7e 	jmp	0xfca2	; 0xfca2 <__vector_3>
      10:	4b c2       	rjmp	.+1174   	; 0x4a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c2       	rjmp	.+1170   	; 0x4a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c2       	rjmp	.+1166   	; 0x4a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c2       	rjmp	.+1162   	; 0x4a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c2       	rjmp	.+1158   	; 0x4a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c2       	rjmp	.+1154   	; 0x4a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c2       	rjmp	.+1150   	; 0x4a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3d c2       	rjmp	.+1146   	; 0x4a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 fe 80 	jmp	0x101fc	; 0x101fc <__vector_12>
      34:	0c 94 47 7e 	jmp	0xfc8e	; 0xfc8e <__vector_13>
      38:	0c 94 3d 7e 	jmp	0xfc7a	; 0xfc7a <__vector_14>
      3c:	35 c2       	rjmp	.+1130   	; 0x4a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c2       	rjmp	.+1126   	; 0x4a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c2       	rjmp	.+1122   	; 0x4a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c2       	rjmp	.+1118   	; 0x4a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c2       	rjmp	.+1114   	; 0x4a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c2       	rjmp	.+1110   	; 0x4a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c2       	rjmp	.+1106   	; 0x4a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 33 7e 	jmp	0xfc66	; 0xfc66 <__vector_22>
      5c:	0c 94 d1 72 	jmp	0xe5a2	; 0xe5a2 <__vector_23>
      60:	23 c2       	rjmp	.+1094   	; 0x4a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c2       	rjmp	.+1090   	; 0x4a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c2       	rjmp	.+1086   	; 0x4a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c2       	rjmp	.+1082   	; 0x4a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c2       	rjmp	.+1078   	; 0x4a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c2       	rjmp	.+1074   	; 0x4a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c2       	rjmp	.+1070   	; 0x4a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c2       	rjmp	.+1066   	; 0x4a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 25 7d 	jmp	0xfa4a	; 0xfa4a <__vector_32>
      84:	0c 94 17 7c 	jmp	0xf82e	; 0xf82e <__vector_33>
      88:	0f c2       	rjmp	.+1054   	; 0x4a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0d c2       	rjmp	.+1050   	; 0x4a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0b c2       	rjmp	.+1046   	; 0x4a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	09 c2       	rjmp	.+1042   	; 0x4a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	07 c2       	rjmp	.+1038   	; 0x4a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	05 c2       	rjmp	.+1034   	; 0x4a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	03 c2       	rjmp	.+1030   	; 0x4a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	01 c2       	rjmp	.+1026   	; 0x4a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 7e 7a 	jmp	0xf4fc	; 0xf4fc <__vector_42>
      ac:	0c 94 eb 78 	jmp	0xf1d6	; 0xf1d6 <__vector_43>
      b0:	0c 94 a0 76 	jmp	0xed40	; 0xed40 <__vector_44>
      b4:	f9 c1       	rjmp	.+1010   	; 0x4a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f7 c1       	rjmp	.+1006   	; 0x4a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 da 74 	jmp	0xe9b4	; 0xe9b4 <__vector_47>
      c0:	0c 94 1b 73 	jmp	0xe636	; 0xe636 <__vector_48>
      c4:	f1 c1       	rjmp	.+994    	; 0x4a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ef c1       	rjmp	.+990    	; 0x4a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ed c1       	rjmp	.+986    	; 0x4a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	eb c1       	rjmp	.+982    	; 0x4a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e9 c1       	rjmp	.+978    	; 0x4a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e7 c1       	rjmp	.+974    	; 0x4a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e5 c1       	rjmp	.+970    	; 0x4a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e3 c1       	rjmp	.+966    	; 0x4a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 06       	cpc	r3, r31
     112:	64 ec       	ldi	r22, 0xC4	; 196
     114:	1b 3c       	cpi	r17, 0xCB	; 203
     116:	04 bc       	out	0x24, r0	; 36
     118:	16 3e       	cpi	r17, 0xE6	; 230
     11a:	3b e5       	ldi	r19, 0x5B	; 91
     11c:	b9 3c       	cpi	r27, 0xC9	; 201
     11e:	c9 3c       	cpi	r28, 0xC9	; 201
     120:	37 c2       	rjmp	.+1134   	; 0x590 <_Z8Get_B_ABffh.constprop.10+0x58>
     122:	9e 5a       	subi	r25, 0xAE	; 174
     124:	3d 66       	ori	r19, 0x6D	; 109
     126:	04 98       	cbi	0x00, 4	; 0
     128:	08 3e       	cpi	r16, 0xE8	; 232
     12a:	ea 69       	ori	r30, 0x9A	; 154
     12c:	aa aa       	std	Y+50, r10	; 0x32
     12e:	3e 00       	.word	0x003e	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240

00000134 <__trampolines_end>:
     134:	00 40       	sbci	r16, 0x00	; 0
     136:	7a 10       	cpse	r7, r10
     138:	f3 5a       	subi	r31, 0xA3	; 163
     13a:	00 a0       	ldd	r0, Z+32	; 0x20
     13c:	72 4e       	sbci	r23, 0xE2	; 226
     13e:	18 09       	sbc	r17, r8
     140:	00 10       	cpse	r0, r0
     142:	a5 d4       	rcall	.+2378   	; 0xa8e <_Z9Check_Alljj+0x260>
     144:	e8 00       	.word	0x00e8	; ????
     146:	00 e8       	ldi	r16, 0x80	; 128
     148:	76 48       	sbci	r23, 0x86	; 134
     14a:	17 00       	.word	0x0017	; ????
     14c:	00 e4       	ldi	r16, 0x40	; 64
     14e:	0b 54       	subi	r16, 0x4B	; 75
     150:	02 00       	.word	0x0002	; ????
     152:	00 ca       	rjmp	.-3072   	; 0xfffff554 <__eeprom_end+0xff7ef554>
     154:	9a 3b       	cpi	r25, 0xBA	; 186
     156:	00 00       	nop
     158:	00 e1       	ldi	r16, 0x10	; 16
     15a:	f5 05       	cpc	r31, r5
     15c:	00 00       	nop
     15e:	80 96       	adiw	r24, 0x20	; 32
     160:	98 00       	.word	0x0098	; ????
     162:	00 00       	nop
     164:	40 42       	sbci	r20, 0x20	; 32
     166:	0f 00       	.word	0x000f	; ????
     168:	00 00       	nop
     16a:	a0 86       	std	Z+8, r10	; 0x08
     16c:	01 00       	.word	0x0001	; ????
     16e:	00 00       	nop
     170:	10 27       	eor	r17, r16
     172:	00 00       	nop
     174:	00 00       	nop
     176:	e8 03       	fmulsu	r22, r16
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	64 00       	.word	0x0064	; ????
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	0a 00       	.word	0x000a	; ????
     184:	00 00       	nop
     186:	00 00       	nop
     188:	01 00       	.word	0x0001	; ????
     18a:	00 00       	nop
     18c:	00 00       	nop
     18e:	2c 76       	andi	r18, 0x6C	; 108
     190:	d8 88       	ldd	r13, Y+16	; 0x10
     192:	dc 67       	ori	r29, 0x7C	; 124
     194:	4f 08       	sbc	r4, r15
     196:	23 df       	rcall	.-442    	; 0xffffffde <__eeprom_end+0xff7effde>
     198:	c1 df       	rcall	.-126    	; 0x11c <__SREG__+0xdd>
     19a:	ae 59       	subi	r26, 0x9E	; 158
     19c:	e1 b1       	in	r30, 0x01	; 1
     19e:	b7 96       	adiw	r30, 0x27	; 39
     1a0:	e5 e3       	ldi	r30, 0x35	; 53
     1a2:	e4 53       	subi	r30, 0x34	; 52
     1a4:	c6 3a       	cpi	r28, 0xA6	; 166
     1a6:	e6 51       	subi	r30, 0x16	; 22
     1a8:	99 76       	andi	r25, 0x69	; 105
     1aa:	96 e8       	ldi	r25, 0x86	; 134
     1ac:	e6 c2       	rjmp	.+1484   	; 0x77a <digitalWrite+0x88>
     1ae:	84 26       	eor	r8, r20
     1b0:	eb 89       	ldd	r30, Y+19	; 0x13
     1b2:	8c 9b       	sbis	0x11, 4	; 17
     1b4:	62 ed       	ldi	r22, 0xD2	; 210
     1b6:	40 7c       	andi	r20, 0xC0	; 192
     1b8:	6f fc       	.word	0xfc6f	; ????
     1ba:	ef bc       	out	0x2f, r14	; 47
     1bc:	9c 9f       	mul	r25, r28
     1be:	40 f2       	brcs	.-112    	; 0x150 <__trampolines_end+0x1c>
     1c0:	ba a5       	ldd	r27, Y+42	; 0x2a
     1c2:	6f a5       	ldd	r22, Y+47	; 0x2f
     1c4:	f4 90       	lpm	r15, Z
     1c6:	05 5a       	subi	r16, 0xA5	; 165
     1c8:	2a f7       	brpl	.-54     	; 0x194 <__trampolines_end+0x60>
     1ca:	5c 93       	st	X, r21
     1cc:	6b 6c       	ori	r22, 0xCB	; 203
     1ce:	f9 67       	ori	r31, 0x79	; 121
     1d0:	6d c1       	rjmp	.+730    	; 0x4ac <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37+0x2>
     1d2:	1b fc       	.word	0xfc1b	; ????
     1d4:	e0 e4       	ldi	r30, 0x40	; 64
     1d6:	0d 47       	sbci	r16, 0x7D	; 125
     1d8:	fe f5       	brtc	.+126    	; 0x258 <digital_pin_to_timer_PGM+0x2a>
     1da:	20 e6       	ldi	r18, 0x60	; 96
     1dc:	b5 00       	.word	0x00b5	; ????
     1de:	d0 ed       	ldi	r29, 0xD0	; 208
     1e0:	90 2e       	mov	r9, r16
     1e2:	03 00       	.word	0x0003	; ????
     1e4:	94 35       	cpi	r25, 0x54	; 84
     1e6:	77 05       	cpc	r23, r7
     1e8:	00 80       	ld	r0, Z
     1ea:	84 1e       	adc	r8, r20
     1ec:	08 00       	.word	0x0008	; ????
     1ee:	00 20       	and	r0, r0
     1f0:	4e 0a       	sbc	r4, r30
     1f2:	00 00       	nop
     1f4:	00 c8       	rjmp	.-4096   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
     1f6:	0c 33       	cpi	r16, 0x3C	; 60
     1f8:	33 33       	cpi	r19, 0x33	; 51
     1fa:	33 0f       	add	r19, r19
     1fc:	98 6e       	ori	r25, 0xE8	; 232
     1fe:	12 83       	std	Z+2, r17	; 0x02
     200:	11 41       	sbci	r17, 0x11	; 17
     202:	ef 8d       	ldd	r30, Y+31	; 0x1f
     204:	21 14       	cp	r2, r1
     206:	89 3b       	cpi	r24, 0xB9	; 185
     208:	e6 55       	subi	r30, 0x56	; 86
     20a:	16 cf       	rjmp	.-468    	; 0x38 <__FUSE_REGION_LENGTH__+0x35>
     20c:	fe e6       	ldi	r31, 0x6E	; 110
     20e:	db 18       	sub	r13, r11
     210:	d1 84       	ldd	r13, Z+9	; 0x09
     212:	4b 38       	cpi	r20, 0x8B	; 139
     214:	1b f7       	brvc	.-58     	; 0x1dc <__trampolines_end+0xa8>
     216:	7c 1d       	adc	r23, r12
     218:	90 1d       	adc	r25, r0
     21a:	a4 bb       	out	0x14, r26	; 20
     21c:	e4 24       	eor	r14, r4
     21e:	20 32       	cpi	r18, 0x20	; 32
     220:	84 72       	andi	r24, 0x24	; 36
     222:	5e 22       	and	r5, r30
     224:	81 00       	.word	0x0081	; ????
     226:	c9 f1       	breq	.+114    	; 0x29a <rus_t+0x6>
     228:	24 ec       	ldi	r18, 0xC4	; 196
     22a:	a1 e5       	ldi	r26, 0x51	; 81
     22c:	3d 27       	eor	r19, r29

0000022e <digital_pin_to_timer_PGM>:
     22e:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     25a:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000274 <rus_ya>:
     274:	00 00 0f 11 0f 05 09 00                             ........

0000027c <rus_y>:
     27c:	00 00 11 11 1d 13 1d 00                             ........

00000284 <rus_ch>:
     284:	00 00 11 11 0f 01 01 00                             ........

0000028c <rus_ts>:
     28c:	00 00 12 12 12 12 1f 01                             ........

00000294 <rus_t>:
     294:	00 00 1f 04 04 04 04 00                             ........

0000029c <rus_n>:
     29c:	00 00 11 11 1f 11 11 00                             ........

000002a4 <rus_m>:
     2a4:	00 00 11 1b 15 11 11 00                             ........

000002ac <rus_k>:
     2ac:	00 00 12 14 18 14 12 00                             ........

000002b4 <rus_i>:
     2b4:	00 00 11 13 15 19 11 00                             ........

000002bc <rus_z>:
     2bc:	00 00 0e 11 06 11 0e 00                             ........

000002c4 <rus_zh>:
     2c4:	00 00 15 15 0e 15 15 00                             ........

000002cc <rus_d>:
     2cc:	00 00 06 0a 0a 0a 1f 11                             ........

000002d4 <rus_g>:
     2d4:	00 00 1e 10 10 10 10 00                             ........

000002dc <rus_v>:
     2dc:	00 00 1e 11 1e 11 1e 00                             ........

000002e4 <rus_b>:
     2e4:	03 0c 10 1e 11 11 0e 00                             ........

000002ec <rus_YA>:
     2ec:	0f 11 11 0f 05 09 11 00                             ........

000002f4 <rus_YU>:
     2f4:	12 15 15 1d 15 15 12 00                             ........

000002fc <rus_EE>:
     2fc:	0e 11 01 07 01 11 0e 00                             ........

00000304 <rus_myagk>:
     304:	10 10 10 1e 11 11 1e 00                             ........

0000030c <rus_Y>:
     30c:	11 11 11 1d 13 13 1d 00                             ........

00000314 <rus_SH>:
     314:	11 11 11 15 15 15 1f 00                             ........

0000031c <rus_CH>:
     31c:	11 11 11 0f 01 01 01 00                             ........

00000324 <rus_TS>:
     324:	12 12 12 12 12 12 1f 01                             ........

0000032c <rus_F>:
     32c:	04 0e 15 15 15 0e 04 00                             ........

00000334 <rus_U>:
     334:	11 11 11 0f 01 11 0e 00                             ........

0000033c <rus_P>:
     33c:	1f 11 11 11 11 11 11 00                             ........

00000344 <rus_L>:
     344:	07 09 09 09 09 09 11 00                             ........

0000034c <rus_II>:
     34c:	15 11 11 13 15 19 11 00                             ........

00000354 <rus_I>:
     354:	11 11 11 13 15 19 11 00                             ........

0000035c <rus_Z>:
     35c:	0e 11 01 06 01 11 0e 00                             ........

00000364 <rus_ZH>:
     364:	15 15 15 0e 15 15 15 00                             ........

0000036c <rus_D>:
     36c:	06 0a 0a 0a 0a 0a 1f 11                             ........

00000374 <rus_G>:
     374:	1f 10 10 10 10 10 10 00                             ........

0000037c <rus_B>:
     37c:	1f 10 10 1e 11 11 1e 00                             ........

00000384 <port_to_output_PGM>:
     384:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     394:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000039e <port_to_mode_PGM>:
     39e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3ae:	01 01 00 00 04 01 07 01 0a 01                       ..........

000003b8 <digital_pin_to_port_PGM>:
     3b8:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     3c8:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     3d8:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     3e8:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     3f8:	0b 0b 0b 0b 0b 0b                                   ......

000003fe <digital_pin_to_bit_mask_PGM>:
     3fe:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     40e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     41e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     42e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     43e:	04 08 10 20 40 80                                   ... @.

00000444 <__ctors_start>:
     444:	60 92 11 24 	Address 0x00000446 is out of bounds.
sts	0xFFFF, r6	; 0x80ffff <__bss_end+0xed62>

00000446 <__ctors_end>:
     446:	11 24       	eor	r1, r1
     448:	1f be       	out	0x3f, r1	; 63
     44a:	cf ef       	ldi	r28, 0xFF	; 255
     44c:	d1 e2       	ldi	r29, 0x21	; 33
     44e:	de bf       	out	0x3e, r29	; 62
     450:	cd bf       	out	0x3d, r28	; 61
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	0c bf       	out	0x3c, r16	; 60

00000456 <__do_copy_data>:
     456:	11 e1       	ldi	r17, 0x11	; 17
     458:	a0 e0       	ldi	r26, 0x00	; 0
     45a:	b2 e0       	ldi	r27, 0x02	; 2
     45c:	e8 eb       	ldi	r30, 0xB8	; 184
     45e:	f7 e3       	ldi	r31, 0x37	; 55
     460:	01 e0       	ldi	r16, 0x01	; 1
     462:	0b bf       	out	0x3b, r16	; 59
     464:	02 c0       	rjmp	.+4      	; 0x46a <__do_copy_data+0x14>
     466:	07 90       	elpm	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	ae 36       	cpi	r26, 0x6E	; 110
     46c:	b1 07       	cpc	r27, r17
     46e:	d9 f7       	brne	.-10     	; 0x466 <__do_copy_data+0x10>

00000470 <__do_clear_bss>:
     470:	22 e1       	ldi	r18, 0x12	; 18
     472:	ae e6       	ldi	r26, 0x6E	; 110
     474:	b1 e1       	ldi	r27, 0x11	; 17
     476:	01 c0       	rjmp	.+2      	; 0x47a <.do_clear_bss_start>

00000478 <.do_clear_bss_loop>:
     478:	1d 92       	st	X+, r1

0000047a <.do_clear_bss_start>:
     47a:	ad 39       	cpi	r26, 0x9D	; 157
     47c:	b2 07       	cpc	r27, r18
     47e:	e1 f7       	brne	.-8      	; 0x478 <.do_clear_bss_loop>

00000480 <__do_global_ctors>:
     480:	12 e0       	ldi	r17, 0x02	; 2
     482:	c3 e2       	ldi	r28, 0x23	; 35
     484:	d2 e0       	ldi	r29, 0x02	; 2
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	06 c0       	rjmp	.+12     	; 0x496 <__do_global_ctors+0x16>
     48a:	21 97       	sbiw	r28, 0x01	; 1
     48c:	01 09       	sbc	r16, r1
     48e:	80 2f       	mov	r24, r16
     490:	fe 01       	movw	r30, r28
     492:	0e 94 cb 98 	call	0x13196	; 0x13196 <__tablejump2__>
     496:	c2 32       	cpi	r28, 0x22	; 34
     498:	d1 07       	cpc	r29, r17
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	08 07       	cpc	r16, r24
     49e:	a9 f7       	brne	.-22     	; 0x48a <__do_global_ctors+0xa>
     4a0:	0e 94 5e 81 	call	0x102bc	; 0x102bc <main>
     4a4:	0c 94 da 9b 	jmp	0x137b4	; 0x137b4 <_exit>

000004a8 <__bad_interrupt>:
     4a8:	ab cd       	rjmp	.-1194   	; 0x0 <__vectors>

000004aa <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37>:
  else   //Иначе печатаем уже существующий
    write(*index);
}
void LiquidCrystal_1602_RUS::ResetAllIndex()
{
  symbol_index = 0;
     4aa:	ee e5       	ldi	r30, 0x5E	; 94
     4ac:	f2 e1       	ldi	r31, 0x12	; 18
     4ae:	12 8e       	std	Z+26, r1	; 0x1a
     4b0:	11 8e       	std	Z+25, r1	; 0x19

#ifdef _rus_B
  index_rus_B = 255;					//Б
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	85 8f       	std	Z+29, r24	; 0x1d
#endif

#ifdef _rus_G
  index_rus_G = 255;					//Г
     4b6:	86 8f       	std	Z+30, r24	; 0x1e
#endif

#ifdef _rus_D
  index_rus_D = 255;					//Д
     4b8:	87 8f       	std	Z+31, r24	; 0x1f
#endif

#ifdef _rus_ZH
  index_rus_ZH = 255;					//Ж
     4ba:	80 a3       	std	Z+32, r24	; 0x20
#endif

#ifdef _rus_Z
  index_rus_Z = 255;					//З
     4bc:	81 a3       	std	Z+33, r24	; 0x21
#endif

#ifdef _rus_I
  index_rus_I = 255;					//И
     4be:	82 a3       	std	Z+34, r24	; 0x22
#endif

#ifdef _rus_II
  index_rus_II = 255;					//Й
     4c0:	83 a3       	std	Z+35, r24	; 0x23
#endif

#ifdef _rus_L
  index_rus_L = 255;					//Л
     4c2:	84 a3       	std	Z+36, r24	; 0x24
#endif

#ifdef _rus_P
  index_rus_P = 255;					//П
     4c4:	85 a3       	std	Z+37, r24	; 0x25
#endif

#ifdef _rus_U
  index_rus_U = 255;					//У
     4c6:	86 a3       	std	Z+38, r24	; 0x26
#endif

#ifdef _rus_F
  index_rus_F = 255;					//Ф
     4c8:	87 a3       	std	Z+39, r24	; 0x27
#endif

#ifdef _rus_TS
  index_rus_TS = 255;					//Ц
     4ca:	80 a7       	std	Z+40, r24	; 0x28
#endif

#ifdef _rus_CH
  index_rus_CH = 255;					//Ч
     4cc:	81 a7       	std	Z+41, r24	; 0x29
#endif

#ifdef _rus_SH
  index_rus_SH = 255;					//Ш
     4ce:	82 a7       	std	Z+42, r24	; 0x2a
#ifdef _rus_tverd
  index_rus_tverd = 255;				//Ъ
#endif

#ifdef _rus_Y
  index_rus_Y = 255;					//Ы
     4d0:	83 a7       	std	Z+43, r24	; 0x2b
#endif

#ifdef _rus_myagk
  index_rus_myagk = 255;				//Ь
     4d2:	84 a7       	std	Z+44, r24	; 0x2c
#endif

#ifdef _rus_EE
  index_rus_EE = 255;					//Э
     4d4:	85 a7       	std	Z+45, r24	; 0x2d
#endif

#ifdef _rus_YU
  index_rus_YU = 255;					//Ю
     4d6:	86 a7       	std	Z+46, r24	; 0x2e
#endif

#ifdef _rus_YA
  index_rus_YA = 255;					//Я
     4d8:	87 a7       	std	Z+47, r24	; 0x2f
#endif

#ifdef _rus_b
  index_rus_b = 255;					//б
     4da:	80 ab       	std	Z+48, r24	; 0x30
#endif

#ifdef _rus_v
  index_rus_v = 255;					//в
     4dc:	81 ab       	std	Z+49, r24	; 0x31
#endif

#ifdef _rus_g
  index_rus_g = 255;					//г
     4de:	82 ab       	std	Z+50, r24	; 0x32
#endif

#ifdef _rus_d
  index_rus_d = 255;					//д
     4e0:	83 ab       	std	Z+51, r24	; 0x33
#ifdef _rus_yo
  index_rus_yo = 255;					//ё
#endif

#ifdef _rus_zh
  index_rus_zh = 255;					//ж
     4e2:	84 ab       	std	Z+52, r24	; 0x34
#endif

#ifdef _rus_z
  index_rus_z = 255;					//з
     4e4:	85 ab       	std	Z+53, r24	; 0x35
#endif

#ifdef _rus_i
  index_rus_i = 255;					//и
     4e6:	86 ab       	std	Z+54, r24	; 0x36
#ifdef _rus_ii
  index_rus_ii = 255;					//й
#endif

#ifdef _rus_k
  index_rus_k = 255;					//к
     4e8:	87 ab       	std	Z+55, r24	; 0x37
#ifdef _rus_l
  index_rus_l = 255;					//л
#endif

#ifdef _rus_m
  index_rus_m = 255;					//м
     4ea:	80 af       	std	Z+56, r24	; 0x38
#endif

#ifdef _rus_n
  index_rus_n = 255;					//н
     4ec:	81 af       	std	Z+57, r24	; 0x39
#ifdef _rus_p
  index_rus_p = 255;					//п
#endif

#ifdef _rus_t
  index_rus_t = 255;					//т
     4ee:	82 af       	std	Z+58, r24	; 0x3a
#ifdef _rus_f
  index_rus_f = 255;					//ф
#endif

#ifdef _rus_ts
  index_rus_ts = 255;					//ц
     4f0:	83 af       	std	Z+59, r24	; 0x3b
#endif

#ifdef _rus_ch
  index_rus_ch = 255;					//ч
     4f2:	84 af       	std	Z+60, r24	; 0x3c
#ifdef _rus_tverd_mal
  index_rus_tverd_mal = 255;			//ъ
#endif

#ifdef _rus_y
  index_rus_y = 255;					//ы
     4f4:	85 af       	std	Z+61, r24	; 0x3d
#ifdef _rus_yu
  index_rus_yu = 255;					//ю
#endif

#ifdef _rus_ya
  index_rus_ya = 255;					//я
     4f6:	86 af       	std	Z+62, r24	; 0x3e
#endif

}
     4f8:	08 95       	ret

000004fa <pinMode.constprop.36>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	fc 01       	movw	r30, r24
     4fe:	e2 50       	subi	r30, 0x02	; 2
     500:	fc 4f       	sbci	r31, 0xFC	; 252
     502:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     504:	88 54       	subi	r24, 0x48	; 72
     506:	9c 4f       	sbci	r25, 0xFC	; 252
     508:	fc 01       	movw	r30, r24
     50a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     50c:	88 23       	and	r24, r24
     50e:	99 f0       	breq	.+38     	; 0x536 <pinMode.constprop.36+0x3c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	fc 01       	movw	r30, r24
     518:	e2 56       	subi	r30, 0x62	; 98
     51a:	fc 4f       	sbci	r31, 0xFC	; 252
     51c:	a5 91       	lpm	r26, Z+
     51e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     520:	fc 01       	movw	r30, r24
     522:	ec 57       	subi	r30, 0x7C	; 124
     524:	fc 4f       	sbci	r31, 0xFC	; 252
     526:	85 91       	lpm	r24, Z+
     528:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     52a:	8f b7       	in	r24, 0x3f	; 63
                cli();
     52c:	f8 94       	cli
		*reg |= bit;
     52e:	ec 91       	ld	r30, X
     530:	e2 2b       	or	r30, r18
     532:	ec 93       	st	X, r30
		SREG = oldSREG;
     534:	8f bf       	out	0x3f, r24	; 63
	}
}
     536:	08 95       	ret

00000538 <_Z8Get_B_ABffh.constprop.10>:
//  float tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)Divider * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
//  return (float)(A / tmp);
//}

//"Обратная" функция к Calc_C_AB с учётом типа тактования конуса
float Get_B_AB(float A, float Divider, byte XZ)
     538:	4f 92       	push	r4
     53a:	5f 92       	push	r5
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	00 d0       	rcall	.+0      	; 0x556 <_Z8Get_B_ABffh.constprop.10+0x1e>
     556:	00 d0       	rcall	.+0      	; 0x558 <_Z8Get_B_ABffh.constprop.10+0x20>
     558:	00 d0       	rcall	.+0      	; 0x55a <_Z8Get_B_ABffh.constprop.10+0x22>
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	6d 83       	std	Y+5, r22	; 0x05
     560:	7e 83       	std	Y+6, r23	; 0x06
     562:	8f 83       	std	Y+7, r24	; 0x07
     564:	98 87       	std	Y+8, r25	; 0x08
     566:	49 87       	std	Y+9, r20	; 0x09
     568:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
     56c:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
     570:	07 2e       	mov	r0, r23
     572:	00 0c       	add	r0, r0
     574:	88 0b       	sbc	r24, r24
     576:	99 0b       	sbc	r25, r25
     578:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e8       	ldi	r20, 0x80	; 128
     582:	50 e4       	ldi	r21, 0x40	; 64
     584:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24
     58c:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
     590:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
     594:	07 2e       	mov	r0, r23
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     5a0:	9b 01       	movw	r18, r22
     5a2:	ac 01       	movw	r20, r24
     5a4:	c7 01       	movw	r24, r14
     5a6:	b6 01       	movw	r22, r12
     5a8:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     5ac:	6b 01       	movw	r12, r22
     5ae:	7c 01       	movw	r14, r24
     5b0:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
     5b4:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
     5b8:	07 2e       	mov	r0, r23
     5ba:	00 0c       	add	r0, r0
     5bc:	88 0b       	sbc	r24, r24
     5be:	99 0b       	sbc	r25, r25
     5c0:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     5c4:	9b 01       	movw	r18, r22
     5c6:	ac 01       	movw	r20, r24
     5c8:	c7 01       	movw	r24, r14
     5ca:	b6 01       	movw	r22, r12
     5cc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     5d0:	6b 01       	movw	r12, r22
     5d2:	7c 01       	movw	r14, r24
     5d4:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
     5d8:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
     5dc:	07 2e       	mov	r0, r23
     5de:	00 0c       	add	r0, r0
     5e0:	88 0b       	sbc	r24, r24
     5e2:	99 0b       	sbc	r25, r25
     5e4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     5e8:	2b 01       	movw	r4, r22
     5ea:	3c 01       	movw	r6, r24
     5ec:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
     5f0:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
     5f4:	07 2e       	mov	r0, r23
     5f6:	00 0c       	add	r0, r0
     5f8:	88 0b       	sbc	r24, r24
     5fa:	99 0b       	sbc	r25, r25
     5fc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     600:	4b 01       	movw	r8, r22
     602:	5c 01       	movw	r10, r24
     604:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
     608:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
     60c:	07 2e       	mov	r0, r23
     60e:	00 0c       	add	r0, r0
     610:	88 0b       	sbc	r24, r24
     612:	99 0b       	sbc	r25, r25
     614:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     618:	69 83       	std	Y+1, r22	; 0x01
     61a:	7a 83       	std	Y+2, r23	; 0x02
     61c:	8b 83       	std	Y+3, r24	; 0x03
     61e:	9c 83       	std	Y+4, r25	; 0x04
{
  float tmp;
  if (XZ == (byte)0)
     620:	89 85       	ldd	r24, Y+9	; 0x09
  {
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)Divider * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
     622:	21 e7       	ldi	r18, 0x71	; 113
     624:	3d ef       	ldi	r19, 0xFD	; 253
     626:	4e e7       	ldi	r20, 0x7E	; 126
     628:	53 e4       	ldi	r21, 0x43	; 67

//"Обратная" функция к Calc_C_AB с учётом типа тактования конуса
float Get_B_AB(float A, float Divider, byte XZ)
{
  float tmp;
  if (XZ == (byte)0)
     62a:	88 23       	and	r24, r24
     62c:	21 f0       	breq	.+8      	; 0x636 <_Z8Get_B_ABffh.constprop.10+0xfe>
  {
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)Divider * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
  } else {
    float DividerXZ = 1.0f / Divider;
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)DividerXZ * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
     62e:	2b ec       	ldi	r18, 0xCB	; 203
     630:	31 e8       	ldi	r19, 0x81	; 129
     632:	40 e8       	ldi	r20, 0x80	; 128
     634:	5b e3       	ldi	r21, 0x3B	; 59
     636:	c3 01       	movw	r24, r6
     638:	b2 01       	movw	r22, r4
     63a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     63e:	a5 01       	movw	r20, r10
     640:	94 01       	movw	r18, r8
     642:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     646:	29 81       	ldd	r18, Y+1	; 0x01
     648:	3a 81       	ldd	r19, Y+2	; 0x02
     64a:	4b 81       	ldd	r20, Y+3	; 0x03
     64c:	5c 81       	ldd	r21, Y+4	; 0x04
     64e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     652:	9b 01       	movw	r18, r22
     654:	ac 01       	movw	r20, r24
     656:	c7 01       	movw	r24, r14
     658:	b6 01       	movw	r22, r12
     65a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
  }
  return (float)(A / tmp);
     65e:	9b 01       	movw	r18, r22
     660:	ac 01       	movw	r20, r24
     662:	6d 81       	ldd	r22, Y+5	; 0x05
     664:	7e 81       	ldd	r23, Y+6	; 0x06
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	98 85       	ldd	r25, Y+8	; 0x08
     66a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
}
     66e:	29 96       	adiw	r28, 0x09	; 9
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	7f 90       	pop	r7
     690:	6f 90       	pop	r6
     692:	5f 90       	pop	r5
     694:	4f 90       	pop	r4
     696:	08 95       	ret

00000698 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	6c 01       	movw	r12, r24
     6ae:	7b 01       	movw	r14, r22
     6b0:	8b 01       	movw	r16, r22
     6b2:	04 0f       	add	r16, r20
     6b4:	15 1f       	adc	r17, r21
     6b6:	eb 01       	movw	r28, r22
     6b8:	5e 01       	movw	r10, r28
     6ba:	ae 18       	sub	r10, r14
     6bc:	bf 08       	sbc	r11, r15
  size_t n = 0;
  while (size--) {
     6be:	c0 17       	cp	r28, r16
     6c0:	d1 07       	cpc	r29, r17
     6c2:	59 f0       	breq	.+22     	; 0x6da <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
     6c4:	69 91       	ld	r22, Y+
     6c6:	d6 01       	movw	r26, r12
     6c8:	ed 91       	ld	r30, X+
     6ca:	fc 91       	ld	r31, X
     6cc:	01 90       	ld	r0, Z+
     6ce:	f0 81       	ld	r31, Z
     6d0:	e0 2d       	mov	r30, r0
     6d2:	c6 01       	movw	r24, r12
     6d4:	19 95       	eicall
     6d6:	89 2b       	or	r24, r25
     6d8:	79 f7       	brne	.-34     	; 0x6b8 <_ZN5Print5writeEPKhj+0x20>
    else break;
  }
  return n;
}
     6da:	c5 01       	movw	r24, r10
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	bf 90       	pop	r11
     6ee:	af 90       	pop	r10
     6f0:	08 95       	ret

000006f2 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     6f2:	28 2f       	mov	r18, r24
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	f9 01       	movw	r30, r18
     6f8:	e2 5d       	subi	r30, 0xD2	; 210
     6fa:	fd 4f       	sbci	r31, 0xFD	; 253
     6fc:	94 91       	lpm	r25, Z
	uint8_t bit = digitalPinToBitMask(pin);
     6fe:	f9 01       	movw	r30, r18
     700:	e2 50       	subi	r30, 0x02	; 2
     702:	fc 4f       	sbci	r31, 0xFC	; 252
     704:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
     706:	28 54       	subi	r18, 0x48	; 72
     708:	3c 4f       	sbci	r19, 0xFC	; 252
     70a:	f9 01       	movw	r30, r18
     70c:	24 91       	lpm	r18, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     70e:	22 23       	and	r18, r18
     710:	09 f4       	brne	.+2      	; 0x714 <digitalWrite+0x22>
     712:	35 c0       	rjmp	.+106    	; 0x77e <digitalWrite+0x8c>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     714:	99 23       	and	r25, r25
     716:	11 f1       	breq	.+68     	; 0x75c <digitalWrite+0x6a>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     718:	91 50       	subi	r25, 0x01	; 1
     71a:	92 31       	cpi	r25, 0x12	; 18
     71c:	f8 f4       	brcc	.+62     	; 0x75c <digitalWrite+0x6a>
     71e:	e9 2f       	mov	r30, r25
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	88 27       	eor	r24, r24
     724:	e9 56       	subi	r30, 0x69	; 105
     726:	fc 4f       	sbci	r31, 0xFC	; 252
     728:	8f 4f       	sbci	r24, 0xFF	; 255
     72a:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
     72e:	c8 03       	fmulsu	r20, r16
     730:	cc 03       	fmulsu	r20, r20
     732:	a9 03       	fmulsu	r18, r17
     734:	c0 03       	fmuls	r20, r16
     736:	c4 03       	fmuls	r20, r20
     738:	ae 03       	fmulsu	r18, r22
     73a:	cf 03       	fmulsu	r20, r23
     73c:	d5 03       	fmuls	r21, r21
     73e:	d9 03       	fmulsu	r21, r17
     740:	df 03       	fmulsu	r21, r23
     742:	e3 03       	fmuls	r22, r19
     744:	e7 03       	fmuls	r22, r23
     746:	ed 03       	fmulsu	r22, r21
     748:	f1 03       	fmuls	r23, r17
     74a:	ae 03       	fmulsu	r18, r22
     74c:	f5 03       	fmuls	r23, r21
     74e:	fb 03       	fmulsu	r23, r19
     750:	ff 03       	fmulsu	r23, r23
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     752:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     756:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     758:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     75c:	e2 2f       	mov	r30, r18
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	ec 57       	subi	r30, 0x7C	; 124
     766:	fc 4f       	sbci	r31, 0xFC	; 252
     768:	a5 91       	lpm	r26, Z+
     76a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     76c:	8f b7       	in	r24, 0x3f	; 63
	cli();
     76e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     770:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     772:	61 11       	cpse	r22, r1
     774:	48 c0       	rjmp	.+144    	; 0x806 <digitalWrite+0x114>
		*out &= ~bit;
     776:	40 95       	com	r20
     778:	4e 23       	and	r20, r30
	} else {
		*out |= bit;
     77a:	4c 93       	st	X, r20
	}

	SREG = oldSREG;
     77c:	8f bf       	out	0x3f, r24	; 63
}
     77e:	08 95       	ret
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     780:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     784:	8f 7d       	andi	r24, 0xDF	; 223
     786:	e8 cf       	rjmp	.-48     	; 0x758 <digitalWrite+0x66>
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     788:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     78c:	87 7f       	andi	r24, 0xF7	; 247
     78e:	e4 cf       	rjmp	.-56     	; 0x758 <digitalWrite+0x66>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     790:	84 b5       	in	r24, 0x24	; 36
     792:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     794:	84 bd       	out	0x24, r24	; 36
     796:	e2 cf       	rjmp	.-60     	; 0x75c <digitalWrite+0x6a>
     798:	84 b5       	in	r24, 0x24	; 36
     79a:	8f 7d       	andi	r24, 0xDF	; 223
     79c:	fb cf       	rjmp	.-10     	; 0x794 <digitalWrite+0xa2>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     79e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     7a2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     7a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     7a8:	d9 cf       	rjmp	.-78     	; 0x75c <digitalWrite+0x6a>
     7aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     7ae:	8f 7d       	andi	r24, 0xDF	; 223
     7b0:	f9 cf       	rjmp	.-14     	; 0x7a4 <digitalWrite+0xb2>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     7b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     7b6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     7b8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     7bc:	cf cf       	rjmp	.-98     	; 0x75c <digitalWrite+0x6a>
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     7be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     7c2:	8f 7d       	andi	r24, 0xDF	; 223
     7c4:	f9 cf       	rjmp	.-14     	; 0x7b8 <digitalWrite+0xc6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     7c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     7ca:	87 7f       	andi	r24, 0xF7	; 247
     7cc:	f5 cf       	rjmp	.-22     	; 0x7b8 <digitalWrite+0xc6>
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     7ce:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     7d2:	8f 77       	andi	r24, 0x7F	; 127
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     7d4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     7d8:	c1 cf       	rjmp	.-126    	; 0x75c <digitalWrite+0x6a>

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     7da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     7de:	8f 7d       	andi	r24, 0xDF	; 223
     7e0:	f9 cf       	rjmp	.-14     	; 0x7d4 <digitalWrite+0xe2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     7e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     7e6:	87 7f       	andi	r24, 0xF7	; 247
     7e8:	f5 cf       	rjmp	.-22     	; 0x7d4 <digitalWrite+0xe2>
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     7ea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     7ee:	8f 77       	andi	r24, 0x7F	; 127
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     7f0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     7f4:	b3 cf       	rjmp	.-154    	; 0x75c <digitalWrite+0x6a>
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     7f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     7fa:	8f 7d       	andi	r24, 0xDF	; 223
     7fc:	f9 cf       	rjmp	.-14     	; 0x7f0 <digitalWrite+0xfe>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     7fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     802:	87 7f       	andi	r24, 0xF7	; 247
     804:	f5 cf       	rjmp	.-22     	; 0x7f0 <digitalWrite+0xfe>
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     806:	4e 2b       	or	r20, r30
     808:	b8 cf       	rjmp	.-144    	; 0x77a <digitalWrite+0x88>

0000080a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     80a:	08 95       	ret

0000080c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	08 95       	ret

00000812 <_Z9ScaleDiv2v>:
  }
}

void ScaleDiv2()
{
  if (scaleFloat >= 2) scaleFloat = (unsigned int)scaleFloat / (unsigned int)2;
     812:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <scaleFloat>
     816:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <scaleFloat+0x1>
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	91 05       	cpc	r25, r1
     81e:	30 f0       	brcs	.+12     	; 0x82c <_Z9ScaleDiv2v+0x1a>
     820:	96 95       	lsr	r25
     822:	87 95       	ror	r24
     824:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <scaleFloat+0x1>
     828:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <scaleFloat>
}
     82c:	08 95       	ret

0000082e <_Z9Check_Alljj>:
// MIN_FEED
// MAX_FEED
// MIN_aFEED
// MAX_aFEED
uint16_t Check_All(uint16_t OLD, uint16_t NEW)
{
     82e:	2f 92       	push	r2
     830:	3f 92       	push	r3
     832:	4f 92       	push	r4
     834:	5f 92       	push	r5
     836:	6f 92       	push	r6
     838:	7f 92       	push	r7
     83a:	8f 92       	push	r8
     83c:	9f 92       	push	r9
     83e:	af 92       	push	r10
     840:	bf 92       	push	r11
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	a0 97       	sbiw	r28, 0x20	; 32
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	8b 8f       	std	Y+27, r24	; 0x1b
     864:	9c 8f       	std	Y+28, r25	; 0x1c
     866:	6d 8f       	std	Y+29, r22	; 0x1d
     868:	7e 8f       	std	Y+30, r23	; 0x1e

//Функции для проверки переменных на корректность, аналог проверок в коде static_assert
bool Check_MIN_FEED()
{
  //a "Неверно задано значение MIN_FEED"
  if ((uint32_t)(ENC_LINE_PER_REV / ((float)MOTOR_Z_STEP_PER_REV * McSTEP_Z * MIN_FEED / SCREW_Z) / 2 + 0.5) <= 255)
     86a:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
     86e:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
     872:	07 2e       	mov	r0, r23
     874:	00 0c       	add	r0, r0
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     87e:	69 83       	std	Y+1, r22	; 0x01
     880:	7a 83       	std	Y+2, r23	; 0x02
     882:	8b 83       	std	Y+3, r24	; 0x03
     884:	9c 83       	std	Y+4, r25	; 0x04
     886:	00 91 05 0a 	lds	r16, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
     88a:	10 91 06 0a 	lds	r17, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
     88e:	20 91 03 0a 	lds	r18, 0x0A03	; 0x800a03 <McSTEP_Z>
     892:	30 91 04 0a 	lds	r19, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
     896:	3e 83       	std	Y+6, r19	; 0x06
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	b8 01       	movw	r22, r16
     89c:	01 2e       	mov	r0, r17
     89e:	00 0c       	add	r0, r0
     8a0:	88 0b       	sbc	r24, r24
     8a2:	99 0b       	sbc	r25, r25
     8a4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     8a8:	6b 01       	movw	r12, r22
     8aa:	7c 01       	movw	r14, r24
     8ac:	8d 81       	ldd	r24, Y+5	; 0x05
     8ae:	9e 81       	ldd	r25, Y+6	; 0x06
     8b0:	09 2e       	mov	r0, r25
     8b2:	00 0c       	add	r0, r0
     8b4:	aa 0b       	sbc	r26, r26
     8b6:	bb 0b       	sbc	r27, r27
     8b8:	8b 8b       	std	Y+19, r24	; 0x13
     8ba:	9c 8b       	std	Y+20, r25	; 0x14
     8bc:	ad 8b       	std	Y+21, r26	; 0x15
     8be:	be 8b       	std	Y+22, r27	; 0x16
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <MIN_FEED>
     8dc:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <MIN_FEED+0x1>
     8e0:	07 2e       	mov	r0, r23
     8e2:	00 0c       	add	r0, r0
     8e4:	88 0b       	sbc	r24, r24
     8e6:	99 0b       	sbc	r25, r25
     8e8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     8ec:	4b 01       	movw	r8, r22
     8ee:	5c 01       	movw	r10, r24
     8f0:	a0 91 01 0a 	lds	r26, 0x0A01	; 0x800a01 <SCREW_Z>
     8f4:	b0 91 02 0a 	lds	r27, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
     8f8:	b8 87       	std	Y+8, r27	; 0x08
     8fa:	af 83       	std	Y+7, r26	; 0x07
     8fc:	bd 01       	movw	r22, r26
     8fe:	bb 0f       	add	r27, r27
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     908:	69 87       	std	Y+9, r22	; 0x09
     90a:	7a 87       	std	Y+10, r23	; 0x0a
     90c:	8b 87       	std	Y+11, r24	; 0x0b
     90e:	9c 87       	std	Y+12, r25	; 0x0c
     910:	a5 01       	movw	r20, r10
     912:	94 01       	movw	r18, r8
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     91c:	29 85       	ldd	r18, Y+9	; 0x09
     91e:	3a 85       	ldd	r19, Y+10	; 0x0a
     920:	4b 85       	ldd	r20, Y+11	; 0x0b
     922:	5c 85       	ldd	r21, Y+12	; 0x0c
     924:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	69 81       	ldd	r22, Y+1	; 0x01
     92e:	7a 81       	ldd	r23, Y+2	; 0x02
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	9c 81       	ldd	r25, Y+4	; 0x04
     934:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
     950:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
     954:	6f 3f       	cpi	r22, 0xFF	; 255
     956:	71 05       	cpc	r23, r1
     958:	81 05       	cpc	r24, r1
     95a:	91 05       	cpc	r25, r1
     95c:	11 f0       	breq	.+4      	; 0x962 <_Z9Check_Alljj+0x134>
     95e:	08 f0       	brcs	.+2      	; 0x962 <_Z9Check_Alljj+0x134>
     960:	81 c1       	rjmp	.+770    	; 0xc64 <_Z9Check_Alljj+0x436>
  {
    //e "Неверно задано значение MIN_FEED"
    if ((uint32_t)(ENC_LINE_PER_REV / ((float)MOTOR_X_STEP_PER_REV * McSTEP_X * MIN_FEED / SCREW_X) / 2 + 0.5) <= 255)
     962:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
     966:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
     96a:	38 a3       	std	Y+32, r19	; 0x20
     96c:	2f 8f       	std	Y+31, r18	; 0x1f
     96e:	20 90 fd 09 	lds	r2, 0x09FD	; 0x8009fd <McSTEP_X>
     972:	30 90 fe 09 	lds	r3, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
     976:	b9 01       	movw	r22, r18
     978:	33 0f       	add	r19, r19
     97a:	88 0b       	sbc	r24, r24
     97c:	99 0b       	sbc	r25, r25
     97e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     982:	2b 01       	movw	r4, r22
     984:	3c 01       	movw	r6, r24
     986:	c1 01       	movw	r24, r2
     988:	03 2c       	mov	r0, r3
     98a:	00 0c       	add	r0, r0
     98c:	aa 0b       	sbc	r26, r26
     98e:	bb 0b       	sbc	r27, r27
     990:	8f 8b       	std	Y+23, r24	; 0x17
     992:	98 8f       	std	Y+24, r25	; 0x18
     994:	a9 8f       	std	Y+25, r26	; 0x19
     996:	ba 8f       	std	Y+26, r27	; 0x1a
     998:	bc 01       	movw	r22, r24
     99a:	cd 01       	movw	r24, r26
     99c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	c3 01       	movw	r24, r6
     9a6:	b2 01       	movw	r22, r4
     9a8:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     9ac:	2b 01       	movw	r4, r22
     9ae:	3c 01       	movw	r6, r24
     9b0:	a0 91 07 0a 	lds	r26, 0x0A07	; 0x800a07 <SCREW_X>
     9b4:	b0 91 08 0a 	lds	r27, 0x0A08	; 0x800a08 <SCREW_X+0x1>
     9b8:	be 87       	std	Y+14, r27	; 0x0e
     9ba:	ad 87       	std	Y+13, r26	; 0x0d
     9bc:	bd 01       	movw	r22, r26
     9be:	bb 0f       	add	r27, r27
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     9c8:	6f 87       	std	Y+15, r22	; 0x0f
     9ca:	78 8b       	std	Y+16, r23	; 0x10
     9cc:	89 8b       	std	Y+17, r24	; 0x11
     9ce:	9a 8b       	std	Y+18, r25	; 0x12
     9d0:	a3 01       	movw	r20, r6
     9d2:	92 01       	movw	r18, r4
     9d4:	c5 01       	movw	r24, r10
     9d6:	b4 01       	movw	r22, r8
     9d8:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     9dc:	2f 85       	ldd	r18, Y+15	; 0x0f
     9de:	38 89       	ldd	r19, Y+16	; 0x10
     9e0:	49 89       	ldd	r20, Y+17	; 0x11
     9e2:	5a 89       	ldd	r21, Y+18	; 0x12
     9e4:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     9e8:	9b 01       	movw	r18, r22
     9ea:	ac 01       	movw	r20, r24
     9ec:	69 81       	ldd	r22, Y+1	; 0x01
     9ee:	7a 81       	ldd	r23, Y+2	; 0x02
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	9c 81       	ldd	r25, Y+4	; 0x04
     9f4:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	5f e3       	ldi	r21, 0x3F	; 63
     a00:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
     a10:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
     a14:	6f 3f       	cpi	r22, 0xFF	; 255
     a16:	71 05       	cpc	r23, r1
     a18:	81 05       	cpc	r24, r1
     a1a:	91 05       	cpc	r25, r1
     a1c:	11 f0       	breq	.+4      	; 0xa22 <_Z9Check_Alljj+0x1f4>
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <_Z9Check_Alljj+0x1f4>
     a20:	21 c1       	rjmp	.+578    	; 0xc64 <_Z9Check_Alljj+0x436>
}

bool Check_MAX_FEED()
{
  //b "Неверно задано значение MAX_FEED"
  if ((uint32_t)(ENC_LINE_PER_REV / ((float)MOTOR_Z_STEP_PER_REV * McSTEP_Z * MAX_FEED / SCREW_Z) / 2 + 0.5) > 1)
     a22:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <MAX_FEED>
     a26:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <MAX_FEED+0x1>
     a2a:	07 2e       	mov	r0, r23
     a2c:	00 0c       	add	r0, r0
     a2e:	88 0b       	sbc	r24, r24
     a30:	99 0b       	sbc	r25, r25
     a32:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     a36:	4b 01       	movw	r8, r22
     a38:	5c 01       	movw	r10, r24
     a3a:	ac 01       	movw	r20, r24
     a3c:	9b 01       	movw	r18, r22
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     a46:	29 85       	ldd	r18, Y+9	; 0x09
     a48:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4a:	4b 85       	ldd	r20, Y+11	; 0x0b
     a4c:	5c 85       	ldd	r21, Y+12	; 0x0c
     a4e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	69 81       	ldd	r22, Y+1	; 0x01
     a58:	7a 81       	ldd	r23, Y+2	; 0x02
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	5f e3       	ldi	r21, 0x3F	; 63
     a6a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	5f e3       	ldi	r21, 0x3F	; 63
     a76:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
     a7a:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
     a7e:	62 30       	cpi	r22, 0x02	; 2
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	08 f4       	brcc	.+2      	; 0xa8a <_Z9Check_Alljj+0x25c>
     a88:	ed c0       	rjmp	.+474    	; 0xc64 <_Z9Check_Alljj+0x436>
  {
    //f "Неверно задано значение MAX_FEED"
    if ((uint32_t)(ENC_LINE_PER_REV / ((float)MOTOR_X_STEP_PER_REV * McSTEP_X * MAX_FEED / SCREW_X) / 2 + 0.5) > 1)
     a8a:	a5 01       	movw	r20, r10
     a8c:	94 01       	movw	r18, r8
     a8e:	c3 01       	movw	r24, r6
     a90:	b2 01       	movw	r22, r4
     a92:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     a96:	2f 85       	ldd	r18, Y+15	; 0x0f
     a98:	38 89       	ldd	r19, Y+16	; 0x10
     a9a:	49 89       	ldd	r20, Y+17	; 0x11
     a9c:	5a 89       	ldd	r21, Y+18	; 0x12
     a9e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	69 81       	ldd	r22, Y+1	; 0x01
     aa8:	7a 81       	ldd	r23, Y+2	; 0x02
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	5f e3       	ldi	r21, 0x3F	; 63
     aba:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	5f e3       	ldi	r21, 0x3F	; 63
     ac6:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
     aca:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
     ace:	62 30       	cpi	r22, 0x02	; 2
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	08 f4       	brcc	.+2      	; 0xada <_Z9Check_Alljj+0x2ac>
     ad8:	c5 c0       	rjmp	.+394    	; 0xc64 <_Z9Check_Alljj+0x436>
}

bool Check_MIN_aFEED()
{
  //c "Неверно задано значение MIN_aFEED"
  if ((250000 / ((uint32_t)MIN_aFEED * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1) <= 65535)
     ada:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <MIN_aFEED>
     ade:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <MIN_aFEED+0x1>
     ae2:	3a 83       	std	Y+2, r19	; 0x02
     ae4:	29 83       	std	Y+1, r18	; 0x01
     ae6:	2c e3       	ldi	r18, 0x3C	; 60
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	af 81       	ldd	r26, Y+7	; 0x07
     aec:	b8 85       	ldd	r27, Y+8	; 0x08
     aee:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
     af2:	e4 e6       	ldi	r30, 0x64	; 100
     af4:	8e 2e       	mov	r8, r30
     af6:	91 2c       	mov	r9, r1
     af8:	a1 2c       	mov	r10, r1
     afa:	b1 2c       	mov	r11, r1
     afc:	a5 01       	movw	r20, r10
     afe:	94 01       	movw	r18, r8
     b00:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     b04:	69 01       	movw	r12, r18
     b06:	7a 01       	movw	r14, r20
     b08:	29 81       	ldd	r18, Y+1	; 0x01
     b0a:	3a 81       	ldd	r19, Y+2	; 0x02
     b0c:	d8 01       	movw	r26, r16
     b0e:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	6b 89       	ldd	r22, Y+19	; 0x13
     b18:	7c 89       	ldd	r23, Y+20	; 0x14
     b1a:	8d 89       	ldd	r24, Y+21	; 0x15
     b1c:	9e 89       	ldd	r25, Y+22	; 0x16
     b1e:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
     b22:	a7 01       	movw	r20, r14
     b24:	96 01       	movw	r18, r12
     b26:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	44 1f       	adc	r20, r20
     b30:	55 1f       	adc	r21, r21
     b32:	a0 e9       	ldi	r26, 0x90	; 144
     b34:	4a 2e       	mov	r4, r26
     b36:	a0 ed       	ldi	r26, 0xD0	; 208
     b38:	5a 2e       	mov	r5, r26
     b3a:	a3 e0       	ldi	r26, 0x03	; 3
     b3c:	6a 2e       	mov	r6, r26
     b3e:	71 2c       	mov	r7, r1
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     b48:	21 50       	subi	r18, 0x01	; 1
     b4a:	31 09       	sbc	r19, r1
     b4c:	41 09       	sbc	r20, r1
     b4e:	51 09       	sbc	r21, r1
     b50:	21 15       	cp	r18, r1
     b52:	31 05       	cpc	r19, r1
     b54:	41 40       	sbci	r20, 0x01	; 1
     b56:	51 05       	cpc	r21, r1
     b58:	08 f0       	brcs	.+2      	; 0xb5c <_Z9Check_Alljj+0x32e>
     b5a:	84 c0       	rjmp	.+264    	; 0xc64 <_Z9Check_Alljj+0x436>
  {
    //g "Неверно задано значение MIN_aFEED"
    if ((250000 / ((uint32_t)MIN_aFEED * MOTOR_X_STEP_PER_REV * McSTEP_X / ((uint32_t)60 * SCREW_X / 100) * 2) - 1) <= 65535)
     b5c:	2c e3       	ldi	r18, 0x3C	; 60
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	ad 85       	ldd	r26, Y+13	; 0x0d
     b62:	be 85       	ldd	r27, Y+14	; 0x0e
     b64:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
     b68:	a5 01       	movw	r20, r10
     b6a:	94 01       	movw	r18, r8
     b6c:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     b70:	49 01       	movw	r8, r18
     b72:	5a 01       	movw	r10, r20
     b74:	29 81       	ldd	r18, Y+1	; 0x01
     b76:	3a 81       	ldd	r19, Y+2	; 0x02
     b78:	af 8d       	ldd	r26, Y+31	; 0x1f
     b7a:	b8 a1       	ldd	r27, Y+32	; 0x20
     b7c:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	6f 89       	ldd	r22, Y+23	; 0x17
     b86:	78 8d       	ldd	r23, Y+24	; 0x18
     b88:	89 8d       	ldd	r24, Y+25	; 0x19
     b8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b8c:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
     b90:	a5 01       	movw	r20, r10
     b92:	94 01       	movw	r18, r8
     b94:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	44 1f       	adc	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	c3 01       	movw	r24, r6
     ba2:	b2 01       	movw	r22, r4
     ba4:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	31 09       	sbc	r19, r1
     bac:	41 09       	sbc	r20, r1
     bae:	51 09       	sbc	r21, r1
     bb0:	21 15       	cp	r18, r1
     bb2:	31 05       	cpc	r19, r1
     bb4:	41 40       	sbci	r20, 0x01	; 1
     bb6:	51 05       	cpc	r21, r1
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <_Z9Check_Alljj+0x38e>
     bba:	54 c0       	rjmp	.+168    	; 0xc64 <_Z9Check_Alljj+0x436>
}

bool Check_MAX_aFEED()
{
  //d "Неверно задано значение MAX_aFEED"
  if ((250000 / ((uint32_t)MAX_aFEED * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1) > 1)
     bbc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MAX_aFEED>
     bc0:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <MAX_aFEED+0x1>
     bc4:	9c 01       	movw	r18, r24
     bc6:	99 0f       	add	r25, r25
     bc8:	44 0b       	sbc	r20, r20
     bca:	55 0b       	sbc	r21, r21
     bcc:	29 83       	std	Y+1, r18	; 0x01
     bce:	3a 83       	std	Y+2, r19	; 0x02
     bd0:	4b 83       	std	Y+3, r20	; 0x03
     bd2:	5c 83       	std	Y+4, r21	; 0x04
     bd4:	98 01       	movw	r18, r16
     bd6:	ad 81       	ldd	r26, Y+5	; 0x05
     bd8:	be 81       	ldd	r27, Y+6	; 0x06
     bda:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	69 81       	ldd	r22, Y+1	; 0x01
     be4:	7a 81       	ldd	r23, Y+2	; 0x02
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
     bee:	a7 01       	movw	r20, r14
     bf0:	96 01       	movw	r18, r12
     bf2:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	44 1f       	adc	r20, r20
     bfc:	55 1f       	adc	r21, r21
     bfe:	c3 01       	movw	r24, r6
     c00:	b2 01       	movw	r22, r4
     c02:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	31 09       	sbc	r19, r1
     c0a:	41 09       	sbc	r20, r1
     c0c:	51 09       	sbc	r21, r1
     c0e:	22 30       	cpi	r18, 0x02	; 2
     c10:	31 05       	cpc	r19, r1
     c12:	41 05       	cpc	r20, r1
     c14:	51 05       	cpc	r21, r1
     c16:	30 f1       	brcs	.+76     	; 0xc64 <_Z9Check_Alljj+0x436>
  {
    //h "Неверно задано значение MAX_aFEED"
    if ((250000 / ((uint32_t)MAX_aFEED * MOTOR_X_STEP_PER_REV * McSTEP_X / ((uint32_t)60 * SCREW_X / 100) * 2) - 1) > 1)
     c18:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c1a:	38 a1       	ldd	r19, Y+32	; 0x20
     c1c:	d1 01       	movw	r26, r2
     c1e:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	69 81       	ldd	r22, Y+1	; 0x01
     c28:	7a 81       	ldd	r23, Y+2	; 0x02
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
     c32:	a5 01       	movw	r20, r10
     c34:	94 01       	movw	r18, r8
     c36:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	44 1f       	adc	r20, r20
     c40:	55 1f       	adc	r21, r21
     c42:	c3 01       	movw	r24, r6
     c44:	b2 01       	movw	r22, r4
     c46:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
     c4a:	21 50       	subi	r18, 0x01	; 1
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	31 05       	cpc	r19, r1
     c56:	41 05       	cpc	r20, r1
     c58:	51 05       	cpc	r21, r1
     c5a:	20 f0       	brcs	.+8      	; 0xc64 <_Z9Check_Alljj+0x436>
  if (Check_MIN_FEED() &&
      Check_MAX_FEED() &&
      Check_MIN_aFEED() &&
      Check_MAX_aFEED() )
  {
    return NEW;
     c5c:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c5e:	3b 8f       	std	Y+27, r19	; 0x1b
     c60:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c62:	4c 8f       	std	Y+28, r20	; 0x1c
  } else {
    return OLD;
  }
}
     c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c68:	a0 96       	adiw	r28, 0x20	; 32
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	3f 90       	pop	r3
     c96:	2f 90       	pop	r2
     c98:	08 95       	ret

00000c9a <_Z12MinimumStepXf>:
  *Km_Div_X = _round(10000.0 * (Kx - (byte)(Kx)), Ks_Div_X);
  //return Kx;
}

float MinimumStepX(float Divider)
{
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	6b 01       	movw	r12, r22
     cb4:	7c 01       	movw	r14, r24
  return (float)((float)(ENC_LINE_PER_REV * 200.0f * SCREW_X  / (10000.0f * MOTOR_X_STEP_PER_REV * McSTEP_X) / (float)Divider) );
     cb6:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
     cba:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
     cbe:	07 2e       	mov	r0, r23
     cc0:	00 0c       	add	r0, r0
     cc2:	88 0b       	sbc	r24, r24
     cc4:	99 0b       	sbc	r25, r25
     cc6:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	48 e4       	ldi	r20, 0x48	; 72
     cd0:	53 e4       	ldi	r21, 0x43	; 67
     cd2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     cd6:	4b 01       	movw	r8, r22
     cd8:	5c 01       	movw	r10, r24
     cda:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
     cde:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
     ce2:	07 2e       	mov	r0, r23
     ce4:	00 0c       	add	r0, r0
     ce6:	88 0b       	sbc	r24, r24
     ce8:	99 0b       	sbc	r25, r25
     cea:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     cfa:	4b 01       	movw	r8, r22
     cfc:	5c 01       	movw	r10, r24
     cfe:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
     d02:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
     d06:	07 2e       	mov	r0, r23
     d08:	00 0c       	add	r0, r0
     d0a:	88 0b       	sbc	r24, r24
     d0c:	99 0b       	sbc	r25, r25
     d0e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e4       	ldi	r19, 0x40	; 64
     d16:	4c e1       	ldi	r20, 0x1C	; 28
     d18:	56 e4       	ldi	r21, 0x46	; 70
     d1a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     d1e:	2b 01       	movw	r4, r22
     d20:	3c 01       	movw	r6, r24
     d22:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
     d26:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
     d2a:	07 2e       	mov	r0, r23
     d2c:	00 0c       	add	r0, r0
     d2e:	88 0b       	sbc	r24, r24
     d30:	99 0b       	sbc	r25, r25
     d32:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	c3 01       	movw	r24, r6
     d3c:	b2 01       	movw	r22, r4
     d3e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     d4e:	a7 01       	movw	r20, r14
     d50:	96 01       	movw	r18, r12
     d52:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
}
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	7f 90       	pop	r7
     d68:	6f 90       	pop	r6
     d6a:	5f 90       	pop	r5
     d6c:	4f 90       	pop	r4
     d6e:	08 95       	ret

00000d70 <_Z12MinimumStepZf>:
  *Km_Div_Z = _round(10000.0 * (Kz - (byte)(Kz)), Ks_Div_Z);
  //return Kz;
}

float MinimumStepZ(float Divider)
{
     d70:	4f 92       	push	r4
     d72:	5f 92       	push	r5
     d74:	6f 92       	push	r6
     d76:	7f 92       	push	r7
     d78:	8f 92       	push	r8
     d7a:	9f 92       	push	r9
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	6b 01       	movw	r12, r22
     d8a:	7c 01       	movw	r14, r24
  return (float)((float)(ENC_LINE_PER_REV * 200.0f * SCREW_Z  / (10000.0f * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)Divider) );
     d8c:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
     d90:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
     d94:	07 2e       	mov	r0, r23
     d96:	00 0c       	add	r0, r0
     d98:	88 0b       	sbc	r24, r24
     d9a:	99 0b       	sbc	r25, r25
     d9c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	48 e4       	ldi	r20, 0x48	; 72
     da6:	53 e4       	ldi	r21, 0x43	; 67
     da8:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     dac:	4b 01       	movw	r8, r22
     dae:	5c 01       	movw	r10, r24
     db0:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
     db4:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
     db8:	07 2e       	mov	r0, r23
     dba:	00 0c       	add	r0, r0
     dbc:	88 0b       	sbc	r24, r24
     dbe:	99 0b       	sbc	r25, r25
     dc0:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c5 01       	movw	r24, r10
     dca:	b4 01       	movw	r22, r8
     dcc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     dd0:	4b 01       	movw	r8, r22
     dd2:	5c 01       	movw	r10, r24
     dd4:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
     dd8:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
     ddc:	07 2e       	mov	r0, r23
     dde:	00 0c       	add	r0, r0
     de0:	88 0b       	sbc	r24, r24
     de2:	99 0b       	sbc	r25, r25
     de4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e4       	ldi	r19, 0x40	; 64
     dec:	4c e1       	ldi	r20, 0x1C	; 28
     dee:	56 e4       	ldi	r21, 0x46	; 70
     df0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     df4:	2b 01       	movw	r4, r22
     df6:	3c 01       	movw	r6, r24
     df8:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
     dfc:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
     e00:	07 2e       	mov	r0, r23
     e02:	00 0c       	add	r0, r0
     e04:	88 0b       	sbc	r24, r24
     e06:	99 0b       	sbc	r25, r25
     e08:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     e0c:	9b 01       	movw	r18, r22
     e0e:	ac 01       	movw	r20, r24
     e10:	c3 01       	movw	r24, r6
     e12:	b2 01       	movw	r22, r4
     e14:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	c5 01       	movw	r24, r10
     e1e:	b4 01       	movw	r22, r8
     e20:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     e24:	a7 01       	movw	r20, r14
     e26:	96 01       	movw	r18, r12
     e28:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
}
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	bf 90       	pop	r11
     e36:	af 90       	pop	r10
     e38:	9f 90       	pop	r9
     e3a:	8f 90       	pop	r8
     e3c:	7f 90       	pop	r7
     e3e:	6f 90       	pop	r6
     e40:	5f 90       	pop	r5
     e42:	4f 90       	pop	r4
     e44:	08 95       	ret

00000e46 <_Z6_roundfPh>:

//==============================================================================================================================================================================================================
//====================================================     ФОРМУЛЫ ДЛЯ РЕЗЬБ И КОНУСОВ     =====================================================================================================================
//==============================================================================================================================================================================================================
unsigned int _round(float A, byte* B)
{
     e46:	8f 92       	push	r8
     e48:	9f 92       	push	r9
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	4b 01       	movw	r8, r22
     e60:	5c 01       	movw	r10, r24
     e62:	8a 01       	movw	r16, r20
  unsigned int AA = (unsigned int)A;
     e64:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
     e68:	eb 01       	movw	r28, r22
  if (A - AA >= 0.5f)
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
     e72:	9b 01       	movw	r18, r22
     e74:	ac 01       	movw	r20, r24
     e76:	c5 01       	movw	r24, r10
     e78:	b4 01       	movw	r22, r8
     e7a:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
     e8a:	87 ff       	sbrs	r24, 7
  {
    AA = AA + 1;
     e8c:	21 96       	adiw	r28, 0x01	; 1
  }
  if (AA >= 10000)         //Если round округлил 9999.ххх до 10000, то второй коэффициент делаем 0, а первому добавляем 1
     e8e:	c0 31       	cpi	r28, 0x10	; 16
     e90:	87 e2       	ldi	r24, 0x27	; 39
     e92:	d8 07       	cpc	r29, r24
     e94:	30 f0       	brcs	.+12     	; 0xea2 <_Z6_roundfPh+0x5c>
  {
    AA = 0;
    *B = *B + 1;
     e96:	f8 01       	movw	r30, r16
     e98:	80 81       	ld	r24, Z
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	80 83       	st	Z, r24
  {
    AA = AA + 1;
  }
  if (AA >= 10000)         //Если round округлил 9999.ххх до 10000, то второй коэффициент делаем 0, а первому добавляем 1
  {
    AA = 0;
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
     ea0:	c0 e0       	ldi	r28, 0x00	; 0
    *B = *B + 1;
  }
  return AA;
}
     ea2:	ce 01       	movw	r24, r28
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	08 95       	ret

00000ebe <_Z9Calc_C_ABffPhPiS_>:
//void Calc_C_AB(float x, float y, byte *Cs_Div, int *Cm_Div)
//float Calc_C_AB(float x, float y, byte *Cs_Div, int *Cm_Div)
//void Calc_C_AB(float x, float y, byte *Cs_Div, int *Cm_Div, byte *XZ)

bool Calc_C_AB(float x, float y, byte *Cs_Div, int *Cm_Div, byte *XZ)
{
     ebe:	2f 92       	push	r2
     ec0:	3f 92       	push	r3
     ec2:	4f 92       	push	r4
     ec4:	5f 92       	push	r5
     ec6:	6f 92       	push	r6
     ec8:	7f 92       	push	r7
     eca:	8f 92       	push	r8
     ecc:	9f 92       	push	r9
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	4b 01       	movw	r8, r22
     ee4:	5c 01       	movw	r10, r24
     ee6:	29 01       	movw	r4, r18
     ee8:	3a 01       	movw	r6, r20
     eea:	e8 01       	movw	r28, r16
     eec:	87 01       	movw	r16, r14
     eee:	16 01       	movw	r2, r12
  //Проверка исходных данных (чтобы не было деления на 0 или отрицательных чисел)
  if (x <= 0.0f || y <= 0.0f)
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	a9 01       	movw	r20, r18
     ef6:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
     efa:	18 16       	cp	r1, r24
     efc:	4c f4       	brge	.+18     	; 0xf10 <_Z9Calc_C_ABffPhPiS_+0x52>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	a9 01       	movw	r20, r18
     f04:	c3 01       	movw	r24, r6
     f06:	b2 01       	movw	r22, r4
     f08:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	d4 f0       	brlt	.+52     	; 0xf44 <_Z9Calc_C_ABffPhPiS_+0x86>
  {
    *Cs_Div = (byte)0;
     f10:	18 82       	st	Y, r1
    *Cm_Div = (int)0;
     f12:	f8 01       	movw	r30, r16
     f14:	11 82       	std	Z+1, r1	; 0x01
     f16:	10 82       	st	Z, r1
    *XZ = (byte)0;
     f18:	f1 01       	movw	r30, r2
     f1a:	10 82       	st	Z, r1
    return false;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
      *Cm_Div = _round(10000.0 * (Cs - (byte)(Cs)), Cs_Div);    //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
      *XZ = (byte)1;       //Возврат byte 1 для тактования X->Z (Новое тактование для конусов с соотношением Cs_Div < 1)
    }
  }
  return true;
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	9f 90       	pop	r9
     f34:	8f 90       	pop	r8
     f36:	7f 90       	pop	r7
     f38:	6f 90       	pop	r6
     f3a:	5f 90       	pop	r5
     f3c:	4f 90       	pop	r4
     f3e:	3f 90       	pop	r3
     f40:	2f 90       	pop	r2
     f42:	08 95       	ret
    *Cm_Div = (int)0;
    *XZ = (byte)0;
    return false;
  }
  //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  float Cs = (  ((SCREW_X * 0.01) / (MOTOR_X_STEP_PER_REV * McSTEP_X) * ((float)y) * 2.0) / ((SCREW_Z * 0.01) / (MOTOR_Z_STEP_PER_REV * McSTEP_Z) * (((float)x) * 0.5) )  );
     f44:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
     f48:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
     f4c:	07 2e       	mov	r0, r23
     f4e:	00 0c       	add	r0, r0
     f50:	88 0b       	sbc	r24, r24
     f52:	99 0b       	sbc	r25, r25
     f54:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	37 ed       	ldi	r19, 0xD7	; 215
     f5c:	43 e2       	ldi	r20, 0x23	; 35
     f5e:	5c e3       	ldi	r21, 0x3C	; 60
     f60:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     f64:	6b 01       	movw	r12, r22
     f66:	7c 01       	movw	r14, r24
     f68:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
     f6c:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
     f70:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
     f74:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
     f78:	28 9f       	mul	r18, r24
     f7a:	b0 01       	movw	r22, r0
     f7c:	29 9f       	mul	r18, r25
     f7e:	70 0d       	add	r23, r0
     f80:	38 9f       	mul	r19, r24
     f82:	70 0d       	add	r23, r0
     f84:	11 24       	eor	r1, r1
     f86:	07 2e       	mov	r0, r23
     f88:	00 0c       	add	r0, r0
     f8a:	88 0b       	sbc	r24, r24
     f8c:	99 0b       	sbc	r25, r25
     f8e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
     f9e:	a3 01       	movw	r20, r6
     fa0:	92 01       	movw	r18, r4
     fa2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     fa6:	9b 01       	movw	r18, r22
     fa8:	ac 01       	movw	r20, r24
     faa:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
     fae:	2b 01       	movw	r4, r22
     fb0:	3c 01       	movw	r6, r24
     fb2:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
     fb6:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
     fba:	07 2e       	mov	r0, r23
     fbc:	00 0c       	add	r0, r0
     fbe:	88 0b       	sbc	r24, r24
     fc0:	99 0b       	sbc	r25, r25
     fc2:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
     fc6:	2a e0       	ldi	r18, 0x0A	; 10
     fc8:	37 ed       	ldi	r19, 0xD7	; 215
     fca:	43 e2       	ldi	r20, 0x23	; 35
     fcc:	5c e3       	ldi	r21, 0x3C	; 60
     fce:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
     fd2:	6b 01       	movw	r12, r22
     fd4:	7c 01       	movw	r14, r24
     fd6:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
     fda:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
     fde:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
     fe2:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
     fe6:	28 9f       	mul	r18, r24
     fe8:	b0 01       	movw	r22, r0
     fea:	29 9f       	mul	r18, r25
     fec:	70 0d       	add	r23, r0
     fee:	38 9f       	mul	r19, r24
     ff0:	70 0d       	add	r23, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	07 2e       	mov	r0, r23
     ff6:	00 0c       	add	r0, r0
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	c7 01       	movw	r24, r14
    1006:	b6 01       	movw	r22, r12
    1008:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    100c:	6b 01       	movw	r12, r22
    100e:	7c 01       	movw	r14, r24
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	c5 01       	movw	r24, r10
    101a:	b4 01       	movw	r22, r8
    101c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1020:	9b 01       	movw	r18, r22
    1022:	ac 01       	movw	r20, r24
    1024:	c7 01       	movw	r24, r14
    1026:	b6 01       	movw	r22, r12
    1028:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	c3 01       	movw	r24, r6
    1032:	b2 01       	movw	r22, r4
    1034:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    1038:	6b 01       	movw	r12, r22
    103a:	7c 01       	movw	r14, r24
  //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
  //*Cm_Div = _round(10000.0 * (Cs - (byte)(Cs)), Cs_Div);
  //return Cs;

  //Новый код для конусов с разным типом тактования Z->X или X->Z
  if (Cs >= 1.0f)           //тактование Z->X
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    1048:	87 fd       	sbrc	r24, 7
    104a:	2a c0       	rjmp	.+84     	; 0x10a0 <_Z9Calc_C_ABffPhPiS_+0x1e2>
  {
    //Проверка от переполнения *Cs_Div (ограничение типа byte 255)
    if (Cs > 254.99f)     //Есть переполнение: сбрасываем в 0 и возвращаем false
    104c:	21 e7       	ldi	r18, 0x71	; 113
    104e:	3d ef       	ldi	r19, 0xFD	; 253
    1050:	4e e7       	ldi	r20, 0x7E	; 126
    1052:	53 e4       	ldi	r21, 0x43	; 67
    1054:	c7 01       	movw	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    105c:	18 16       	cp	r1, r24
    105e:	0c f4       	brge	.+2      	; 0x1062 <_Z9Calc_C_ABffPhPiS_+0x1a4>
    1060:	57 cf       	rjmp	.-338    	; 0xf10 <_Z9Calc_C_ABffPhPiS_+0x52>
      *Cs_Div = (byte)0;
      *Cm_Div = (int)0;
      *XZ = (byte)0;
      return false;
    } else {              //Переполнения нет...
      *Cs_Div = (byte)(Cs);
    1062:	c7 01       	movw	r24, r14
    1064:	b6 01       	movw	r22, r12
    1066:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    106a:	68 83       	st	Y, r22
      *Cm_Div = _round(10000.0 * (Cs - (byte)(Cs)), Cs_Div);    //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	c7 01       	movw	r24, r14
    107c:	b6 01       	movw	r22, r12
    107e:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e4       	ldi	r19, 0x40	; 64
    1086:	4c e1       	ldi	r20, 0x1C	; 28
    1088:	56 e4       	ldi	r21, 0x46	; 70
    108a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    108e:	ae 01       	movw	r20, r28
    1090:	da de       	rcall	.-588    	; 0xe46 <_Z6_roundfPh>
    1092:	f8 01       	movw	r30, r16
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
      *XZ = (byte)0;       //Возврат byte 0 для тактования Z->X (Обычное тактование как использовал Олег, Cs_Div >= 1)
    1098:	f1 01       	movw	r30, r2
    109a:	10 82       	st	Z, r1
      *Cs_Div = (byte)(Cs);
      *Cm_Div = _round(10000.0 * (Cs - (byte)(Cs)), Cs_Div);    //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
      *XZ = (byte)1;       //Возврат byte 1 для тактования X->Z (Новое тактование для конусов с соотношением Cs_Div < 1)
    }
  }
  return true;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	3f cf       	rjmp	.-386    	; 0xf1e <_Z9Calc_C_ABffPhPiS_+0x60>
      *Cs_Div = (byte)(Cs);
      *Cm_Div = _round(10000.0 * (Cs - (byte)(Cs)), Cs_Div);    //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
      *XZ = (byte)0;       //Возврат byte 0 для тактования Z->X (Обычное тактование как использовал Олег, Cs_Div >= 1)
    }
  } else {                //тактование X->Z
    Cs = 1.0f / Cs;
    10a0:	a7 01       	movw	r20, r14
    10a2:	96 01       	movw	r18, r12
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 e8       	ldi	r24, 0x80	; 128
    10aa:	9f e3       	ldi	r25, 0x3F	; 63
    10ac:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    10b0:	6b 01       	movw	r12, r22
    10b2:	7c 01       	movw	r14, r24
    //Проверка от переполнения *Cs_Div (ограничение типа byte 255)
    if (Cs > 254.99f)     //Есть переполнение: сбрасываем в 0 и возвращаем false
    10b4:	21 e7       	ldi	r18, 0x71	; 113
    10b6:	3d ef       	ldi	r19, 0xFD	; 253
    10b8:	4e e7       	ldi	r20, 0x7E	; 126
    10ba:	53 e4       	ldi	r21, 0x43	; 67
    10bc:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	0c f4       	brge	.+2      	; 0x10c6 <_Z9Calc_C_ABffPhPiS_+0x208>
    10c4:	25 cf       	rjmp	.-438    	; 0xf10 <_Z9Calc_C_ABffPhPiS_+0x52>
      *Cs_Div = (byte)0;
      *Cm_Div = (int)0;
      *XZ = (byte)0;
      return false;
    } else {              //Переполнения нет...
      *Cs_Div = (byte)(Cs);
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    10ce:	68 83       	st	Y, r22
      *Cm_Div = _round(10000.0 * (Cs - (byte)(Cs)), Cs_Div);    //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	c7 01       	movw	r24, r14
    10e0:	b6 01       	movw	r22, r12
    10e2:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e4       	ldi	r19, 0x40	; 64
    10ea:	4c e1       	ldi	r20, 0x1C	; 28
    10ec:	56 e4       	ldi	r21, 0x46	; 70
    10ee:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    10f2:	ae 01       	movw	r20, r28
    10f4:	a8 de       	rcall	.-688    	; 0xe46 <_Z6_roundfPh>
    10f6:	f8 01       	movw	r30, r16
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24
      *XZ = (byte)1;       //Возврат byte 1 для тактования X->Z (Новое тактование для конусов с соотношением Cs_Div < 1)
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	f1 01       	movw	r30, r2
    1100:	80 83       	st	Z, r24
    1102:	0d cf       	rjmp	.-486    	; 0xf1e <_Z9Calc_C_ABffPhPiS_+0x60>

00001104 <_Z8Calc_K_XfPhPi>:
}

//При вызове передаётся float-ШАГ РЕЗЬБЫ и два указателя на переменные, в которые положим результат вычисления
void Calc_K_X(float x, byte *Ks_Div_X, int *Km_Div_X)
//float Calc_K_X(float x, byte *Ks_Div_X, int *Km_Div_X)
{
    1104:	4f 92       	push	r4
    1106:	5f 92       	push	r5
    1108:	6f 92       	push	r6
    110a:	7f 92       	push	r7
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	4b 01       	movw	r8, r22
    1126:	5c 01       	movw	r10, r24
    1128:	ea 01       	movw	r28, r20
    112a:	89 01       	movw	r16, r18
  float Kx = (ENC_LINE_PER_REV * 200.0 * SCREW_X  / (10000.0 * MOTOR_X_STEP_PER_REV * McSTEP_X * (float)x)  );
    112c:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    1130:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    1134:	07 2e       	mov	r0, r23
    1136:	00 0c       	add	r0, r0
    1138:	88 0b       	sbc	r24, r24
    113a:	99 0b       	sbc	r25, r25
    113c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	48 e4       	ldi	r20, 0x48	; 72
    1146:	53 e4       	ldi	r21, 0x43	; 67
    1148:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    114c:	6b 01       	movw	r12, r22
    114e:	7c 01       	movw	r14, r24
    1150:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    1154:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    1158:	07 2e       	mov	r0, r23
    115a:	00 0c       	add	r0, r0
    115c:	88 0b       	sbc	r24, r24
    115e:	99 0b       	sbc	r25, r25
    1160:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	c7 01       	movw	r24, r14
    116a:	b6 01       	movw	r22, r12
    116c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1170:	6b 01       	movw	r12, r22
    1172:	7c 01       	movw	r14, r24
    1174:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    1178:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    117c:	07 2e       	mov	r0, r23
    117e:	00 0c       	add	r0, r0
    1180:	88 0b       	sbc	r24, r24
    1182:	99 0b       	sbc	r25, r25
    1184:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e4       	ldi	r19, 0x40	; 64
    118c:	4c e1       	ldi	r20, 0x1C	; 28
    118e:	56 e4       	ldi	r21, 0x46	; 70
    1190:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1194:	2b 01       	movw	r4, r22
    1196:	3c 01       	movw	r6, r24
    1198:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    119c:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    11a0:	07 2e       	mov	r0, r23
    11a2:	00 0c       	add	r0, r0
    11a4:	88 0b       	sbc	r24, r24
    11a6:	99 0b       	sbc	r25, r25
    11a8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c3 01       	movw	r24, r6
    11b2:	b2 01       	movw	r22, r4
    11b4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    11b8:	a5 01       	movw	r20, r10
    11ba:	94 01       	movw	r18, r8
    11bc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	c7 01       	movw	r24, r14
    11c6:	b6 01       	movw	r22, r12
    11c8:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    11cc:	6b 01       	movw	r12, r22
    11ce:	7c 01       	movw	r14, r24
  *Ks_Div_X = (byte)(Kx);
    11d0:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    11d4:	68 83       	st	Y, r22
  //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
  *Km_Div_X = _round(10000.0 * (Kx - (byte)(Kx)), Ks_Div_X);
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e4       	ldi	r19, 0x40	; 64
    11f0:	4c e1       	ldi	r20, 0x1C	; 28
    11f2:	56 e4       	ldi	r21, 0x46	; 70
    11f4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    11f8:	ae 01       	movw	r20, r28
    11fa:	25 de       	rcall	.-950    	; 0xe46 <_Z6_roundfPh>
    11fc:	f8 01       	movw	r30, r16
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
  //return Kx;
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	bf 90       	pop	r11
    1214:	af 90       	pop	r10
    1216:	9f 90       	pop	r9
    1218:	8f 90       	pop	r8
    121a:	7f 90       	pop	r7
    121c:	6f 90       	pop	r6
    121e:	5f 90       	pop	r5
    1220:	4f 90       	pop	r4
    1222:	08 95       	ret

00001224 <_Z8Calc_K_ZfPhPi>:

//Формулы для Резьб
//При вызове передаётся float-ШАГ РЕЗЬБЫ и два указателя на переменные, в которые положим результат вычисления
void Calc_K_Z(float x, byte* Ks_Div_Z, int* Km_Div_Z)
//float Calc_K_Z(float x, byte* Ks_Div_Z, int* Km_Div_Z)
{
    1224:	4f 92       	push	r4
    1226:	5f 92       	push	r5
    1228:	6f 92       	push	r6
    122a:	7f 92       	push	r7
    122c:	8f 92       	push	r8
    122e:	9f 92       	push	r9
    1230:	af 92       	push	r10
    1232:	bf 92       	push	r11
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	4b 01       	movw	r8, r22
    1246:	5c 01       	movw	r10, r24
    1248:	ea 01       	movw	r28, r20
    124a:	89 01       	movw	r16, r18
  float Kz = (ENC_LINE_PER_REV * 200.0 * SCREW_Z  / (10000.0 * MOTOR_Z_STEP_PER_REV * McSTEP_Z * (float)x)  );
    124c:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    1250:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    1254:	07 2e       	mov	r0, r23
    1256:	00 0c       	add	r0, r0
    1258:	88 0b       	sbc	r24, r24
    125a:	99 0b       	sbc	r25, r25
    125c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	48 e4       	ldi	r20, 0x48	; 72
    1266:	53 e4       	ldi	r21, 0x43	; 67
    1268:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    126c:	6b 01       	movw	r12, r22
    126e:	7c 01       	movw	r14, r24
    1270:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    1274:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    1278:	07 2e       	mov	r0, r23
    127a:	00 0c       	add	r0, r0
    127c:	88 0b       	sbc	r24, r24
    127e:	99 0b       	sbc	r25, r25
    1280:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1284:	9b 01       	movw	r18, r22
    1286:	ac 01       	movw	r20, r24
    1288:	c7 01       	movw	r24, r14
    128a:	b6 01       	movw	r22, r12
    128c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1290:	6b 01       	movw	r12, r22
    1292:	7c 01       	movw	r14, r24
    1294:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    1298:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    129c:	07 2e       	mov	r0, r23
    129e:	00 0c       	add	r0, r0
    12a0:	88 0b       	sbc	r24, r24
    12a2:	99 0b       	sbc	r25, r25
    12a4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e4       	ldi	r19, 0x40	; 64
    12ac:	4c e1       	ldi	r20, 0x1C	; 28
    12ae:	56 e4       	ldi	r21, 0x46	; 70
    12b0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    12b4:	2b 01       	movw	r4, r22
    12b6:	3c 01       	movw	r6, r24
    12b8:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    12bc:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    12c0:	07 2e       	mov	r0, r23
    12c2:	00 0c       	add	r0, r0
    12c4:	88 0b       	sbc	r24, r24
    12c6:	99 0b       	sbc	r25, r25
    12c8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    12cc:	9b 01       	movw	r18, r22
    12ce:	ac 01       	movw	r20, r24
    12d0:	c3 01       	movw	r24, r6
    12d2:	b2 01       	movw	r22, r4
    12d4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    12d8:	a5 01       	movw	r20, r10
    12da:	94 01       	movw	r18, r8
    12dc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	c7 01       	movw	r24, r14
    12e6:	b6 01       	movw	r22, r12
    12e8:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    12ec:	6b 01       	movw	r12, r22
    12ee:	7c 01       	movw	r14, r24
  *Ks_Div_Z = (byte)(Kz);
    12f0:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    12f4:	68 83       	st	Y, r22
  //Более сложная формула с округлением по математическим правиламм. Не используя библиотеку <math.h>
  *Km_Div_Z = _round(10000.0 * (Kz - (byte)(Kz)), Ks_Div_Z);
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	c7 01       	movw	r24, r14
    1306:	b6 01       	movw	r22, r12
    1308:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e4       	ldi	r19, 0x40	; 64
    1310:	4c e1       	ldi	r20, 0x1C	; 28
    1312:	56 e4       	ldi	r21, 0x46	; 70
    1314:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1318:	ae 01       	movw	r20, r28
    131a:	95 dd       	rcall	.-1238   	; 0xe46 <_Z6_roundfPh>
    131c:	f8 01       	movw	r30, r16
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
  //return Kz;
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	af 90       	pop	r10
    1336:	9f 90       	pop	r9
    1338:	8f 90       	pop	r8
    133a:	7f 90       	pop	r7
    133c:	6f 90       	pop	r6
    133e:	5f 90       	pop	r5
    1340:	4f 90       	pop	r4
    1342:	08 95       	ret

00001344 <_Z10Motors_OFFv>:
}

//NEW
void Motors_OFF()
{
  Motor_Z_Disable();
    1344:	eb e0       	ldi	r30, 0x0B	; 11
    1346:	f1 e0       	ldi	r31, 0x01	; 1
    1348:	80 81       	ld	r24, Z
    134a:	8f 7e       	andi	r24, 0xEF	; 239
    134c:	80 83       	st	Z, r24
  Motor_X_Disable();
    134e:	80 81       	ld	r24, Z
    1350:	87 7f       	andi	r24, 0xF7	; 247
    1352:	80 83       	st	Z, r24
}
    1354:	08 95       	ret

00001356 <_Z18Reset_Ks_Km_Repeatv>:
}

//NEW Opti
void Reset_Ks_Km_Repeat()
{
  Ks_Count = 0;
    1356:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
  Km_Count = 0;
    135a:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    135e:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
  Repeat_Count = 0;
    1362:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
}
    1366:	08 95       	ret

00001368 <_Z16Reset_Step_rapidv>:
}

//NEW Opti
void Reset_Step_rapid()
{
  Z_WORKING_FEED_FLAG = OFF;
    1368:	f3 98       	cbi	0x1e, 3	; 30
  X_WORKING_FEED_FLAG = OFF;
    136a:	f6 98       	cbi	0x1e, 6	; 30
  Z_WORKING_RAPID_FLAG = OFF;
    136c:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
  X_WORKING_RAPID_FLAG = OFF;
    1370:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
}
    1374:	08 95       	ret

00001376 <_Z18Reset_Hand_NullPosv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//NEW Opti
void Reset_Hand_NullPos()
{
  Hand_Count = 0;
    1376:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
    137a:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
    137e:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
    1382:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
  Hand_Count_New = 0;
    1386:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
    138a:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
    138e:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
    1392:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
  Hand_Count_Old = 0;
    1396:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
    139a:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
    139e:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
    13a2:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
  Hand_Z_Pos = 0;
    13a6:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
    13aa:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
    13ae:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
    13b2:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
  Hand_X_Pos = 0;
    13b6:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
    13ba:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
    13be:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
    13c2:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>
  Null_Z_Pos = Motor_Z_Pos;
    13c6:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    13ca:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    13ce:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    13d2:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    13d6:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <Null_Z_Pos>
    13da:	90 93 21 12 	sts	0x1221, r25	; 0x801221 <Null_Z_Pos+0x1>
    13de:	a0 93 22 12 	sts	0x1222, r26	; 0x801222 <Null_Z_Pos+0x2>
    13e2:	b0 93 23 12 	sts	0x1223, r27	; 0x801223 <Null_Z_Pos+0x3>
  Null_X_Pos = Motor_X_Pos;
    13e6:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    13ea:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    13ee:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    13f2:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    13f6:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <Null_X_Pos>
    13fa:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <Null_X_Pos+0x1>
    13fe:	a0 93 12 12 	sts	0x1212, r26	; 0x801212 <Null_X_Pos+0x2>
    1402:	b0 93 13 12 	sts	0x1213, r27	; 0x801213 <Null_X_Pos+0x3>
}
    1406:	08 95       	ret

00001408 <_Z7H_Coderv>:
//ver. 1.1 Оптимизация выйгрыш 18 + 80 + 82 = 180 байт

void H_Coder()
{
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
   ///////////////
   // Масштаб
   ///////////////
   if (Motor_Z_Pos == Null_Z_Pos + Hand_Z_Pos && Motor_X_Pos == Null_X_Pos + Hand_X_Pos)
    1410:	40 91 20 12 	lds	r20, 0x1220	; 0x801220 <Null_Z_Pos>
    1414:	50 91 21 12 	lds	r21, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    1418:	60 91 22 12 	lds	r22, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    141c:	70 91 23 12 	lds	r23, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    1420:	80 91 e9 11 	lds	r24, 0x11E9	; 0x8011e9 <Hand_Z_Pos>
    1424:	90 91 ea 11 	lds	r25, 0x11EA	; 0x8011ea <Hand_Z_Pos+0x1>
    1428:	a0 91 eb 11 	lds	r26, 0x11EB	; 0x8011eb <Hand_Z_Pos+0x2>
    142c:	b0 91 ec 11 	lds	r27, 0x11EC	; 0x8011ec <Hand_Z_Pos+0x3>
    1430:	48 0f       	add	r20, r24
    1432:	59 1f       	adc	r21, r25
    1434:	6a 1f       	adc	r22, r26
    1436:	7b 1f       	adc	r23, r27
    1438:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    143c:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    1440:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    1444:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    1448:	48 17       	cp	r20, r24
    144a:	59 07       	cpc	r21, r25
    144c:	6a 07       	cpc	r22, r26
    144e:	7b 07       	cpc	r23, r27
    1450:	09 f0       	breq	.+2      	; 0x1454 <_Z7H_Coderv+0x4c>
    1452:	80 c0       	rjmp	.+256    	; 0x1554 <_Z7H_Coderv+0x14c>
    1454:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    1458:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    145c:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    1460:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    1464:	00 91 ed 11 	lds	r16, 0x11ED	; 0x8011ed <Hand_X_Pos>
    1468:	10 91 ee 11 	lds	r17, 0x11EE	; 0x8011ee <Hand_X_Pos+0x1>
    146c:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <Hand_X_Pos+0x2>
    1470:	30 91 f0 11 	lds	r19, 0x11F0	; 0x8011f0 <Hand_X_Pos+0x3>
    1474:	80 0f       	add	r24, r16
    1476:	91 1f       	adc	r25, r17
    1478:	a2 1f       	adc	r26, r18
    147a:	b3 1f       	adc	r27, r19
    147c:	00 91 46 12 	lds	r16, 0x1246	; 0x801246 <Motor_X_Pos>
    1480:	10 91 47 12 	lds	r17, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    1484:	20 91 48 12 	lds	r18, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    1488:	30 91 49 12 	lds	r19, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    148c:	80 17       	cp	r24, r16
    148e:	91 07       	cpc	r25, r17
    1490:	a2 07       	cpc	r26, r18
    1492:	b3 07       	cpc	r27, r19
    1494:	09 f0       	breq	.+2      	; 0x1498 <_Z7H_Coderv+0x90>
    1496:	5e c0       	rjmp	.+188    	; 0x1554 <_Z7H_Coderv+0x14c>
   {
      if (Scale == HC_SCALE_10 && flag_Scale_x1 == ON)    //Флаги масштаба ручного энкодера - стоял масштаб 10х переключается на 1х
    1498:	20 91 b0 11 	lds	r18, 0x11B0	; 0x8011b0 <Scale>
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <HC_SCALE_10>
    14a2:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <HC_SCALE_10+0x1>
    14a6:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <HC_SCALE_1>
    14aa:	d0 91 0c 02 	lds	r29, 0x020C	; 0x80020c <HC_SCALE_1+0x1>
    14ae:	2e 17       	cp	r18, r30
    14b0:	3f 07       	cpc	r19, r31
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <_Z7H_Coderv+0xae>
    14b4:	37 c1       	rjmp	.+622    	; 0x1724 <_Z7H_Coderv+0x31c>
    14b6:	10 91 02 12 	lds	r17, 0x1202	; 0x801202 <flag_Scale_x1>
    14ba:	11 23       	and	r17, r17
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <_Z7H_Coderv+0xb8>
    14be:	32 c1       	rjmp	.+612    	; 0x1724 <_Z7H_Coderv+0x31c>
      { 
         Hand_Count = 0;
    14c0:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
    14c4:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
    14c8:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
    14cc:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
         Hand_Count_New = 0;
    14d0:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
    14d4:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
    14d8:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
    14dc:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
         Hand_Count_Old = 0;
    14e0:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
    14e4:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
    14e8:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
    14ec:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
         Hand_Z_Pos = 0;
    14f0:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
    14f4:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
    14f8:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
    14fc:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
         Hand_X_Pos = 0;
    1500:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
    1504:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
    1508:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
    150c:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>

         Null_Z_Pos = Motor_Z_Pos;
    1510:	40 93 20 12 	sts	0x1220, r20	; 0x801220 <Null_Z_Pos>
    1514:	50 93 21 12 	sts	0x1221, r21	; 0x801221 <Null_Z_Pos+0x1>
    1518:	60 93 22 12 	sts	0x1222, r22	; 0x801222 <Null_Z_Pos+0x2>
    151c:	70 93 23 12 	sts	0x1223, r23	; 0x801223 <Null_Z_Pos+0x3>
         Null_X_Pos = Motor_X_Pos;
    1520:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <Null_X_Pos>
    1524:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <Null_X_Pos+0x1>
    1528:	a0 93 12 12 	sts	0x1212, r26	; 0x801212 <Null_X_Pos+0x2>
    152c:	b0 93 13 12 	sts	0x1213, r27	; 0x801213 <Null_X_Pos+0x3>

         max_OCR3A = HC_START_SPEED_1;
    1530:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <HC_START_SPEED_1>
    1534:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <HC_START_SPEED_1+0x1>
    1538:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <max_OCR3A+0x1>
    153c:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <max_OCR3A>
         min_OCR3A = HC_MAX_SPEED_1;
    1540:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <HC_MAX_SPEED_1>
    1544:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <HC_MAX_SPEED_1+0x1>
    1548:	90 93 af 11 	sts	0x11AF, r25	; 0x8011af <min_OCR3A+0x1>
    154c:	80 93 ae 11 	sts	0x11AE, r24	; 0x8011ae <min_OCR3A>
         
         Scale = HC_SCALE_1;
    1550:	c0 93 b0 11 	sts	0x11B0, r28	; 0x8011b0 <Scale>
   /////////////////
   // Активная ось 
   /////////////////
   /////////////////
   //Активна ось Z ручного энкодера
   if (hand_Z == ON)
    1554:	80 91 01 12 	lds	r24, 0x1201	; 0x801201 <hand_Z>
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <_Z7H_Coderv+0x156>
    155c:	64 c1       	rjmp	.+712    	; 0x1826 <_Z7H_Coderv+0x41e>
   {
      Disa_INT_Hcoder();
    155e:	ea 98       	cbi	0x1d, 2	; 29
      Hand_Count_New = Hand_Count;    //Читаем переменную Hand_Count (управляется прерыванием INT2 от ручного энкодера) и запоминаем
    1560:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <Hand_Count>
    1564:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <Hand_Count+0x1>
    1568:	a0 91 fb 11 	lds	r26, 0x11FB	; 0x8011fb <Hand_Count+0x2>
    156c:	b0 91 fc 11 	lds	r27, 0x11FC	; 0x8011fc <Hand_Count+0x3>
    1570:	80 93 f5 11 	sts	0x11F5, r24	; 0x8011f5 <Hand_Count_New>
    1574:	90 93 f6 11 	sts	0x11F6, r25	; 0x8011f6 <Hand_Count_New+0x1>
    1578:	a0 93 f7 11 	sts	0x11F7, r26	; 0x8011f7 <Hand_Count_New+0x2>
    157c:	b0 93 f8 11 	sts	0x11F8, r27	; 0x8011f8 <Hand_Count_New+0x3>
      Ena_INT_Hcoder();
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	8c bb       	out	0x1c, r24	; 28
    1584:	ea 9a       	sbi	0x1d, 2	; 29

      //Если произошло изменение положения ручного энкодера...
      if (Hand_Count_New != Hand_Count_Old)
    1586:	20 91 f5 11 	lds	r18, 0x11F5	; 0x8011f5 <Hand_Count_New>
    158a:	30 91 f6 11 	lds	r19, 0x11F6	; 0x8011f6 <Hand_Count_New+0x1>
    158e:	40 91 f7 11 	lds	r20, 0x11F7	; 0x8011f7 <Hand_Count_New+0x2>
    1592:	50 91 f8 11 	lds	r21, 0x11F8	; 0x8011f8 <Hand_Count_New+0x3>
    1596:	80 91 f1 11 	lds	r24, 0x11F1	; 0x8011f1 <Hand_Count_Old>
    159a:	90 91 f2 11 	lds	r25, 0x11F2	; 0x8011f2 <Hand_Count_Old+0x1>
    159e:	a0 91 f3 11 	lds	r26, 0x11F3	; 0x8011f3 <Hand_Count_Old+0x2>
    15a2:	b0 91 f4 11 	lds	r27, 0x11F4	; 0x8011f4 <Hand_Count_Old+0x3>
    15a6:	28 17       	cp	r18, r24
    15a8:	39 07       	cpc	r19, r25
    15aa:	4a 07       	cpc	r20, r26
    15ac:	5b 07       	cpc	r21, r27
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_Z7H_Coderv+0x1aa>
    15b0:	64 c0       	rjmp	.+200    	; 0x167a <_Z7H_Coderv+0x272>
      {
         Hand_Count_Old = Hand_Count_New;       //Запоминаем новое значение переменной Hand_Count
    15b2:	20 93 f1 11 	sts	0x11F1, r18	; 0x8011f1 <Hand_Count_Old>
    15b6:	30 93 f2 11 	sts	0x11F2, r19	; 0x8011f2 <Hand_Count_Old+0x1>
    15ba:	40 93 f3 11 	sts	0x11F3, r20	; 0x8011f3 <Hand_Count_Old+0x2>
    15be:	50 93 f4 11 	sts	0x11F4, r21	; 0x8011f4 <Hand_Count_Old+0x3>
         Hand_Z_Pos = (Hand_Count_New * Scale * MOTOR_Z_STEP_PER_REV * McSTEP_Z / SCREW_Z + McSTEP_Z /2)  & ~(McSTEP_Z - 1);
    15c2:	c0 91 03 0a 	lds	r28, 0x0A03	; 0x800a03 <McSTEP_Z>
    15c6:	d0 91 04 0a 	lds	r29, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    15ca:	a0 91 b0 11 	lds	r26, 0x11B0	; 0x8011b0 <Scale>
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    15d4:	9b 01       	movw	r18, r22
    15d6:	ac 01       	movw	r20, r24
    15d8:	a0 91 05 0a 	lds	r26, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    15dc:	b0 91 06 0a 	lds	r27, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    15e0:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	de 01       	movw	r26, r28
    15ea:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    15ee:	20 91 01 0a 	lds	r18, 0x0A01	; 0x800a01 <SCREW_Z>
    15f2:	30 91 02 0a 	lds	r19, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    15f6:	03 2e       	mov	r0, r19
    15f8:	00 0c       	add	r0, r0
    15fa:	44 0b       	sbc	r20, r20
    15fc:	55 0b       	sbc	r21, r21
    15fe:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    1602:	ce 01       	movw	r24, r28
    1604:	d7 fd       	sbrc	r29, 7
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	95 95       	asr	r25
    160a:	87 95       	ror	r24
    160c:	09 2e       	mov	r0, r25
    160e:	00 0c       	add	r0, r0
    1610:	aa 0b       	sbc	r26, r26
    1612:	bb 0b       	sbc	r27, r27
    1614:	82 0f       	add	r24, r18
    1616:	93 1f       	adc	r25, r19
    1618:	a4 1f       	adc	r26, r20
    161a:	b5 1f       	adc	r27, r21
    161c:	d1 95       	neg	r29
    161e:	c1 95       	neg	r28
    1620:	d1 09       	sbc	r29, r1
    1622:	ae 01       	movw	r20, r28
    1624:	dd 0f       	add	r29, r29
    1626:	66 0b       	sbc	r22, r22
    1628:	77 0b       	sbc	r23, r23
    162a:	84 23       	and	r24, r20
    162c:	95 23       	and	r25, r21
    162e:	a6 23       	and	r26, r22
    1630:	b7 23       	and	r27, r23
    1632:	80 93 e9 11 	sts	0x11E9, r24	; 0x8011e9 <Hand_Z_Pos>
    1636:	90 93 ea 11 	sts	0x11EA, r25	; 0x8011ea <Hand_Z_Pos+0x1>
    163a:	a0 93 eb 11 	sts	0x11EB, r26	; 0x8011eb <Hand_Z_Pos+0x2>
    163e:	b0 93 ec 11 	sts	0x11EC, r27	; 0x8011ec <Hand_Z_Pos+0x3>
         //DEBUG
         #ifdef _DEBUG_HANDCODER
         Serial.print("Hand_Z_Pos=");Serial.print(Hand_Z_Pos);Serial.print("\n\r");
         #endif     
         
         Brake_Compens = max_OCR3A - min_OCR3A +1;
    1642:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <max_OCR3A>
    1646:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <max_OCR3A+0x1>
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	20 91 ae 11 	lds	r18, 0x11AE	; 0x8011ae <min_OCR3A>
    1650:	30 91 af 11 	lds	r19, 0x11AF	; 0x8011af <min_OCR3A+0x1>
    1654:	82 1b       	sub	r24, r18
    1656:	93 0b       	sbc	r25, r19
    1658:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    165c:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
         Disable_INT_OCR3B();     //Выключаем обработчик оси X ручного энкодера
    1660:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1664:	8b 7f       	andi	r24, 0xFB	; 251
    1666:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
         Enable_INT_OCR3A();      //Включаем  обработчик оси Z ручного энкодера
    166a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    166e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	88 bb       	out	0x18, r24	; 24
    1676:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
      } 

      //Opti Выносим суммирование в отдельную переменную, тип long
      //В дальнейших вычислениях используем эту переменную. Выигрыш составляет 80 байт.
      long Summ_Null_Z_Pos_and_Hand_Z_Pos = Null_Z_Pos + Hand_Z_Pos;
    167a:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    167e:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    1682:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    1686:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    168a:	40 91 e9 11 	lds	r20, 0x11E9	; 0x8011e9 <Hand_Z_Pos>
    168e:	50 91 ea 11 	lds	r21, 0x11EA	; 0x8011ea <Hand_Z_Pos+0x1>
    1692:	60 91 eb 11 	lds	r22, 0x11EB	; 0x8011eb <Hand_Z_Pos+0x2>
    1696:	70 91 ec 11 	lds	r23, 0x11EC	; 0x8011ec <Hand_Z_Pos+0x3>
    169a:	84 0f       	add	r24, r20
    169c:	95 1f       	adc	r25, r21
    169e:	a6 1f       	adc	r26, r22
    16a0:	b7 1f       	adc	r27, r23
      //-
      //OLD
      //if (Motor_Z_Pos < Null_Z_Pos + Hand_Z_Pos)
      //Opti
      //Определяем направление вращения ручного энкодера
      if (Motor_Z_Pos < Summ_Null_Z_Pos_and_Hand_Z_Pos)
    16a2:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    16a6:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    16aa:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    16ae:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    16b2:	48 17       	cp	r20, r24
    16b4:	59 07       	cpc	r21, r25
    16b6:	6a 07       	cpc	r22, r26
    16b8:	7b 07       	cpc	r23, r27
    16ba:	0c f0       	brlt	.+2      	; 0x16be <_Z7H_Coderv+0x2b6>
    16bc:	87 c0       	rjmp	.+270    	; 0x17cc <_Z7H_Coderv+0x3c4>
      //-
      {
         Motor_Z_Dir = CW;
    16be:	f1 98       	cbi	0x1e, 1	; 30
         Motor_Z_CW();              //Это макрос, Null_Z_Pos и Hand_Z_Pos не затрагивает
    16c0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    16c4:	2f 7b       	andi	r18, 0xBF	; 191
    16c6:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
         //OLD
         //Limit_Pos_HC = Null_Z_Pos + Hand_Z_Pos - Brake_Compens;
         //Opti
         Limit_Pos_HC = Summ_Null_Z_Pos_and_Hand_Z_Pos - Brake_Compens;
    16ca:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    16ce:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    16d2:	05 2e       	mov	r0, r21
    16d4:	00 0c       	add	r0, r0
    16d6:	66 0b       	sbc	r22, r22
    16d8:	77 0b       	sbc	r23, r23
    16da:	84 1b       	sub	r24, r20
    16dc:	95 0b       	sbc	r25, r21
    16de:	a6 0b       	sbc	r26, r22
    16e0:	b7 0b       	sbc	r27, r23
    16e2:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <Limit_Pos_HC>
    16e6:	90 93 a6 11 	sts	0x11A6, r25	; 0x8011a6 <Limit_Pos_HC+0x1>
    16ea:	a0 93 a7 11 	sts	0x11A7, r26	; 0x8011a7 <Limit_Pos_HC+0x2>
    16ee:	b0 93 a8 11 	sts	0x11A8, r27	; 0x8011a8 <Limit_Pos_HC+0x3>
         //-
         Limit_Pos = Limit_Pos_Left - Brake_Compens;
    16f2:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    16f6:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    16fa:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    16fe:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    1702:	84 1b       	sub	r24, r20
    1704:	95 0b       	sbc	r25, r21
    1706:	a6 0b       	sbc	r26, r22
    1708:	b7 0b       	sbc	r27, r23
         //OLD
         //Limit_Pos_HC = Null_Z_Pos + Hand_Z_Pos + Brake_Compens;
         //Opti
         Limit_Pos_HC = Summ_Null_Z_Pos_and_Hand_Z_Pos + Brake_Compens;
         //-
         Limit_Pos = Limit_Pos_Right + Brake_Compens;
    170a:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    170e:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    1712:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    1716:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>
   //else if (hand_Z == OFF && hand_X == OFF)
   //{
   //  //
   //}
   //-
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret
         max_OCR3A = HC_START_SPEED_1;
         min_OCR3A = HC_MAX_SPEED_1;
         
         Scale = HC_SCALE_1;
      }
      else if (Scale == HC_SCALE_1 && flag_Scale_x10 == ON)    //Флаги масштаба ручного энкодера - стоял масштаб 1х переключается на 10х
    1724:	2c 17       	cp	r18, r28
    1726:	3d 07       	cpc	r19, r29
    1728:	09 f0       	breq	.+2      	; 0x172c <_Z7H_Coderv+0x324>
    172a:	14 cf       	rjmp	.-472    	; 0x1554 <_Z7H_Coderv+0x14c>
    172c:	20 91 03 12 	lds	r18, 0x1203	; 0x801203 <flag_Scale_x10>
    1730:	22 23       	and	r18, r18
    1732:	09 f4       	brne	.+2      	; 0x1736 <_Z7H_Coderv+0x32e>
    1734:	0f cf       	rjmp	.-482    	; 0x1554 <_Z7H_Coderv+0x14c>
      {
         Hand_Count = 0;
    1736:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
    173a:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
    173e:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
    1742:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
         Hand_Count_New = 0;
    1746:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
    174a:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
    174e:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
    1752:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
         Hand_Count_Old = 0;
    1756:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
    175a:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
    175e:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
    1762:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
         Hand_Z_Pos = 0;
    1766:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
    176a:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
    176e:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
    1772:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
         Hand_X_Pos = 0;
    1776:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
    177a:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
    177e:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
    1782:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>

         Null_Z_Pos = Motor_Z_Pos;
    1786:	40 93 20 12 	sts	0x1220, r20	; 0x801220 <Null_Z_Pos>
    178a:	50 93 21 12 	sts	0x1221, r21	; 0x801221 <Null_Z_Pos+0x1>
    178e:	60 93 22 12 	sts	0x1222, r22	; 0x801222 <Null_Z_Pos+0x2>
    1792:	70 93 23 12 	sts	0x1223, r23	; 0x801223 <Null_Z_Pos+0x3>
         Null_X_Pos = Motor_X_Pos;
    1796:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <Null_X_Pos>
    179a:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <Null_X_Pos+0x1>
    179e:	a0 93 12 12 	sts	0x1212, r26	; 0x801212 <Null_X_Pos+0x2>
    17a2:	b0 93 13 12 	sts	0x1213, r27	; 0x801213 <Null_X_Pos+0x3>

         max_OCR3A = HC_START_SPEED_10;
    17a6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <HC_START_SPEED_10>
    17aa:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <HC_START_SPEED_10+0x1>
    17ae:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <max_OCR3A+0x1>
    17b2:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <max_OCR3A>
         min_OCR3A = HC_MAX_SPEED_10;
    17b6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <HC_MAX_SPEED_10>
    17ba:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <HC_MAX_SPEED_10+0x1>
    17be:	90 93 af 11 	sts	0x11AF, r25	; 0x8011af <min_OCR3A+0x1>
    17c2:	80 93 ae 11 	sts	0x11AE, r24	; 0x8011ae <min_OCR3A>
         
         Scale = HC_SCALE_10;
    17c6:	e0 93 b0 11 	sts	0x11B0, r30	; 0x8011b0 <Scale>
    17ca:	c4 ce       	rjmp	.-632    	; 0x1554 <_Z7H_Coderv+0x14c>
         Limit_Pos = Limit_Pos_Left - Brake_Compens;
      }
      //OLD
      //else if (Motor_Z_Pos > Null_Z_Pos + Hand_Z_Pos)
      //Opti
      else if (Motor_Z_Pos > Summ_Null_Z_Pos_and_Hand_Z_Pos)
    17cc:	84 17       	cp	r24, r20
    17ce:	95 07       	cpc	r25, r21
    17d0:	a6 07       	cpc	r26, r22
    17d2:	b7 07       	cpc	r27, r23
    17d4:	0c f0       	brlt	.+2      	; 0x17d8 <_Z7H_Coderv+0x3d0>
    17d6:	a1 cf       	rjmp	.-190    	; 0x171a <_Z7H_Coderv+0x312>
      //-
      {
         Motor_Z_Dir = CCW;
    17d8:	f1 9a       	sbi	0x1e, 1	; 30
         Motor_Z_CCW();              //Это макрос, Null_Z_Pos и Hand_Z_Pos не затрагивает
    17da:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    17de:	20 64       	ori	r18, 0x40	; 64
    17e0:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
         //OLD
         //Limit_Pos_HC = Null_Z_Pos + Hand_Z_Pos + Brake_Compens;
         //Opti
         Limit_Pos_HC = Summ_Null_Z_Pos_and_Hand_Z_Pos + Brake_Compens;
    17e4:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    17e8:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    17ec:	05 2e       	mov	r0, r21
    17ee:	00 0c       	add	r0, r0
    17f0:	66 0b       	sbc	r22, r22
    17f2:	77 0b       	sbc	r23, r23
    17f4:	84 0f       	add	r24, r20
    17f6:	95 1f       	adc	r25, r21
    17f8:	a6 1f       	adc	r26, r22
    17fa:	b7 1f       	adc	r27, r23
    17fc:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <Limit_Pos_HC>
    1800:	90 93 a6 11 	sts	0x11A6, r25	; 0x8011a6 <Limit_Pos_HC+0x1>
    1804:	a0 93 a7 11 	sts	0x11A7, r26	; 0x8011a7 <Limit_Pos_HC+0x2>
    1808:	b0 93 a8 11 	sts	0x11A8, r27	; 0x8011a8 <Limit_Pos_HC+0x3>
         //-
         Limit_Pos = Limit_Pos_Right + Brake_Compens;
    180c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    1810:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    1814:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    1818:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    181c:	84 0f       	add	r24, r20
    181e:	95 1f       	adc	r25, r21
    1820:	a6 1f       	adc	r26, r22
    1822:	b7 1f       	adc	r27, r23
    1824:	72 cf       	rjmp	.-284    	; 0x170a <_Z7H_Coderv+0x302>
      }
   }

   //////////////////////////
   //Активна ось X ручного энкодера
   else if (hand_X == ON)
    1826:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <hand_X>
    182a:	88 23       	and	r24, r24
    182c:	09 f4       	brne	.+2      	; 0x1830 <_Z7H_Coderv+0x428>
    182e:	75 cf       	rjmp	.-278    	; 0x171a <_Z7H_Coderv+0x312>
   {
      Disa_INT_Hcoder();
    1830:	ea 98       	cbi	0x1d, 2	; 29
      //Hand_Count_New имеет тип long, знаковое
      //OLD
      //if (HC_X_DIR == 0) {Hand_Count_New = Hand_Count;}
      //else               {Hand_Count_New = Hand_Count - Hand_Count *2;}   //Весьма странный способ записи.
      //Opti Более традиционная запись, выгода 18 байт
      if (HC_X_DIR == 0)              //Тут проверка настроек поперечной подачи: // 1-поперечка по часовой, 0-против
    1832:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1836:	81 11       	cpse	r24, r1
    1838:	c9 c0       	rjmp	.+402    	; 0x19cc <_Z7H_Coderv+0x5c4>
      {
        Hand_Count_New = Hand_Count;
    183a:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <Hand_Count>
    183e:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <Hand_Count+0x1>
    1842:	a0 91 fb 11 	lds	r26, 0x11FB	; 0x8011fb <Hand_Count+0x2>
    1846:	b0 91 fc 11 	lds	r27, 0x11FC	; 0x8011fc <Hand_Count+0x3>
      } else {
        Hand_Count_New = -Hand_Count;
    184a:	80 93 f5 11 	sts	0x11F5, r24	; 0x8011f5 <Hand_Count_New>
    184e:	90 93 f6 11 	sts	0x11F6, r25	; 0x8011f6 <Hand_Count_New+0x1>
    1852:	a0 93 f7 11 	sts	0x11F7, r26	; 0x8011f7 <Hand_Count_New+0x2>
    1856:	b0 93 f8 11 	sts	0x11F8, r27	; 0x8011f8 <Hand_Count_New+0x3>
      }
      //-     
      
      Ena_INT_Hcoder();
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	8c bb       	out	0x1c, r24	; 28
    185e:	ea 9a       	sbi	0x1d, 2	; 29
      
      if (Hand_Count_New != Hand_Count_Old)
    1860:	20 91 f5 11 	lds	r18, 0x11F5	; 0x8011f5 <Hand_Count_New>
    1864:	30 91 f6 11 	lds	r19, 0x11F6	; 0x8011f6 <Hand_Count_New+0x1>
    1868:	40 91 f7 11 	lds	r20, 0x11F7	; 0x8011f7 <Hand_Count_New+0x2>
    186c:	50 91 f8 11 	lds	r21, 0x11F8	; 0x8011f8 <Hand_Count_New+0x3>
    1870:	80 91 f1 11 	lds	r24, 0x11F1	; 0x8011f1 <Hand_Count_Old>
    1874:	90 91 f2 11 	lds	r25, 0x11F2	; 0x8011f2 <Hand_Count_Old+0x1>
    1878:	a0 91 f3 11 	lds	r26, 0x11F3	; 0x8011f3 <Hand_Count_Old+0x2>
    187c:	b0 91 f4 11 	lds	r27, 0x11F4	; 0x8011f4 <Hand_Count_Old+0x3>
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	4a 07       	cpc	r20, r26
    1886:	5b 07       	cpc	r21, r27
    1888:	09 f4       	brne	.+2      	; 0x188c <_Z7H_Coderv+0x484>
    188a:	64 c0       	rjmp	.+200    	; 0x1954 <_Z7H_Coderv+0x54c>
      {
         Hand_Count_Old = Hand_Count_New;
    188c:	20 93 f1 11 	sts	0x11F1, r18	; 0x8011f1 <Hand_Count_Old>
    1890:	30 93 f2 11 	sts	0x11F2, r19	; 0x8011f2 <Hand_Count_Old+0x1>
    1894:	40 93 f3 11 	sts	0x11F3, r20	; 0x8011f3 <Hand_Count_Old+0x2>
    1898:	50 93 f4 11 	sts	0x11F4, r21	; 0x8011f4 <Hand_Count_Old+0x3>
         Hand_X_Pos = (Hand_Count_New * Scale * MOTOR_X_STEP_PER_REV * McSTEP_X / SCREW_X + McSTEP_X /2)  & ~(McSTEP_X - 1);
    189c:	c0 91 fd 09 	lds	r28, 0x09FD	; 0x8009fd <McSTEP_X>
    18a0:	d0 91 fe 09 	lds	r29, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    18a4:	a0 91 b0 11 	lds	r26, 0x11B0	; 0x8011b0 <Scale>
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	a0 91 ff 09 	lds	r26, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    18b6:	b0 91 00 0a 	lds	r27, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    18ba:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    18be:	9b 01       	movw	r18, r22
    18c0:	ac 01       	movw	r20, r24
    18c2:	de 01       	movw	r26, r28
    18c4:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    18c8:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <SCREW_X>
    18cc:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    18d0:	03 2e       	mov	r0, r19
    18d2:	00 0c       	add	r0, r0
    18d4:	44 0b       	sbc	r20, r20
    18d6:	55 0b       	sbc	r21, r21
    18d8:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    18dc:	ce 01       	movw	r24, r28
    18de:	d7 fd       	sbrc	r29, 7
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	95 95       	asr	r25
    18e4:	87 95       	ror	r24
    18e6:	09 2e       	mov	r0, r25
    18e8:	00 0c       	add	r0, r0
    18ea:	aa 0b       	sbc	r26, r26
    18ec:	bb 0b       	sbc	r27, r27
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	a4 1f       	adc	r26, r20
    18f4:	b5 1f       	adc	r27, r21
    18f6:	d1 95       	neg	r29
    18f8:	c1 95       	neg	r28
    18fa:	d1 09       	sbc	r29, r1
    18fc:	ae 01       	movw	r20, r28
    18fe:	dd 0f       	add	r29, r29
    1900:	66 0b       	sbc	r22, r22
    1902:	77 0b       	sbc	r23, r23
    1904:	84 23       	and	r24, r20
    1906:	95 23       	and	r25, r21
    1908:	a6 23       	and	r26, r22
    190a:	b7 23       	and	r27, r23
    190c:	80 93 ed 11 	sts	0x11ED, r24	; 0x8011ed <Hand_X_Pos>
    1910:	90 93 ee 11 	sts	0x11EE, r25	; 0x8011ee <Hand_X_Pos+0x1>
    1914:	a0 93 ef 11 	sts	0x11EF, r26	; 0x8011ef <Hand_X_Pos+0x2>
    1918:	b0 93 f0 11 	sts	0x11F0, r27	; 0x8011f0 <Hand_X_Pos+0x3>
         //DEBUG
         #ifdef _DEBUG_HANDCODER
         Serial.print("Hand_X_Pos=");Serial.print(Hand_X_Pos);Serial.print("\n\r"); 
         #endif
         
         Brake_Compens = max_OCR3A - min_OCR3A + 1;
    191c:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <max_OCR3A>
    1920:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <max_OCR3A+0x1>
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	20 91 ae 11 	lds	r18, 0x11AE	; 0x8011ae <min_OCR3A>
    192a:	30 91 af 11 	lds	r19, 0x11AF	; 0x8011af <min_OCR3A+0x1>
    192e:	82 1b       	sub	r24, r18
    1930:	93 0b       	sbc	r25, r19
    1932:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    1936:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
         Disable_INT_OCR3A();
    193a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    193e:	8d 7f       	andi	r24, 0xFD	; 253
    1940:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
         Enable_INT_OCR3B();
    1944:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1948:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    194c:	84 e0       	ldi	r24, 0x04	; 4
    194e:	88 bb       	out	0x18, r24	; 24
    1950:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
      } 

      //Opti Выносим суммирование в отдельную переменную, тип long
      //В дальнейших вычислениях используем эту переменную. Выигрыш составляет 82 байта.
      long Summ_Null_X_Pos_and_Hand_X_Pos = Null_X_Pos + Hand_X_Pos;
    1954:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    1958:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    195c:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    1960:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    1964:	40 91 ed 11 	lds	r20, 0x11ED	; 0x8011ed <Hand_X_Pos>
    1968:	50 91 ee 11 	lds	r21, 0x11EE	; 0x8011ee <Hand_X_Pos+0x1>
    196c:	60 91 ef 11 	lds	r22, 0x11EF	; 0x8011ef <Hand_X_Pos+0x2>
    1970:	70 91 f0 11 	lds	r23, 0x11F0	; 0x8011f0 <Hand_X_Pos+0x3>
    1974:	84 0f       	add	r24, r20
    1976:	95 1f       	adc	r25, r21
    1978:	a6 1f       	adc	r26, r22
    197a:	b7 1f       	adc	r27, r23
      //-
      //OLD
      //if (Motor_X_Pos < Null_X_Pos + Hand_X_Pos)
      //Opti
      if (Motor_X_Pos < Summ_Null_X_Pos_and_Hand_X_Pos)
    197c:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    1980:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    1984:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    1988:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    198c:	48 17       	cp	r20, r24
    198e:	59 07       	cpc	r21, r25
    1990:	6a 07       	cpc	r22, r26
    1992:	7b 07       	cpc	r23, r27
    1994:	5c f5       	brge	.+86     	; 0x19ec <_Z7H_Coderv+0x5e4>
      //-
      {
         Motor_X_Dir = CW;
    1996:	f4 98       	cbi	0x1e, 4	; 30
         Motor_X_CW();              //Это макрос, Null_X_Pos и Hand_X_Pos не затрагивает
    1998:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    199c:	2f 7d       	andi	r18, 0xDF	; 223
    199e:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
         //OLD
         //Limit_Pos_HC = Null_X_Pos + Hand_X_Pos - Brake_Compens;
         //Opti
         Limit_Pos_HC = Summ_Null_X_Pos_and_Hand_X_Pos - Brake_Compens;
    19a2:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    19a6:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    19aa:	05 2e       	mov	r0, r21
    19ac:	00 0c       	add	r0, r0
    19ae:	66 0b       	sbc	r22, r22
    19b0:	77 0b       	sbc	r23, r23
    19b2:	84 1b       	sub	r24, r20
    19b4:	95 0b       	sbc	r25, r21
    19b6:	a6 0b       	sbc	r26, r22
    19b8:	b7 0b       	sbc	r27, r23
         Motor_X_Dir = CCW;
         Motor_X_CCW();              //Это макрос, Null_X_Pos и Hand_X_Pos не затрагивает
         //OLD
         //Limit_Pos_HC = Null_X_Pos + Hand_X_Pos + Brake_Compens;
         //Opti
         Limit_Pos_HC = Summ_Null_X_Pos_and_Hand_X_Pos + Brake_Compens;
    19ba:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <Limit_Pos_HC>
    19be:	90 93 a6 11 	sts	0x11A6, r25	; 0x8011a6 <Limit_Pos_HC+0x1>
    19c2:	a0 93 a7 11 	sts	0x11A7, r26	; 0x8011a7 <Limit_Pos_HC+0x2>
    19c6:	b0 93 a8 11 	sts	0x11A8, r27	; 0x8011a8 <Limit_Pos_HC+0x3>
    19ca:	a7 ce       	rjmp	.-690    	; 0x171a <_Z7H_Coderv+0x312>
      //Opti Более традиционная запись, выгода 18 байт
      if (HC_X_DIR == 0)              //Тут проверка настроек поперечной подачи: // 1-поперечка по часовой, 0-против
      {
        Hand_Count_New = Hand_Count;
      } else {
        Hand_Count_New = -Hand_Count;
    19cc:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <Hand_Count>
    19d0:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <Hand_Count+0x1>
    19d4:	a0 91 fb 11 	lds	r26, 0x11FB	; 0x8011fb <Hand_Count+0x2>
    19d8:	b0 91 fc 11 	lds	r27, 0x11FC	; 0x8011fc <Hand_Count+0x3>
    19dc:	b0 95       	com	r27
    19de:	a0 95       	com	r26
    19e0:	90 95       	com	r25
    19e2:	81 95       	neg	r24
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	af 4f       	sbci	r26, 0xFF	; 255
    19e8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ea:	2f cf       	rjmp	.-418    	; 0x184a <_Z7H_Coderv+0x442>
         //-
      }
      //OLD
      //else if (Motor_X_Pos > Null_X_Pos + Hand_X_Pos)
      //Opti
      else if (Motor_X_Pos > Summ_Null_X_Pos_and_Hand_X_Pos)
    19ec:	84 17       	cp	r24, r20
    19ee:	95 07       	cpc	r25, r21
    19f0:	a6 07       	cpc	r26, r22
    19f2:	b7 07       	cpc	r27, r23
    19f4:	0c f0       	brlt	.+2      	; 0x19f8 <_Z7H_Coderv+0x5f0>
    19f6:	91 ce       	rjmp	.-734    	; 0x171a <_Z7H_Coderv+0x312>
      //-
      {
         Motor_X_Dir = CCW;
    19f8:	f4 9a       	sbi	0x1e, 4	; 30
         Motor_X_CCW();              //Это макрос, Null_X_Pos и Hand_X_Pos не затрагивает
    19fa:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    19fe:	20 62       	ori	r18, 0x20	; 32
    1a00:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
         //OLD
         //Limit_Pos_HC = Null_X_Pos + Hand_X_Pos + Brake_Compens;
         //Opti
         Limit_Pos_HC = Summ_Null_X_Pos_and_Hand_X_Pos + Brake_Compens;
    1a04:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    1a08:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    1a0c:	05 2e       	mov	r0, r21
    1a0e:	00 0c       	add	r0, r0
    1a10:	66 0b       	sbc	r22, r22
    1a12:	77 0b       	sbc	r23, r23
    1a14:	84 0f       	add	r24, r20
    1a16:	95 1f       	adc	r25, r21
    1a18:	a6 1f       	adc	r26, r22
    1a1a:	b7 1f       	adc	r27, r23
    1a1c:	ce cf       	rjmp	.-100    	; 0x19ba <_Z7H_Coderv+0x5b2>

00001a1e <_Z21Read_ADC_ResistorFeedv>:

}

/////////// Опрос Переменника Подачи ///////////
bool Read_ADC_ResistorFeed()
{
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
  if (++ADC_Cycle > 4999) // Ставим счётчик, чтобы уменьшить количество обращений к чтению параметров АЦП
    1a26:	80 91 9d 11 	lds	r24, 0x119D	; 0x80119d <ADC_Cycle>
    1a2a:	90 91 9e 11 	lds	r25, 0x119E	; 0x80119e <ADC_Cycle+0x1>
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	90 93 9e 11 	sts	0x119E, r25	; 0x80119e <ADC_Cycle+0x1>
    1a34:	80 93 9d 11 	sts	0x119D, r24	; 0x80119d <ADC_Cycle>
    1a38:	88 38       	cpi	r24, 0x88	; 136
    1a3a:	93 41       	sbci	r25, 0x13	; 19
    1a3c:	c4 f0       	brlt	.+48     	; 0x1a6e <_Z21Read_ADC_ResistorFeedv+0x50>

//    _time = micros();
    
    //Работает в Proteus
    //Запуск ADC-преобразования, ждём окончания и считываем значение
    ADCSRA |= (1 << ADSC);                  // Запускаем ADC-преобразование
    1a3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    while ((ADCSRA & (1 << ADIF)) == 0);    // Ожидаем поднятия флага об окончании преобразования
    1a48:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a4c:	84 ff       	sbrs	r24, 4
    1a4e:	fc cf       	rjmp	.-8      	; 0x1a48 <_Z21Read_ADC_ResistorFeedv+0x2a>
    New_ADC_Feed = (ADCL | ADCH << 8);      // Считываем полученное значение
    1a50:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    1a54:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    1a58:	89 27       	eor	r24, r25
    1a5a:	98 27       	eor	r25, r24
    1a5c:	89 27       	eor	r24, r25
    1a5e:	90 93 9c 11 	sts	0x119C, r25	; 0x80119c <New_ADC_Feed+0x1>
    1a62:	80 93 9b 11 	sts	0x119B, r24	; 0x80119b <New_ADC_Feed>

    ADC_Cycle = 0;      //После выполнения чтения резистора - сбрасываем счётчик
    1a66:	10 92 9e 11 	sts	0x119E, r1	; 0x80119e <ADC_Cycle+0x1>
    1a6a:	10 92 9d 11 	sts	0x119D, r1	; 0x80119d <ADC_Cycle>
#ifdef _DEBUG_ADC
    Serial.print("New_ADC_Feed = "); Serial.print(New_ADC_Feed); Serial.print("\n");
#endif
  }

  if (New_ADC_Feed > ADC_Feed + ADC_DEAD_ZONE || New_ADC_Feed < ADC_Feed - ADC_DEAD_ZONE)
    1a6e:	c0 91 d7 11 	lds	r28, 0x11D7	; 0x8011d7 <ADC_Feed>
    1a72:	d0 91 d8 11 	lds	r29, 0x11D8	; 0x8011d8 <ADC_Feed+0x1>
    1a76:	80 91 9b 11 	lds	r24, 0x119B	; 0x80119b <New_ADC_Feed>
    1a7a:	90 91 9c 11 	lds	r25, 0x119C	; 0x80119c <New_ADC_Feed+0x1>
    1a7e:	9e 01       	movw	r18, r28
    1a80:	2b 5f       	subi	r18, 0xFB	; 251
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	2c f0       	brlt	.+10     	; 0x1a94 <_Z21Read_ADC_ResistorFeedv+0x76>
    1a8a:	2a 50       	subi	r18, 0x0A	; 10
    1a8c:	31 09       	sbc	r19, r1
    1a8e:	82 17       	cp	r24, r18
    1a90:	93 07       	cpc	r25, r19
    1a92:	34 f4       	brge	.+12     	; 0x1aa0 <_Z21Read_ADC_ResistorFeedv+0x82>
  {
    //Проверка заданных пределов входного значения
    if (New_ADC_Feed < ADC_MINIMUM_VALUE)
    1a94:	97 ff       	sbrs	r25, 7
    1a96:	60 c0       	rjmp	.+192    	; 0x1b58 <_Z21Read_ADC_ResistorFeedv+0x13a>
    {
      New_ADC_Feed = ADC_MINIMUM_VALUE;
    1a98:	10 92 9c 11 	sts	0x119C, r1	; 0x80119c <New_ADC_Feed+0x1>
    1a9c:	10 92 9b 11 	sts	0x119B, r1	; 0x80119b <New_ADC_Feed>
#endif
  }

  //Сглаживание
  //if ( ! ( ADC_Cycle % 625 ) )      //5000 разделяем на 8 под-циклов по 625
  if ( ! ( ADC_Cycle % 250 ) )      //5000 разделяем на 20 под-циклов по 250
    1aa0:	80 91 9d 11 	lds	r24, 0x119D	; 0x80119d <ADC_Cycle>
    1aa4:	90 91 9e 11 	lds	r25, 0x119E	; 0x80119e <ADC_Cycle+0x1>
    1aa8:	6a ef       	ldi	r22, 0xFA	; 250
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    1ab0:	89 2b       	or	r24, r25
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <_Z21Read_ADC_ResistorFeedv+0x98>
    1ab4:	4b c0       	rjmp	.+150    	; 0x1b4c <_Z21Read_ADC_ResistorFeedv+0x12e>
  {
    if (++x > (sizeof(ADC_Array) / sizeof(ADC_Array[0]) - 1))   //Записано в общем виде.
    1ab6:	80 91 9a 11 	lds	r24, 0x119A	; 0x80119a <x>
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	84 31       	cpi	r24, 0x14	; 20
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <_Z21Read_ADC_ResistorFeedv+0xa4>
    1ac0:	56 c0       	rjmp	.+172    	; 0x1b6e <_Z21Read_ADC_ResistorFeedv+0x150>
    1ac2:	80 93 9a 11 	sts	0x119A, r24	; 0x80119a <x>
    }

    Old_ADC_Feed = ADC_Feed;        //Сохраняем предыдущее показание резистора с учётом сглаживания

    //Выполняем сглаживание показаний
    Sum_ADC = Sum_ADC - ADC_Array[x];
    1ac6:	e0 91 9a 11 	lds	r30, 0x119A	; 0x80119a <x>
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	e2 59       	subi	r30, 0x92	; 146
    1ad2:	fe 4e       	sbci	r31, 0xEE	; 238
    1ad4:	00 81       	ld	r16, Z
    1ad6:	11 81       	ldd	r17, Z+1	; 0x01
    1ad8:	01 2e       	mov	r0, r17
    1ada:	00 0c       	add	r0, r0
    1adc:	22 0b       	sbc	r18, r18
    1ade:	33 0b       	sbc	r19, r19
    1ae0:	80 91 96 11 	lds	r24, 0x1196	; 0x801196 <Sum_ADC>
    1ae4:	90 91 97 11 	lds	r25, 0x1197	; 0x801197 <Sum_ADC+0x1>
    1ae8:	a0 91 98 11 	lds	r26, 0x1198	; 0x801198 <Sum_ADC+0x2>
    1aec:	b0 91 99 11 	lds	r27, 0x1199	; 0x801199 <Sum_ADC+0x3>
    1af0:	ac 01       	movw	r20, r24
    1af2:	bd 01       	movw	r22, r26
    1af4:	40 1b       	sub	r20, r16
    1af6:	51 0b       	sbc	r21, r17
    1af8:	62 0b       	sbc	r22, r18
    1afa:	73 0b       	sbc	r23, r19
    1afc:	8a 01       	movw	r16, r20
    1afe:	9b 01       	movw	r18, r22
    ADC_Array[x] = New_ADC_Feed;
    1b00:	80 91 9b 11 	lds	r24, 0x119B	; 0x80119b <New_ADC_Feed>
    1b04:	90 91 9c 11 	lds	r25, 0x119C	; 0x80119c <New_ADC_Feed+0x1>
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    Sum_ADC = Sum_ADC + New_ADC_Feed;
    1b0c:	09 2e       	mov	r0, r25
    1b0e:	00 0c       	add	r0, r0
    1b10:	aa 0b       	sbc	r26, r26
    1b12:	bb 0b       	sbc	r27, r27
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	60 0f       	add	r22, r16
    1b1a:	71 1f       	adc	r23, r17
    1b1c:	82 1f       	adc	r24, r18
    1b1e:	93 1f       	adc	r25, r19
    1b20:	60 93 96 11 	sts	0x1196, r22	; 0x801196 <Sum_ADC>
    1b24:	70 93 97 11 	sts	0x1197, r23	; 0x801197 <Sum_ADC+0x1>
    1b28:	80 93 98 11 	sts	0x1198, r24	; 0x801198 <Sum_ADC+0x2>
    1b2c:	90 93 99 11 	sts	0x1199, r25	; 0x801199 <Sum_ADC+0x3>
    ADC_Feed = Sum_ADC / (sizeof(ADC_Array) / sizeof(ADC_Array[0]));    //Записано в общем виде.
    1b30:	24 e1       	ldi	r18, 0x14	; 20
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    1b3c:	30 93 d8 11 	sts	0x11D8, r19	; 0x8011d8 <ADC_Feed+0x1>
    1b40:	20 93 d7 11 	sts	0x11D7, r18	; 0x8011d7 <ADC_Feed>

    //Если после сглаживания показания изменились возвращаем true, если нет - false
    if (ADC_Feed != Old_ADC_Feed)
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	c2 17       	cp	r28, r18
    1b48:	d3 07       	cpc	r29, r19
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <_Z21Read_ADC_ResistorFeedv+0x130>
    } else {
      return false;
    }
  }

  return false;
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
}
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret
    //Проверка заданных пределов входного значения
    if (New_ADC_Feed < ADC_MINIMUM_VALUE)
    {
      New_ADC_Feed = ADC_MINIMUM_VALUE;
    }
    else if (New_ADC_Feed > ADC_MAXIMUM_VALUE)
    1b58:	81 15       	cp	r24, r1
    1b5a:	94 40       	sbci	r25, 0x04	; 4
    1b5c:	0c f4       	brge	.+2      	; 0x1b60 <_Z21Read_ADC_ResistorFeedv+0x142>
    1b5e:	a0 cf       	rjmp	.-192    	; 0x1aa0 <_Z21Read_ADC_ResistorFeedv+0x82>
    {
      New_ADC_Feed = ADC_MAXIMUM_VALUE;
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	93 e0       	ldi	r25, 0x03	; 3
    1b64:	90 93 9c 11 	sts	0x119C, r25	; 0x80119c <New_ADC_Feed+0x1>
    1b68:	80 93 9b 11 	sts	0x119B, r24	; 0x80119b <New_ADC_Feed>
    1b6c:	99 cf       	rjmp	.-206    	; 0x1aa0 <_Z21Read_ADC_ResistorFeedv+0x82>
  //if ( ! ( ADC_Cycle % 625 ) )      //5000 разделяем на 8 под-циклов по 625
  if ( ! ( ADC_Cycle % 250 ) )      //5000 разделяем на 20 под-циклов по 250
  {
    if (++x > (sizeof(ADC_Array) / sizeof(ADC_Array[0]) - 1))   //Записано в общем виде.
    {
      x = 0;
    1b6e:	10 92 9a 11 	sts	0x119A, r1	; 0x80119a <x>
    1b72:	a9 cf       	rjmp	.-174    	; 0x1ac6 <_Z21Read_ADC_ResistorFeedv+0xa8>

00001b74 <_Z19get_Enc_Pos_Dividerv>:

//Для ДЕЛИЛКИх2
void get_Enc_Pos_Divider()
{
  //NEW2
  if (!Enc_Ch_A)
    1b74:	48 99       	sbic	0x09, 0	; 9
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <_Z19get_Enc_Pos_Dividerv+0x12>
  {
    if (!Enc_Ch_B)                                //прямое вращение
    1b78:	49 99       	sbic	0x09, 1	; 9
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <_Z19get_Enc_Pos_Dividerv+0x16>
  } else {
    if (!Enc_Ch_B)                                //вращение в обратную сторону
    {
      Enc_Pos_Divider = 1;
    } else {                                      //прямое вращение
      Enc_Pos_Divider = 0;
    1b7c:	10 92 ab 11 	sts	0x11AB, r1	; 0x8011ab <Enc_Pos_Divider+0x1>
    1b80:	10 92 aa 11 	sts	0x11AA, r1	; 0x8011aa <Enc_Pos_Divider>
    }
  }
}
    1b84:	08 95       	ret
      Enc_Pos_Divider = 0;
    } else {                                      //вращение в обратную сторону
      Enc_Pos_Divider = 1;
    }
  } else {
    if (!Enc_Ch_B)                                //вращение в обратную сторону
    1b86:	49 99       	sbic	0x09, 1	; 9
    1b88:	f9 cf       	rjmp	.-14     	; 0x1b7c <_Z19get_Enc_Pos_Dividerv+0x8>
    {
      Enc_Pos_Divider = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	90 93 ab 11 	sts	0x11AB, r25	; 0x8011ab <Enc_Pos_Divider+0x1>
    1b92:	80 93 aa 11 	sts	0x11AA, r24	; 0x8011aa <Enc_Pos_Divider>
    1b96:	08 95       	ret

00001b98 <_Z11Get_deg_DEGfh.part.13.constprop.31>:
//  float x = (180.0f / M_PI) * atan( 2.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z / (float(Divider) * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X) );
//  return x;
//}

//"Обратная" функция - по делителю определить угол конуса с учётом типа тактования
float Get_deg_DEG(float Divider, byte XZ)
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
  //  return x;

  float x;
  if (XZ == (byte)0)     //XZ == 0 Тип тактования ZX
  {
    x = (180.0f / M_PI) * atan( 2.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z / (float(Divider) * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X) );
    1ba8:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    1bac:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    1bb0:	07 2e       	mov	r0, r23
    1bb2:	00 0c       	add	r0, r0
    1bb4:	88 0b       	sbc	r24, r24
    1bb6:	99 0b       	sbc	r25, r25
    1bb8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1bbc:	9b 01       	movw	r18, r22
    1bbe:	ac 01       	movw	r20, r24
    1bc0:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    1bc4:	6b 01       	movw	r12, r22
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    1bcc:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    1bd0:	07 2e       	mov	r0, r23
    1bd2:	00 0c       	add	r0, r0
    1bd4:	88 0b       	sbc	r24, r24
    1bd6:	99 0b       	sbc	r25, r25
    1bd8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1bdc:	9b 01       	movw	r18, r22
    1bde:	ac 01       	movw	r20, r24
    1be0:	c7 01       	movw	r24, r14
    1be2:	b6 01       	movw	r22, r12
    1be4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1be8:	6b 01       	movw	r12, r22
    1bea:	7c 01       	movw	r14, r24
    1bec:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    1bf0:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    1bf4:	07 2e       	mov	r0, r23
    1bf6:	00 0c       	add	r0, r0
    1bf8:	88 0b       	sbc	r24, r24
    1bfa:	99 0b       	sbc	r25, r25
    1bfc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1c00:	9b 01       	movw	r18, r22
    1c02:	ac 01       	movw	r20, r24
    1c04:	c7 01       	movw	r24, r14
    1c06:	b6 01       	movw	r22, r12
    1c08:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1c0c:	6b 01       	movw	r12, r22
    1c0e:	7c 01       	movw	r14, r24
    1c10:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    1c14:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    1c18:	07 2e       	mov	r0, r23
    1c1a:	00 0c       	add	r0, r0
    1c1c:	88 0b       	sbc	r24, r24
    1c1e:	99 0b       	sbc	r25, r25
    1c20:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1c24:	21 e7       	ldi	r18, 0x71	; 113
    1c26:	3d ef       	ldi	r19, 0xFD	; 253
    1c28:	4e e7       	ldi	r20, 0x7E	; 126
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1c30:	4b 01       	movw	r8, r22
    1c32:	5c 01       	movw	r10, r24
    1c34:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    1c38:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    1c3c:	07 2e       	mov	r0, r23
    1c3e:	00 0c       	add	r0, r0
    1c40:	88 0b       	sbc	r24, r24
    1c42:	99 0b       	sbc	r25, r25
    1c44:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1c48:	9b 01       	movw	r18, r22
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	c5 01       	movw	r24, r10
    1c4e:	b4 01       	movw	r22, r8
    1c50:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1c54:	4b 01       	movw	r8, r22
    1c56:	5c 01       	movw	r10, r24
    1c58:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    1c5c:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    1c60:	07 2e       	mov	r0, r23
    1c62:	00 0c       	add	r0, r0
    1c64:	88 0b       	sbc	r24, r24
    1c66:	99 0b       	sbc	r25, r25
    1c68:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    1c6c:	9b 01       	movw	r18, r22
    1c6e:	ac 01       	movw	r20, r24
    1c70:	c5 01       	movw	r24, r10
    1c72:	b4 01       	movw	r22, r8
    1c74:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	b6 01       	movw	r22, r12
    1c80:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    1c84:	0e 94 9a 95 	call	0x12b34	; 0x12b34 <atan>
    1c88:	20 ee       	ldi	r18, 0xE0	; 224
    1c8a:	3e e2       	ldi	r19, 0x2E	; 46
    1c8c:	45 e6       	ldi	r20, 0x65	; 101
    1c8e:	52 e4       	ldi	r21, 0x42	; 66
    1c90:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
  } else {              //XZ == 1 Тип тактования XZ
    float DividerXZ = 1.0f / Divider;
    x = (180.0f / M_PI) * atan( 2.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z / (float(DividerXZ) * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X) );
  }
  return x;
}
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	cf 90       	pop	r12
    1c9c:	bf 90       	pop	r11
    1c9e:	af 90       	pop	r10
    1ca0:	9f 90       	pop	r9
    1ca2:	8f 90       	pop	r8
    1ca4:	08 95       	ret

00001ca6 <_Z11Thread_LeftRbS_.part.18.constprop.30>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ********** Режим "Резьба" ********** //////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Thread_Left(bool & c_flag, bool & d_flag)
    1ca6:	8f 92       	push	r8
    1ca8:	9f 92       	push	r9
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
{
  if (c_flag == true) return;
  d_flag = false;
    1cb6:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
  c_flag = true;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	80 93 4b 12 	sts	0x124B, r24	; 0x80124b <c_flag>

  Joy_X_flag = OFF;
    1cc0:	f5 98       	cbi	0x1e, 5	; 30
  //OLD
  //if (Motor_Z_Pos < (Limit_Pos_Left - (THRD_ACCEL * REPEAt ) * 2))
  //Opti
  int THRD_ACCEL_REPEAt = THRD_ACCEL * REPEAt;
    1cc2:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <THRD_ACCEL>
    1cc6:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    1cca:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    1cce:	84 9f       	mul	r24, r20
    1cd0:	90 01       	movw	r18, r0
    1cd2:	85 9f       	mul	r24, r21
    1cd4:	30 0d       	add	r19, r0
    1cd6:	11 24       	eor	r1, r1
  if (Motor_Z_Pos < (Limit_Pos_Left - THRD_ACCEL_REPEAt * 2))
    1cd8:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    1cdc:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    1ce0:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    1ce4:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    1ce8:	69 01       	movw	r12, r18
    1cea:	cc 0c       	add	r12, r12
    1cec:	dd 1c       	adc	r13, r13
    1cee:	0d 2c       	mov	r0, r13
    1cf0:	00 0c       	add	r0, r0
    1cf2:	ee 08       	sbc	r14, r14
    1cf4:	ff 08       	sbc	r15, r15
    1cf6:	4a 01       	movw	r8, r20
    1cf8:	5b 01       	movw	r10, r22
    1cfa:	8c 18       	sub	r8, r12
    1cfc:	9d 08       	sbc	r9, r13
    1cfe:	ae 08       	sbc	r10, r14
    1d00:	bf 08       	sbc	r11, r15
    1d02:	c0 90 5a 12 	lds	r12, 0x125A	; 0x80125a <Motor_Z_Pos>
    1d06:	d0 90 5b 12 	lds	r13, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    1d0a:	e0 90 5c 12 	lds	r14, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    1d0e:	f0 90 5d 12 	lds	r15, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    1d12:	e0 91 f5 09 	lds	r30, 0x09F5	; 0x8009f5 <Thread_Step>
    1d16:	c8 14       	cp	r12, r8
    1d18:	d9 04       	cpc	r13, r9
    1d1a:	ea 04       	cpc	r14, r10
    1d1c:	fb 04       	cpc	r15, r11
    1d1e:	0c f0       	brlt	.+2      	; 0x1d22 <_Z11Thread_LeftRbS_.part.18.constprop.30+0x7c>
    1d20:	60 c0       	rjmp	.+192    	; 0x1de2 <_Z11Thread_LeftRbS_.part.18.constprop.30+0x13c>
    //-
  {
    Ks_Divisor = Thread_Info[Thread_Step].Ks_Div_Z;
    1d22:	9a e1       	ldi	r25, 0x1A	; 26
    1d24:	e9 9f       	mul	r30, r25
    1d26:	d0 01       	movw	r26, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	a9 53       	subi	r26, 0x39	; 57
    1d2c:	bb 4f       	sbci	r27, 0xFB	; 251
    1d2e:	9c 91       	ld	r25, X
    1d30:	90 93 59 12 	sts	0x1259, r25	; 0x801259 <Ks_Divisor>
    if (tmp_Ks_Divisor != Ks_Divisor)
    1d34:	f0 91 58 12 	lds	r31, 0x1258	; 0x801258 <tmp_Ks_Divisor>
    1d38:	9f 17       	cp	r25, r31
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <_Z11Thread_LeftRbS_.part.18.constprop.30+0xa0>
    {
      //tmp_Accel = THRD_ACCEL + Ks_Divisor;
      //tmp_Ks_Divisor = THRD_ACCEL + Ks_Divisor;
      tmp_Ks_Divisor = tmp_Accel = THRD_ACCEL + Ks_Divisor;               //Opti: короче запись
    1d3c:	89 0f       	add	r24, r25
    1d3e:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <tmp_Accel>
    1d42:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
    }
    //OLD
    //Brake_Compens = THRD_ACCEL * REPEAt + 1;
    //Opti
    Brake_Compens = THRD_ACCEL_REPEAt + 1;
    1d46:	2f 5f       	subi	r18, 0xFF	; 255
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	30 93 56 12 	sts	0x1256, r19	; 0x801256 <Brake_Compens+0x1>
    1d4e:	20 93 55 12 	sts	0x1255, r18	; 0x801255 <Brake_Compens>
    //-
    //Brake_Compens = tmp_Accel - Ks_Divisor + 1;   //Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!!
    Brake_Compens = 1;                                //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
  }

  Km_Divisor = Thread_Info[Thread_Step].Km_Div_Z;
    1d52:	2a e1       	ldi	r18, 0x1A	; 26
    1d54:	e2 9f       	mul	r30, r18
    1d56:	f0 01       	movw	r30, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	e9 53       	subi	r30, 0x39	; 57
    1d5c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d5e:	81 81       	ldd	r24, Z+1	; 0x01
    1d60:	92 81       	ldd	r25, Z+2	; 0x02
    1d62:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <Km_Divisor+0x1>
    1d66:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <Km_Divisor>
  Ks_Count = 0;
    1d6a:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
  Km_Count = 0;
    1d6e:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    1d72:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
  Limit_Pos = Limit_Pos_Left - Brake_Compens;
    1d76:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    1d7a:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    1d7e:	09 2e       	mov	r0, r25
    1d80:	00 0c       	add	r0, r0
    1d82:	aa 0b       	sbc	r26, r26
    1d84:	bb 0b       	sbc	r27, r27
    1d86:	48 1b       	sub	r20, r24
    1d88:	59 0b       	sbc	r21, r25
    1d8a:	6a 0b       	sbc	r22, r26
    1d8c:	7b 0b       	sbc	r23, r27
    1d8e:	40 93 4c 12 	sts	0x124C, r20	; 0x80124c <Limit_Pos>
    1d92:	50 93 4d 12 	sts	0x124D, r21	; 0x80124d <Limit_Pos+0x1>
    1d96:	60 93 4e 12 	sts	0x124E, r22	; 0x80124e <Limit_Pos+0x2>
    1d9a:	70 93 4f 12 	sts	0x124F, r23	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CW;
    1d9e:	f1 98       	cbi	0x1e, 1	; 30
  Motor_Z_CW();
    1da0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    1da4:	8f 7b       	andi	r24, 0xBF	; 191
    1da6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
    1daa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1dae:	84 fd       	sbrc	r24, 4
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <_Z11Thread_LeftRbS_.part.18.constprop.30+0x128>
    1db2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    1db6:	80 61       	ori	r24, 0x10	; 16
    1db8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	9b ed       	ldi	r25, 0xDB	; 219
    1dc0:	25 e0       	ldi	r18, 0x05	; 5
    1dc2:	81 50       	subi	r24, 0x01	; 1
    1dc4:	90 40       	sbci	r25, 0x00	; 0
    1dc6:	20 40       	sbci	r18, 0x00	; 0
    1dc8:	e1 f7       	brne	.-8      	; 0x1dc2 <_Z11Thread_LeftRbS_.part.18.constprop.30+0x11c>
    1dca:	00 c0       	rjmp	.+0      	; 0x1dcc <_Z11Thread_LeftRbS_.part.18.constprop.30+0x126>
    1dcc:	00 00       	nop
  Joy_Z_flag = ON;
    1dce:	f2 9a       	sbi	0x1e, 2	; 30
}
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	08 95       	ret
    //OLD
    //Ks_Divisor = THRD_ACCEL + Thread_Info[0].Ks_Div_Z;
    //tmp_Accel = Ks_Divisor;
    //tmp_Ks_Divisor = Ks_Divisor;
    //Opti
    tmp_Ks_Divisor = tmp_Accel = Ks_Divisor = THRD_ACCEL + Thread_Info[0].Ks_Div_Z;     //Opti: короче запись
    1de2:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <Thread_Info>
    1de6:	89 0f       	add	r24, r25
    1de8:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <Ks_Divisor>
    1dec:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <tmp_Accel>
    1df0:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
    //-
    //Brake_Compens = tmp_Accel - Ks_Divisor + 1;   //Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!!
    Brake_Compens = 1;                                //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    1dfc:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    1e00:	a8 cf       	rjmp	.-176    	; 0x1d52 <_Z11Thread_LeftRbS_.part.18.constprop.30+0xac>

00001e02 <_Z12Thread_RightRbS_.part.19.constprop.29>:
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
  Joy_Z_flag = ON;
}


void Thread_Right(bool & c_flag, bool & d_flag)
    1e02:	8f 92       	push	r8
    1e04:	9f 92       	push	r9
    1e06:	af 92       	push	r10
    1e08:	bf 92       	push	r11
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
{
  if (d_flag == true) return;
  c_flag = false;
    1e12:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
  d_flag = true;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <d_flag>

  Joy_X_flag = OFF;
    1e1c:	f5 98       	cbi	0x1e, 5	; 30
  //OLD
  //if (Motor_Z_Pos > Limit_Pos_Right + THRD_ACCEL * REPEAt * 2 || Motor_Z_Pos <= Limit_Pos_Right)
  //Opti
  int THRD_ACCEL_REPEAt = THRD_ACCEL * REPEAt;
    1e1e:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <THRD_ACCEL>
    1e22:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    1e26:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    1e2a:	84 9f       	mul	r24, r20
    1e2c:	90 01       	movw	r18, r0
    1e2e:	85 9f       	mul	r24, r21
    1e30:	30 0d       	add	r19, r0
    1e32:	11 24       	eor	r1, r1
  if (Motor_Z_Pos > Limit_Pos_Right + THRD_ACCEL_REPEAt * 2 || Motor_Z_Pos <= Limit_Pos_Right)
    1e34:	c0 90 c3 04 	lds	r12, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    1e38:	d0 90 c4 04 	lds	r13, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    1e3c:	e0 90 c5 04 	lds	r14, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    1e40:	f0 90 c6 04 	lds	r15, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    1e44:	80 90 5a 12 	lds	r8, 0x125A	; 0x80125a <Motor_Z_Pos>
    1e48:	90 90 5b 12 	lds	r9, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    1e4c:	a0 90 5c 12 	lds	r10, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    1e50:	b0 90 5d 12 	lds	r11, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    1e54:	a9 01       	movw	r20, r18
    1e56:	44 0f       	add	r20, r20
    1e58:	55 1f       	adc	r21, r21
    1e5a:	05 2e       	mov	r0, r21
    1e5c:	00 0c       	add	r0, r0
    1e5e:	66 0b       	sbc	r22, r22
    1e60:	77 0b       	sbc	r23, r23
    1e62:	4c 0d       	add	r20, r12
    1e64:	5d 1d       	adc	r21, r13
    1e66:	6e 1d       	adc	r22, r14
    1e68:	7f 1d       	adc	r23, r15
    1e6a:	e0 91 f5 09 	lds	r30, 0x09F5	; 0x8009f5 <Thread_Step>
    1e6e:	48 15       	cp	r20, r8
    1e70:	59 05       	cpc	r21, r9
    1e72:	6a 05       	cpc	r22, r10
    1e74:	7b 05       	cpc	r23, r11
    1e76:	34 f0       	brlt	.+12     	; 0x1e84 <_Z12Thread_RightRbS_.part.19.constprop.29+0x82>
    1e78:	c8 14       	cp	r12, r8
    1e7a:	d9 04       	cpc	r13, r9
    1e7c:	ea 04       	cpc	r14, r10
    1e7e:	fb 04       	cpc	r15, r11
    1e80:	0c f4       	brge	.+2      	; 0x1e84 <_Z12Thread_RightRbS_.part.19.constprop.29+0x82>
    1e82:	60 c0       	rjmp	.+192    	; 0x1f44 <_Z12Thread_RightRbS_.part.19.constprop.29+0x142>
    //-
  {
    Ks_Divisor = Thread_Info[Thread_Step].Ks_Div_Z;
    1e84:	9a e1       	ldi	r25, 0x1A	; 26
    1e86:	e9 9f       	mul	r30, r25
    1e88:	d0 01       	movw	r26, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	a9 53       	subi	r26, 0x39	; 57
    1e8e:	bb 4f       	sbci	r27, 0xFB	; 251
    1e90:	9c 91       	ld	r25, X
    1e92:	90 93 59 12 	sts	0x1259, r25	; 0x801259 <Ks_Divisor>
    if (tmp_Ks_Divisor != Ks_Divisor)
    1e96:	40 91 58 12 	lds	r20, 0x1258	; 0x801258 <tmp_Ks_Divisor>
    1e9a:	94 17       	cp	r25, r20
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <_Z12Thread_RightRbS_.part.19.constprop.29+0xa6>
    {
      //tmp_Accel = THRD_ACCEL + Ks_Divisor;
      //tmp_Ks_Divisor = THRD_ACCEL + Ks_Divisor;
      tmp_Ks_Divisor = tmp_Accel = THRD_ACCEL + Ks_Divisor;               //Opti: короче запись
    1e9e:	89 0f       	add	r24, r25
    1ea0:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <tmp_Accel>
    1ea4:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
    }
    //Brake_Compens = THRD_ACCEL * REPEAt + 1;
    Brake_Compens = THRD_ACCEL_REPEAt + 1;                                //Opti: короче запись
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	30 93 56 12 	sts	0x1256, r19	; 0x801256 <Brake_Compens+0x1>
    1eb0:	20 93 55 12 	sts	0x1255, r18	; 0x801255 <Brake_Compens>
    //Opti
    Brake_Compens = 1;                                                            //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    //-
  }

  Km_Divisor = Thread_Info[Thread_Step].Km_Div_Z;
    1eb4:	2a e1       	ldi	r18, 0x1A	; 26
    1eb6:	e2 9f       	mul	r30, r18
    1eb8:	f0 01       	movw	r30, r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	e9 53       	subi	r30, 0x39	; 57
    1ebe:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec0:	81 81       	ldd	r24, Z+1	; 0x01
    1ec2:	92 81       	ldd	r25, Z+2	; 0x02
    1ec4:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <Km_Divisor+0x1>
    1ec8:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <Km_Divisor>
  Ks_Count = 0;
    1ecc:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
  Km_Count = 0;
    1ed0:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    1ed4:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
  Limit_Pos = Limit_Pos_Right + Brake_Compens;
    1ed8:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    1edc:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    1ee0:	09 2e       	mov	r0, r25
    1ee2:	00 0c       	add	r0, r0
    1ee4:	aa 0b       	sbc	r26, r26
    1ee6:	bb 0b       	sbc	r27, r27
    1ee8:	8c 0d       	add	r24, r12
    1eea:	9d 1d       	adc	r25, r13
    1eec:	ae 1d       	adc	r26, r14
    1eee:	bf 1d       	adc	r27, r15
    1ef0:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    1ef4:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    1ef8:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    1efc:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CCW;
    1f00:	f1 9a       	sbi	0x1e, 1	; 30
  Motor_Z_CCW();
    1f02:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    1f06:	80 64       	ori	r24, 0x40	; 64
    1f08:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
    1f0c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1f10:	84 fd       	sbrc	r24, 4
    1f12:	0e c0       	rjmp	.+28     	; 0x1f30 <_Z12Thread_RightRbS_.part.19.constprop.29+0x12e>
    1f14:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    1f18:	80 61       	ori	r24, 0x10	; 16
    1f1a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    1f1e:	8f ef       	ldi	r24, 0xFF	; 255
    1f20:	9b ed       	ldi	r25, 0xDB	; 219
    1f22:	25 e0       	ldi	r18, 0x05	; 5
    1f24:	81 50       	subi	r24, 0x01	; 1
    1f26:	90 40       	sbci	r25, 0x00	; 0
    1f28:	20 40       	sbci	r18, 0x00	; 0
    1f2a:	e1 f7       	brne	.-8      	; 0x1f24 <_Z12Thread_RightRbS_.part.19.constprop.29+0x122>
    1f2c:	00 c0       	rjmp	.+0      	; 0x1f2e <_Z12Thread_RightRbS_.part.19.constprop.29+0x12c>
    1f2e:	00 00       	nop
  Joy_Z_flag = ON;
    1f30:	f2 9a       	sbi	0x1e, 2	; 30
}
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	bf 90       	pop	r11
    1f3c:	af 90       	pop	r10
    1f3e:	9f 90       	pop	r9
    1f40:	8f 90       	pop	r8
    1f42:	08 95       	ret
    //OLD
    //Ks_Divisor = THRD_ACCEL + Thread_Info[0].Ks_Div_Z;
    //tmp_Accel = Ks_Divisor;
    //tmp_Ks_Divisor = Ks_Divisor;
    //Opti
    tmp_Ks_Divisor = tmp_Accel = Ks_Divisor = THRD_ACCEL + Thread_Info[0].Ks_Div_Z;   //Opti: короче запись
    1f44:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <Thread_Info>
    1f48:	89 0f       	add	r24, r25
    1f4a:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <Ks_Divisor>
    1f4e:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <tmp_Accel>
    1f52:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
    //OLD
    //Brake_Compens = tmp_Accel - Ks_Divisor + 1;                                  //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    //Opti
    Brake_Compens = 1;                                                            //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    1f5e:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    1f62:	a8 cf       	rjmp	.-176    	; 0x1eb4 <_Z12Thread_RightRbS_.part.19.constprop.29+0xb2>

00001f64 <_Z12Thread_FrontRbS_.part.20.constprop.28>:
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
  Joy_Z_flag = ON;
}


void Thread_Front(bool & c_flag, bool & d_flag)
    1f64:	4f 92       	push	r4
    1f66:	5f 92       	push	r5
    1f68:	6f 92       	push	r6
    1f6a:	7f 92       	push	r7
    1f6c:	8f 92       	push	r8
    1f6e:	9f 92       	push	r9
    1f70:	af 92       	push	r10
    1f72:	bf 92       	push	r11
    1f74:	cf 92       	push	r12
    1f76:	df 92       	push	r13
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
{
  if (c_flag == true) return;
  d_flag = false;
    1f82:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
  c_flag = true;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 4b 12 	sts	0x124B, r24	; 0x80124b <c_flag>

  Joy_Z_flag = OFF;
    1f8c:	f2 98       	cbi	0x1e, 2	; 30
  //OLD
  //if (Motor_X_Pos < (Limit_Pos_Front - (THRD_ACCEL * REPEAt) * 2))
  //Opti
  int THRD_ACCEL_REPEAt = THRD_ACCEL * REPEAt;
    1f8e:	c0 91 fc 09 	lds	r28, 0x09FC	; 0x8009fc <THRD_ACCEL>
    1f92:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
    1f96:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
    1f9a:	c8 9f       	mul	r28, r24
    1f9c:	80 01       	movw	r16, r0
    1f9e:	c9 9f       	mul	r28, r25
    1fa0:	10 0d       	add	r17, r0
    1fa2:	11 24       	eor	r1, r1
  if (Motor_X_Pos < (Limit_Pos_Front - THRD_ACCEL_REPEAt * 2))
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	09 2e       	mov	r0, r25
    1fac:	00 0c       	add	r0, r0
    1fae:	aa 0b       	sbc	r26, r26
    1fb0:	bb 0b       	sbc	r27, r27
    1fb2:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    1fb6:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    1fba:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    1fbe:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    1fc2:	b7 01       	movw	r22, r14
    1fc4:	a6 01       	movw	r20, r12
    1fc6:	48 1b       	sub	r20, r24
    1fc8:	59 0b       	sbc	r21, r25
    1fca:	6a 0b       	sbc	r22, r26
    1fcc:	7b 0b       	sbc	r23, r27
    1fce:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    1fd2:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    1fd6:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    1fda:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    1fde:	84 17       	cp	r24, r20
    1fe0:	95 07       	cpc	r25, r21
    1fe2:	a6 07       	cpc	r26, r22
    1fe4:	b7 07       	cpc	r27, r23
    1fe6:	0c f0       	brlt	.+2      	; 0x1fea <_Z12Thread_FrontRbS_.part.20.constprop.28+0x86>
    1fe8:	c4 c0       	rjmp	.+392    	; 0x2172 <_Z12Thread_FrontRbS_.part.20.constprop.28+0x20e>
    1fea:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Thread_Step>
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    //-
  {

    if (Sub_Mode_Thread == Sub_Mode_Thread_Man) {
    1ff0:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <Sub_Mode_Thread>
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <_Z12Thread_FrontRbS_.part.20.constprop.28+0x96>
    1ff8:	65 c0       	rjmp	.+202    	; 0x20c4 <_Z12Thread_FrontRbS_.part.20.constprop.28+0x160>
      Ks_Divisor = Thread_Info[Thread_Step].Ks_Div_X;
    1ffa:	2a e1       	ldi	r18, 0x1A	; 26
    1ffc:	28 9f       	mul	r18, r24
    1ffe:	f0 01       	movw	r30, r0
    2000:	29 9f       	mul	r18, r25
    2002:	f0 0d       	add	r31, r0
    2004:	11 24       	eor	r1, r1
    2006:	e9 53       	subi	r30, 0x39	; 57
    2008:	fb 4f       	sbci	r31, 0xFB	; 251
    200a:	83 81       	ldd	r24, Z+3	; 0x03
    200c:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <Ks_Divisor>
      Km_Divisor = Thread_Info[Thread_Step].Km_Div_X;
    2010:	84 81       	ldd	r24, Z+4	; 0x04
    2012:	95 81       	ldd	r25, Z+5	; 0x05
    2014:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <Km_Divisor+0x1>
    2018:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <Km_Divisor>
      Ks_Divisor = (Thread_Info[Thread_Step].Ks_Div_Z + (float)(Thread_Info[Thread_Step].Km_Div_Z + 5000) / 10000) * ((float)McSTEP_Z / McSTEP_X);
      Km_Divisor = 0;
      //-
    }

    if (tmp_Ks_Divisor != Ks_Divisor)
    201c:	80 91 59 12 	lds	r24, 0x1259	; 0x801259 <Ks_Divisor>
    2020:	90 91 58 12 	lds	r25, 0x1258	; 0x801258 <tmp_Ks_Divisor>
    2024:	98 17       	cp	r25, r24
    2026:	29 f0       	breq	.+10     	; 0x2032 <_Z12Thread_FrontRbS_.part.20.constprop.28+0xce>
    {
      //OLD
      //tmp_Accel = THRD_ACCEL + Ks_Divisor;
      //tmp_Ks_Divisor = THRD_ACCEL + Ks_Divisor;
      //Opti
      tmp_Ks_Divisor = tmp_Accel = THRD_ACCEL + Ks_Divisor;                  //Opti: короче запись
    2028:	c8 0f       	add	r28, r24
    202a:	c0 93 57 12 	sts	0x1257, r28	; 0x801257 <tmp_Accel>
    202e:	c0 93 58 12 	sts	0x1258, r28	; 0x801258 <tmp_Ks_Divisor>
      //-
    }
    //OLD
    //Brake_Compens = THRD_ACCEL * REPEAt + 1;
    //Opti
    Brake_Compens = THRD_ACCEL_REPEAt + 1;
    2032:	0f 5f       	subi	r16, 0xFF	; 255
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	10 93 56 12 	sts	0x1256, r17	; 0x801256 <Brake_Compens+0x1>
    203a:	00 93 55 12 	sts	0x1255, r16	; 0x801255 <Brake_Compens>
    //Opti
    Brake_Compens = 1;                                                            //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    //-
  }

  Ks_Count = 0;
    203e:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
  Km_Count = 0;
    2042:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    2046:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
  Limit_Pos = Limit_Pos_Front - Brake_Compens;
    204a:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    204e:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    2052:	09 2e       	mov	r0, r25
    2054:	00 0c       	add	r0, r0
    2056:	aa 0b       	sbc	r26, r26
    2058:	bb 0b       	sbc	r27, r27
    205a:	c8 1a       	sub	r12, r24
    205c:	d9 0a       	sbc	r13, r25
    205e:	ea 0a       	sbc	r14, r26
    2060:	fb 0a       	sbc	r15, r27
    2062:	c0 92 4c 12 	sts	0x124C, r12	; 0x80124c <Limit_Pos>
    2066:	d0 92 4d 12 	sts	0x124D, r13	; 0x80124d <Limit_Pos+0x1>
    206a:	e0 92 4e 12 	sts	0x124E, r14	; 0x80124e <Limit_Pos+0x2>
    206e:	f0 92 4f 12 	sts	0x124F, r15	; 0x80124f <Limit_Pos+0x3>

  Motor_X_Dir = CW;
    2072:	f4 98       	cbi	0x1e, 4	; 30
  Motor_X_CW();
    2074:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2078:	8f 7d       	andi	r24, 0xDF	; 223
    207a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_X_Ena_State == false) Motor_X_Enable();
    207e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2082:	83 fd       	sbrc	r24, 3
    2084:	0e c0       	rjmp	.+28     	; 0x20a2 <_Z12Thread_FrontRbS_.part.20.constprop.28+0x13e>
    2086:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    208a:	88 60       	ori	r24, 0x08	; 8
    208c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2090:	ff ef       	ldi	r31, 0xFF	; 255
    2092:	2b ed       	ldi	r18, 0xDB	; 219
    2094:	85 e0       	ldi	r24, 0x05	; 5
    2096:	f1 50       	subi	r31, 0x01	; 1
    2098:	20 40       	sbci	r18, 0x00	; 0
    209a:	80 40       	sbci	r24, 0x00	; 0
    209c:	e1 f7       	brne	.-8      	; 0x2096 <_Z12Thread_FrontRbS_.part.20.constprop.28+0x132>
    209e:	00 c0       	rjmp	.+0      	; 0x20a0 <_Z12Thread_FrontRbS_.part.20.constprop.28+0x13c>
    20a0:	00 00       	nop
  Joy_X_flag = ON;
    20a2:	f5 9a       	sbi	0x1e, 5	; 30
}
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
    20ae:	df 90       	pop	r13
    20b0:	cf 90       	pop	r12
    20b2:	bf 90       	pop	r11
    20b4:	af 90       	pop	r10
    20b6:	9f 90       	pop	r9
    20b8:	8f 90       	pop	r8
    20ba:	7f 90       	pop	r7
    20bc:	6f 90       	pop	r6
    20be:	5f 90       	pop	r5
    20c0:	4f 90       	pop	r4
    20c2:	08 95       	ret
      //Ks_Divisor = Thread_Info[Thread_Step].Ks_Div_Z;
      //Km_Divisor = Thread_Info[Thread_Step].Km_Div_Z;
      //Ks_Divisor = (Ks_Divisor + (float)(Km_Divisor + 5000) / 10000) * ((float)McSTEP_Z / McSTEP_X);
      //Km_Divisor = 0;
      //Opti: короче запись
      Ks_Divisor = (Thread_Info[Thread_Step].Ks_Div_Z + (float)(Thread_Info[Thread_Step].Km_Div_Z + 5000) / 10000) * ((float)McSTEP_Z / McSTEP_X);
    20c4:	4a e1       	ldi	r20, 0x1A	; 26
    20c6:	48 9f       	mul	r20, r24
    20c8:	90 01       	movw	r18, r0
    20ca:	49 9f       	mul	r20, r25
    20cc:	30 0d       	add	r19, r0
    20ce:	11 24       	eor	r1, r1
    20d0:	c9 01       	movw	r24, r18
    20d2:	89 53       	subi	r24, 0x39	; 57
    20d4:	9b 4f       	sbci	r25, 0xFB	; 251
    20d6:	5c 01       	movw	r10, r24
    20d8:	fc 01       	movw	r30, r24
    20da:	61 81       	ldd	r22, Z+1	; 0x01
    20dc:	72 81       	ldd	r23, Z+2	; 0x02
    20de:	68 57       	subi	r22, 0x78	; 120
    20e0:	7c 4e       	sbci	r23, 0xEC	; 236
    20e2:	07 2e       	mov	r0, r23
    20e4:	00 0c       	add	r0, r0
    20e6:	88 0b       	sbc	r24, r24
    20e8:	99 0b       	sbc	r25, r25
    20ea:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e4       	ldi	r19, 0x40	; 64
    20f2:	4c e1       	ldi	r20, 0x1C	; 28
    20f4:	56 e4       	ldi	r21, 0x46	; 70
    20f6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    20fa:	2b 01       	movw	r4, r22
    20fc:	3c 01       	movw	r6, r24
    20fe:	f5 01       	movw	r30, r10
    2100:	60 81       	ld	r22, Z
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
    2110:	c3 01       	movw	r24, r6
    2112:	b2 01       	movw	r22, r4
    2114:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    2118:	4b 01       	movw	r8, r22
    211a:	5c 01       	movw	r10, r24
    211c:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    2120:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    2124:	07 2e       	mov	r0, r23
    2126:	00 0c       	add	r0, r0
    2128:	88 0b       	sbc	r24, r24
    212a:	99 0b       	sbc	r25, r25
    212c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2130:	2b 01       	movw	r4, r22
    2132:	3c 01       	movw	r6, r24
    2134:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    2138:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    213c:	07 2e       	mov	r0, r23
    213e:	00 0c       	add	r0, r0
    2140:	88 0b       	sbc	r24, r24
    2142:	99 0b       	sbc	r25, r25
    2144:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2148:	9b 01       	movw	r18, r22
    214a:	ac 01       	movw	r20, r24
    214c:	c3 01       	movw	r24, r6
    214e:	b2 01       	movw	r22, r4
    2150:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2154:	9b 01       	movw	r18, r22
    2156:	ac 01       	movw	r20, r24
    2158:	c5 01       	movw	r24, r10
    215a:	b4 01       	movw	r22, r8
    215c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    2160:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    2164:	60 93 59 12 	sts	0x1259, r22	; 0x801259 <Ks_Divisor>
      Km_Divisor = 0;
    2168:	10 92 54 12 	sts	0x1254, r1	; 0x801254 <Km_Divisor+0x1>
    216c:	10 92 53 12 	sts	0x1253, r1	; 0x801253 <Km_Divisor>
    2170:	55 cf       	rjmp	.-342    	; 0x201c <_Z12Thread_FrontRbS_.part.20.constprop.28+0xb8>
    //Ks_Divisor = THRD_ACCEL + Thread_Info[0].Ks_Div_X;
    //Km_Divisor = 0;
    //tmp_Accel = Ks_Divisor;
    //tmp_Ks_Divisor = Ks_Divisor;
    //Opti                                                                    //Opti: короче запись
    tmp_Ks_Divisor = tmp_Accel = Ks_Divisor = THRD_ACCEL + Thread_Info[0].Ks_Div_X;
    2172:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Thread_Info+0x3>
    2176:	c8 0f       	add	r28, r24
    2178:	c0 93 59 12 	sts	0x1259, r28	; 0x801259 <Ks_Divisor>
    217c:	c0 93 57 12 	sts	0x1257, r28	; 0x801257 <tmp_Accel>
    2180:	c0 93 58 12 	sts	0x1258, r28	; 0x801258 <tmp_Ks_Divisor>
    Km_Divisor = 0;
    2184:	10 92 54 12 	sts	0x1254, r1	; 0x801254 <Km_Divisor+0x1>
    2188:	10 92 53 12 	sts	0x1253, r1	; 0x801253 <Km_Divisor>
    //-
    //OLD
    //Brake_Compens = tmp_Accel - Ks_Divisor + 1;                                  //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    //Opti
    Brake_Compens = 1;                                                            //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    2194:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    2198:	52 cf       	rjmp	.-348    	; 0x203e <_Z12Thread_FrontRbS_.part.20.constprop.28+0xda>

0000219a <_Z12Thread_FrontRbS_.constprop.5>:
}


void Thread_Front(bool & c_flag, bool & d_flag)
{
  if (c_flag == true) return;
    219a:	80 91 4b 12 	lds	r24, 0x124B	; 0x80124b <c_flag>
    219e:	81 11       	cpse	r24, r1
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <_Z12Thread_FrontRbS_.constprop.5+0xa>
    21a2:	e0 ce       	rjmp	.-576    	; 0x1f64 <_Z12Thread_FrontRbS_.part.20.constprop.28>

  Motor_X_Dir = CW;
  Motor_X_CW();
  if (Read_X_Ena_State == false) Motor_X_Enable();
  Joy_X_flag = ON;
}
    21a4:	08 95       	ret

000021a6 <_Z11Thread_RearRbS_.part.21.constprop.27>:


void Thread_Rear(bool & c_flag, bool & d_flag)
    21a6:	4f 92       	push	r4
    21a8:	5f 92       	push	r5
    21aa:	6f 92       	push	r6
    21ac:	7f 92       	push	r7
    21ae:	8f 92       	push	r8
    21b0:	9f 92       	push	r9
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
{
  if (d_flag == true) return;
  c_flag = false;
    21c4:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
  d_flag = true;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <d_flag>

  Joy_Z_flag = OFF;
    21ce:	f2 98       	cbi	0x1e, 2	; 30
  //OLD
  //if (Motor_X_Pos > (Limit_Pos_Rear + (THRD_ACCEL * REPEAt) * 2))
  //Opti
  int THRD_ACCEL_REPEAt = THRD_ACCEL * REPEAt;
    21d0:	c0 91 fc 09 	lds	r28, 0x09FC	; 0x8009fc <THRD_ACCEL>
    21d4:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
    21d8:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
    21dc:	c8 9f       	mul	r28, r24
    21de:	80 01       	movw	r16, r0
    21e0:	c9 9f       	mul	r28, r25
    21e2:	10 0d       	add	r17, r0
    21e4:	11 24       	eor	r1, r1
  if (Motor_X_Pos > (Limit_Pos_Rear + THRD_ACCEL_REPEAt * 2))
    21e6:	c8 01       	movw	r24, r16
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	09 2e       	mov	r0, r25
    21ee:	00 0c       	add	r0, r0
    21f0:	aa 0b       	sbc	r26, r26
    21f2:	bb 0b       	sbc	r27, r27
    21f4:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    21f8:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    21fc:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    2200:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    2204:	8c 0d       	add	r24, r12
    2206:	9d 1d       	adc	r25, r13
    2208:	ae 1d       	adc	r26, r14
    220a:	bf 1d       	adc	r27, r15
    220c:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    2210:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    2214:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    2218:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    221c:	84 17       	cp	r24, r20
    221e:	95 07       	cpc	r25, r21
    2220:	a6 07       	cpc	r26, r22
    2222:	b7 07       	cpc	r27, r23
    2224:	0c f0       	brlt	.+2      	; 0x2228 <__stack+0x29>
    2226:	c4 c0       	rjmp	.+392    	; 0x23b0 <__stack+0x1b1>
    2228:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Thread_Step>
    222c:	90 e0       	ldi	r25, 0x00	; 0
    //-
  {
    if (Sub_Mode_Thread == Sub_Mode_Thread_Man) {
    222e:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <Sub_Mode_Thread>
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	09 f0       	breq	.+2      	; 0x2238 <__stack+0x39>
    2236:	65 c0       	rjmp	.+202    	; 0x2302 <__stack+0x103>
      Ks_Divisor = Thread_Info[Thread_Step].Ks_Div_X;
    2238:	2a e1       	ldi	r18, 0x1A	; 26
    223a:	28 9f       	mul	r18, r24
    223c:	f0 01       	movw	r30, r0
    223e:	29 9f       	mul	r18, r25
    2240:	f0 0d       	add	r31, r0
    2242:	11 24       	eor	r1, r1
    2244:	e9 53       	subi	r30, 0x39	; 57
    2246:	fb 4f       	sbci	r31, 0xFB	; 251
    2248:	83 81       	ldd	r24, Z+3	; 0x03
    224a:	80 93 59 12 	sts	0x1259, r24	; 0x801259 <Ks_Divisor>
      Km_Divisor = Thread_Info[Thread_Step].Km_Div_X;
    224e:	84 81       	ldd	r24, Z+4	; 0x04
    2250:	95 81       	ldd	r25, Z+5	; 0x05
    2252:	90 93 54 12 	sts	0x1254, r25	; 0x801254 <Km_Divisor+0x1>
    2256:	80 93 53 12 	sts	0x1253, r24	; 0x801253 <Km_Divisor>
      //Opti                  //Opti: короче запись
      Ks_Divisor = (Thread_Info[Thread_Step].Ks_Div_Z + (float)(Thread_Info[Thread_Step].Km_Div_Z + 5000) / 10000) * ((float)McSTEP_Z / McSTEP_X);
      Km_Divisor = 0;
      //-
    }
    if (tmp_Ks_Divisor != Ks_Divisor)
    225a:	80 91 59 12 	lds	r24, 0x1259	; 0x801259 <Ks_Divisor>
    225e:	90 91 58 12 	lds	r25, 0x1258	; 0x801258 <tmp_Ks_Divisor>
    2262:	98 17       	cp	r25, r24
    2264:	29 f0       	breq	.+10     	; 0x2270 <__stack+0x71>
    {
      //OLD
      //tmp_Accel = THRD_ACCEL + Ks_Divisor;
      //tmp_Ks_Divisor = THRD_ACCEL + Ks_Divisor;
      //Opti
      tmp_Ks_Divisor = tmp_Accel = THRD_ACCEL + Ks_Divisor;                  //Opti: короче запись
    2266:	c8 0f       	add	r28, r24
    2268:	c0 93 57 12 	sts	0x1257, r28	; 0x801257 <tmp_Accel>
    226c:	c0 93 58 12 	sts	0x1258, r28	; 0x801258 <tmp_Ks_Divisor>
      //-
    }
    //OLD
    //Brake_Compens = THRD_ACCEL * REPEAt + 1;
    //Opti
    Brake_Compens = THRD_ACCEL_REPEAt + 1;                  //Opti: короче запись
    2270:	0f 5f       	subi	r16, 0xFF	; 255
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	10 93 56 12 	sts	0x1256, r17	; 0x801256 <Brake_Compens+0x1>
    2278:	00 93 55 12 	sts	0x1255, r16	; 0x801255 <Brake_Compens>
    Km_Divisor = 0;
    Brake_Compens = 1;                                                                  //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    //-
  }

  Ks_Count = 0;
    227c:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
  Km_Count = 0;
    2280:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    2284:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
  Limit_Pos = Limit_Pos_Rear + Brake_Compens;
    2288:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    228c:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    2290:	09 2e       	mov	r0, r25
    2292:	00 0c       	add	r0, r0
    2294:	aa 0b       	sbc	r26, r26
    2296:	bb 0b       	sbc	r27, r27
    2298:	8c 0d       	add	r24, r12
    229a:	9d 1d       	adc	r25, r13
    229c:	ae 1d       	adc	r26, r14
    229e:	bf 1d       	adc	r27, r15
    22a0:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    22a4:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    22a8:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    22ac:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_X_Dir = CCW;
    22b0:	f4 9a       	sbi	0x1e, 4	; 30
  Motor_X_CCW();
    22b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    22b6:	80 62       	ori	r24, 0x20	; 32
    22b8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_X_Ena_State == false) Motor_X_Enable();
    22bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    22c0:	83 fd       	sbrc	r24, 3
    22c2:	0e c0       	rjmp	.+28     	; 0x22e0 <__stack+0xe1>
    22c4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    22c8:	88 60       	ori	r24, 0x08	; 8
    22ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    22ce:	ff ef       	ldi	r31, 0xFF	; 255
    22d0:	2b ed       	ldi	r18, 0xDB	; 219
    22d2:	85 e0       	ldi	r24, 0x05	; 5
    22d4:	f1 50       	subi	r31, 0x01	; 1
    22d6:	20 40       	sbci	r18, 0x00	; 0
    22d8:	80 40       	sbci	r24, 0x00	; 0
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <__stack+0xd5>
    22dc:	00 c0       	rjmp	.+0      	; 0x22de <__stack+0xdf>
    22de:	00 00       	nop
  Joy_X_flag = ON;
    22e0:	f5 9a       	sbi	0x1e, 5	; 30
}
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    22ec:	df 90       	pop	r13
    22ee:	cf 90       	pop	r12
    22f0:	bf 90       	pop	r11
    22f2:	af 90       	pop	r10
    22f4:	9f 90       	pop	r9
    22f6:	8f 90       	pop	r8
    22f8:	7f 90       	pop	r7
    22fa:	6f 90       	pop	r6
    22fc:	5f 90       	pop	r5
    22fe:	4f 90       	pop	r4
    2300:	08 95       	ret
      //Ks_Divisor = Thread_Info[Thread_Step].Ks_Div_Z;
      //Km_Divisor = Thread_Info[Thread_Step].Km_Div_Z;
      //Ks_Divisor = (Ks_Divisor + (float)(Km_Divisor + 5000) / 10000) * ((float)McSTEP_Z / McSTEP_X);
      //Km_Divisor = 0;
      //Opti                  //Opti: короче запись
      Ks_Divisor = (Thread_Info[Thread_Step].Ks_Div_Z + (float)(Thread_Info[Thread_Step].Km_Div_Z + 5000) / 10000) * ((float)McSTEP_Z / McSTEP_X);
    2302:	4a e1       	ldi	r20, 0x1A	; 26
    2304:	48 9f       	mul	r20, r24
    2306:	90 01       	movw	r18, r0
    2308:	49 9f       	mul	r20, r25
    230a:	30 0d       	add	r19, r0
    230c:	11 24       	eor	r1, r1
    230e:	c9 01       	movw	r24, r18
    2310:	89 53       	subi	r24, 0x39	; 57
    2312:	9b 4f       	sbci	r25, 0xFB	; 251
    2314:	5c 01       	movw	r10, r24
    2316:	fc 01       	movw	r30, r24
    2318:	61 81       	ldd	r22, Z+1	; 0x01
    231a:	72 81       	ldd	r23, Z+2	; 0x02
    231c:	68 57       	subi	r22, 0x78	; 120
    231e:	7c 4e       	sbci	r23, 0xEC	; 236
    2320:	07 2e       	mov	r0, r23
    2322:	00 0c       	add	r0, r0
    2324:	88 0b       	sbc	r24, r24
    2326:	99 0b       	sbc	r25, r25
    2328:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e4       	ldi	r19, 0x40	; 64
    2330:	4c e1       	ldi	r20, 0x1C	; 28
    2332:	56 e4       	ldi	r21, 0x46	; 70
    2334:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2338:	2b 01       	movw	r4, r22
    233a:	3c 01       	movw	r6, r24
    233c:	f5 01       	movw	r30, r10
    233e:	60 81       	ld	r22, Z
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	c3 01       	movw	r24, r6
    2350:	b2 01       	movw	r22, r4
    2352:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    2356:	4b 01       	movw	r8, r22
    2358:	5c 01       	movw	r10, r24
    235a:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    235e:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    2362:	07 2e       	mov	r0, r23
    2364:	00 0c       	add	r0, r0
    2366:	88 0b       	sbc	r24, r24
    2368:	99 0b       	sbc	r25, r25
    236a:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    236e:	2b 01       	movw	r4, r22
    2370:	3c 01       	movw	r6, r24
    2372:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    2376:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    237a:	07 2e       	mov	r0, r23
    237c:	00 0c       	add	r0, r0
    237e:	88 0b       	sbc	r24, r24
    2380:	99 0b       	sbc	r25, r25
    2382:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2386:	9b 01       	movw	r18, r22
    2388:	ac 01       	movw	r20, r24
    238a:	c3 01       	movw	r24, r6
    238c:	b2 01       	movw	r22, r4
    238e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2392:	9b 01       	movw	r18, r22
    2394:	ac 01       	movw	r20, r24
    2396:	c5 01       	movw	r24, r10
    2398:	b4 01       	movw	r22, r8
    239a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    239e:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    23a2:	60 93 59 12 	sts	0x1259, r22	; 0x801259 <Ks_Divisor>
      Km_Divisor = 0;
    23a6:	10 92 54 12 	sts	0x1254, r1	; 0x801254 <Km_Divisor+0x1>
    23aa:	10 92 53 12 	sts	0x1253, r1	; 0x801253 <Km_Divisor>
    23ae:	55 cf       	rjmp	.-342    	; 0x225a <__stack+0x5b>
    //Km_Divisor = 0;
    //tmp_Accel = Ks_Divisor;
    //tmp_Ks_Divisor = Ks_Divisor;
    //Brake_Compens = tmp_Accel - Ks_Divisor + 1;
    //Opti
    Ks_Divisor = tmp_Ks_Divisor = tmp_Accel = THRD_ACCEL + Thread_Info[0].Ks_Div_X;     //Opti: короче запись
    23b0:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Thread_Info+0x3>
    23b4:	c8 0f       	add	r28, r24
    23b6:	c0 93 57 12 	sts	0x1257, r28	; 0x801257 <tmp_Accel>
    23ba:	c0 93 58 12 	sts	0x1258, r28	; 0x801258 <tmp_Ks_Divisor>
    23be:	c0 93 59 12 	sts	0x1259, r28	; 0x801259 <Ks_Divisor>
    Km_Divisor = 0;
    23c2:	10 92 54 12 	sts	0x1254, r1	; 0x801254 <Km_Divisor+0x1>
    23c6:	10 92 53 12 	sts	0x1253, r1	; 0x801253 <Km_Divisor>
    Brake_Compens = 1;                                                                  //Opti: Оп. что за нелогичность? tmp_Accel - Ks_Divisor = 0!!! Brake_Compens всегда 1
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    23d2:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
}


void Thread_Rear(bool & c_flag, bool & d_flag)
{
  if (d_flag == true) return;
    23d6:	52 cf       	rjmp	.-348    	; 0x227c <__stack+0x7d>

000023d8 <_Z11Thread_RearRbS_.constprop.4>:
    23d8:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <d_flag>
    23dc:	81 11       	cpse	r24, r1
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <_Z11Thread_RearRbS_.constprop.4+0xa>
    23e0:	e2 ce       	rjmp	.-572    	; 0x21a6 <_Z11Thread_RearRbS_.part.21.constprop.27>

  Motor_X_Dir = CCW;
  Motor_X_CCW();
  if (Read_X_Ena_State == false) Motor_X_Enable();
  Joy_X_flag = ON;
}
    23e2:	08 95       	ret

000023e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>:
//==============================================================================================================================================================================================================
void NEW_Cone_Left(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    23e4:	2f 92       	push	r2
    23e6:	3f 92       	push	r3
    23e8:	4f 92       	push	r4
    23ea:	5f 92       	push	r5
    23ec:	6f 92       	push	r6
    23ee:	7f 92       	push	r7
    23f0:	8f 92       	push	r8
    23f2:	9f 92       	push	r9
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	00 d0       	rcall	.+0      	; 0x240a <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x26>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	89 83       	std	Y+1, r24	; 0x01
{
  //Timer4_Init()

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	09 f0       	breq	.+2      	; 0x2416 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x32>
    2414:	c3 c0       	rjmp	.+390    	; 0x259c <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x1b8>
  {
    if (a_flag == true) return;
    2416:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    241a:	81 11       	cpse	r24, r1
    241c:	a9 c0       	rjmp	.+338    	; 0x2570 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x18c>
    a_flag = true;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    b_flag = false;
    2424:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (Z_WORKING_RAPID_FLAG == OFF)
    2428:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    242c:	81 11       	cpse	r24, r1
    242e:	0c c0       	rjmp	.+24     	; 0x2448 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x64>
    {
      OCR4A = max_OCR4A = (unsigned int)MIN_RAPID_MOTION;
    2430:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    2434:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    2438:	90 93 44 12 	sts	0x1244, r25	; 0x801244 <max_OCR4A+0x1>
    243c:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <max_OCR4A>
    2440:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2444:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    2448:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    244c:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    2450:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    2454:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    2458:	28 1b       	sub	r18, r24
    245a:	39 0b       	sbc	r19, r25
    245c:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    2460:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    2464:	24 9f       	mul	r18, r20
    2466:	c0 01       	movw	r24, r0
    2468:	25 9f       	mul	r18, r21
    246a:	90 0d       	add	r25, r0
    246c:	34 9f       	mul	r19, r20
    246e:	90 0d       	add	r25, r0
    2470:	11 24       	eor	r1, r1
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    2478:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    Cs_Count = 0;                               //Счётчик конуса текущий - целая часть
    247c:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <Cs_Count>
    Cm_Count = 0;                               //Счётчик конуса текущий - десятитысячная дробная часть
    2480:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <Cm_Count+0x1>
    2484:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <Cm_Count>
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      OCR4A = Start_Speed;                                      //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    }
    Brake_Compens = max_OCR4A - aFeed_Divisor + 1;               //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
  }
  Limit_Pos = Limit_Pos_Left - Brake_Compens;
    2488:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    248c:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    2490:	05 2e       	mov	r0, r21
    2492:	00 0c       	add	r0, r0
    2494:	66 0b       	sbc	r22, r22
    2496:	77 0b       	sbc	r23, r23
    2498:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    249c:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    24a0:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    24a4:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    24a8:	84 1b       	sub	r24, r20
    24aa:	95 0b       	sbc	r25, r21
    24ac:	a6 0b       	sbc	r26, r22
    24ae:	b7 0b       	sbc	r27, r23
    24b0:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    24b4:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    24b8:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    24bc:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CW;
    24c0:	f1 98       	cbi	0x1e, 1	; 30
  Motor_Z_CW();
    24c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    24c6:	8f 7b       	andi	r24, 0xBF	; 191
    24c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
    24cc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    24d0:	84 fd       	sbrc	r24, 4
    24d2:	0e c0       	rjmp	.+28     	; 0x24f0 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x10c>
    24d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    24d8:	80 61       	ori	r24, 0x10	; 16
    24da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    24de:	9f ef       	ldi	r25, 0xFF	; 255
    24e0:	2b ed       	ldi	r18, 0xDB	; 219
    24e2:	85 e0       	ldi	r24, 0x05	; 5
    24e4:	91 50       	subi	r25, 0x01	; 1
    24e6:	20 40       	sbci	r18, 0x00	; 0
    24e8:	80 40       	sbci	r24, 0x00	; 0
    24ea:	e1 f7       	brne	.-8      	; 0x24e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x100>
    24ec:	00 c0       	rjmp	.+0      	; 0x24ee <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x10a>
    24ee:	00 00       	nop

  if (Mode == Mode_Cone_L)
    24f0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    24f4:	84 30       	cpi	r24, 0x04	; 4
    24f6:	09 f0       	breq	.+2      	; 0x24fa <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x116>
    24f8:	24 c1       	rjmp	.+584    	; 0x2742 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x35e>
  {
    Motor_X_Dir = CW;
    24fa:	f4 98       	cbi	0x1e, 4	; 30
    Motor_X_CW();
    24fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2500:	8f 7d       	andi	r24, 0xDF	; 223
  } else if (Mode == Mode_Cone_R)
  {
    Motor_X_Dir = CCW;
    Motor_X_CCW();
    2502:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  }

  if (Read_X_Ena_State == false) Motor_X_Enable();
    2506:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    250a:	83 fd       	sbrc	r24, 3
    250c:	0e c0       	rjmp	.+28     	; 0x252a <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x146>
    250e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2512:	88 60       	ori	r24, 0x08	; 8
    2514:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2518:	9f ef       	ldi	r25, 0xFF	; 255
    251a:	2b ed       	ldi	r18, 0xDB	; 219
    251c:	85 e0       	ldi	r24, 0x05	; 5
    251e:	91 50       	subi	r25, 0x01	; 1
    2520:	20 40       	sbci	r18, 0x00	; 0
    2522:	80 40       	sbci	r24, 0x00	; 0
    2524:	e1 f7       	brne	.-8      	; 0x251e <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x13a>
    2526:	00 c0       	rjmp	.+0      	; 0x2528 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x144>
    2528:	00 00       	nop

  Joy_Z_flag = ON;
    252a:	f2 9a       	sbi	0x1e, 2	; 30
  X_WORKING_FEED_FLAG = ON;
    252c:	f6 9a       	sbi	0x1e, 6	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    252e:	99 81       	ldd	r25, Y+1	; 0x01
    2530:	92 30       	cpi	r25, 0x02	; 2
    2532:	09 f0       	breq	.+2      	; 0x2536 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x152>
    2534:	0e c1       	rjmp	.+540    	; 0x2752 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x36e>
  {
    SpeedMode = FORCE_RAPID;
    2536:	90 93 36 12 	sts	0x1236, r25	; 0x801236 <SpeedMode>
    Z_NEED_RUN_RAPID_FLAG = ON;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
    Z_NEED_RUN_FEED_FLAG = ON;
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    Z_NEED_RUN_FEED_FLAG = ON;
  }
  Ena_INT_Z_aCone();                                          //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4C
    2540:	e8 98       	cbi	0x1d, 0	; 29
    2542:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2546:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    254a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    254e:	8d 7f       	andi	r24, 0xFD	; 253
    2550:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2554:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2558:	8b 7f       	andi	r24, 0xFB	; 251
    255a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    255e:	e9 98       	cbi	0x1d, 1	; 29
    2560:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    2564:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    2568:	88 e0       	ldi	r24, 0x08	; 8
    256a:	89 bb       	out	0x19, r24	; 25
    256c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	5f 90       	pop	r5
    2594:	4f 90       	pop	r4
    2596:	3f 90       	pop	r3
    2598:	2f 90       	pop	r2
    259a:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    Cs_Count = 0;                               //Счётчик конуса текущий - целая часть
    Cm_Count = 0;                               //Счётчик конуса текущий - десятитысячная дробная часть
  } else {                          //ОБЫЧНАЯ ПОДАЧА
    if (b_flag == true) return;
    259c:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    25a0:	81 11       	cpse	r24, r1
    25a2:	e6 cf       	rjmp	.-52     	; 0x2570 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x18c>
    a_flag = false;
    25a4:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>

    Cs_Divisor = Cone_Info[Cone_Step].Cs_Div;   //Коэффициент конуса из таблицы конусов - целая часть
    25ae:	e0 91 3f 12 	lds	r30, 0x123F	; 0x80123f <Cone_Step>
    25b2:	23 e1       	ldi	r18, 0x13	; 19
    25b4:	e2 9f       	mul	r30, r18
    25b6:	f0 01       	movw	r30, r0
    25b8:	11 24       	eor	r1, r1
    25ba:	e0 5d       	subi	r30, 0xD0	; 208
    25bc:	fd 4f       	sbci	r31, 0xFD	; 253
    25be:	80 81       	ld	r24, Z
    25c0:	80 93 3e 12 	sts	0x123E, r24	; 0x80123e <Cs_Divisor>
    Cm_Divisor = Cone_Info[Cone_Step].Cm_Div;   //Коэффициент конуса из таблицы конусов - десятитысячная дробная часть
    25c4:	81 81       	ldd	r24, Z+1	; 0x01
    25c6:	92 81       	ldd	r25, Z+2	; 0x02
    25c8:	90 93 3d 12 	sts	0x123D, r25	; 0x80123d <Cm_Divisor+0x1>
    25cc:	80 93 3c 12 	sts	0x123C, r24	; 0x80123c <Cm_Divisor>
    //NEW
    XZ_Divisor = Cone_Info[Cone_Step].XZ;
    25d0:	82 89       	ldd	r24, Z+18	; 0x12
    25d2:	80 93 3b 12 	sts	0x123B, r24	; 0x80123b <XZ_Divisor>
    #ifdef _DEBUG_CONE
    Serial.print("Cone_Left "); Serial.print(Cs_Divisor); Serial.print("."); Serial.print(Cm_Divisor); Serial.print(" XZ="); Serial.print(XZ_Divisor); Serial.print("\n\r");
    #endif

    //OLD
    Start_Speed = (250000 / ((uint32_t)MIN_aFEED * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1) /FEED_ACCEL;
    25d6:	00 91 05 0a 	lds	r16, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    25da:	10 91 06 0a 	lds	r17, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    25de:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
    25e2:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    25ea:	a0 91 01 0a 	lds	r26, 0x0A01	; 0x800a01 <SCREW_Z>
    25ee:	b0 91 02 0a 	lds	r27, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    25f2:	2c e3       	ldi	r18, 0x3C	; 60
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    25fa:	24 e6       	ldi	r18, 0x64	; 100
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    2606:	29 01       	movw	r4, r18
    2608:	3a 01       	movw	r6, r20
    260a:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    260e:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    2612:	98 01       	movw	r18, r16
    2614:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    2618:	9b 01       	movw	r18, r22
    261a:	ac 01       	movw	r20, r24
    261c:	aa 81       	ldd	r26, Y+2	; 0x02
    261e:	bb 81       	ldd	r27, Y+3	; 0x03
    2620:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    2624:	a3 01       	movw	r20, r6
    2626:	92 01       	movw	r18, r4
    2628:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    262c:	22 0f       	add	r18, r18
    262e:	33 1f       	adc	r19, r19
    2630:	44 1f       	adc	r20, r20
    2632:	55 1f       	adc	r21, r21
    2634:	60 e9       	ldi	r22, 0x90	; 144
    2636:	86 2e       	mov	r8, r22
    2638:	60 ed       	ldi	r22, 0xD0	; 208
    263a:	96 2e       	mov	r9, r22
    263c:	63 e0       	ldi	r22, 0x03	; 3
    263e:	a6 2e       	mov	r10, r22
    2640:	b1 2c       	mov	r11, r1
    2642:	c5 01       	movw	r24, r10
    2644:	b4 01       	movw	r22, r8
    2646:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    264a:	ca 01       	movw	r24, r20
    264c:	b9 01       	movw	r22, r18
    264e:	61 50       	subi	r22, 0x01	; 1
    2650:	71 09       	sbc	r23, r1
    2652:	81 09       	sbc	r24, r1
    2654:	91 09       	sbc	r25, r1
    2656:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <FEED_ACCEL>
    265a:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    265e:	03 2e       	mov	r0, r19
    2660:	00 0c       	add	r0, r0
    2662:	44 0b       	sbc	r20, r20
    2664:	55 0b       	sbc	r21, r21
    2666:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    266a:	69 01       	movw	r12, r18
    //-

    if (Motor_Z_Pos < Limit_Pos_Left - Start_Speed * 2)
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    2674:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    2678:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    267c:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    2680:	82 1b       	sub	r24, r18
    2682:	93 0b       	sbc	r25, r19
    2684:	a1 09       	sbc	r26, r1
    2686:	b1 09       	sbc	r27, r1
    2688:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    268c:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    2690:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    2694:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    2698:	48 17       	cp	r20, r24
    269a:	59 07       	cpc	r21, r25
    269c:	6a 07       	cpc	r22, r26
    269e:	7b 07       	cpc	r23, r27
    26a0:	0c f0       	brlt	.+2      	; 0x26a4 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x2c0>
    26a2:	46 c0       	rjmp	.+140    	; 0x2730 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x34c>
    {
      //OLD
      aFeed_Divisor = 250000 / ((uint32_t)aFeed_mm * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1;
    26a4:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <aFeed_mm>
    26a8:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <aFeed_mm+0x1>
    26ac:	98 01       	movw	r18, r16
    26ae:	aa 81       	ldd	r26, Y+2	; 0x02
    26b0:	bb 81       	ldd	r27, Y+3	; 0x03
    26b2:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    26b6:	da 01       	movw	r26, r20
    26b8:	9b 01       	movw	r18, r22
    26ba:	ac 01       	movw	r20, r24
    26bc:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    26c0:	a3 01       	movw	r20, r6
    26c2:	92 01       	movw	r18, r4
    26c4:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	44 1f       	adc	r20, r20
    26ce:	55 1f       	adc	r21, r21
    26d0:	c5 01       	movw	r24, r10
    26d2:	b4 01       	movw	r22, r8
    26d4:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    26d8:	21 50       	subi	r18, 0x01	; 1
    26da:	31 09       	sbc	r19, r1
    26dc:	30 93 38 12 	sts	0x1238, r19	; 0x801238 <aFeed_Divisor+0x1>
    26e0:	20 93 37 12 	sts	0x1237, r18	; 0x801237 <aFeed_Divisor>
      //-

      if (aFeed_Divisor < Start_Speed)                          //Feed_Divisor везде заменён на aFeed_Divisor
    26e4:	2c 15       	cp	r18, r12
    26e6:	3d 05       	cpc	r19, r13
    26e8:	58 f4       	brcc	.+22     	; 0x2700 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x31c>
      {
        max_OCR4A = Start_Speed;                                //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    26ea:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    26ee:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
        if (Z_WORKING_FEED_FLAG == OFF)
    26f2:	f3 99       	sbic	0x1e, 3	; 30
    26f4:	0d c0       	rjmp	.+26     	; 0x2710 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x32c>
    }
    else
    {
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      OCR4A = Start_Speed;                                      //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    26f6:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    26fa:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    26fe:	08 c0       	rjmp	.+16     	; 0x2710 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x32c>
          OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
        }
      }
      else
      {
        max_OCR4A = aFeed_Divisor;                               //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2700:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    2704:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
        OCR4A = aFeed_Divisor;                                   //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2708:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    270c:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    {
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      OCR4A = Start_Speed;                                      //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    }
    Brake_Compens = max_OCR4A - aFeed_Divisor + 1;               //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2710:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    2714:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	20 91 37 12 	lds	r18, 0x1237	; 0x801237 <aFeed_Divisor>
    271e:	30 91 38 12 	lds	r19, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    2722:	82 1b       	sub	r24, r18
    2724:	93 0b       	sbc	r25, r19
    2726:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    272a:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    272e:	ac ce       	rjmp	.-680    	; 0x2488 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0xa4>
        OCR4A = aFeed_Divisor;                                   //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      }
    }
    else
    {
      aFeed_Divisor = Start_Speed;
    2730:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <aFeed_Divisor+0x1>
    2734:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <aFeed_Divisor>
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2738:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    273c:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
    2740:	da cf       	rjmp	.-76     	; 0x26f6 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x312>

  if (Mode == Mode_Cone_L)
  {
    Motor_X_Dir = CW;
    Motor_X_CW();
  } else if (Mode == Mode_Cone_R)
    2742:	85 30       	cpi	r24, 0x05	; 5
    2744:	09 f0       	breq	.+2      	; 0x2748 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x364>
    2746:	df ce       	rjmp	.-578    	; 0x2506 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x122>
  {
    Motor_X_Dir = CCW;
    2748:	f4 9a       	sbi	0x1e, 4	; 30
    Motor_X_CCW();
    274a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    274e:	80 62       	ori	r24, 0x20	; 32
    2750:	d8 ce       	rjmp	.-592    	; 0x2502 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x11e>
  {
    SpeedMode = FORCE_RAPID;
    Z_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    2758:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    275c:	f1 ce       	rjmp	.-542    	; 0x2540 <_Z13NEW_Cone_LeftRbS_h.constprop.26+0x15c>

0000275e <_Z14NEW_Cone_RightRbS_h.constprop.25>:
    Z_NEED_RUN_FEED_FLAG = ON;
  }
  Ena_INT_Z_aCone();                                          //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4C
}
//==============================================================================================================================================================================================================
void NEW_Cone_Right(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    275e:	2f 92       	push	r2
    2760:	3f 92       	push	r3
    2762:	4f 92       	push	r4
    2764:	5f 92       	push	r5
    2766:	6f 92       	push	r6
    2768:	7f 92       	push	r7
    276a:	8f 92       	push	r8
    276c:	9f 92       	push	r9
    276e:	af 92       	push	r10
    2770:	bf 92       	push	r11
    2772:	cf 92       	push	r12
    2774:	df 92       	push	r13
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	00 d0       	rcall	.+0      	; 0x2784 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x26>
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	89 83       	std	Y+1, r24	; 0x01
{
  //Timer4_Init()

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    278a:	82 30       	cpi	r24, 0x02	; 2
    278c:	09 f0       	breq	.+2      	; 0x2790 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x32>
    278e:	c3 c0       	rjmp	.+390    	; 0x2916 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x1b8>
  {
    if (a_flag == true) return;
    2790:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    2794:	81 11       	cpse	r24, r1
    2796:	a9 c0       	rjmp	.+338    	; 0x28ea <_Z14NEW_Cone_RightRbS_h.constprop.25+0x18c>
    a_flag = true;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    b_flag = false;
    279e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (Z_WORKING_RAPID_FLAG == OFF)
    27a2:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    27a6:	81 11       	cpse	r24, r1
    27a8:	0c c0       	rjmp	.+24     	; 0x27c2 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x64>
    {
      OCR4A = max_OCR4A = (unsigned int)MIN_RAPID_MOTION;
    27aa:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    27ae:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    27b2:	90 93 44 12 	sts	0x1244, r25	; 0x801244 <max_OCR4A+0x1>
    27b6:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <max_OCR4A>
    27ba:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    27be:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    27c2:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    27c6:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    27ca:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    27ce:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    27d2:	28 1b       	sub	r18, r24
    27d4:	39 0b       	sbc	r19, r25
    27d6:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    27da:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    27de:	24 9f       	mul	r18, r20
    27e0:	c0 01       	movw	r24, r0
    27e2:	25 9f       	mul	r18, r21
    27e4:	90 0d       	add	r25, r0
    27e6:	34 9f       	mul	r19, r20
    27e8:	90 0d       	add	r25, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    27f2:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    Cs_Count = 0;
    27f6:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <Cs_Count>
    Cm_Count = 0;
    27fa:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <Cm_Count+0x1>
    27fe:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <Cm_Count>
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      OCR4A = Start_Speed;                                      //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    }
    Brake_Compens = max_OCR4A - aFeed_Divisor + 1;               //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
  }
  Limit_Pos = Limit_Pos_Right + Brake_Compens;
    2802:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    2806:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    280a:	09 2e       	mov	r0, r25
    280c:	00 0c       	add	r0, r0
    280e:	aa 0b       	sbc	r26, r26
    2810:	bb 0b       	sbc	r27, r27
    2812:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    2816:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    281a:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    281e:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    2822:	84 0f       	add	r24, r20
    2824:	95 1f       	adc	r25, r21
    2826:	a6 1f       	adc	r26, r22
    2828:	b7 1f       	adc	r27, r23
    282a:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    282e:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    2832:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    2836:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CCW;
    283a:	f1 9a       	sbi	0x1e, 1	; 30
  Motor_Z_CCW();
    283c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2840:	80 64       	ori	r24, 0x40	; 64
    2842:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
    2846:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    284a:	84 fd       	sbrc	r24, 4
    284c:	0e c0       	rjmp	.+28     	; 0x286a <_Z14NEW_Cone_RightRbS_h.constprop.25+0x10c>
    284e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2852:	80 61       	ori	r24, 0x10	; 16
    2854:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2858:	9f ef       	ldi	r25, 0xFF	; 255
    285a:	2b ed       	ldi	r18, 0xDB	; 219
    285c:	85 e0       	ldi	r24, 0x05	; 5
    285e:	91 50       	subi	r25, 0x01	; 1
    2860:	20 40       	sbci	r18, 0x00	; 0
    2862:	80 40       	sbci	r24, 0x00	; 0
    2864:	e1 f7       	brne	.-8      	; 0x285e <_Z14NEW_Cone_RightRbS_h.constprop.25+0x100>
    2866:	00 c0       	rjmp	.+0      	; 0x2868 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x10a>
    2868:	00 00       	nop

  if (Mode == Mode_Cone_L)
    286a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    286e:	84 30       	cpi	r24, 0x04	; 4
    2870:	09 f0       	breq	.+2      	; 0x2874 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x116>
    2872:	24 c1       	rjmp	.+584    	; 0x2abc <_Z14NEW_Cone_RightRbS_h.constprop.25+0x35e>
  {
    Motor_X_Dir = CCW;
    2874:	f4 9a       	sbi	0x1e, 4	; 30
    Motor_X_CCW();
    2876:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    287a:	80 62       	ori	r24, 0x20	; 32
  } else if (Mode == Mode_Cone_R)
  {
    Motor_X_Dir = CW;
    Motor_X_CW();
    287c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  }
  if (Read_X_Ena_State == false) Motor_X_Enable();
    2880:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2884:	83 fd       	sbrc	r24, 3
    2886:	0e c0       	rjmp	.+28     	; 0x28a4 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x146>
    2888:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    288c:	88 60       	ori	r24, 0x08	; 8
    288e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2892:	9f ef       	ldi	r25, 0xFF	; 255
    2894:	2b ed       	ldi	r18, 0xDB	; 219
    2896:	85 e0       	ldi	r24, 0x05	; 5
    2898:	91 50       	subi	r25, 0x01	; 1
    289a:	20 40       	sbci	r18, 0x00	; 0
    289c:	80 40       	sbci	r24, 0x00	; 0
    289e:	e1 f7       	brne	.-8      	; 0x2898 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x13a>
    28a0:	00 c0       	rjmp	.+0      	; 0x28a2 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x144>
    28a2:	00 00       	nop

  Joy_Z_flag = ON;
    28a4:	f2 9a       	sbi	0x1e, 2	; 30
  X_WORKING_FEED_FLAG = ON;   //В режиме КОНУСОВ активируются оба мотора
    28a6:	f6 9a       	sbi	0x1e, 6	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    28a8:	99 81       	ldd	r25, Y+1	; 0x01
    28aa:	92 30       	cpi	r25, 0x02	; 2
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x152>
    28ae:	0e c1       	rjmp	.+540    	; 0x2acc <_Z14NEW_Cone_RightRbS_h.constprop.25+0x36e>
  {
    SpeedMode = FORCE_RAPID;
    28b0:	90 93 36 12 	sts	0x1236, r25	; 0x801236 <SpeedMode>
    Z_NEED_RUN_RAPID_FLAG = ON;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    Z_NEED_RUN_FEED_FLAG = ON;
  }

  Ena_INT_Z_aCone();                                          //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4C
    28ba:	e8 98       	cbi	0x1d, 0	; 29
    28bc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    28c0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    28c4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    28c8:	8d 7f       	andi	r24, 0xFD	; 253
    28ca:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    28ce:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    28d2:	8b 7f       	andi	r24, 0xFB	; 251
    28d4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    28d8:	e9 98       	cbi	0x1d, 1	; 29
    28da:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    28de:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    28e2:	88 e0       	ldi	r24, 0x08	; 8
    28e4:	89 bb       	out	0x19, r24	; 25
    28e6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
    2900:	bf 90       	pop	r11
    2902:	af 90       	pop	r10
    2904:	9f 90       	pop	r9
    2906:	8f 90       	pop	r8
    2908:	7f 90       	pop	r7
    290a:	6f 90       	pop	r6
    290c:	5f 90       	pop	r5
    290e:	4f 90       	pop	r4
    2910:	3f 90       	pop	r3
    2912:	2f 90       	pop	r2
    2914:	08 95       	ret
    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    Cs_Count = 0;
    Cm_Count = 0;

  } else {            //ОБЫЧНАЯ ПОДАЧА
    if (b_flag == true) return;
    2916:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    291a:	81 11       	cpse	r24, r1
    291c:	e6 cf       	rjmp	.-52     	; 0x28ea <_Z14NEW_Cone_RightRbS_h.constprop.25+0x18c>
    a_flag = false;
    291e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>

    Cs_Divisor = Cone_Info[Cone_Step].Cs_Div;
    2928:	e0 91 3f 12 	lds	r30, 0x123F	; 0x80123f <Cone_Step>
    292c:	23 e1       	ldi	r18, 0x13	; 19
    292e:	e2 9f       	mul	r30, r18
    2930:	f0 01       	movw	r30, r0
    2932:	11 24       	eor	r1, r1
    2934:	e0 5d       	subi	r30, 0xD0	; 208
    2936:	fd 4f       	sbci	r31, 0xFD	; 253
    2938:	80 81       	ld	r24, Z
    293a:	80 93 3e 12 	sts	0x123E, r24	; 0x80123e <Cs_Divisor>
    Cm_Divisor = Cone_Info[Cone_Step].Cm_Div;
    293e:	81 81       	ldd	r24, Z+1	; 0x01
    2940:	92 81       	ldd	r25, Z+2	; 0x02
    2942:	90 93 3d 12 	sts	0x123D, r25	; 0x80123d <Cm_Divisor+0x1>
    2946:	80 93 3c 12 	sts	0x123C, r24	; 0x80123c <Cm_Divisor>
    //NEW
    XZ_Divisor = Cone_Info[Cone_Step].XZ;
    294a:	82 89       	ldd	r24, Z+18	; 0x12
    294c:	80 93 3b 12 	sts	0x123B, r24	; 0x80123b <XZ_Divisor>
    #ifdef _DEBUG_CONE
    Serial.print("Cone_Left "); Serial.print(Cs_Divisor); Serial.print("."); Serial.print(Cm_Divisor); Serial.print(" XZ="); Serial.print(XZ_Divisor); Serial.print("\n\r");
    #endif

    //OLD
    Start_Speed = (250000 / ((uint32_t)MIN_aFEED * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1) /FEED_ACCEL;
    2950:	00 91 05 0a 	lds	r16, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    2954:	10 91 06 0a 	lds	r17, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    2958:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
    295c:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    2960:	9b 83       	std	Y+3, r25	; 0x03
    2962:	8a 83       	std	Y+2, r24	; 0x02
    2964:	a0 91 01 0a 	lds	r26, 0x0A01	; 0x800a01 <SCREW_Z>
    2968:	b0 91 02 0a 	lds	r27, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    296c:	2c e3       	ldi	r18, 0x3C	; 60
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    2974:	24 e6       	ldi	r18, 0x64	; 100
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    2980:	29 01       	movw	r4, r18
    2982:	3a 01       	movw	r6, r20
    2984:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    2988:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    298c:	98 01       	movw	r18, r16
    298e:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    2992:	9b 01       	movw	r18, r22
    2994:	ac 01       	movw	r20, r24
    2996:	aa 81       	ldd	r26, Y+2	; 0x02
    2998:	bb 81       	ldd	r27, Y+3	; 0x03
    299a:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    299e:	a3 01       	movw	r20, r6
    29a0:	92 01       	movw	r18, r4
    29a2:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    29a6:	22 0f       	add	r18, r18
    29a8:	33 1f       	adc	r19, r19
    29aa:	44 1f       	adc	r20, r20
    29ac:	55 1f       	adc	r21, r21
    29ae:	60 e9       	ldi	r22, 0x90	; 144
    29b0:	86 2e       	mov	r8, r22
    29b2:	60 ed       	ldi	r22, 0xD0	; 208
    29b4:	96 2e       	mov	r9, r22
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	a6 2e       	mov	r10, r22
    29ba:	b1 2c       	mov	r11, r1
    29bc:	c5 01       	movw	r24, r10
    29be:	b4 01       	movw	r22, r8
    29c0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    29c4:	ca 01       	movw	r24, r20
    29c6:	b9 01       	movw	r22, r18
    29c8:	61 50       	subi	r22, 0x01	; 1
    29ca:	71 09       	sbc	r23, r1
    29cc:	81 09       	sbc	r24, r1
    29ce:	91 09       	sbc	r25, r1
    29d0:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <FEED_ACCEL>
    29d4:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    29d8:	03 2e       	mov	r0, r19
    29da:	00 0c       	add	r0, r0
    29dc:	44 0b       	sbc	r20, r20
    29de:	55 0b       	sbc	r21, r21
    29e0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    29e4:	69 01       	movw	r12, r18
    //-

    if (Motor_Z_Pos > Limit_Pos_Right + Start_Speed * 2)
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    29ee:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    29f2:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    29f6:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    29fa:	82 0f       	add	r24, r18
    29fc:	93 1f       	adc	r25, r19
    29fe:	a1 1d       	adc	r26, r1
    2a00:	b1 1d       	adc	r27, r1
    2a02:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    2a06:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    2a0a:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    2a0e:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    2a12:	84 17       	cp	r24, r20
    2a14:	95 07       	cpc	r25, r21
    2a16:	a6 07       	cpc	r26, r22
    2a18:	b7 07       	cpc	r27, r23
    2a1a:	0c f0       	brlt	.+2      	; 0x2a1e <_Z14NEW_Cone_RightRbS_h.constprop.25+0x2c0>
    2a1c:	46 c0       	rjmp	.+140    	; 0x2aaa <_Z14NEW_Cone_RightRbS_h.constprop.25+0x34c>
    {
      //OLD
      aFeed_Divisor = 250000 / ((uint32_t)aFeed_mm * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1;
    2a1e:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <aFeed_mm>
    2a22:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <aFeed_mm+0x1>
    2a26:	98 01       	movw	r18, r16
    2a28:	aa 81       	ldd	r26, Y+2	; 0x02
    2a2a:	bb 81       	ldd	r27, Y+3	; 0x03
    2a2c:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    2a30:	da 01       	movw	r26, r20
    2a32:	9b 01       	movw	r18, r22
    2a34:	ac 01       	movw	r20, r24
    2a36:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    2a3a:	a3 01       	movw	r20, r6
    2a3c:	92 01       	movw	r18, r4
    2a3e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    2a42:	22 0f       	add	r18, r18
    2a44:	33 1f       	adc	r19, r19
    2a46:	44 1f       	adc	r20, r20
    2a48:	55 1f       	adc	r21, r21
    2a4a:	c5 01       	movw	r24, r10
    2a4c:	b4 01       	movw	r22, r8
    2a4e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    2a52:	21 50       	subi	r18, 0x01	; 1
    2a54:	31 09       	sbc	r19, r1
    2a56:	30 93 38 12 	sts	0x1238, r19	; 0x801238 <aFeed_Divisor+0x1>
    2a5a:	20 93 37 12 	sts	0x1237, r18	; 0x801237 <aFeed_Divisor>
      //-

      if (aFeed_Divisor < Start_Speed)                          //Feed_Divisor везде заменён на aFeed_Divisor
    2a5e:	2c 15       	cp	r18, r12
    2a60:	3d 05       	cpc	r19, r13
    2a62:	58 f4       	brcc	.+22     	; 0x2a7a <_Z14NEW_Cone_RightRbS_h.constprop.25+0x31c>
      {
        max_OCR4A = Start_Speed;                                //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2a64:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    2a68:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
        if (Z_WORKING_FEED_FLAG == OFF)
    2a6c:	f3 99       	sbic	0x1e, 3	; 30
    2a6e:	0d c0       	rjmp	.+26     	; 0x2a8a <_Z14NEW_Cone_RightRbS_h.constprop.25+0x32c>
    }
    else
    {
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      OCR4A = Start_Speed;                                      //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2a70:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2a74:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    2a78:	08 c0       	rjmp	.+16     	; 0x2a8a <_Z14NEW_Cone_RightRbS_h.constprop.25+0x32c>
          OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
        }
      }
      else
      {
        max_OCR4A = aFeed_Divisor;                               //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2a7a:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    2a7e:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
        OCR4A = aFeed_Divisor;                                   //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2a82:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2a86:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    {
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      OCR4A = Start_Speed;                                      //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    }
    Brake_Compens = max_OCR4A - aFeed_Divisor + 1;               //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2a8a:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    2a8e:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	20 91 37 12 	lds	r18, 0x1237	; 0x801237 <aFeed_Divisor>
    2a98:	30 91 38 12 	lds	r19, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    2a9c:	82 1b       	sub	r24, r18
    2a9e:	93 0b       	sbc	r25, r19
    2aa0:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    2aa4:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
    2aa8:	ac ce       	rjmp	.-680    	; 0x2802 <_Z14NEW_Cone_RightRbS_h.constprop.25+0xa4>
        OCR4A = aFeed_Divisor;                                   //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
      }
    }
    else
    {
      aFeed_Divisor = Start_Speed;
    2aaa:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <aFeed_Divisor+0x1>
    2aae:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <aFeed_Divisor>
      max_OCR4A = Start_Speed;                                  //Изменяем для КОНУСОВ синхронный таймер OCR5A на асинхронный OCR4A
    2ab2:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    2ab6:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
    2aba:	da cf       	rjmp	.-76     	; 0x2a70 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x312>

  if (Mode == Mode_Cone_L)
  {
    Motor_X_Dir = CCW;
    Motor_X_CCW();
  } else if (Mode == Mode_Cone_R)
    2abc:	85 30       	cpi	r24, 0x05	; 5
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x364>
    2ac0:	df ce       	rjmp	.-578    	; 0x2880 <_Z14NEW_Cone_RightRbS_h.constprop.25+0x122>
  {
    Motor_X_Dir = CW;
    2ac2:	f4 98       	cbi	0x1e, 4	; 30
    Motor_X_CW();
    2ac4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2ac8:	8f 7d       	andi	r24, 0xDF	; 223
    2aca:	d8 ce       	rjmp	.-592    	; 0x287c <_Z14NEW_Cone_RightRbS_h.constprop.25+0x11e>
  {
    SpeedMode = FORCE_RAPID;
    Z_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    2ad2:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    2ad6:	f1 ce       	rjmp	.-542    	; 0x28ba <_Z14NEW_Cone_RightRbS_h.constprop.25+0x15c>

00002ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>:
//==============================================================================================================================================================================================================

void NEW_Feed_Left(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    2ad8:	4f 92       	push	r4
    2ada:	5f 92       	push	r5
    2adc:	6f 92       	push	r6
    2ade:	7f 92       	push	r7
    2ae0:	8f 92       	push	r8
    2ae2:	9f 92       	push	r9
    2ae4:	af 92       	push	r10
    2ae6:	bf 92       	push	r11
    2ae8:	cf 92       	push	r12
    2aea:	df 92       	push	r13
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	1f 93       	push	r17
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x20>
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x22>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	18 2f       	mov	r17, r24
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x2e>
    2b04:	a0 c0       	rjmp	.+320    	; 0x2c46 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x16e>
  {
    if (a_flag == true) return;
    2b06:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    2b0a:	81 11       	cpse	r24, r1
    2b0c:	86 c0       	rjmp	.+268    	; 0x2c1a <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x142>
    a_flag = true;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    b_flag = false;
    2b14:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    Joy_X_flag = OFF;                   //На Рапиде точно так же
    2b18:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;                  //На Рапиде точно так же
    2b1a:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    X_NEED_RUN_RAPID_FLAG = OFF;
    2b1e:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (Z_WORKING_RAPID_FLAG == OFF)
    2b22:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    2b26:	81 11       	cpse	r24, r1
    2b28:	0c c0       	rjmp	.+24     	; 0x2b42 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x6a>
    {
      OCR5A = max_OCR5A = (unsigned int)MIN_RAPID_MOTION;
    2b2a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    2b2e:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    2b32:	90 93 2f 12 	sts	0x122F, r25	; 0x80122f <max_OCR5A+0x1>
    2b36:	80 93 2e 12 	sts	0x122E, r24	; 0x80122e <max_OCR5A>
    2b3a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2b3e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;   //По своей сути это константа (после прохода секции SETUP), можно вычислить заранее
    2b42:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    2b46:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    2b4a:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    2b4e:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    2b52:	28 1b       	sub	r18, r24
    2b54:	39 0b       	sbc	r19, r25
    2b56:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    2b5a:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    2b5e:	24 9f       	mul	r18, r20
    2b60:	c0 01       	movw	r24, r0
    2b62:	25 9f       	mul	r18, r21
    2b64:	90 0d       	add	r25, r0
    2b66:	34 9f       	mul	r19, r20
    2b68:	90 0d       	add	r25, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	01 96       	adiw	r24, 0x01	; 1
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }

    Brake_Compens = max_OCR5A - Feed_Divisor + 1;           //На Рапиде другие формулы
    2b6e:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    2b72:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Left - Brake_Compens;               //На Рапиде точно так же
    2b76:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    2b7a:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    2b7e:	05 2e       	mov	r0, r21
    2b80:	00 0c       	add	r0, r0
    2b82:	66 0b       	sbc	r22, r22
    2b84:	77 0b       	sbc	r23, r23
    2b86:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    2b8a:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    2b8e:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    2b92:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    2b96:	84 1b       	sub	r24, r20
    2b98:	95 0b       	sbc	r25, r21
    2b9a:	a6 0b       	sbc	r26, r22
    2b9c:	b7 0b       	sbc	r27, r23
    2b9e:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    2ba2:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    2ba6:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    2baa:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CW;                                         //На Рапиде точно так же
    2bae:	f1 98       	cbi	0x1e, 1	; 30
  Motor_Z_CW();                                             //На Рапиде точно так же
    2bb0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2bb4:	8f 7b       	andi	r24, 0xBF	; 191
    2bb6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();          //На Рапиде точно так же
    2bba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2bbe:	84 fd       	sbrc	r24, 4
    2bc0:	0e c0       	rjmp	.+28     	; 0x2bde <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x106>
    2bc2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2bc6:	80 61       	ori	r24, 0x10	; 16
    2bc8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2bcc:	3f ef       	ldi	r19, 0xFF	; 255
    2bce:	8b ed       	ldi	r24, 0xDB	; 219
    2bd0:	95 e0       	ldi	r25, 0x05	; 5
    2bd2:	31 50       	subi	r19, 0x01	; 1
    2bd4:	80 40       	sbci	r24, 0x00	; 0
    2bd6:	90 40       	sbci	r25, 0x00	; 0
    2bd8:	e1 f7       	brne	.-8      	; 0x2bd2 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0xfa>
    2bda:	00 c0       	rjmp	.+0      	; 0x2bdc <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x104>
    2bdc:	00 00       	nop

  Joy_Z_flag = ON;                                          //На Рапиде точно так же
    2bde:	f2 9a       	sbi	0x1e, 2	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    2be0:	12 30       	cpi	r17, 0x02	; 2
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x10e>
    2be4:	23 c1       	rjmp	.+582    	; 0x2e2c <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x354>
  {
    SpeedMode = FORCE_RAPID;
    2be6:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    Z_NEED_RUN_RAPID_FLAG = ON;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    Z_NEED_RUN_FEED_FLAG = ON;
  }

  Ena_INT_Z_Feed();   //new
    2bf0:	e8 98       	cbi	0x1d, 0	; 29
    2bf2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2bf6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2bfa:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2bfe:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2c02:	8b 7f       	andi	r24, 0xFB	; 251
    2c04:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2c08:	e9 98       	cbi	0x1d, 1	; 29
    2c0a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    2c0e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	8a bb       	out	0x1a, r24	; 26
    2c16:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
}
    2c1a:	26 96       	adiw	r28, 0x06	; 6
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	ff 90       	pop	r15
    2c2e:	ef 90       	pop	r14
    2c30:	df 90       	pop	r13
    2c32:	cf 90       	pop	r12
    2c34:	bf 90       	pop	r11
    2c36:	af 90       	pop	r10
    2c38:	9f 90       	pop	r9
    2c3a:	8f 90       	pop	r8
    2c3c:	7f 90       	pop	r7
    2c3e:	6f 90       	pop	r6
    2c40:	5f 90       	pop	r5
    2c42:	4f 90       	pop	r4
    2c44:	08 95       	ret
    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;   //По своей сути это константа (после прохода секции SETUP), можно вычислить заранее

  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;         //На Рапиде проверяется флаг a_flag
    2c46:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	e6 cf       	rjmp	.-52     	; 0x2c1a <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x142>
    a_flag = false;                     //На Рапиде наоборот - a_flag = true;
    2c4e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;                      //На Рапиде наоборот - b_flag = false;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_X_flag = OFF;                   //На Рапиде точно так же
    2c58:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;                  //На Рапиде точно так же
    2c5a:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = ENC_LINE_PER_REV / ((float)MOTOR_Z_STEP_PER_REV * McSTEP_Z * MIN_FEED / SCREW_Z) / FEED_ACCEL /2 +0.5;
    2c5e:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    2c62:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    2c66:	07 2e       	mov	r0, r23
    2c68:	00 0c       	add	r0, r0
    2c6a:	88 0b       	sbc	r24, r24
    2c6c:	99 0b       	sbc	r25, r25
    2c6e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2c72:	6b 01       	movw	r12, r22
    2c74:	7c 01       	movw	r14, r24
    2c76:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    2c7a:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    2c7e:	07 2e       	mov	r0, r23
    2c80:	00 0c       	add	r0, r0
    2c82:	88 0b       	sbc	r24, r24
    2c84:	99 0b       	sbc	r25, r25
    2c86:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2c8a:	4b 01       	movw	r8, r22
    2c8c:	5c 01       	movw	r10, r24
    2c8e:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    2c92:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    2c96:	07 2e       	mov	r0, r23
    2c98:	00 0c       	add	r0, r0
    2c9a:	88 0b       	sbc	r24, r24
    2c9c:	99 0b       	sbc	r25, r25
    2c9e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2ca2:	9b 01       	movw	r18, r22
    2ca4:	ac 01       	movw	r20, r24
    2ca6:	c5 01       	movw	r24, r10
    2ca8:	b4 01       	movw	r22, r8
    2caa:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    2cae:	4b 01       	movw	r8, r22
    2cb0:	5c 01       	movw	r10, r24
    2cb2:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    2cb6:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    2cba:	07 2e       	mov	r0, r23
    2cbc:	00 0c       	add	r0, r0
    2cbe:	88 0b       	sbc	r24, r24
    2cc0:	99 0b       	sbc	r25, r25
    2cc2:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2cc6:	69 83       	std	Y+1, r22	; 0x01
    2cc8:	7a 83       	std	Y+2, r23	; 0x02
    2cca:	8b 83       	std	Y+3, r24	; 0x03
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <MIN_FEED>
    2cd2:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <MIN_FEED+0x1>
    2cd6:	07 2e       	mov	r0, r23
    2cd8:	00 0c       	add	r0, r0
    2cda:	88 0b       	sbc	r24, r24
    2cdc:	99 0b       	sbc	r25, r25
    2cde:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2ce2:	a5 01       	movw	r20, r10
    2ce4:	94 01       	movw	r18, r8
    2ce6:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    2cea:	29 81       	ldd	r18, Y+1	; 0x01
    2cec:	3a 81       	ldd	r19, Y+2	; 0x02
    2cee:	4b 81       	ldd	r20, Y+3	; 0x03
    2cf0:	5c 81       	ldd	r21, Y+4	; 0x04
    2cf2:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	c7 01       	movw	r24, r14
    2cfc:	b6 01       	movw	r22, r12
    2cfe:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2d02:	2b 01       	movw	r4, r22
    2d04:	3c 01       	movw	r6, r24
    2d06:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <FEED_ACCEL>
    2d0a:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    2d0e:	07 2e       	mov	r0, r23
    2d10:	00 0c       	add	r0, r0
    2d12:	88 0b       	sbc	r24, r24
    2d14:	99 0b       	sbc	r25, r25
    2d16:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	c3 01       	movw	r24, r6
    2d20:	b2 01       	movw	r22, r4
    2d22:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    2d3e:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    2d42:	2b 01       	movw	r4, r22
    2d44:	7e 83       	std	Y+6, r23	; 0x06
    2d46:	6d 83       	std	Y+5, r22	; 0x05
    //
    if (Motor_Z_Pos < Limit_Pos_Left - Start_Speed * 2)
    2d48:	9b 01       	movw	r18, r22
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    2d52:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    2d56:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    2d5a:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    2d5e:	82 1b       	sub	r24, r18
    2d60:	93 0b       	sbc	r25, r19
    2d62:	a1 09       	sbc	r26, r1
    2d64:	b1 09       	sbc	r27, r1
    2d66:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    2d6a:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    2d6e:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    2d72:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    2d76:	48 17       	cp	r20, r24
    2d78:	59 07       	cpc	r21, r25
    2d7a:	6a 07       	cpc	r22, r26
    2d7c:	7b 07       	cpc	r23, r27
    2d7e:	0c f0       	brlt	.+2      	; 0x2d82 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x2aa>
    2d80:	4c c0       	rjmp	.+152    	; 0x2e1a <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x342>
    {
      //OLD
      Feed_Divisor = ENC_LINE_PER_REV / ((float)MOTOR_Z_STEP_PER_REV * McSTEP_Z * Feed_mm / SCREW_Z) /2 +0.5;
    2d82:	60 91 2c 12 	lds	r22, 0x122C	; 0x80122c <Feed_mm>
    2d86:	70 91 2d 12 	lds	r23, 0x122D	; 0x80122d <Feed_mm+0x1>
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    2d92:	a5 01       	movw	r20, r10
    2d94:	94 01       	movw	r18, r8
    2d96:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    2d9a:	29 81       	ldd	r18, Y+1	; 0x01
    2d9c:	3a 81       	ldd	r19, Y+2	; 0x02
    2d9e:	4b 81       	ldd	r20, Y+3	; 0x03
    2da0:	5c 81       	ldd	r21, Y+4	; 0x04
    2da2:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2da6:	9b 01       	movw	r18, r22
    2da8:	ac 01       	movw	r20, r24
    2daa:	c7 01       	movw	r24, r14
    2dac:	b6 01       	movw	r22, r12
    2dae:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	5f e3       	ldi	r21, 0x3F	; 63
    2dc6:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    2dca:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    2dce:	70 93 2b 12 	sts	0x122B, r23	; 0x80122b <Feed_Divisor+0x1>
    2dd2:	60 93 2a 12 	sts	0x122A, r22	; 0x80122a <Feed_Divisor>
      //
      if (Feed_Divisor < Start_Speed)
    2dd6:	64 15       	cp	r22, r4
    2dd8:	75 05       	cpc	r23, r5
    2dda:	58 f4       	brcc	.+22     	; 0x2df2 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x31a>
      {
        max_OCR5A = Start_Speed;
    2ddc:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    2de0:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
        if (Z_WORKING_FEED_FLAG == OFF)
    2de4:	f3 99       	sbic	0x1e, 3	; 30
    2de6:	0d c0       	rjmp	.+26     	; 0x2e02 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x32a>
    }
    else
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    2de8:	50 92 29 01 	sts	0x0129, r5	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2dec:	40 92 28 01 	sts	0x0128, r4	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    2df0:	08 c0       	rjmp	.+16     	; 0x2e02 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x32a>
        if (Z_WORKING_FEED_FLAG == OFF)
        {
          OCR5A = Start_Speed;
        }
      } else {
        max_OCR5A = Feed_Divisor;
    2df2:	70 93 2f 12 	sts	0x122F, r23	; 0x80122f <max_OCR5A+0x1>
    2df6:	60 93 2e 12 	sts	0x122E, r22	; 0x80122e <max_OCR5A>
        OCR5A = Feed_Divisor;
    2dfa:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2dfe:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }

    Brake_Compens = max_OCR5A - Feed_Divisor + 1;           //На Рапиде другие формулы
    2e02:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
    2e06:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	20 91 2a 12 	lds	r18, 0x122A	; 0x80122a <Feed_Divisor>
    2e10:	30 91 2b 12 	lds	r19, 0x122B	; 0x80122b <Feed_Divisor+0x1>
    2e14:	82 1b       	sub	r24, r18
    2e16:	93 0b       	sbc	r25, r19
    2e18:	aa ce       	rjmp	.-684    	; 0x2b6e <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x96>
        OCR5A = Feed_Divisor;
      }
    }
    else
    {
      Feed_Divisor = Start_Speed;
    2e1a:	50 92 2b 12 	sts	0x122B, r5	; 0x80122b <Feed_Divisor+0x1>
    2e1e:	40 92 2a 12 	sts	0x122A, r4	; 0x80122a <Feed_Divisor>
      max_OCR5A = Start_Speed;
    2e22:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    2e26:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
    2e2a:	de cf       	rjmp	.-68     	; 0x2de8 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x310>

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_RAPID;
    Z_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    2e2c:	11 30       	cpi	r17, 0x01	; 1
    2e2e:	29 f4       	brne	.+10     	; 0x2e3a <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x362>
  {
    SpeedMode = FORCE_SLOW;
    2e30:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    2e34:	10 93 34 12 	sts	0x1234, r17	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    2e38:	db ce       	rjmp	.-586    	; 0x2bf0 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x118>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    2e3a:	10 92 36 12 	sts	0x1236, r1	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    2e44:	d5 ce       	rjmp	.-598    	; 0x2bf0 <_Z13NEW_Feed_LeftRbS_h.constprop.24+0x118>

00002e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>:
  }

  Ena_INT_Z_Feed();   //new
}
//==============================================================================================================================================================================================================
void NEW_Feed_Right(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    2e46:	4f 92       	push	r4
    2e48:	5f 92       	push	r5
    2e4a:	6f 92       	push	r6
    2e4c:	7f 92       	push	r7
    2e4e:	8f 92       	push	r8
    2e50:	9f 92       	push	r9
    2e52:	af 92       	push	r10
    2e54:	bf 92       	push	r11
    2e56:	cf 92       	push	r12
    2e58:	df 92       	push	r13
    2e5a:	ef 92       	push	r14
    2e5c:	ff 92       	push	r15
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x20>
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x22>
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	18 2f       	mov	r17, r24
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    2e6e:	82 30       	cpi	r24, 0x02	; 2
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x2e>
    2e72:	a0 c0       	rjmp	.+320    	; 0x2fb4 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x16e>
  {
    if (a_flag == true) return;
    2e74:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    2e78:	81 11       	cpse	r24, r1
    2e7a:	86 c0       	rjmp	.+268    	; 0x2f88 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x142>
    a_flag = true;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    b_flag = false;
    2e82:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    Joy_X_flag = OFF;           //На Рапиде точно так же
    2e86:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;          //На Рапиде точно так же
    2e88:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    X_NEED_RUN_RAPID_FLAG = OFF;
    2e8c:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (Z_WORKING_RAPID_FLAG == OFF)
    2e90:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    2e94:	81 11       	cpse	r24, r1
    2e96:	0c c0       	rjmp	.+24     	; 0x2eb0 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x6a>
    {
      OCR5A = max_OCR5A = (unsigned int)MIN_RAPID_MOTION;
    2e98:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    2e9c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    2ea0:	90 93 2f 12 	sts	0x122F, r25	; 0x80122f <max_OCR5A+0x1>
    2ea4:	80 93 2e 12 	sts	0x122E, r24	; 0x80122e <max_OCR5A>
    2ea8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2eac:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    }
    //---
    
    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;     //На Рапиде другая формула
    2eb0:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    2eb4:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    2eb8:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    2ebc:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    2ec0:	28 1b       	sub	r18, r24
    2ec2:	39 0b       	sbc	r19, r25
    2ec4:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    2ec8:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    2ecc:	24 9f       	mul	r18, r20
    2ece:	c0 01       	movw	r24, r0
    2ed0:	25 9f       	mul	r18, r21
    2ed2:	90 0d       	add	r25, r0
    2ed4:	34 9f       	mul	r19, r20
    2ed6:	90 0d       	add	r25, r0
    2ed8:	11 24       	eor	r1, r1
    2eda:	01 96       	adiw	r24, 0x01	; 1
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }
    Brake_Compens = (max_OCR5A - Feed_Divisor) + 1;     //На Рапиде другая формула
    2edc:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    2ee0:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Right + Brake_Compens;          //На Рапиде точно так же
    2ee4:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    2ee8:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    2eec:	09 2e       	mov	r0, r25
    2eee:	00 0c       	add	r0, r0
    2ef0:	aa 0b       	sbc	r26, r26
    2ef2:	bb 0b       	sbc	r27, r27
    2ef4:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    2ef8:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    2efc:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    2f00:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    2f04:	84 0f       	add	r24, r20
    2f06:	95 1f       	adc	r25, r21
    2f08:	a6 1f       	adc	r26, r22
    2f0a:	b7 1f       	adc	r27, r23
    2f0c:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    2f10:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    2f14:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    2f18:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CCW;                                    //На Рапиде точно так же
    2f1c:	f1 9a       	sbi	0x1e, 1	; 30
  Motor_Z_CCW();                                        //На Рапиде точно так же
    2f1e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2f22:	80 64       	ori	r24, 0x40	; 64
    2f24:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();      //На Рапиде точно так же
    2f28:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2f2c:	84 fd       	sbrc	r24, 4
    2f2e:	0e c0       	rjmp	.+28     	; 0x2f4c <_Z14NEW_Feed_RightRbS_h.constprop.23+0x106>
    2f30:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2f34:	80 61       	ori	r24, 0x10	; 16
    2f36:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    2f3a:	3f ef       	ldi	r19, 0xFF	; 255
    2f3c:	8b ed       	ldi	r24, 0xDB	; 219
    2f3e:	95 e0       	ldi	r25, 0x05	; 5
    2f40:	31 50       	subi	r19, 0x01	; 1
    2f42:	80 40       	sbci	r24, 0x00	; 0
    2f44:	90 40       	sbci	r25, 0x00	; 0
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <_Z14NEW_Feed_RightRbS_h.constprop.23+0xfa>
    2f48:	00 c0       	rjmp	.+0      	; 0x2f4a <_Z14NEW_Feed_RightRbS_h.constprop.23+0x104>
    2f4a:	00 00       	nop

  Joy_Z_flag = ON;
    2f4c:	f2 9a       	sbi	0x1e, 2	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    2f4e:	12 30       	cpi	r17, 0x02	; 2
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x10e>
    2f52:	23 c1       	rjmp	.+582    	; 0x319a <_Z14NEW_Feed_RightRbS_h.constprop.23+0x354>
  {
    SpeedMode = FORCE_RAPID;
    2f54:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    Z_NEED_RUN_RAPID_FLAG = ON;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    Z_NEED_RUN_FEED_FLAG = ON;
  }

  Ena_INT_Z_Feed();   //new
    2f5e:	e8 98       	cbi	0x1d, 0	; 29
    2f60:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2f64:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2f68:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2f6c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2f70:	8b 7f       	andi	r24, 0xFB	; 251
    2f72:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2f76:	e9 98       	cbi	0x1d, 1	; 29
    2f78:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    2f7c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	8a bb       	out	0x1a, r24	; 26
    2f84:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
}
    2f88:	26 96       	adiw	r28, 0x06	; 6
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	ff 90       	pop	r15
    2f9c:	ef 90       	pop	r14
    2f9e:	df 90       	pop	r13
    2fa0:	cf 90       	pop	r12
    2fa2:	bf 90       	pop	r11
    2fa4:	af 90       	pop	r10
    2fa6:	9f 90       	pop	r9
    2fa8:	8f 90       	pop	r8
    2faa:	7f 90       	pop	r7
    2fac:	6f 90       	pop	r6
    2fae:	5f 90       	pop	r5
    2fb0:	4f 90       	pop	r4
    2fb2:	08 95       	ret
    
    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;     //На Рапиде другая формула
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return; //На Рапиде проверяется флаг a_flag
    2fb4:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    2fb8:	81 11       	cpse	r24, r1
    2fba:	e6 cf       	rjmp	.-52     	; 0x2f88 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x142>
    a_flag = false;             //На Рапиде a_flag = true
    2fbc:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;              //На Рапиде b_flag = false
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_X_flag = OFF;           //На Рапиде точно так же
    2fc6:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;          //На Рапиде точно так же
    2fc8:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = ENC_LINE_PER_REV / ((float)MOTOR_Z_STEP_PER_REV * McSTEP_Z * MIN_FEED / SCREW_Z) / FEED_ACCEL /2 +0.5;
    2fcc:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    2fd0:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    2fd4:	07 2e       	mov	r0, r23
    2fd6:	00 0c       	add	r0, r0
    2fd8:	88 0b       	sbc	r24, r24
    2fda:	99 0b       	sbc	r25, r25
    2fdc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2fe0:	6b 01       	movw	r12, r22
    2fe2:	7c 01       	movw	r14, r24
    2fe4:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    2fe8:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    2fec:	07 2e       	mov	r0, r23
    2fee:	00 0c       	add	r0, r0
    2ff0:	88 0b       	sbc	r24, r24
    2ff2:	99 0b       	sbc	r25, r25
    2ff4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    2ff8:	4b 01       	movw	r8, r22
    2ffa:	5c 01       	movw	r10, r24
    2ffc:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    3000:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    3004:	07 2e       	mov	r0, r23
    3006:	00 0c       	add	r0, r0
    3008:	88 0b       	sbc	r24, r24
    300a:	99 0b       	sbc	r25, r25
    300c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3010:	9b 01       	movw	r18, r22
    3012:	ac 01       	movw	r20, r24
    3014:	c5 01       	movw	r24, r10
    3016:	b4 01       	movw	r22, r8
    3018:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    301c:	4b 01       	movw	r8, r22
    301e:	5c 01       	movw	r10, r24
    3020:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    3024:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    3028:	07 2e       	mov	r0, r23
    302a:	00 0c       	add	r0, r0
    302c:	88 0b       	sbc	r24, r24
    302e:	99 0b       	sbc	r25, r25
    3030:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3034:	69 83       	std	Y+1, r22	; 0x01
    3036:	7a 83       	std	Y+2, r23	; 0x02
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	9c 83       	std	Y+4, r25	; 0x04
    303c:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <MIN_FEED>
    3040:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <MIN_FEED+0x1>
    3044:	07 2e       	mov	r0, r23
    3046:	00 0c       	add	r0, r0
    3048:	88 0b       	sbc	r24, r24
    304a:	99 0b       	sbc	r25, r25
    304c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3050:	a5 01       	movw	r20, r10
    3052:	94 01       	movw	r18, r8
    3054:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    3058:	29 81       	ldd	r18, Y+1	; 0x01
    305a:	3a 81       	ldd	r19, Y+2	; 0x02
    305c:	4b 81       	ldd	r20, Y+3	; 0x03
    305e:	5c 81       	ldd	r21, Y+4	; 0x04
    3060:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3064:	9b 01       	movw	r18, r22
    3066:	ac 01       	movw	r20, r24
    3068:	c7 01       	movw	r24, r14
    306a:	b6 01       	movw	r22, r12
    306c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3070:	2b 01       	movw	r4, r22
    3072:	3c 01       	movw	r6, r24
    3074:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <FEED_ACCEL>
    3078:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    307c:	07 2e       	mov	r0, r23
    307e:	00 0c       	add	r0, r0
    3080:	88 0b       	sbc	r24, r24
    3082:	99 0b       	sbc	r25, r25
    3084:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3088:	9b 01       	movw	r18, r22
    308a:	ac 01       	movw	r20, r24
    308c:	c3 01       	movw	r24, r6
    308e:	b2 01       	movw	r22, r4
    3090:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	5f e3       	ldi	r21, 0x3F	; 63
    309c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    30ac:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    30b0:	2b 01       	movw	r4, r22
    30b2:	7e 83       	std	Y+6, r23	; 0x06
    30b4:	6d 83       	std	Y+5, r22	; 0x05
    //

    if (Motor_Z_Pos > Limit_Pos_Right + Start_Speed * 2)
    30b6:	9b 01       	movw	r18, r22
    30b8:	22 0f       	add	r18, r18
    30ba:	33 1f       	adc	r19, r19
    30bc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    30c0:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    30c4:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    30c8:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    30cc:	82 0f       	add	r24, r18
    30ce:	93 1f       	adc	r25, r19
    30d0:	a1 1d       	adc	r26, r1
    30d2:	b1 1d       	adc	r27, r1
    30d4:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    30d8:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    30dc:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    30e0:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    30e4:	84 17       	cp	r24, r20
    30e6:	95 07       	cpc	r25, r21
    30e8:	a6 07       	cpc	r26, r22
    30ea:	b7 07       	cpc	r27, r23
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x2aa>
    30ee:	4c c0       	rjmp	.+152    	; 0x3188 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x342>
    {
      //OLD
      Feed_Divisor = ENC_LINE_PER_REV / ((float)MOTOR_Z_STEP_PER_REV * McSTEP_Z * Feed_mm / SCREW_Z) /2 +0.5;
    30f0:	60 91 2c 12 	lds	r22, 0x122C	; 0x80122c <Feed_mm>
    30f4:	70 91 2d 12 	lds	r23, 0x122D	; 0x80122d <Feed_mm+0x1>
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    3100:	a5 01       	movw	r20, r10
    3102:	94 01       	movw	r18, r8
    3104:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    3108:	29 81       	ldd	r18, Y+1	; 0x01
    310a:	3a 81       	ldd	r19, Y+2	; 0x02
    310c:	4b 81       	ldd	r20, Y+3	; 0x03
    310e:	5c 81       	ldd	r21, Y+4	; 0x04
    3110:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3114:	9b 01       	movw	r18, r22
    3116:	ac 01       	movw	r20, r24
    3118:	c7 01       	movw	r24, r14
    311a:	b6 01       	movw	r22, r12
    311c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    3138:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    313c:	70 93 2b 12 	sts	0x122B, r23	; 0x80122b <Feed_Divisor+0x1>
    3140:	60 93 2a 12 	sts	0x122A, r22	; 0x80122a <Feed_Divisor>
      //
      
      if (Feed_Divisor < Start_Speed)
    3144:	64 15       	cp	r22, r4
    3146:	75 05       	cpc	r23, r5
    3148:	58 f4       	brcc	.+22     	; 0x3160 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x31a>
      {
        max_OCR5A = Start_Speed;
    314a:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    314e:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
        if (Z_WORKING_FEED_FLAG == OFF)
    3152:	f3 99       	sbic	0x1e, 3	; 30
    3154:	0d c0       	rjmp	.+26     	; 0x3170 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x32a>
    }
    else
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    3156:	50 92 29 01 	sts	0x0129, r5	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    315a:	40 92 28 01 	sts	0x0128, r4	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    315e:	08 c0       	rjmp	.+16     	; 0x3170 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x32a>
        if (Z_WORKING_FEED_FLAG == OFF)
        {
          OCR5A = Start_Speed;
        }
      } else {
        max_OCR5A = Feed_Divisor;
    3160:	70 93 2f 12 	sts	0x122F, r23	; 0x80122f <max_OCR5A+0x1>
    3164:	60 93 2e 12 	sts	0x122E, r22	; 0x80122e <max_OCR5A>
        OCR5A = Feed_Divisor;
    3168:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    316c:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }
    Brake_Compens = (max_OCR5A - Feed_Divisor) + 1;     //На Рапиде другая формула
    3170:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
    3174:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	20 91 2a 12 	lds	r18, 0x122A	; 0x80122a <Feed_Divisor>
    317e:	30 91 2b 12 	lds	r19, 0x122B	; 0x80122b <Feed_Divisor+0x1>
    3182:	82 1b       	sub	r24, r18
    3184:	93 0b       	sbc	r25, r19
    3186:	aa ce       	rjmp	.-684    	; 0x2edc <_Z14NEW_Feed_RightRbS_h.constprop.23+0x96>
        OCR5A = Feed_Divisor;
      }
    }
    else
    {
      Feed_Divisor = Start_Speed;
    3188:	50 92 2b 12 	sts	0x122B, r5	; 0x80122b <Feed_Divisor+0x1>
    318c:	40 92 2a 12 	sts	0x122A, r4	; 0x80122a <Feed_Divisor>
      max_OCR5A = Start_Speed;
    3190:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    3194:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
    3198:	de cf       	rjmp	.-68     	; 0x3156 <_Z14NEW_Feed_RightRbS_h.constprop.23+0x310>
  {
    SpeedMode = FORCE_RAPID;
    Z_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    31a0:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    31a4:	dc ce       	rjmp	.-584    	; 0x2f5e <_Z14NEW_Feed_RightRbS_h.constprop.23+0x118>

000031a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>:
  }

  Ena_INT_Z_Feed();   //new
}
//==============================================================================================================================================================================================================
void NEW_Feed_Front(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    31a6:	4f 92       	push	r4
    31a8:	5f 92       	push	r5
    31aa:	6f 92       	push	r6
    31ac:	7f 92       	push	r7
    31ae:	8f 92       	push	r8
    31b0:	9f 92       	push	r9
    31b2:	af 92       	push	r10
    31b4:	bf 92       	push	r11
    31b6:	cf 92       	push	r12
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	1f 93       	push	r17
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	00 d0       	rcall	.+0      	; 0x31c6 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x20>
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x22>
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	18 2f       	mov	r17, r24
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x2e>
    31d2:	a0 c0       	rjmp	.+320    	; 0x3314 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x16e>
  {
    if (a_flag == true) return;
    31d4:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    31d8:	81 11       	cpse	r24, r1
    31da:	86 c0       	rjmp	.+268    	; 0x32e8 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x142>
    a_flag = true;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    b_flag = false;
    31e2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    Joy_Z_flag = OFF;                       //На Рапиде точно так же
    31e6:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;                      //На Рапиде точно так же
    31e8:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    Z_NEED_RUN_RAPID_FLAG = OFF;                     //Только на Рапиде
    31ec:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (X_WORKING_RAPID_FLAG == OFF)
    31f0:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    31f4:	81 11       	cpse	r24, r1
    31f6:	0c c0       	rjmp	.+24     	; 0x3210 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x6a>
    {
      OCR5A = max_OCR5A = (unsigned int)MIN_RAPID_MOTION;
    31f8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    31fc:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3200:	90 93 2f 12 	sts	0x122F, r25	; 0x80122f <max_OCR5A+0x1>
    3204:	80 93 2e 12 	sts	0x122E, r24	; 0x80122e <max_OCR5A>
    3208:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    320c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    3210:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    3214:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3218:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    321c:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    3220:	28 1b       	sub	r18, r24
    3222:	39 0b       	sbc	r19, r25
    3224:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    3228:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    322c:	24 9f       	mul	r18, r20
    322e:	c0 01       	movw	r24, r0
    3230:	25 9f       	mul	r18, r21
    3232:	90 0d       	add	r25, r0
    3234:	34 9f       	mul	r19, r20
    3236:	90 0d       	add	r25, r0
    3238:	11 24       	eor	r1, r1
    323a:	01 96       	adiw	r24, 0x01	; 1
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }
    Brake_Compens = max_OCR5A - Feed_Divisor + 1;                   //Отличается от Рапида формулой
    323c:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    3240:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Front - Brake_Compens;                      //На Рапиде точно так же
    3244:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    3248:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    324c:	05 2e       	mov	r0, r21
    324e:	00 0c       	add	r0, r0
    3250:	66 0b       	sbc	r22, r22
    3252:	77 0b       	sbc	r23, r23
    3254:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    3258:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    325c:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    3260:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    3264:	84 1b       	sub	r24, r20
    3266:	95 0b       	sbc	r25, r21
    3268:	a6 0b       	sbc	r26, r22
    326a:	b7 0b       	sbc	r27, r23
    326c:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    3270:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    3274:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    3278:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_X_Dir = CW;                                                 //На Рапиде точно так же
    327c:	f4 98       	cbi	0x1e, 4	; 30
  Motor_X_CW();                                                     //На Рапиде точно так же
    327e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3282:	8f 7d       	andi	r24, 0xDF	; 223
    3284:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_X_Ena_State == false) Motor_X_Enable();                  //На Рапиде точно так же
    3288:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    328c:	83 fd       	sbrc	r24, 3
    328e:	0e c0       	rjmp	.+28     	; 0x32ac <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x106>
    3290:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3294:	88 60       	ori	r24, 0x08	; 8
    3296:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    329a:	3f ef       	ldi	r19, 0xFF	; 255
    329c:	8b ed       	ldi	r24, 0xDB	; 219
    329e:	95 e0       	ldi	r25, 0x05	; 5
    32a0:	31 50       	subi	r19, 0x01	; 1
    32a2:	80 40       	sbci	r24, 0x00	; 0
    32a4:	90 40       	sbci	r25, 0x00	; 0
    32a6:	e1 f7       	brne	.-8      	; 0x32a0 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0xfa>
    32a8:	00 c0       	rjmp	.+0      	; 0x32aa <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x104>
    32aa:	00 00       	nop

  Joy_X_flag = ON;                                                  //На Рапиде точно так же
    32ac:	f5 9a       	sbi	0x1e, 5	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    32ae:	12 30       	cpi	r17, 0x02	; 2
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x10e>
    32b2:	23 c1       	rjmp	.+582    	; 0x34fa <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x354>
  {
    SpeedMode = FORCE_RAPID;
    32b4:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    X_NEED_RUN_RAPID_FLAG = ON;   
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	80 93 30 12 	sts	0x1230, r24	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    X_NEED_RUN_FEED_FLAG = ON;
  }
  
  Ena_INT_X_Feed();   //new
    32be:	e8 98       	cbi	0x1d, 0	; 29
    32c0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    32c4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    32c8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    32cc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    32d0:	8d 7f       	andi	r24, 0xFD	; 253
    32d2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    32d6:	e9 98       	cbi	0x1d, 1	; 29
    32d8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    32dc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    32e0:	84 e0       	ldi	r24, 0x04	; 4
    32e2:	8a bb       	out	0x1a, r24	; 26
    32e4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
}
    32e8:	26 96       	adiw	r28, 0x06	; 6
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	1f 91       	pop	r17
    32fa:	ff 90       	pop	r15
    32fc:	ef 90       	pop	r14
    32fe:	df 90       	pop	r13
    3300:	cf 90       	pop	r12
    3302:	bf 90       	pop	r11
    3304:	af 90       	pop	r10
    3306:	9f 90       	pop	r9
    3308:	8f 90       	pop	r8
    330a:	7f 90       	pop	r7
    330c:	6f 90       	pop	r6
    330e:	5f 90       	pop	r5
    3310:	4f 90       	pop	r4
    3312:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;            //На Рапиде проверяется флаг a_flag
    3314:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    3318:	81 11       	cpse	r24, r1
    331a:	e6 cf       	rjmp	.-52     	; 0x32e8 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x142>
    a_flag = false;
    331c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_Z_flag = OFF;                      //На Рапиде точно так же
    3326:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;                     //На Рапиде точно так же
    3328:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = ENC_LINE_PER_REV / ((float)MOTOR_X_STEP_PER_REV * McSTEP_X * MIN_FEED / SCREW_X) / FEED_ACCEL /2 +0.5;
    332c:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    3330:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    3334:	07 2e       	mov	r0, r23
    3336:	00 0c       	add	r0, r0
    3338:	88 0b       	sbc	r24, r24
    333a:	99 0b       	sbc	r25, r25
    333c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3340:	6b 01       	movw	r12, r22
    3342:	7c 01       	movw	r14, r24
    3344:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    3348:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    334c:	07 2e       	mov	r0, r23
    334e:	00 0c       	add	r0, r0
    3350:	88 0b       	sbc	r24, r24
    3352:	99 0b       	sbc	r25, r25
    3354:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3358:	4b 01       	movw	r8, r22
    335a:	5c 01       	movw	r10, r24
    335c:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    3360:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    3364:	07 2e       	mov	r0, r23
    3366:	00 0c       	add	r0, r0
    3368:	88 0b       	sbc	r24, r24
    336a:	99 0b       	sbc	r25, r25
    336c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3370:	9b 01       	movw	r18, r22
    3372:	ac 01       	movw	r20, r24
    3374:	c5 01       	movw	r24, r10
    3376:	b4 01       	movw	r22, r8
    3378:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    337c:	4b 01       	movw	r8, r22
    337e:	5c 01       	movw	r10, r24
    3380:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    3384:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    3388:	07 2e       	mov	r0, r23
    338a:	00 0c       	add	r0, r0
    338c:	88 0b       	sbc	r24, r24
    338e:	99 0b       	sbc	r25, r25
    3390:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3394:	69 83       	std	Y+1, r22	; 0x01
    3396:	7a 83       	std	Y+2, r23	; 0x02
    3398:	8b 83       	std	Y+3, r24	; 0x03
    339a:	9c 83       	std	Y+4, r25	; 0x04
    339c:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <MIN_FEED>
    33a0:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <MIN_FEED+0x1>
    33a4:	07 2e       	mov	r0, r23
    33a6:	00 0c       	add	r0, r0
    33a8:	88 0b       	sbc	r24, r24
    33aa:	99 0b       	sbc	r25, r25
    33ac:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    33b0:	a5 01       	movw	r20, r10
    33b2:	94 01       	movw	r18, r8
    33b4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    33b8:	29 81       	ldd	r18, Y+1	; 0x01
    33ba:	3a 81       	ldd	r19, Y+2	; 0x02
    33bc:	4b 81       	ldd	r20, Y+3	; 0x03
    33be:	5c 81       	ldd	r21, Y+4	; 0x04
    33c0:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    33c4:	9b 01       	movw	r18, r22
    33c6:	ac 01       	movw	r20, r24
    33c8:	c7 01       	movw	r24, r14
    33ca:	b6 01       	movw	r22, r12
    33cc:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    33d0:	2b 01       	movw	r4, r22
    33d2:	3c 01       	movw	r6, r24
    33d4:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <FEED_ACCEL>
    33d8:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    33dc:	07 2e       	mov	r0, r23
    33de:	00 0c       	add	r0, r0
    33e0:	88 0b       	sbc	r24, r24
    33e2:	99 0b       	sbc	r25, r25
    33e4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    33e8:	9b 01       	movw	r18, r22
    33ea:	ac 01       	movw	r20, r24
    33ec:	c3 01       	movw	r24, r6
    33ee:	b2 01       	movw	r22, r4
    33f0:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	5f e3       	ldi	r21, 0x3F	; 63
    3408:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    340c:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    3410:	2b 01       	movw	r4, r22
    3412:	7e 83       	std	Y+6, r23	; 0x06
    3414:	6d 83       	std	Y+5, r22	; 0x05
    //
    
    if (Motor_X_Pos < Limit_Pos_Front - Start_Speed * 2)
    3416:	9b 01       	movw	r18, r22
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    3420:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    3424:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    3428:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    342c:	82 1b       	sub	r24, r18
    342e:	93 0b       	sbc	r25, r19
    3430:	a1 09       	sbc	r26, r1
    3432:	b1 09       	sbc	r27, r1
    3434:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    3438:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    343c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    3440:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    3444:	48 17       	cp	r20, r24
    3446:	59 07       	cpc	r21, r25
    3448:	6a 07       	cpc	r22, r26
    344a:	7b 07       	cpc	r23, r27
    344c:	0c f0       	brlt	.+2      	; 0x3450 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x2aa>
    344e:	4c c0       	rjmp	.+152    	; 0x34e8 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x342>
    {
      //OLD
      Feed_Divisor = ENC_LINE_PER_REV / ((float)MOTOR_X_STEP_PER_REV * McSTEP_X * Feed_mm / SCREW_X) /2 +0.5;
    3450:	60 91 2c 12 	lds	r22, 0x122C	; 0x80122c <Feed_mm>
    3454:	70 91 2d 12 	lds	r23, 0x122D	; 0x80122d <Feed_mm+0x1>
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    3460:	a5 01       	movw	r20, r10
    3462:	94 01       	movw	r18, r8
    3464:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    3468:	29 81       	ldd	r18, Y+1	; 0x01
    346a:	3a 81       	ldd	r19, Y+2	; 0x02
    346c:	4b 81       	ldd	r20, Y+3	; 0x03
    346e:	5c 81       	ldd	r21, Y+4	; 0x04
    3470:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3474:	9b 01       	movw	r18, r22
    3476:	ac 01       	movw	r20, r24
    3478:	c7 01       	movw	r24, r14
    347a:	b6 01       	movw	r22, r12
    347c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	5f e3       	ldi	r21, 0x3F	; 63
    3488:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	5f e3       	ldi	r21, 0x3F	; 63
    3494:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    3498:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    349c:	70 93 2b 12 	sts	0x122B, r23	; 0x80122b <Feed_Divisor+0x1>
    34a0:	60 93 2a 12 	sts	0x122A, r22	; 0x80122a <Feed_Divisor>
      //-
      
      if (Feed_Divisor < Start_Speed)
    34a4:	64 15       	cp	r22, r4
    34a6:	75 05       	cpc	r23, r5
    34a8:	58 f4       	brcc	.+22     	; 0x34c0 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x31a>
      {
        max_OCR5A = Start_Speed;
    34aa:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    34ae:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
        if (X_WORKING_FEED_FLAG == OFF)
    34b2:	f6 99       	sbic	0x1e, 6	; 30
    34b4:	0d c0       	rjmp	.+26     	; 0x34d0 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x32a>
    }
    else
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    34b6:	50 92 29 01 	sts	0x0129, r5	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    34ba:	40 92 28 01 	sts	0x0128, r4	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    34be:	08 c0       	rjmp	.+16     	; 0x34d0 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x32a>
        if (X_WORKING_FEED_FLAG == OFF)
        {
          OCR5A = Start_Speed;
        }
      } else {
        max_OCR5A = Feed_Divisor;
    34c0:	70 93 2f 12 	sts	0x122F, r23	; 0x80122f <max_OCR5A+0x1>
    34c4:	60 93 2e 12 	sts	0x122E, r22	; 0x80122e <max_OCR5A>
        OCR5A = Feed_Divisor;
    34c8:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    34cc:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }
    Brake_Compens = max_OCR5A - Feed_Divisor + 1;                   //Отличается от Рапида формулой
    34d0:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
    34d4:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	20 91 2a 12 	lds	r18, 0x122A	; 0x80122a <Feed_Divisor>
    34de:	30 91 2b 12 	lds	r19, 0x122B	; 0x80122b <Feed_Divisor+0x1>
    34e2:	82 1b       	sub	r24, r18
    34e4:	93 0b       	sbc	r25, r19
    34e6:	aa ce       	rjmp	.-684    	; 0x323c <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x96>
        OCR5A = Feed_Divisor;
      }
    }
    else
    {
      Feed_Divisor = Start_Speed;
    34e8:	50 92 2b 12 	sts	0x122B, r5	; 0x80122b <Feed_Divisor+0x1>
    34ec:	40 92 2a 12 	sts	0x122A, r4	; 0x80122a <Feed_Divisor>
      max_OCR5A = Start_Speed;
    34f0:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    34f4:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
    34f8:	de cf       	rjmp	.-68     	; 0x34b6 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x310>

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_RAPID;
    X_NEED_RUN_RAPID_FLAG = ON;   
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    34fa:	11 30       	cpi	r17, 0x01	; 1
    34fc:	29 f4       	brne	.+10     	; 0x3508 <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x362>
  {
    SpeedMode = FORCE_SLOW;
    34fe:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    X_NEED_RUN_FEED_FLAG = ON;
    3502:	10 93 31 12 	sts	0x1231, r17	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    3506:	db ce       	rjmp	.-586    	; 0x32be <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x118>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    3508:	10 92 36 12 	sts	0x1236, r1	; 0x801236 <SpeedMode>
    X_NEED_RUN_FEED_FLAG = ON;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    3512:	d5 ce       	rjmp	.-598    	; 0x32be <_Z14NEW_Feed_FrontRbS_h.constprop.22+0x118>

00003514 <_Z13NEW_Feed_RearRbS_h.constprop.21>:
  }
  
  Ena_INT_X_Feed();   //new
}
//==============================================================================================================================================================================================================
void NEW_Feed_Rear(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    3514:	4f 92       	push	r4
    3516:	5f 92       	push	r5
    3518:	6f 92       	push	r6
    351a:	7f 92       	push	r7
    351c:	8f 92       	push	r8
    351e:	9f 92       	push	r9
    3520:	af 92       	push	r10
    3522:	bf 92       	push	r11
    3524:	cf 92       	push	r12
    3526:	df 92       	push	r13
    3528:	ef 92       	push	r14
    352a:	ff 92       	push	r15
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	00 d0       	rcall	.+0      	; 0x3534 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x20>
    3534:	00 d0       	rcall	.+0      	; 0x3536 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x22>
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	18 2f       	mov	r17, r24
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    353c:	82 30       	cpi	r24, 0x02	; 2
    353e:	09 f0       	breq	.+2      	; 0x3542 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x2e>
    3540:	a0 c0       	rjmp	.+320    	; 0x3682 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x16e>
  {
    if (a_flag == true) return;                                   //На Рапиде проверяется флаг a_flag
    3542:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    3546:	81 11       	cpse	r24, r1
    3548:	86 c0       	rjmp	.+268    	; 0x3656 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x142>
    b_flag = false;
    354a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a_flag = true;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    Joy_Z_flag = OFF;                                             //На Рапиде точно так же
    3554:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;                                            //На Рапиде точно так же
    3556:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    Z_NEED_RUN_RAPID_FLAG = OFF;                                           //Только на Рапиде
    355a:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (X_WORKING_RAPID_FLAG == OFF)
    355e:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    3562:	81 11       	cpse	r24, r1
    3564:	0c c0       	rjmp	.+24     	; 0x357e <_Z13NEW_Feed_RearRbS_h.constprop.21+0x6a>
    {
      OCR5A = max_OCR5A = (unsigned int)MIN_RAPID_MOTION;
    3566:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    356a:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    356e:	90 93 2f 12 	sts	0x122F, r25	; 0x80122f <max_OCR5A+0x1>
    3572:	80 93 2e 12 	sts	0x122E, r24	; 0x80122e <max_OCR5A>
    3576:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    357a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    357e:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    3582:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3586:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    358a:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    358e:	28 1b       	sub	r18, r24
    3590:	39 0b       	sbc	r19, r25
    3592:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    3596:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    359a:	24 9f       	mul	r18, r20
    359c:	c0 01       	movw	r24, r0
    359e:	25 9f       	mul	r18, r21
    35a0:	90 0d       	add	r25, r0
    35a2:	34 9f       	mul	r19, r20
    35a4:	90 0d       	add	r25, r0
    35a6:	11 24       	eor	r1, r1
    35a8:	01 96       	adiw	r24, 0x01	; 1
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }
    Brake_Compens = max_OCR5A - Feed_Divisor + 1;                   //Отличается от Рапида формулой
    35aa:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    35ae:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Rear + Brake_Compens;                       //На Рапиде точно так же
    35b2:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    35b6:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    35ba:	09 2e       	mov	r0, r25
    35bc:	00 0c       	add	r0, r0
    35be:	aa 0b       	sbc	r26, r26
    35c0:	bb 0b       	sbc	r27, r27
    35c2:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    35c6:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    35ca:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    35ce:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    35d2:	84 0f       	add	r24, r20
    35d4:	95 1f       	adc	r25, r21
    35d6:	a6 1f       	adc	r26, r22
    35d8:	b7 1f       	adc	r27, r23
    35da:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    35de:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    35e2:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    35e6:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_X_Dir = CCW;                                                //На Рапиде точно так же
    35ea:	f4 9a       	sbi	0x1e, 4	; 30
  Motor_X_CCW();                                                    //На Рапиде точно так же
    35ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    35f0:	80 62       	ori	r24, 0x20	; 32
    35f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_X_Ena_State == false) Motor_X_Enable();                  //На Рапиде точно так же
    35f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    35fa:	83 fd       	sbrc	r24, 3
    35fc:	0e c0       	rjmp	.+28     	; 0x361a <_Z13NEW_Feed_RearRbS_h.constprop.21+0x106>
    35fe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3602:	88 60       	ori	r24, 0x08	; 8
    3604:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	8b ed       	ldi	r24, 0xDB	; 219
    360c:	95 e0       	ldi	r25, 0x05	; 5
    360e:	31 50       	subi	r19, 0x01	; 1
    3610:	80 40       	sbci	r24, 0x00	; 0
    3612:	90 40       	sbci	r25, 0x00	; 0
    3614:	e1 f7       	brne	.-8      	; 0x360e <_Z13NEW_Feed_RearRbS_h.constprop.21+0xfa>
    3616:	00 c0       	rjmp	.+0      	; 0x3618 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x104>
    3618:	00 00       	nop

  Joy_X_flag = ON;                                                  //На Рапиде точно так же
    361a:	f5 9a       	sbi	0x1e, 5	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    361c:	12 30       	cpi	r17, 0x02	; 2
    361e:	09 f0       	breq	.+2      	; 0x3622 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x10e>
    3620:	23 c1       	rjmp	.+582    	; 0x3868 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x354>
  {
    SpeedMode = FORCE_RAPID;
    3622:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    X_NEED_RUN_RAPID_FLAG = ON;   
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	80 93 30 12 	sts	0x1230, r24	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    X_NEED_RUN_FEED_FLAG = ON;
  }
  
  Ena_INT_X_Feed();   //new
    362c:	e8 98       	cbi	0x1d, 0	; 29
    362e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3632:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3636:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    363a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    363e:	8d 7f       	andi	r24, 0xFD	; 253
    3640:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3644:	e9 98       	cbi	0x1d, 1	; 29
    3646:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    364a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    364e:	84 e0       	ldi	r24, 0x04	; 4
    3650:	8a bb       	out	0x1a, r24	; 26
    3652:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
}
    3656:	26 96       	adiw	r28, 0x06	; 6
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	bf 90       	pop	r11
    3672:	af 90       	pop	r10
    3674:	9f 90       	pop	r9
    3676:	8f 90       	pop	r8
    3678:	7f 90       	pop	r7
    367a:	6f 90       	pop	r6
    367c:	5f 90       	pop	r5
    367e:	4f 90       	pop	r4
    3680:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;                                   //На обычной подаче проверяется флаг b_flag
    3682:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    3686:	81 11       	cpse	r24, r1
    3688:	e6 cf       	rjmp	.-52     	; 0x3656 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x142>
    a_flag = false;
    368a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_Z_flag = OFF;                                             //На Рапиде точно так же
    3694:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;                                            //На Рапиде точно так же
    3696:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = ENC_LINE_PER_REV / ((float)MOTOR_X_STEP_PER_REV * McSTEP_X * MIN_FEED / SCREW_X) / FEED_ACCEL /2 +0.5;
    369a:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    369e:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    36a2:	07 2e       	mov	r0, r23
    36a4:	00 0c       	add	r0, r0
    36a6:	88 0b       	sbc	r24, r24
    36a8:	99 0b       	sbc	r25, r25
    36aa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    36ae:	6b 01       	movw	r12, r22
    36b0:	7c 01       	movw	r14, r24
    36b2:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    36b6:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    36ba:	07 2e       	mov	r0, r23
    36bc:	00 0c       	add	r0, r0
    36be:	88 0b       	sbc	r24, r24
    36c0:	99 0b       	sbc	r25, r25
    36c2:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    36c6:	4b 01       	movw	r8, r22
    36c8:	5c 01       	movw	r10, r24
    36ca:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    36ce:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    36d2:	07 2e       	mov	r0, r23
    36d4:	00 0c       	add	r0, r0
    36d6:	88 0b       	sbc	r24, r24
    36d8:	99 0b       	sbc	r25, r25
    36da:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    36de:	9b 01       	movw	r18, r22
    36e0:	ac 01       	movw	r20, r24
    36e2:	c5 01       	movw	r24, r10
    36e4:	b4 01       	movw	r22, r8
    36e6:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    36ea:	4b 01       	movw	r8, r22
    36ec:	5c 01       	movw	r10, r24
    36ee:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    36f2:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    36f6:	07 2e       	mov	r0, r23
    36f8:	00 0c       	add	r0, r0
    36fa:	88 0b       	sbc	r24, r24
    36fc:	99 0b       	sbc	r25, r25
    36fe:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3702:	69 83       	std	Y+1, r22	; 0x01
    3704:	7a 83       	std	Y+2, r23	; 0x02
    3706:	8b 83       	std	Y+3, r24	; 0x03
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <MIN_FEED>
    370e:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <MIN_FEED+0x1>
    3712:	07 2e       	mov	r0, r23
    3714:	00 0c       	add	r0, r0
    3716:	88 0b       	sbc	r24, r24
    3718:	99 0b       	sbc	r25, r25
    371a:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    371e:	a5 01       	movw	r20, r10
    3720:	94 01       	movw	r18, r8
    3722:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    3726:	29 81       	ldd	r18, Y+1	; 0x01
    3728:	3a 81       	ldd	r19, Y+2	; 0x02
    372a:	4b 81       	ldd	r20, Y+3	; 0x03
    372c:	5c 81       	ldd	r21, Y+4	; 0x04
    372e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3732:	9b 01       	movw	r18, r22
    3734:	ac 01       	movw	r20, r24
    3736:	c7 01       	movw	r24, r14
    3738:	b6 01       	movw	r22, r12
    373a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    373e:	2b 01       	movw	r4, r22
    3740:	3c 01       	movw	r6, r24
    3742:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <FEED_ACCEL>
    3746:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    374a:	07 2e       	mov	r0, r23
    374c:	00 0c       	add	r0, r0
    374e:	88 0b       	sbc	r24, r24
    3750:	99 0b       	sbc	r25, r25
    3752:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    3756:	9b 01       	movw	r18, r22
    3758:	ac 01       	movw	r20, r24
    375a:	c3 01       	movw	r24, r6
    375c:	b2 01       	movw	r22, r4
    375e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	5f e3       	ldi	r21, 0x3F	; 63
    376a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e0       	ldi	r20, 0x00	; 0
    3774:	5f e3       	ldi	r21, 0x3F	; 63
    3776:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    377a:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    377e:	2b 01       	movw	r4, r22
    3780:	7e 83       	std	Y+6, r23	; 0x06
    3782:	6d 83       	std	Y+5, r22	; 0x05
    //
    
    if (Motor_X_Pos > Limit_Pos_Rear + Start_Speed * 2)
    3784:	9b 01       	movw	r18, r22
    3786:	22 0f       	add	r18, r18
    3788:	33 1f       	adc	r19, r19
    378a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    378e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    3792:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    3796:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    379a:	82 0f       	add	r24, r18
    379c:	93 1f       	adc	r25, r19
    379e:	a1 1d       	adc	r26, r1
    37a0:	b1 1d       	adc	r27, r1
    37a2:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    37a6:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    37aa:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    37ae:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    37b2:	84 17       	cp	r24, r20
    37b4:	95 07       	cpc	r25, r21
    37b6:	a6 07       	cpc	r26, r22
    37b8:	b7 07       	cpc	r27, r23
    37ba:	0c f0       	brlt	.+2      	; 0x37be <_Z13NEW_Feed_RearRbS_h.constprop.21+0x2aa>
    37bc:	4c c0       	rjmp	.+152    	; 0x3856 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x342>
    {
      //OLD
      Feed_Divisor = ENC_LINE_PER_REV / ((float)MOTOR_X_STEP_PER_REV * McSTEP_X * Feed_mm / SCREW_X) /2 +0.5;
    37be:	60 91 2c 12 	lds	r22, 0x122C	; 0x80122c <Feed_mm>
    37c2:	70 91 2d 12 	lds	r23, 0x122D	; 0x80122d <Feed_mm+0x1>
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    37ce:	a5 01       	movw	r20, r10
    37d0:	94 01       	movw	r18, r8
    37d2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    37d6:	29 81       	ldd	r18, Y+1	; 0x01
    37d8:	3a 81       	ldd	r19, Y+2	; 0x02
    37da:	4b 81       	ldd	r20, Y+3	; 0x03
    37dc:	5c 81       	ldd	r21, Y+4	; 0x04
    37de:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    37e2:	9b 01       	movw	r18, r22
    37e4:	ac 01       	movw	r20, r24
    37e6:	c7 01       	movw	r24, r14
    37e8:	b6 01       	movw	r22, r12
    37ea:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	5f e3       	ldi	r21, 0x3F	; 63
    37f6:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	5f e3       	ldi	r21, 0x3F	; 63
    3802:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    3806:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    380a:	70 93 2b 12 	sts	0x122B, r23	; 0x80122b <Feed_Divisor+0x1>
    380e:	60 93 2a 12 	sts	0x122A, r22	; 0x80122a <Feed_Divisor>
      //-
      
      if (Feed_Divisor < Start_Speed)
    3812:	64 15       	cp	r22, r4
    3814:	75 05       	cpc	r23, r5
    3816:	58 f4       	brcc	.+22     	; 0x382e <_Z13NEW_Feed_RearRbS_h.constprop.21+0x31a>
      {
        max_OCR5A = Start_Speed;
    3818:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    381c:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
        if (X_WORKING_FEED_FLAG == OFF)
    3820:	f6 99       	sbic	0x1e, 6	; 30
    3822:	0d c0       	rjmp	.+26     	; 0x383e <_Z13NEW_Feed_RearRbS_h.constprop.21+0x32a>
    }
    else
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    3824:	50 92 29 01 	sts	0x0129, r5	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    3828:	40 92 28 01 	sts	0x0128, r4	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    382c:	08 c0       	rjmp	.+16     	; 0x383e <_Z13NEW_Feed_RearRbS_h.constprop.21+0x32a>
        if (X_WORKING_FEED_FLAG == OFF)
        {
          OCR5A = Start_Speed;
        }
      } else {
        max_OCR5A = Feed_Divisor;
    382e:	70 93 2f 12 	sts	0x122F, r23	; 0x80122f <max_OCR5A+0x1>
    3832:	60 93 2e 12 	sts	0x122E, r22	; 0x80122e <max_OCR5A>
        OCR5A = Feed_Divisor;
    3836:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    383a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    {
      Feed_Divisor = Start_Speed;
      max_OCR5A = Start_Speed;
      OCR5A = Start_Speed;
    }
    Brake_Compens = max_OCR5A - Feed_Divisor + 1;                   //Отличается от Рапида формулой
    383e:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
    3842:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	20 91 2a 12 	lds	r18, 0x122A	; 0x80122a <Feed_Divisor>
    384c:	30 91 2b 12 	lds	r19, 0x122B	; 0x80122b <Feed_Divisor+0x1>
    3850:	82 1b       	sub	r24, r18
    3852:	93 0b       	sbc	r25, r19
    3854:	aa ce       	rjmp	.-684    	; 0x35aa <_Z13NEW_Feed_RearRbS_h.constprop.21+0x96>
        OCR5A = Feed_Divisor;
      }
    }
    else
    {
      Feed_Divisor = Start_Speed;
    3856:	50 92 2b 12 	sts	0x122B, r5	; 0x80122b <Feed_Divisor+0x1>
    385a:	40 92 2a 12 	sts	0x122A, r4	; 0x80122a <Feed_Divisor>
      max_OCR5A = Start_Speed;
    385e:	50 92 2f 12 	sts	0x122F, r5	; 0x80122f <max_OCR5A+0x1>
    3862:	40 92 2e 12 	sts	0x122E, r4	; 0x80122e <max_OCR5A>
    3866:	de cf       	rjmp	.-68     	; 0x3824 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x310>

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_RAPID;
    X_NEED_RUN_RAPID_FLAG = ON;   
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    3868:	11 30       	cpi	r17, 0x01	; 1
    386a:	29 f4       	brne	.+10     	; 0x3876 <_Z13NEW_Feed_RearRbS_h.constprop.21+0x362>
  {
    SpeedMode = FORCE_SLOW;
    386c:	10 93 36 12 	sts	0x1236, r17	; 0x801236 <SpeedMode>
    X_NEED_RUN_FEED_FLAG = ON;
    3870:	10 93 31 12 	sts	0x1231, r17	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    3874:	db ce       	rjmp	.-586    	; 0x362c <_Z13NEW_Feed_RearRbS_h.constprop.21+0x118>
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    3876:	10 92 36 12 	sts	0x1236, r1	; 0x801236 <SpeedMode>
    X_NEED_RUN_FEED_FLAG = ON;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    3880:	d5 ce       	rjmp	.-598    	; 0x362c <_Z13NEW_Feed_RearRbS_h.constprop.21+0x118>

00003882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>:
// ********** Режим "Асинхронная Подача" ********** //////////////////////////////////////////////////////////////////////////////////
//=====================================================================================================================================================================================================================
void NEW_aFeed_Left(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    3882:	3f 92       	push	r3
    3884:	4f 92       	push	r4
    3886:	5f 92       	push	r5
    3888:	6f 92       	push	r6
    388a:	7f 92       	push	r7
    388c:	8f 92       	push	r8
    388e:	9f 92       	push	r9
    3890:	af 92       	push	r10
    3892:	bf 92       	push	r11
    3894:	cf 92       	push	r12
    3896:	df 92       	push	r13
    3898:	ef 92       	push	r14
    389a:	ff 92       	push	r15
    389c:	0f 93       	push	r16
    389e:	1f 93       	push	r17
    38a0:	cf 93       	push	r28
    38a2:	df 93       	push	r29
    38a4:	38 2e       	mov	r3, r24
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    38a6:	22 e0       	ldi	r18, 0x02	; 2
    38a8:	82 13       	cpse	r24, r18
    38aa:	9f c0       	rjmp	.+318    	; 0x39ea <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x168>
  {
    if (a_flag == true) return;
    38ac:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    38b0:	81 11       	cpse	r24, r1
    38b2:	89 c0       	rjmp	.+274    	; 0x39c6 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x144>
    b_flag = false;
    38b4:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a_flag = true;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    Joy_X_flag = OFF;
    38be:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;
    38c0:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    X_NEED_RUN_RAPID_FLAG = OFF;
    38c4:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (Z_WORKING_RAPID_FLAG == OFF)
    38c8:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    38cc:	81 11       	cpse	r24, r1
    38ce:	0c c0       	rjmp	.+24     	; 0x38e8 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x66>
    {
      OCR4A = max_OCR4A = (unsigned int)MIN_RAPID_MOTION;
    38d0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    38d4:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    38d8:	90 93 44 12 	sts	0x1244, r25	; 0x801244 <max_OCR4A+0x1>
    38dc:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <max_OCR4A>
    38e0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    38e4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;   //По своей сути это константа (после прохода секции SETUP), можно вычислить заранее
    38e8:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    38ec:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    38f0:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    38f4:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    38f8:	28 1b       	sub	r18, r24
    38fa:	39 0b       	sbc	r19, r25
    38fc:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    3900:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    3904:	24 9f       	mul	r18, r20
    3906:	c0 01       	movw	r24, r0
    3908:	25 9f       	mul	r18, r21
    390a:	90 0d       	add	r25, r0
    390c:	34 9f       	mul	r19, r20
    390e:	90 0d       	add	r25, r0
    3910:	11 24       	eor	r1, r1
    3912:	01 96       	adiw	r24, 0x01	; 1
    //    aFeed_Divisor = Start_Speed;
    //    max_OCR4A = Start_Speed;
    //    OCR4A = Start_Speed;
    //  }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    3914:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    3918:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Left - Brake_Compens;
    391c:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    3920:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    3924:	05 2e       	mov	r0, r21
    3926:	00 0c       	add	r0, r0
    3928:	66 0b       	sbc	r22, r22
    392a:	77 0b       	sbc	r23, r23
    392c:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    3930:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    3934:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    3938:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    393c:	84 1b       	sub	r24, r20
    393e:	95 0b       	sbc	r25, r21
    3940:	a6 0b       	sbc	r26, r22
    3942:	b7 0b       	sbc	r27, r23
    3944:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    3948:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    394c:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    3950:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CW;
    3954:	f1 98       	cbi	0x1e, 1	; 30
  Motor_Z_CW();
    3956:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    395a:	8f 7b       	andi	r24, 0xBF	; 191
    395c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
    3960:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    3964:	84 fd       	sbrc	r24, 4
    3966:	0e c0       	rjmp	.+28     	; 0x3984 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x102>
    3968:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    396c:	80 61       	ori	r24, 0x10	; 16
    396e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3972:	8f ef       	ldi	r24, 0xFF	; 255
    3974:	9b ed       	ldi	r25, 0xDB	; 219
    3976:	25 e0       	ldi	r18, 0x05	; 5
    3978:	81 50       	subi	r24, 0x01	; 1
    397a:	90 40       	sbci	r25, 0x00	; 0
    397c:	20 40       	sbci	r18, 0x00	; 0
    397e:	e1 f7       	brne	.-8      	; 0x3978 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0xf6>
    3980:	00 c0       	rjmp	.+0      	; 0x3982 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x100>
    3982:	00 00       	nop

  Joy_Z_flag = ON;
    3984:	f2 9a       	sbi	0x1e, 2	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	38 12       	cpse	r3, r24
    398a:	c4 c0       	rjmp	.+392    	; 0x3b14 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x292>
  {
    SpeedMode = FORCE_RAPID;
    398c:	30 92 36 12 	sts	0x1236, r3	; 0x801236 <SpeedMode>
    Z_NEED_RUN_RAPID_FLAG = ON;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
    Z_NEED_RUN_FEED_FLAG = ON;
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    Z_NEED_RUN_FEED_FLAG = ON;
  }
  Ena_INT_Z_aFeed();
    3996:	e8 98       	cbi	0x1d, 0	; 29
    3998:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    399c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    39a0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    39a4:	8d 7f       	andi	r24, 0xFD	; 253
    39a6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    39aa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    39ae:	8b 7f       	andi	r24, 0xFB	; 251
    39b0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    39b4:	e9 98       	cbi	0x1d, 1	; 29
    39b6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    39ba:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    39be:	82 e0       	ldi	r24, 0x02	; 2
    39c0:	89 bb       	out	0x19, r24	; 25
    39c2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

}
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	ff 90       	pop	r15
    39d0:	ef 90       	pop	r14
    39d2:	df 90       	pop	r13
    39d4:	cf 90       	pop	r12
    39d6:	bf 90       	pop	r11
    39d8:	af 90       	pop	r10
    39da:	9f 90       	pop	r9
    39dc:	8f 90       	pop	r8
    39de:	7f 90       	pop	r7
    39e0:	6f 90       	pop	r6
    39e2:	5f 90       	pop	r5
    39e4:	4f 90       	pop	r4
    39e6:	3f 90       	pop	r3
    39e8:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;   //По своей сути это константа (после прохода секции SETUP), можно вычислить заранее
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;
    39ea:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    39ee:	81 11       	cpse	r24, r1
    39f0:	ea cf       	rjmp	.-44     	; 0x39c6 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x144>
    a_flag = false;
    39f2:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_X_flag = OFF;
    39fc:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;
    39fe:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = (250000 / ((uint32_t)MIN_aFEED * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1) / FEED_ACCEL;
    3a02:	00 91 05 0a 	lds	r16, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    3a06:	10 91 06 0a 	lds	r17, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    3a0a:	c0 91 03 0a 	lds	r28, 0x0A03	; 0x800a03 <McSTEP_Z>
    3a0e:	d0 91 04 0a 	lds	r29, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    3a12:	a0 91 01 0a 	lds	r26, 0x0A01	; 0x800a01 <SCREW_Z>
    3a16:	b0 91 02 0a 	lds	r27, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    3a1a:	2c e3       	ldi	r18, 0x3C	; 60
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    3a22:	24 e6       	ldi	r18, 0x64	; 100
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e0       	ldi	r20, 0x00	; 0
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3a2e:	29 01       	movw	r4, r18
    3a30:	3a 01       	movw	r6, r20
    3a32:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    3a36:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    3a3a:	98 01       	movw	r18, r16
    3a3c:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    3a40:	9b 01       	movw	r18, r22
    3a42:	ac 01       	movw	r20, r24
    3a44:	de 01       	movw	r26, r28
    3a46:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    3a4a:	a3 01       	movw	r20, r6
    3a4c:	92 01       	movw	r18, r4
    3a4e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3a52:	22 0f       	add	r18, r18
    3a54:	33 1f       	adc	r19, r19
    3a56:	44 1f       	adc	r20, r20
    3a58:	55 1f       	adc	r21, r21
    3a5a:	90 e9       	ldi	r25, 0x90	; 144
    3a5c:	89 2e       	mov	r8, r25
    3a5e:	90 ed       	ldi	r25, 0xD0	; 208
    3a60:	99 2e       	mov	r9, r25
    3a62:	93 e0       	ldi	r25, 0x03	; 3
    3a64:	a9 2e       	mov	r10, r25
    3a66:	b1 2c       	mov	r11, r1
    3a68:	c5 01       	movw	r24, r10
    3a6a:	b4 01       	movw	r22, r8
    3a6c:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3a70:	ca 01       	movw	r24, r20
    3a72:	b9 01       	movw	r22, r18
    3a74:	61 50       	subi	r22, 0x01	; 1
    3a76:	71 09       	sbc	r23, r1
    3a78:	81 09       	sbc	r24, r1
    3a7a:	91 09       	sbc	r25, r1
    3a7c:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <FEED_ACCEL>
    3a80:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    3a84:	03 2e       	mov	r0, r19
    3a86:	00 0c       	add	r0, r0
    3a88:	44 0b       	sbc	r20, r20
    3a8a:	55 0b       	sbc	r21, r21
    3a8c:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3a90:	69 01       	movw	r12, r18
    //Большее значение OCR4A это более медленное вращение (интервал опроса таймера больше)
    //и наоборот - чем меньше значение OCR4A тем быстрее вращается (интервал опроса таймера меньше)
    //OCR4A это uint16_t, от 0 до 65535

    //OLD
    aFeed_Divisor = 250000 / ((uint32_t)aFeed_mm * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1;
    3a92:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <aFeed_mm>
    3a96:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <aFeed_mm+0x1>
    3a9a:	98 01       	movw	r18, r16
    3a9c:	de 01       	movw	r26, r28
    3a9e:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    3aa2:	da 01       	movw	r26, r20
    3aa4:	9b 01       	movw	r18, r22
    3aa6:	ac 01       	movw	r20, r24
    3aa8:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    3aac:	a3 01       	movw	r20, r6
    3aae:	92 01       	movw	r18, r4
    3ab0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3ab4:	22 0f       	add	r18, r18
    3ab6:	33 1f       	adc	r19, r19
    3ab8:	44 1f       	adc	r20, r20
    3aba:	55 1f       	adc	r21, r21
    3abc:	c5 01       	movw	r24, r10
    3abe:	b4 01       	movw	r22, r8
    3ac0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3ac4:	21 50       	subi	r18, 0x01	; 1
    3ac6:	31 09       	sbc	r19, r1
    3ac8:	30 93 38 12 	sts	0x1238, r19	; 0x801238 <aFeed_Divisor+0x1>
    3acc:	20 93 37 12 	sts	0x1237, r18	; 0x801237 <aFeed_Divisor>
    //-

    if (aFeed_Divisor < Start_Speed)          //!!!!!!!!!!!!!!!!!!!!!!!!
    3ad0:	2c 15       	cp	r18, r12
    3ad2:	3d 05       	cpc	r19, r13
    3ad4:	b0 f4       	brcc	.+44     	; 0x3b02 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x280>
    {
      max_OCR4A = Start_Speed;
    3ad6:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    3ada:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
      if (Z_WORKING_FEED_FLAG == OFF)
    3ade:	f3 99       	sbic	0x1e, 3	; 30
    3ae0:	04 c0       	rjmp	.+8      	; 0x3aea <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x268>
      {
        OCR4A = Start_Speed;
    3ae2:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3ae6:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    //    aFeed_Divisor = Start_Speed;
    //    max_OCR4A = Start_Speed;
    //    OCR4A = Start_Speed;
    //  }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    3aea:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    3aee:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    3af2:	01 96       	adiw	r24, 0x01	; 1
    3af4:	20 91 37 12 	lds	r18, 0x1237	; 0x801237 <aFeed_Divisor>
    3af8:	30 91 38 12 	lds	r19, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    3afc:	82 1b       	sub	r24, r18
    3afe:	93 0b       	sbc	r25, r19
    3b00:	09 cf       	rjmp	.-494    	; 0x3914 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x92>
      {
        OCR4A = Start_Speed;
        //Beep2();    //ОТЛАДКА
      }
    } else {
      max_OCR4A = aFeed_Divisor;
    3b02:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    3b06:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
      OCR4A = aFeed_Divisor;
    3b0a:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3b0e:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    3b12:	eb cf       	rjmp	.-42     	; 0x3aea <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x268>
  {
    SpeedMode = FORCE_RAPID;
    Z_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    3b1a:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    3b1e:	3b cf       	rjmp	.-394    	; 0x3996 <_Z14NEW_aFeed_LeftRbS_h.constprop.3+0x114>

00003b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>:
  }
  Ena_INT_Z_aFeed();

}
//=====================================================================================================================================================================================================================
void NEW_aFeed_Right(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    3b20:	3f 92       	push	r3
    3b22:	4f 92       	push	r4
    3b24:	5f 92       	push	r5
    3b26:	6f 92       	push	r6
    3b28:	7f 92       	push	r7
    3b2a:	8f 92       	push	r8
    3b2c:	9f 92       	push	r9
    3b2e:	af 92       	push	r10
    3b30:	bf 92       	push	r11
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	38 2e       	mov	r3, r24
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    3b44:	22 e0       	ldi	r18, 0x02	; 2
    3b46:	82 13       	cpse	r24, r18
    3b48:	9f c0       	rjmp	.+318    	; 0x3c88 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x168>
  {
    if (a_flag == true) return;
    3b4a:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    3b4e:	81 11       	cpse	r24, r1
    3b50:	89 c0       	rjmp	.+274    	; 0x3c64 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x144>
    b_flag = false;
    3b52:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a_flag = true;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    Joy_X_flag = OFF;
    3b5c:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;
    3b5e:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    X_NEED_RUN_RAPID_FLAG = OFF;
    3b62:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (Z_WORKING_RAPID_FLAG == OFF)
    3b66:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    3b6a:	81 11       	cpse	r24, r1
    3b6c:	0c c0       	rjmp	.+24     	; 0x3b86 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x66>
    {
      OCR4A = max_OCR4A = (unsigned int)MIN_RAPID_MOTION;
    3b6e:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    3b72:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3b76:	90 93 44 12 	sts	0x1244, r25	; 0x801244 <max_OCR4A+0x1>
    3b7a:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <max_OCR4A>
    3b7e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3b82:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    3b86:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    3b8a:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3b8e:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    3b92:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    3b96:	28 1b       	sub	r18, r24
    3b98:	39 0b       	sbc	r19, r25
    3b9a:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    3b9e:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    3ba2:	24 9f       	mul	r18, r20
    3ba4:	c0 01       	movw	r24, r0
    3ba6:	25 9f       	mul	r18, r21
    3ba8:	90 0d       	add	r25, r0
    3baa:	34 9f       	mul	r19, r20
    3bac:	90 0d       	add	r25, r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    //    aFeed_Divisor = Start_Speed;
    //    max_OCR4A = Start_Speed;
    //    OCR4A = Start_Speed;
    //  }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    3bb2:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    3bb6:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Right + Brake_Compens;
    3bba:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    3bbe:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    3bc2:	09 2e       	mov	r0, r25
    3bc4:	00 0c       	add	r0, r0
    3bc6:	aa 0b       	sbc	r26, r26
    3bc8:	bb 0b       	sbc	r27, r27
    3bca:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    3bce:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    3bd2:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    3bd6:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    3bda:	84 0f       	add	r24, r20
    3bdc:	95 1f       	adc	r25, r21
    3bde:	a6 1f       	adc	r26, r22
    3be0:	b7 1f       	adc	r27, r23
    3be2:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    3be6:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    3bea:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    3bee:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_Z_Dir = CCW;
    3bf2:	f1 9a       	sbi	0x1e, 1	; 30
  Motor_Z_CCW();
    3bf4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3bf8:	80 64       	ori	r24, 0x40	; 64
    3bfa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_Z_Ena_State == false) Motor_Z_Enable();
    3bfe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    3c02:	84 fd       	sbrc	r24, 4
    3c04:	0e c0       	rjmp	.+28     	; 0x3c22 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x102>
    3c06:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3c0a:	80 61       	ori	r24, 0x10	; 16
    3c0c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3c10:	8f ef       	ldi	r24, 0xFF	; 255
    3c12:	9b ed       	ldi	r25, 0xDB	; 219
    3c14:	25 e0       	ldi	r18, 0x05	; 5
    3c16:	81 50       	subi	r24, 0x01	; 1
    3c18:	90 40       	sbci	r25, 0x00	; 0
    3c1a:	20 40       	sbci	r18, 0x00	; 0
    3c1c:	e1 f7       	brne	.-8      	; 0x3c16 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0xf6>
    3c1e:	00 c0       	rjmp	.+0      	; 0x3c20 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x100>
    3c20:	00 00       	nop

  Joy_Z_flag = ON;
    3c22:	f2 9a       	sbi	0x1e, 2	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    3c24:	82 e0       	ldi	r24, 0x02	; 2
    3c26:	38 12       	cpse	r3, r24
    3c28:	c4 c0       	rjmp	.+392    	; 0x3db2 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x292>
  {
    SpeedMode = FORCE_RAPID;
    3c2a:	30 92 36 12 	sts	0x1236, r3	; 0x801236 <SpeedMode>
    Z_NEED_RUN_RAPID_FLAG = ON;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
    Z_NEED_RUN_FEED_FLAG = ON;
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    Z_NEED_RUN_FEED_FLAG = ON;
  }
  Ena_INT_Z_aFeed();
    3c34:	e8 98       	cbi	0x1d, 0	; 29
    3c36:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3c3a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3c3e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3c42:	8d 7f       	andi	r24, 0xFD	; 253
    3c44:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3c48:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3c4c:	8b 7f       	andi	r24, 0xFB	; 251
    3c4e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3c52:	e9 98       	cbi	0x1d, 1	; 29
    3c54:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    3c58:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    3c5c:	82 e0       	ldi	r24, 0x02	; 2
    3c5e:	89 bb       	out	0x19, r24	; 25
    3c60:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

}
    3c64:	df 91       	pop	r29
    3c66:	cf 91       	pop	r28
    3c68:	1f 91       	pop	r17
    3c6a:	0f 91       	pop	r16
    3c6c:	ff 90       	pop	r15
    3c6e:	ef 90       	pop	r14
    3c70:	df 90       	pop	r13
    3c72:	cf 90       	pop	r12
    3c74:	bf 90       	pop	r11
    3c76:	af 90       	pop	r10
    3c78:	9f 90       	pop	r9
    3c7a:	8f 90       	pop	r8
    3c7c:	7f 90       	pop	r7
    3c7e:	6f 90       	pop	r6
    3c80:	5f 90       	pop	r5
    3c82:	4f 90       	pop	r4
    3c84:	3f 90       	pop	r3
    3c86:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;
    3c88:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    3c8c:	81 11       	cpse	r24, r1
    3c8e:	ea cf       	rjmp	.-44     	; 0x3c64 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x144>
    a_flag = false;
    3c90:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_X_flag = OFF;
    3c9a:	f5 98       	cbi	0x1e, 5	; 30
    X_NEED_RUN_FEED_FLAG = OFF;
    3c9c:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = (250000 / ((uint32_t)MIN_aFEED * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1) / FEED_ACCEL;
    3ca0:	00 91 05 0a 	lds	r16, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    3ca4:	10 91 06 0a 	lds	r17, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    3ca8:	c0 91 03 0a 	lds	r28, 0x0A03	; 0x800a03 <McSTEP_Z>
    3cac:	d0 91 04 0a 	lds	r29, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    3cb0:	a0 91 01 0a 	lds	r26, 0x0A01	; 0x800a01 <SCREW_Z>
    3cb4:	b0 91 02 0a 	lds	r27, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    3cb8:	2c e3       	ldi	r18, 0x3C	; 60
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    3cc0:	24 e6       	ldi	r18, 0x64	; 100
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3ccc:	29 01       	movw	r4, r18
    3cce:	3a 01       	movw	r6, r20
    3cd0:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    3cd4:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    3cd8:	98 01       	movw	r18, r16
    3cda:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    3cde:	9b 01       	movw	r18, r22
    3ce0:	ac 01       	movw	r20, r24
    3ce2:	de 01       	movw	r26, r28
    3ce4:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    3ce8:	a3 01       	movw	r20, r6
    3cea:	92 01       	movw	r18, r4
    3cec:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3cf0:	22 0f       	add	r18, r18
    3cf2:	33 1f       	adc	r19, r19
    3cf4:	44 1f       	adc	r20, r20
    3cf6:	55 1f       	adc	r21, r21
    3cf8:	90 e9       	ldi	r25, 0x90	; 144
    3cfa:	89 2e       	mov	r8, r25
    3cfc:	90 ed       	ldi	r25, 0xD0	; 208
    3cfe:	99 2e       	mov	r9, r25
    3d00:	93 e0       	ldi	r25, 0x03	; 3
    3d02:	a9 2e       	mov	r10, r25
    3d04:	b1 2c       	mov	r11, r1
    3d06:	c5 01       	movw	r24, r10
    3d08:	b4 01       	movw	r22, r8
    3d0a:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3d0e:	ca 01       	movw	r24, r20
    3d10:	b9 01       	movw	r22, r18
    3d12:	61 50       	subi	r22, 0x01	; 1
    3d14:	71 09       	sbc	r23, r1
    3d16:	81 09       	sbc	r24, r1
    3d18:	91 09       	sbc	r25, r1
    3d1a:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <FEED_ACCEL>
    3d1e:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    3d22:	03 2e       	mov	r0, r19
    3d24:	00 0c       	add	r0, r0
    3d26:	44 0b       	sbc	r20, r20
    3d28:	55 0b       	sbc	r21, r21
    3d2a:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3d2e:	69 01       	movw	r12, r18
    //Тут участок плавной раскрутки (торможения), но он работает только у левого лимита
    //  if (Motor_Z_Pos > Limit_Pos_Right + Start_Speed * 2)
    //  {

    //OLD
    aFeed_Divisor = 250000 / ((uint32_t)aFeed_mm * MOTOR_Z_STEP_PER_REV * McSTEP_Z / ((uint32_t)60 * SCREW_Z / 100) * 2) - 1;
    3d30:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <aFeed_mm>
    3d34:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <aFeed_mm+0x1>
    3d38:	98 01       	movw	r18, r16
    3d3a:	de 01       	movw	r26, r28
    3d3c:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    3d40:	da 01       	movw	r26, r20
    3d42:	9b 01       	movw	r18, r22
    3d44:	ac 01       	movw	r20, r24
    3d46:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    3d4a:	a3 01       	movw	r20, r6
    3d4c:	92 01       	movw	r18, r4
    3d4e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3d52:	22 0f       	add	r18, r18
    3d54:	33 1f       	adc	r19, r19
    3d56:	44 1f       	adc	r20, r20
    3d58:	55 1f       	adc	r21, r21
    3d5a:	c5 01       	movw	r24, r10
    3d5c:	b4 01       	movw	r22, r8
    3d5e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3d62:	21 50       	subi	r18, 0x01	; 1
    3d64:	31 09       	sbc	r19, r1
    3d66:	30 93 38 12 	sts	0x1238, r19	; 0x801238 <aFeed_Divisor+0x1>
    3d6a:	20 93 37 12 	sts	0x1237, r18	; 0x801237 <aFeed_Divisor>
    //-

    if (aFeed_Divisor < Start_Speed)
    3d6e:	2c 15       	cp	r18, r12
    3d70:	3d 05       	cpc	r19, r13
    3d72:	b0 f4       	brcc	.+44     	; 0x3da0 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x280>
    {
      max_OCR4A = Start_Speed;
    3d74:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    3d78:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
      if (Z_WORKING_FEED_FLAG == OFF)
    3d7c:	f3 99       	sbic	0x1e, 3	; 30
    3d7e:	04 c0       	rjmp	.+8      	; 0x3d88 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x268>
      {
        OCR4A = Start_Speed;
    3d80:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3d84:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    //    aFeed_Divisor = Start_Speed;
    //    max_OCR4A = Start_Speed;
    //    OCR4A = Start_Speed;
    //  }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    3d88:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    3d8c:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    3d90:	01 96       	adiw	r24, 0x01	; 1
    3d92:	20 91 37 12 	lds	r18, 0x1237	; 0x801237 <aFeed_Divisor>
    3d96:	30 91 38 12 	lds	r19, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    3d9a:	82 1b       	sub	r24, r18
    3d9c:	93 0b       	sbc	r25, r19
    3d9e:	09 cf       	rjmp	.-494    	; 0x3bb2 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x92>
      {
        OCR4A = Start_Speed;
        //Beep2();    //ОТЛАДКА
      }
    } else {
      max_OCR4A = aFeed_Divisor;
    3da0:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    3da4:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
      OCR4A = aFeed_Divisor;
    3da8:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3dac:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    3db0:	eb cf       	rjmp	.-42     	; 0x3d88 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x268>
  {
    SpeedMode = FORCE_RAPID;
    Z_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    Z_NEED_RUN_FEED_FLAG = ON;
    3db8:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    3dbc:	3b cf       	rjmp	.-394    	; 0x3c34 <_Z15NEW_aFeed_RightRbS_h.constprop.2+0x114>

00003dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>:
  }
  Ena_INT_Z_aFeed();

}
//=====================================================================================================================================================================================================================
void NEW_aFeed_Front(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    3dbe:	2f 92       	push	r2
    3dc0:	3f 92       	push	r3
    3dc2:	4f 92       	push	r4
    3dc4:	5f 92       	push	r5
    3dc6:	6f 92       	push	r6
    3dc8:	7f 92       	push	r7
    3dca:	8f 92       	push	r8
    3dcc:	9f 92       	push	r9
    3dce:	af 92       	push	r10
    3dd0:	bf 92       	push	r11
    3dd2:	cf 92       	push	r12
    3dd4:	df 92       	push	r13
    3dd6:	ef 92       	push	r14
    3dd8:	ff 92       	push	r15
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	00 d0       	rcall	.+0      	; 0x3de4 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x26>
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	89 83       	std	Y+1, r24	; 0x01
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    3dea:	82 30       	cpi	r24, 0x02	; 2
    3dec:	09 f0       	breq	.+2      	; 0x3df0 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x32>
    3dee:	a4 c0       	rjmp	.+328    	; 0x3f38 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x17a>
  {
    if (a_flag == true) return;
    3df0:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    3df4:	81 11       	cpse	r24, r1
    3df6:	8a c0       	rjmp	.+276    	; 0x3f0c <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x14e>
    b_flag = false;
    3df8:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a_flag = true;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    Joy_Z_flag = OFF;
    3e02:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;
    3e04:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    Z_NEED_RUN_RAPID_FLAG = OFF;
    3e08:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (X_WORKING_RAPID_FLAG == OFF)
    3e0c:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    3e10:	81 11       	cpse	r24, r1
    3e12:	0c c0       	rjmp	.+24     	; 0x3e2c <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x6e>
    {
      OCR4A = max_OCR4A = (unsigned int)MIN_RAPID_MOTION;
    3e14:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    3e18:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3e1c:	90 93 44 12 	sts	0x1244, r25	; 0x801244 <max_OCR4A+0x1>
    3e20:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <max_OCR4A>
    3e24:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3e28:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    3e2c:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    3e30:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    3e34:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    3e38:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    3e3c:	28 1b       	sub	r18, r24
    3e3e:	39 0b       	sbc	r19, r25
    3e40:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    3e44:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    3e48:	24 9f       	mul	r18, r20
    3e4a:	c0 01       	movw	r24, r0
    3e4c:	25 9f       	mul	r18, r21
    3e4e:	90 0d       	add	r25, r0
    3e50:	34 9f       	mul	r19, r20
    3e52:	90 0d       	add	r25, r0
    3e54:	11 24       	eor	r1, r1
    3e56:	01 96       	adiw	r24, 0x01	; 1
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;
      OCR4A = Start_Speed;
    }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    3e58:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    3e5c:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Front - Brake_Compens;
    3e60:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <Brake_Compens>
    3e64:	50 91 56 12 	lds	r21, 0x1256	; 0x801256 <Brake_Compens+0x1>
    3e68:	05 2e       	mov	r0, r21
    3e6a:	00 0c       	add	r0, r0
    3e6c:	66 0b       	sbc	r22, r22
    3e6e:	77 0b       	sbc	r23, r23
    3e70:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    3e74:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    3e78:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    3e7c:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    3e80:	84 1b       	sub	r24, r20
    3e82:	95 0b       	sbc	r25, r21
    3e84:	a6 0b       	sbc	r26, r22
    3e86:	b7 0b       	sbc	r27, r23
    3e88:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    3e8c:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    3e90:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    3e94:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_X_Dir = CW;
    3e98:	f4 98       	cbi	0x1e, 4	; 30
  Motor_X_CW();
    3e9a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3e9e:	8f 7d       	andi	r24, 0xDF	; 223
    3ea0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_X_Ena_State == false) Motor_X_Enable();
    3ea4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    3ea8:	83 fd       	sbrc	r24, 3
    3eaa:	0e c0       	rjmp	.+28     	; 0x3ec8 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x10a>
    3eac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3eb0:	88 60       	ori	r24, 0x08	; 8
    3eb2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    3eb6:	9f ef       	ldi	r25, 0xFF	; 255
    3eb8:	2b ed       	ldi	r18, 0xDB	; 219
    3eba:	85 e0       	ldi	r24, 0x05	; 5
    3ebc:	91 50       	subi	r25, 0x01	; 1
    3ebe:	20 40       	sbci	r18, 0x00	; 0
    3ec0:	80 40       	sbci	r24, 0x00	; 0
    3ec2:	e1 f7       	brne	.-8      	; 0x3ebc <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0xfe>
    3ec4:	00 c0       	rjmp	.+0      	; 0x3ec6 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x108>
    3ec6:	00 00       	nop

  Joy_X_flag = ON;
    3ec8:	f5 9a       	sbi	0x1e, 5	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    3eca:	99 81       	ldd	r25, Y+1	; 0x01
    3ecc:	92 30       	cpi	r25, 0x02	; 2
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x114>
    3ed0:	f1 c0       	rjmp	.+482    	; 0x40b4 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x2f6>
  {
    SpeedMode = FORCE_RAPID;
    3ed2:	90 93 36 12 	sts	0x1236, r25	; 0x801236 <SpeedMode>
    X_NEED_RUN_RAPID_FLAG = ON;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	80 93 30 12 	sts	0x1230, r24	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
    X_NEED_RUN_FEED_FLAG = ON;
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    X_NEED_RUN_FEED_FLAG = ON;
  }
  Ena_INT_X_aFeed();
    3edc:	e8 98       	cbi	0x1d, 0	; 29
    3ede:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3ee2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    3ee6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3eea:	8d 7f       	andi	r24, 0xFD	; 253
    3eec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3ef0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3ef4:	8b 7f       	andi	r24, 0xFB	; 251
    3ef6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    3efa:	e9 98       	cbi	0x1d, 1	; 29
    3efc:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    3f00:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    3f04:	84 e0       	ldi	r24, 0x04	; 4
    3f06:	89 bb       	out	0x19, r24	; 25
    3f08:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

}
    3f0c:	0f 90       	pop	r0
    3f0e:	0f 90       	pop	r0
    3f10:	0f 90       	pop	r0
    3f12:	df 91       	pop	r29
    3f14:	cf 91       	pop	r28
    3f16:	1f 91       	pop	r17
    3f18:	0f 91       	pop	r16
    3f1a:	ff 90       	pop	r15
    3f1c:	ef 90       	pop	r14
    3f1e:	df 90       	pop	r13
    3f20:	cf 90       	pop	r12
    3f22:	bf 90       	pop	r11
    3f24:	af 90       	pop	r10
    3f26:	9f 90       	pop	r9
    3f28:	8f 90       	pop	r8
    3f2a:	7f 90       	pop	r7
    3f2c:	6f 90       	pop	r6
    3f2e:	5f 90       	pop	r5
    3f30:	4f 90       	pop	r4
    3f32:	3f 90       	pop	r3
    3f34:	2f 90       	pop	r2
    3f36:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;
    3f38:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    3f3c:	81 11       	cpse	r24, r1
    3f3e:	e6 cf       	rjmp	.-52     	; 0x3f0c <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x14e>
    a_flag = false;
    3f40:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_Z_flag = OFF;
    3f4a:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;
    3f4c:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = (250000 / ((uint32_t)MIN_aFEED * MOTOR_X_STEP_PER_REV * McSTEP_X / ((uint32_t)60 * SCREW_X / 100) * 2) - 1) / FEED_ACCEL;
    3f50:	00 91 ff 09 	lds	r16, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    3f54:	10 91 00 0a 	lds	r17, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    3f58:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    3f5c:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    3f60:	9b 83       	std	Y+3, r25	; 0x03
    3f62:	8a 83       	std	Y+2, r24	; 0x02
    3f64:	a0 91 07 0a 	lds	r26, 0x0A07	; 0x800a07 <SCREW_X>
    3f68:	b0 91 08 0a 	lds	r27, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    3f6c:	2c e3       	ldi	r18, 0x3C	; 60
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    3f74:	24 e6       	ldi	r18, 0x64	; 100
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	40 e0       	ldi	r20, 0x00	; 0
    3f7a:	50 e0       	ldi	r21, 0x00	; 0
    3f7c:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3f80:	29 01       	movw	r4, r18
    3f82:	3a 01       	movw	r6, r20
    3f84:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    3f88:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    3f8c:	98 01       	movw	r18, r16
    3f8e:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
    3f96:	aa 81       	ldd	r26, Y+2	; 0x02
    3f98:	bb 81       	ldd	r27, Y+3	; 0x03
    3f9a:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    3f9e:	a3 01       	movw	r20, r6
    3fa0:	92 01       	movw	r18, r4
    3fa2:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3fa6:	22 0f       	add	r18, r18
    3fa8:	33 1f       	adc	r19, r19
    3faa:	44 1f       	adc	r20, r20
    3fac:	55 1f       	adc	r21, r21
    3fae:	60 e9       	ldi	r22, 0x90	; 144
    3fb0:	86 2e       	mov	r8, r22
    3fb2:	60 ed       	ldi	r22, 0xD0	; 208
    3fb4:	96 2e       	mov	r9, r22
    3fb6:	63 e0       	ldi	r22, 0x03	; 3
    3fb8:	a6 2e       	mov	r10, r22
    3fba:	b1 2c       	mov	r11, r1
    3fbc:	c5 01       	movw	r24, r10
    3fbe:	b4 01       	movw	r22, r8
    3fc0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3fc4:	ca 01       	movw	r24, r20
    3fc6:	b9 01       	movw	r22, r18
    3fc8:	61 50       	subi	r22, 0x01	; 1
    3fca:	71 09       	sbc	r23, r1
    3fcc:	81 09       	sbc	r24, r1
    3fce:	91 09       	sbc	r25, r1
    3fd0:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <FEED_ACCEL>
    3fd4:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    3fd8:	03 2e       	mov	r0, r19
    3fda:	00 0c       	add	r0, r0
    3fdc:	44 0b       	sbc	r20, r20
    3fde:	55 0b       	sbc	r21, r21
    3fe0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    3fe4:	69 01       	movw	r12, r18
    //---

    if (Motor_X_Pos < Limit_Pos_Front - Start_Speed * 2)
    3fe6:	22 0f       	add	r18, r18
    3fe8:	33 1f       	adc	r19, r19
    3fea:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    3fee:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    3ff2:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    3ff6:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    3ffa:	82 1b       	sub	r24, r18
    3ffc:	93 0b       	sbc	r25, r19
    3ffe:	a1 09       	sbc	r26, r1
    4000:	b1 09       	sbc	r27, r1
    4002:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    4006:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    400a:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    400e:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    4012:	48 17       	cp	r20, r24
    4014:	59 07       	cpc	r21, r25
    4016:	6a 07       	cpc	r22, r26
    4018:	7b 07       	cpc	r23, r27
    401a:	0c f0       	brlt	.+2      	; 0x401e <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x260>
    401c:	42 c0       	rjmp	.+132    	; 0x40a2 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x2e4>
    {
      //OLD
      aFeed_Divisor = 250000 / ((uint32_t)aFeed_mm * MOTOR_X_STEP_PER_REV * McSTEP_X / ((uint32_t)60 * SCREW_X / 100) * 2) - 1;
    401e:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <aFeed_mm>
    4022:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <aFeed_mm+0x1>
    4026:	98 01       	movw	r18, r16
    4028:	aa 81       	ldd	r26, Y+2	; 0x02
    402a:	bb 81       	ldd	r27, Y+3	; 0x03
    402c:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    4030:	da 01       	movw	r26, r20
    4032:	9b 01       	movw	r18, r22
    4034:	ac 01       	movw	r20, r24
    4036:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    403a:	a3 01       	movw	r20, r6
    403c:	92 01       	movw	r18, r4
    403e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    4042:	22 0f       	add	r18, r18
    4044:	33 1f       	adc	r19, r19
    4046:	44 1f       	adc	r20, r20
    4048:	55 1f       	adc	r21, r21
    404a:	c5 01       	movw	r24, r10
    404c:	b4 01       	movw	r22, r8
    404e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    4052:	21 50       	subi	r18, 0x01	; 1
    4054:	31 09       	sbc	r19, r1
    4056:	30 93 38 12 	sts	0x1238, r19	; 0x801238 <aFeed_Divisor+0x1>
    405a:	20 93 37 12 	sts	0x1237, r18	; 0x801237 <aFeed_Divisor>
      //-

      if (aFeed_Divisor < Start_Speed)
    405e:	2c 15       	cp	r18, r12
    4060:	3d 05       	cpc	r19, r13
    4062:	58 f4       	brcc	.+22     	; 0x407a <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x2bc>
      {
        max_OCR4A = Start_Speed;
    4064:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    4068:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
        if (X_WORKING_FEED_FLAG == OFF)
    406c:	f6 99       	sbic	0x1e, 6	; 30
    406e:	0d c0       	rjmp	.+26     	; 0x408a <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x2cc>
        OCR4A = aFeed_Divisor;
      }
    } else {
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;
      OCR4A = Start_Speed;
    4070:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    4074:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    4078:	08 c0       	rjmp	.+16     	; 0x408a <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x2cc>
        if (X_WORKING_FEED_FLAG == OFF)
        {
          OCR4A = Start_Speed;
        }
      } else {
        max_OCR4A = aFeed_Divisor;
    407a:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    407e:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
        OCR4A = aFeed_Divisor;
    4082:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    4086:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;
      OCR4A = Start_Speed;
    }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    408a:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    408e:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    4092:	01 96       	adiw	r24, 0x01	; 1
    4094:	20 91 37 12 	lds	r18, 0x1237	; 0x801237 <aFeed_Divisor>
    4098:	30 91 38 12 	lds	r19, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    409c:	82 1b       	sub	r24, r18
    409e:	93 0b       	sbc	r25, r19
    40a0:	db ce       	rjmp	.-586    	; 0x3e58 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x9a>
      } else {
        max_OCR4A = aFeed_Divisor;
        OCR4A = aFeed_Divisor;
      }
    } else {
      aFeed_Divisor = Start_Speed;
    40a2:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <aFeed_Divisor+0x1>
    40a6:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <aFeed_Divisor>
      max_OCR4A = Start_Speed;
    40aa:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    40ae:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
    40b2:	de cf       	rjmp	.-68     	; 0x4070 <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x2b2>
  {
    SpeedMode = FORCE_RAPID;
    X_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    X_NEED_RUN_FEED_FLAG = ON;
    40ba:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    40be:	0e cf       	rjmp	.-484    	; 0x3edc <_Z15NEW_aFeed_FrontRbS_h.constprop.1+0x11e>

000040c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>:
  }
  Ena_INT_X_aFeed();

}
//=====================================================================================================================================================================================================================
void NEW_aFeed_Rear(bool & a_flag, bool & b_flag, byte CurrentSpeedMode)
    40c0:	2f 92       	push	r2
    40c2:	3f 92       	push	r3
    40c4:	4f 92       	push	r4
    40c6:	5f 92       	push	r5
    40c8:	6f 92       	push	r6
    40ca:	7f 92       	push	r7
    40cc:	8f 92       	push	r8
    40ce:	9f 92       	push	r9
    40d0:	af 92       	push	r10
    40d2:	bf 92       	push	r11
    40d4:	cf 92       	push	r12
    40d6:	df 92       	push	r13
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	00 d0       	rcall	.+0      	; 0x40e6 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x26>
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
    40ea:	89 83       	std	Y+1, r24	; 0x01
{
  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    40ec:	82 30       	cpi	r24, 0x02	; 2
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x32>
    40f0:	a4 c0       	rjmp	.+328    	; 0x423a <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x17a>
  {
    if (a_flag == true) return;
    40f2:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <a_flag>
    40f6:	81 11       	cpse	r24, r1
    40f8:	8a c0       	rjmp	.+276    	; 0x420e <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x14e>
    b_flag = false;
    40fa:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a_flag = true;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	80 93 33 12 	sts	0x1233, r24	; 0x801233 <a_flag>
    Joy_Z_flag = OFF;
    4104:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;
    4106:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    Z_NEED_RUN_RAPID_FLAG = OFF;
    410a:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>

    //NEW На быстрой подаче стартуем сразу с минимальной скоростью MIN_RAPID_MOTION
    if (X_WORKING_RAPID_FLAG == OFF)
    410e:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    4112:	81 11       	cpse	r24, r1
    4114:	0c c0       	rjmp	.+24     	; 0x412e <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x6e>
    {
      OCR4A = max_OCR4A = (unsigned int)MIN_RAPID_MOTION;
    4116:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    411a:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    411e:	90 93 44 12 	sts	0x1244, r25	; 0x801244 <max_OCR4A+0x1>
    4122:	80 93 43 12 	sts	0x1243, r24	; 0x801243 <max_OCR4A>
    4126:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    412a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    }
    //---

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
    412e:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    4132:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    4136:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    413a:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    413e:	28 1b       	sub	r18, r24
    4140:	39 0b       	sbc	r19, r25
    4142:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
    4146:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
    414a:	24 9f       	mul	r18, r20
    414c:	c0 01       	movw	r24, r0
    414e:	25 9f       	mul	r18, r21
    4150:	90 0d       	add	r25, r0
    4152:	34 9f       	mul	r19, r20
    4154:	90 0d       	add	r25, r0
    4156:	11 24       	eor	r1, r1
    4158:	01 96       	adiw	r24, 0x01	; 1
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;
      OCR4A = Start_Speed;
    }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    415a:	90 93 56 12 	sts	0x1256, r25	; 0x801256 <Brake_Compens+0x1>
    415e:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <Brake_Compens>
  }
  Limit_Pos = Limit_Pos_Rear + Brake_Compens;
    4162:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
    4166:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
    416a:	09 2e       	mov	r0, r25
    416c:	00 0c       	add	r0, r0
    416e:	aa 0b       	sbc	r26, r26
    4170:	bb 0b       	sbc	r27, r27
    4172:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    4176:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    417a:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    417e:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    4182:	84 0f       	add	r24, r20
    4184:	95 1f       	adc	r25, r21
    4186:	a6 1f       	adc	r26, r22
    4188:	b7 1f       	adc	r27, r23
    418a:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
    418e:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
    4192:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
    4196:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>

  Motor_X_Dir = CCW;
    419a:	f4 9a       	sbi	0x1e, 4	; 30
  Motor_X_CCW();
    419c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    41a0:	80 62       	ori	r24, 0x20	; 32
    41a2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
  if (Read_X_Ena_State == false) Motor_X_Enable();
    41a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    41aa:	83 fd       	sbrc	r24, 3
    41ac:	0e c0       	rjmp	.+28     	; 0x41ca <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x10a>
    41ae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    41b2:	88 60       	ori	r24, 0x08	; 8
    41b4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    41b8:	9f ef       	ldi	r25, 0xFF	; 255
    41ba:	2b ed       	ldi	r18, 0xDB	; 219
    41bc:	85 e0       	ldi	r24, 0x05	; 5
    41be:	91 50       	subi	r25, 0x01	; 1
    41c0:	20 40       	sbci	r18, 0x00	; 0
    41c2:	80 40       	sbci	r24, 0x00	; 0
    41c4:	e1 f7       	brne	.-8      	; 0x41be <_Z14NEW_aFeed_RearRbS_h.constprop.0+0xfe>
    41c6:	00 c0       	rjmp	.+0      	; 0x41c8 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x108>
    41c8:	00 00       	nop

  Joy_X_flag = ON;
    41ca:	f5 9a       	sbi	0x1e, 5	; 30

  if (CurrentSpeedMode == FORCE_RAPID)          //БЫСТРАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
    41cc:	99 81       	ldd	r25, Y+1	; 0x01
    41ce:	92 30       	cpi	r25, 0x02	; 2
    41d0:	09 f0       	breq	.+2      	; 0x41d4 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x114>
    41d2:	f1 c0       	rjmp	.+482    	; 0x43b6 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x2f6>
  {
    SpeedMode = FORCE_RAPID;
    41d4:	90 93 36 12 	sts	0x1236, r25	; 0x801236 <SpeedMode>
    X_NEED_RUN_RAPID_FLAG = ON;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	80 93 30 12 	sts	0x1230, r24	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
    X_NEED_RUN_FEED_FLAG = ON;
  } else {                                    //ОБЫЧНАЯ ПОДАЧА
    SpeedMode = MANUAL;
    X_NEED_RUN_FEED_FLAG = ON;
  }
  Ena_INT_X_aFeed();
    41de:	e8 98       	cbi	0x1d, 0	; 29
    41e0:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    41e4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    41e8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    41ec:	8d 7f       	andi	r24, 0xFD	; 253
    41ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    41f2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    41f6:	8b 7f       	andi	r24, 0xFB	; 251
    41f8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    41fc:	e9 98       	cbi	0x1d, 1	; 29
    41fe:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    4202:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    4206:	84 e0       	ldi	r24, 0x04	; 4
    4208:	89 bb       	out	0x19, r24	; 25
    420a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

}
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	ff 90       	pop	r15
    421e:	ef 90       	pop	r14
    4220:	df 90       	pop	r13
    4222:	cf 90       	pop	r12
    4224:	bf 90       	pop	r11
    4226:	af 90       	pop	r10
    4228:	9f 90       	pop	r9
    422a:	8f 90       	pop	r8
    422c:	7f 90       	pop	r7
    422e:	6f 90       	pop	r6
    4230:	5f 90       	pop	r5
    4232:	4f 90       	pop	r4
    4234:	3f 90       	pop	r3
    4236:	2f 90       	pop	r2
    4238:	08 95       	ret

    Brake_Compens = (MIN_RAPID_MOTION - MAX_RAPID_MOTION) * REPEAt + 1;
  }
  else            //ОБЫЧНАЯ ПОДАЧА
  {
    if (b_flag == true) return;
    423a:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <b_flag>
    423e:	81 11       	cpse	r24, r1
    4240:	e6 cf       	rjmp	.-52     	; 0x420e <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x14e>
    a_flag = false;
    4242:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b_flag = true;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <b_flag>
    Joy_Z_flag = OFF;
    424c:	f2 98       	cbi	0x1e, 2	; 30
    Z_NEED_RUN_FEED_FLAG = OFF;
    424e:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>

    //OLD
    Start_Speed = (250000 / ((uint32_t)MIN_aFEED * MOTOR_X_STEP_PER_REV * McSTEP_X / ((uint32_t)60 * SCREW_X / 100) * 2) - 1) / FEED_ACCEL;
    4252:	00 91 ff 09 	lds	r16, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    4256:	10 91 00 0a 	lds	r17, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    425a:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    425e:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    4262:	9b 83       	std	Y+3, r25	; 0x03
    4264:	8a 83       	std	Y+2, r24	; 0x02
    4266:	a0 91 07 0a 	lds	r26, 0x0A07	; 0x800a07 <SCREW_X>
    426a:	b0 91 08 0a 	lds	r27, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    426e:	2c e3       	ldi	r18, 0x3C	; 60
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    4276:	24 e6       	ldi	r18, 0x64	; 100
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	40 e0       	ldi	r20, 0x00	; 0
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    4282:	29 01       	movw	r4, r18
    4284:	3a 01       	movw	r6, r20
    4286:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    428a:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    428e:	98 01       	movw	r18, r16
    4290:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    4294:	9b 01       	movw	r18, r22
    4296:	ac 01       	movw	r20, r24
    4298:	aa 81       	ldd	r26, Y+2	; 0x02
    429a:	bb 81       	ldd	r27, Y+3	; 0x03
    429c:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    42a0:	a3 01       	movw	r20, r6
    42a2:	92 01       	movw	r18, r4
    42a4:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    42a8:	22 0f       	add	r18, r18
    42aa:	33 1f       	adc	r19, r19
    42ac:	44 1f       	adc	r20, r20
    42ae:	55 1f       	adc	r21, r21
    42b0:	60 e9       	ldi	r22, 0x90	; 144
    42b2:	86 2e       	mov	r8, r22
    42b4:	60 ed       	ldi	r22, 0xD0	; 208
    42b6:	96 2e       	mov	r9, r22
    42b8:	63 e0       	ldi	r22, 0x03	; 3
    42ba:	a6 2e       	mov	r10, r22
    42bc:	b1 2c       	mov	r11, r1
    42be:	c5 01       	movw	r24, r10
    42c0:	b4 01       	movw	r22, r8
    42c2:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    42c6:	ca 01       	movw	r24, r20
    42c8:	b9 01       	movw	r22, r18
    42ca:	61 50       	subi	r22, 0x01	; 1
    42cc:	71 09       	sbc	r23, r1
    42ce:	81 09       	sbc	r24, r1
    42d0:	91 09       	sbc	r25, r1
    42d2:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <FEED_ACCEL>
    42d6:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    42da:	03 2e       	mov	r0, r19
    42dc:	00 0c       	add	r0, r0
    42de:	44 0b       	sbc	r20, r20
    42e0:	55 0b       	sbc	r21, r21
    42e2:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    42e6:	69 01       	movw	r12, r18
    //-

    if (Motor_X_Pos > Limit_Pos_Rear + Start_Speed * 2)
    42e8:	22 0f       	add	r18, r18
    42ea:	33 1f       	adc	r19, r19
    42ec:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    42f0:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    42f4:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    42f8:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    42fc:	82 0f       	add	r24, r18
    42fe:	93 1f       	adc	r25, r19
    4300:	a1 1d       	adc	r26, r1
    4302:	b1 1d       	adc	r27, r1
    4304:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    4308:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    430c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    4310:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    4314:	84 17       	cp	r24, r20
    4316:	95 07       	cpc	r25, r21
    4318:	a6 07       	cpc	r26, r22
    431a:	b7 07       	cpc	r27, r23
    431c:	0c f0       	brlt	.+2      	; 0x4320 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x260>
    431e:	42 c0       	rjmp	.+132    	; 0x43a4 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x2e4>
    {
      //OLD
      aFeed_Divisor = 250000 / ((uint32_t)aFeed_mm * MOTOR_X_STEP_PER_REV * McSTEP_X / ((uint32_t)60 * SCREW_X / 100) * 2) - 1;
    4320:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <aFeed_mm>
    4324:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <aFeed_mm+0x1>
    4328:	98 01       	movw	r18, r16
    432a:	aa 81       	ldd	r26, Y+2	; 0x02
    432c:	bb 81       	ldd	r27, Y+3	; 0x03
    432e:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    4332:	da 01       	movw	r26, r20
    4334:	9b 01       	movw	r18, r22
    4336:	ac 01       	movw	r20, r24
    4338:	0e 94 ee 98 	call	0x131dc	; 0x131dc <__muluhisi3>
    433c:	a3 01       	movw	r20, r6
    433e:	92 01       	movw	r18, r4
    4340:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    4344:	22 0f       	add	r18, r18
    4346:	33 1f       	adc	r19, r19
    4348:	44 1f       	adc	r20, r20
    434a:	55 1f       	adc	r21, r21
    434c:	c5 01       	movw	r24, r10
    434e:	b4 01       	movw	r22, r8
    4350:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    4354:	21 50       	subi	r18, 0x01	; 1
    4356:	31 09       	sbc	r19, r1
    4358:	30 93 38 12 	sts	0x1238, r19	; 0x801238 <aFeed_Divisor+0x1>
    435c:	20 93 37 12 	sts	0x1237, r18	; 0x801237 <aFeed_Divisor>
      //-

      if (aFeed_Divisor < Start_Speed)
    4360:	2c 15       	cp	r18, r12
    4362:	3d 05       	cpc	r19, r13
    4364:	58 f4       	brcc	.+22     	; 0x437c <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x2bc>
      {
        max_OCR4A = Start_Speed;
    4366:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    436a:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
        if (X_WORKING_FEED_FLAG == OFF)
    436e:	f6 99       	sbic	0x1e, 6	; 30
    4370:	0d c0       	rjmp	.+26     	; 0x438c <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x2cc>
        OCR4A = aFeed_Divisor;
      }
    } else {
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;
      OCR4A = Start_Speed;
    4372:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    4376:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    437a:	08 c0       	rjmp	.+16     	; 0x438c <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x2cc>
        if (X_WORKING_FEED_FLAG == OFF)
        {
          OCR4A = Start_Speed;
        }
      } else {
        max_OCR4A = aFeed_Divisor;
    437c:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    4380:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
        OCR4A = aFeed_Divisor;
    4384:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    4388:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
      aFeed_Divisor = Start_Speed;
      max_OCR4A = Start_Speed;
      OCR4A = Start_Speed;
    }

    Brake_Compens = (max_OCR4A - aFeed_Divisor) + 1;
    438c:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    4390:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    4394:	01 96       	adiw	r24, 0x01	; 1
    4396:	20 91 37 12 	lds	r18, 0x1237	; 0x801237 <aFeed_Divisor>
    439a:	30 91 38 12 	lds	r19, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    439e:	82 1b       	sub	r24, r18
    43a0:	93 0b       	sbc	r25, r19
    43a2:	db ce       	rjmp	.-586    	; 0x415a <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x9a>
      } else {
        max_OCR4A = aFeed_Divisor;
        OCR4A = aFeed_Divisor;
      }
    } else {
      aFeed_Divisor = Start_Speed;
    43a4:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <aFeed_Divisor+0x1>
    43a8:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <aFeed_Divisor>
      max_OCR4A = Start_Speed;
    43ac:	d0 92 44 12 	sts	0x1244, r13	; 0x801244 <max_OCR4A+0x1>
    43b0:	c0 92 43 12 	sts	0x1243, r12	; 0x801243 <max_OCR4A>
    43b4:	de cf       	rjmp	.-68     	; 0x4372 <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x2b2>
  {
    SpeedMode = FORCE_RAPID;
    X_NEED_RUN_RAPID_FLAG = ON;
  } else if (CurrentSpeedMode == FORCE_SLOW)   //ОБЫЧНАЯ ПОДАЧА ПРИНУДИТЕЛЬНАЯ
  {
    SpeedMode = FORCE_SLOW;
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	80 93 36 12 	sts	0x1236, r24	; 0x801236 <SpeedMode>
    X_NEED_RUN_FEED_FLAG = ON;
    43bc:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    43c0:	0e cf       	rjmp	.-484    	; 0x41de <_Z14NEW_aFeed_RearRbS_h.constprop.0+0x11e>

000043c2 <_Z10Beep_Errorv>:
   Beeper_Off();
}

void Beep_Error()
{
   Beeper_On();
    43c2:	e2 e0       	ldi	r30, 0x02	; 2
    43c4:	f1 e0       	ldi	r31, 0x01	; 1
    43c6:	80 81       	ld	r24, Z
    43c8:	8d 7f       	andi	r24, 0xFD	; 253
    43ca:	80 83       	st	Z, r24
    43cc:	2f ef       	ldi	r18, 0xFF	; 255
    43ce:	84 e3       	ldi	r24, 0x34	; 52
    43d0:	9c e0       	ldi	r25, 0x0C	; 12
    43d2:	21 50       	subi	r18, 0x01	; 1
    43d4:	80 40       	sbci	r24, 0x00	; 0
    43d6:	90 40       	sbci	r25, 0x00	; 0
    43d8:	e1 f7       	brne	.-8      	; 0x43d2 <_Z10Beep_Errorv+0x10>
    43da:	00 c0       	rjmp	.+0      	; 0x43dc <_Z10Beep_Errorv+0x1a>
    43dc:	00 00       	nop
   #ifdef DELAY_MS
    _delay_ms(250);
   #else
    delay(64*250);
   #endif
   Beeper_Off();
    43de:	80 81       	ld	r24, Z
    43e0:	82 60       	ori	r24, 0x02	; 2
    43e2:	80 83       	st	Z, r24
}
    43e4:	08 95       	ret

000043e6 <_Z8BeepBeepv>:
   Beeper_Off();
}

void BeepBeep()
{
   Beeper_On();
    43e6:	e2 e0       	ldi	r30, 0x02	; 2
    43e8:	f1 e0       	ldi	r31, 0x01	; 1
    43ea:	80 81       	ld	r24, Z
    43ec:	8d 7f       	andi	r24, 0xFD	; 253
    43ee:	80 83       	st	Z, r24
    43f0:	2f e7       	ldi	r18, 0x7F	; 127
    43f2:	88 e3       	ldi	r24, 0x38	; 56
    43f4:	91 e0       	ldi	r25, 0x01	; 1
    43f6:	21 50       	subi	r18, 0x01	; 1
    43f8:	80 40       	sbci	r24, 0x00	; 0
    43fa:	90 40       	sbci	r25, 0x00	; 0
    43fc:	e1 f7       	brne	.-8      	; 0x43f6 <_Z8BeepBeepv+0x10>
    43fe:	00 c0       	rjmp	.+0      	; 0x4400 <_Z8BeepBeepv+0x1a>
    4400:	00 00       	nop
   #ifdef DELAY_MS
    _delay_ms(25);
   #else
    delay(64*25);
   #endif
   Beeper_Off();   
    4402:	80 81       	ld	r24, Z
    4404:	82 60       	ori	r24, 0x02	; 2
    4406:	80 83       	st	Z, r24
    4408:	2f ef       	ldi	r18, 0xFF	; 255
    440a:	83 ec       	ldi	r24, 0xC3	; 195
    440c:	99 e0       	ldi	r25, 0x09	; 9
    440e:	21 50       	subi	r18, 0x01	; 1
    4410:	80 40       	sbci	r24, 0x00	; 0
    4412:	90 40       	sbci	r25, 0x00	; 0
    4414:	e1 f7       	brne	.-8      	; 0x440e <_Z8BeepBeepv+0x28>
    4416:	00 c0       	rjmp	.+0      	; 0x4418 <_Z8BeepBeepv+0x32>
    4418:	00 00       	nop
   #ifdef DELAY_MS
    _delay_ms(200);
   #else
    delay(64*200);
   #endif
   Beeper_On();
    441a:	80 81       	ld	r24, Z
    441c:	8d 7f       	andi	r24, 0xFD	; 253
    441e:	80 83       	st	Z, r24
    4420:	2f e7       	ldi	r18, 0x7F	; 127
    4422:	88 e3       	ldi	r24, 0x38	; 56
    4424:	91 e0       	ldi	r25, 0x01	; 1
    4426:	21 50       	subi	r18, 0x01	; 1
    4428:	80 40       	sbci	r24, 0x00	; 0
    442a:	90 40       	sbci	r25, 0x00	; 0
    442c:	e1 f7       	brne	.-8      	; 0x4426 <_Z8BeepBeepv+0x40>
    442e:	00 c0       	rjmp	.+0      	; 0x4430 <_Z8BeepBeepv+0x4a>
    4430:	00 00       	nop
   #ifdef DELAY_MS
    _delay_ms(25);
   #else
    delay(64*25);
   #endif
   Beeper_Off();
    4432:	80 81       	ld	r24, Z
    4434:	82 60       	ori	r24, 0x02	; 2
    4436:	80 83       	st	Z, r24
}
    4438:	08 95       	ret

0000443a <_Z4Beepv>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define DELAY_MS

void Beep()
{
   Beeper_On();
    443a:	e2 e0       	ldi	r30, 0x02	; 2
    443c:	f1 e0       	ldi	r31, 0x01	; 1
    443e:	80 81       	ld	r24, Z
    4440:	8d 7f       	andi	r24, 0xFD	; 253
    4442:	80 83       	st	Z, r24
    4444:	2f e7       	ldi	r18, 0x7F	; 127
    4446:	88 e3       	ldi	r24, 0x38	; 56
    4448:	91 e0       	ldi	r25, 0x01	; 1
    444a:	21 50       	subi	r18, 0x01	; 1
    444c:	80 40       	sbci	r24, 0x00	; 0
    444e:	90 40       	sbci	r25, 0x00	; 0
    4450:	e1 f7       	brne	.-8      	; 0x444a <_Z4Beepv+0x10>
    4452:	00 c0       	rjmp	.+0      	; 0x4454 <_Z4Beepv+0x1a>
    4454:	00 00       	nop
   #ifdef DELAY_MS
    _delay_ms(25);
   #else
    delay(64*25);
   #endif
   Beeper_Off();
    4456:	80 81       	ld	r24, Z
    4458:	82 60       	ori	r24, 0x02	; 2
    445a:	80 83       	st	Z, r24
}
    445c:	08 95       	ret

0000445e <_Z22Setup_Key_Left_Pressedv>:
  Beep();
}

// ********** Обработчик нажатия кнопки Left **********
void Setup_Key_Left_Pressed()
{
    445e:	8f 92       	push	r8
    4460:	9f 92       	push	r9
    4462:	af 92       	push	r10
    4464:	bf 92       	push	r11
    4466:	cf 92       	push	r12
    4468:	df 92       	push	r13
    446a:	ef 92       	push	r14
    446c:	ff 92       	push	r15
    446e:	0f 93       	push	r16
    4470:	1f 93       	push	r17
    4472:	cf 93       	push	r28
    4474:	df 93       	push	r29
  switch (SETUP_MODE)
    4476:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SETUP_MODE>
    447a:	83 30       	cpi	r24, 0x03	; 3
    447c:	09 f4       	brne	.+2      	; 0x4480 <_Z22Setup_Key_Left_Pressedv+0x22>
    447e:	52 c0       	rjmp	.+164    	; 0x4524 <_Z22Setup_Key_Left_Pressedv+0xc6>
    4480:	88 f4       	brcc	.+34     	; 0x44a4 <_Z22Setup_Key_Left_Pressedv+0x46>
    4482:	81 30       	cpi	r24, 0x01	; 1
    4484:	c9 f0       	breq	.+50     	; 0x44b8 <_Z22Setup_Key_Left_Pressedv+0x5a>
    4486:	82 30       	cpi	r24, 0x02	; 2
    4488:	b9 f1       	breq	.+110    	; 0x44f8 <_Z22Setup_Key_Left_Pressedv+0x9a>
      bModeWithoutExit = false;                     //Выходим в главное меню
      //}
      break;
  }
  Beep();
}
    448a:	df 91       	pop	r29
    448c:	cf 91       	pop	r28
    448e:	1f 91       	pop	r17
    4490:	0f 91       	pop	r16
    4492:	ff 90       	pop	r15
    4494:	ef 90       	pop	r14
    4496:	df 90       	pop	r13
    4498:	cf 90       	pop	r12
    449a:	bf 90       	pop	r11
    449c:	af 90       	pop	r10
    449e:	9f 90       	pop	r9
      //{
      bModeWithoutExit = false;                     //Выходим в главное меню
      //}
      break;
  }
  Beep();
    44a0:	8f 90       	pop	r8
    44a2:	cb cf       	rjmp	.-106    	; 0x443a <_Z4Beepv>
}

// ********** Обработчик нажатия кнопки Left **********
void Setup_Key_Left_Pressed()
{
  switch (SETUP_MODE)
    44a4:	85 30       	cpi	r24, 0x05	; 5
    44a6:	09 f4       	brne	.+2      	; 0x44aa <_Z22Setup_Key_Left_Pressedv+0x4c>
    44a8:	98 c0       	rjmp	.+304    	; 0x45da <_Z22Setup_Key_Left_Pressedv+0x17c>
    44aa:	08 f4       	brcc	.+2      	; 0x44ae <_Z22Setup_Key_Left_Pressedv+0x50>
    44ac:	93 c0       	rjmp	.+294    	; 0x45d4 <_Z22Setup_Key_Left_Pressedv+0x176>
    44ae:	86 30       	cpi	r24, 0x06	; 6
    44b0:	61 f7       	brne	.-40     	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      //}
      break;
    case MODE_EXIT_WITHOUT_SAVING:                    //ВЫХОД БЕЗ СОХРАНЕНИЯ
      //if(bModeWithoutExit)
      //{
      bModeWithoutExit = false;                     //Выходим в главное меню
    44b2:	10 92 bb 11 	sts	0x11BB, r1	; 0x8011bb <bModeWithoutExit>
    44b6:	e9 cf       	rjmp	.-46     	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
{
  switch (SETUP_MODE)
  {
    case MODE_PARAMETERS:                             //ПРОСМОТР И РЕДАКТИРОВАНИЕ ОСНОВНЫХ ПАРАМЕТРОВ "ЖЕЛЕЗА"

      if (!bModeParameters)
    44b8:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <bModeParameters>
    44bc:	88 23       	and	r24, r24
    44be:	29 f3       	breq	.-54     	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      {
        //Нет реакции на нажатие этой клавиши в этом пункте меню
      } else {
        //Находимся в подменю просмотра и редактирования параметров
        if (bEditParameters)                          //Находимся в процессе редактирования текущего параметра
    44c0:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    44c4:	88 23       	and	r24, r24
    44c6:	a9 f0       	breq	.+42     	; 0x44f2 <_Z22Setup_Key_Left_Pressedv+0x94>
        {
          //Если находимся в режиме редактирования переменной ENC_LINE_PER_REV
          //Вдвое меньше диапазона переменной, и чётное
          if (SETUP_ID == ID_ENC_LINE_PER_REV && ENC_LINE_PER_REV > 11)
    44c8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <SETUP_ID>
    44cc:	81 30       	cpi	r24, 0x01	; 1
    44ce:	e9 f6       	brne	.-70     	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
    44d0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    44d4:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    44d8:	8c 30       	cpi	r24, 0x0C	; 12
    44da:	91 05       	cpc	r25, r1
    44dc:	b4 f2       	brlt	.-84     	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
          {
            ENC_LINE_PER_REV = Check_All(ENC_LINE_PER_REV, ENC_LINE_PER_REV - 10); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    44de:	bc 01       	movw	r22, r24
    44e0:	6a 50       	subi	r22, 0x0A	; 10
    44e2:	71 09       	sbc	r23, r1
    44e4:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    44e8:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <ENC_LINE_PER_REV+0x1>
    44ec:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <ENC_LINE_PER_REV>
    44f0:	cc cf       	rjmp	.-104    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
          }
        } else {
          //Выходим в главное меню
          bModeParameters = false;                     //Выходим в главное меню
    44f2:	10 92 c4 11 	sts	0x11C4, r1	; 0x8011c4 <bModeParameters>
    44f6:	c9 cf       	rjmp	.-110    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
          bEditParameters = false;                     //Отключаем режим редактирования (хотя он должен быть выключен и true невозможно)
        }
      }
      break;
    case MODE_READ_THREAD:                            //ПРОСМОТР КОЭФФИЦИЕНТОВ РЕЗЬБ
      if (!bEditUserThread)
    44f8:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <bEditUserThread>
    44fc:	81 11       	cpse	r24, r1
    44fe:	03 c0       	rjmp	.+6      	; 0x4506 <_Z22Setup_Key_Left_Pressedv+0xa8>
      {
        bModeThread = false;                           //Выходим в главное меню
    4500:	10 92 b4 11 	sts	0x11B4, r1	; 0x8011b4 <bModeThread>
    4504:	c2 cf       	rjmp	.-124    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      } else {
        //Если находимся в процессе редактирования пользовательской резьбы...
        if (Thread_Info[CURRENT_THREAD].Pass > 1) --Thread_Info[CURRENT_THREAD].Pass;
    4506:	e0 91 c2 11 	lds	r30, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    450a:	8a e1       	ldi	r24, 0x1A	; 26
    450c:	e8 9f       	mul	r30, r24
    450e:	f0 01       	movw	r30, r0
    4510:	11 24       	eor	r1, r1
    4512:	e9 53       	subi	r30, 0x39	; 57
    4514:	fb 4f       	sbci	r31, 0xFB	; 251
    4516:	81 89       	ldd	r24, Z+17	; 0x11
    4518:	82 30       	cpi	r24, 0x02	; 2
    451a:	08 f4       	brcc	.+2      	; 0x451e <_Z22Setup_Key_Left_Pressedv+0xc0>
    451c:	b6 cf       	rjmp	.-148    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
    451e:	81 50       	subi	r24, 0x01	; 1
    4520:	81 8b       	std	Z+17, r24	; 0x11
    4522:	b3 cf       	rjmp	.-154    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      }
      break;
    case MODE_READ_CONE:                              //ПРОСМОТР КОЭФФИЦИЕНТОВ КОНУСОВ

      if (!bEditUserConeAB && !bEditUserConeDEG)                //Если мы не редактируем пользовательский конус...
    4524:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <bEditUserConeAB>
    4528:	81 11       	cpse	r24, r1
    452a:	07 c0       	rjmp	.+14     	; 0x453a <_Z22Setup_Key_Left_Pressedv+0xdc>
    452c:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <bEditUserConeDEG>
    4530:	81 11       	cpse	r24, r1
    4532:	ab cf       	rjmp	.-170    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      {
        //if (bModeCone)
        //{
        bModeCone = false;                             //Выходим в главное меню
    4534:	10 92 b3 11 	sts	0x11B3, r1	; 0x8011b3 <bModeCone>
    4538:	a8 cf       	rjmp	.-176    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
        {
          //float MinC2 = Get_B_AB(Cone_Info[CURRENT_CONE].C1, 2.0f);           //Расчёт допустимого значения C2 при заданном C1
          ////float MaxC2 = Get_B_AB(Cone_Info[CURRENT_CONE].C1, 254.99f);       //Расчёт допустимого значения C2 при заданном C1


          float MinC2 = Get_B_AB(Cone_Info[CURRENT_CONE].C1, 254.99f, (byte)1);           //Расчёт допустимого значения C2 при заданном C1
    453a:	c0 91 c0 11 	lds	r28, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    453e:	83 e1       	ldi	r24, 0x13	; 19
    4540:	c8 9f       	mul	r28, r24
    4542:	e0 01       	movw	r28, r0
    4544:	11 24       	eor	r1, r1
    4546:	c0 5d       	subi	r28, 0xD0	; 208
    4548:	dd 4f       	sbci	r29, 0xFD	; 253
    454a:	6a 85       	ldd	r22, Y+10	; 0x0a
    454c:	7b 85       	ldd	r23, Y+11	; 0x0b
    454e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4550:	9d 85       	ldd	r25, Y+13	; 0x0d
    4552:	41 e0       	ldi	r20, 0x01	; 1
    4554:	0e 94 9c 02 	call	0x538	; 0x538 <_Z8Get_B_ABffh.constprop.10>
    4558:	4b 01       	movw	r8, r22
    455a:	5c 01       	movw	r10, r24


          float NextC2 = Cone_Info[CURRENT_CONE].C2 - scaleFloat * USER_CONEAB_STEP;
    455c:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <scaleFloat>
    4560:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <scaleFloat+0x1>
    4564:	b8 01       	movw	r22, r16
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    456e:	27 e1       	ldi	r18, 0x17	; 23
    4570:	37 eb       	ldi	r19, 0xB7	; 183
    4572:	41 ed       	ldi	r20, 0xD1	; 209
    4574:	58 e3       	ldi	r21, 0x38	; 56
    4576:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    457a:	9b 01       	movw	r18, r22
    457c:	ac 01       	movw	r20, r24
    457e:	6e 85       	ldd	r22, Y+14	; 0x0e
    4580:	7f 85       	ldd	r23, Y+15	; 0x0f
    4582:	88 89       	ldd	r24, Y+16	; 0x10
    4584:	99 89       	ldd	r25, Y+17	; 0x11
    4586:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    458a:	6b 01       	movw	r12, r22
    458c:	7c 01       	movw	r14, r24
          if (NextC2 >= USER_CONEAB_MIN && NextC2 > MinC2)
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	5f e3       	ldi	r21, 0x3F	; 63
    4596:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    459a:	87 fd       	sbrc	r24, 7
    459c:	18 c0       	rjmp	.+48     	; 0x45ce <_Z22Setup_Key_Left_Pressedv+0x170>
    459e:	a7 01       	movw	r20, r14
    45a0:	96 01       	movw	r18, r12
    45a2:	c5 01       	movw	r24, r10
    45a4:	b4 01       	movw	r22, r8
    45a6:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    45aa:	87 ff       	sbrs	r24, 7
    45ac:	10 c0       	rjmp	.+32     	; 0x45ce <_Z22Setup_Key_Left_Pressedv+0x170>
          {
            Cone_Info[CURRENT_CONE].C2 = NextC2;
    45ae:	ce 86       	std	Y+14, r12	; 0x0e
    45b0:	df 86       	std	Y+15, r13	; 0x0f
    45b2:	e8 8a       	std	Y+16, r14	; 0x10
    45b4:	f9 8a       	std	Y+17, r15	; 0x11
            if (scaleFloat < (32767 - USER_CONEAB_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEAB_CHANGE_SPEED;
    45b6:	0b 3e       	cpi	r16, 0xEB	; 235
    45b8:	8f e7       	ldi	r24, 0x7F	; 127
    45ba:	18 07       	cpc	r17, r24
    45bc:	08 f0       	brcs	.+2      	; 0x45c0 <_Z22Setup_Key_Left_Pressedv+0x162>
    45be:	65 cf       	rjmp	.-310    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
    45c0:	0c 5e       	subi	r16, 0xEC	; 236
    45c2:	1f 4f       	sbci	r17, 0xFF	; 255
    45c4:	10 93 16 02 	sts	0x0216, r17	; 0x800216 <scaleFloat+0x1>
    45c8:	00 93 15 02 	sts	0x0215, r16	; 0x800215 <scaleFloat>
    45cc:	5e cf       	rjmp	.-324    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
          } else {
            ScaleDiv2();
    45ce:	0e 94 09 04 	call	0x812	; 0x812 <_Z9ScaleDiv2v>
    45d2:	5b cf       	rjmp	.-330    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      }
      break;
    case MODE_RESET_TO_DEFAULTS:                     //СБРОС НА ДЕФОЛТНЫЕ
      //if(bModeResetToDefaults)
      //{
      bModeResetToDefaults = false;                     //Выходим в главное меню
    45d4:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <bModeResetToDefaults>
    45d8:	58 cf       	rjmp	.-336    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>
      //}
      break;
    case MODE_EXIT_AND_SAVING:                        //ВЫХОД И СОХРАНЕНИЕ
      //if(bModeSaveAndExit)
      //{
      bModeSaveAndExit = false;                     //Выходим в главное меню
    45da:	10 92 bc 11 	sts	0x11BC, r1	; 0x8011bc <bModeSaveAndExit>
    45de:	55 cf       	rjmp	.-342    	; 0x448a <_Z22Setup_Key_Left_Pressedv+0x2c>

000045e0 <_Z23Setup_Key_Right_Pressedv>:
  Beep();
}

// ********** Обработчик нажатия кнопки Right **********
void Setup_Key_Right_Pressed()
{
    45e0:	8f 92       	push	r8
    45e2:	9f 92       	push	r9
    45e4:	af 92       	push	r10
    45e6:	bf 92       	push	r11
    45e8:	cf 92       	push	r12
    45ea:	df 92       	push	r13
    45ec:	ef 92       	push	r14
    45ee:	ff 92       	push	r15
    45f0:	0f 93       	push	r16
    45f2:	1f 93       	push	r17
    45f4:	cf 93       	push	r28
    45f6:	df 93       	push	r29
  switch (SETUP_MODE)
    45f8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SETUP_MODE>
    45fc:	83 30       	cpi	r24, 0x03	; 3
    45fe:	09 f4       	brne	.+2      	; 0x4602 <_Z23Setup_Key_Right_Pressedv+0x22>
    4600:	5d c0       	rjmp	.+186    	; 0x46bc <_Z23Setup_Key_Right_Pressedv+0xdc>
    4602:	88 f4       	brcc	.+34     	; 0x4626 <_Z23Setup_Key_Right_Pressedv+0x46>
    4604:	81 30       	cpi	r24, 0x01	; 1
    4606:	f1 f0       	breq	.+60     	; 0x4644 <_Z23Setup_Key_Right_Pressedv+0x64>
    4608:	82 30       	cpi	r24, 0x02	; 2
    460a:	e9 f1       	breq	.+122    	; 0x4686 <_Z23Setup_Key_Right_Pressedv+0xa6>
        bModeWithoutExit = true;
      }
      break;
  }
  Beep();
}
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	ff 90       	pop	r15
    4616:	ef 90       	pop	r14
    4618:	df 90       	pop	r13
    461a:	cf 90       	pop	r12
    461c:	bf 90       	pop	r11
    461e:	af 90       	pop	r10
    4620:	9f 90       	pop	r9
      {
        bModeWithoutExit = true;
      }
      break;
  }
  Beep();
    4622:	8f 90       	pop	r8
    4624:	0a cf       	rjmp	.-492    	; 0x443a <_Z4Beepv>
}

// ********** Обработчик нажатия кнопки Right **********
void Setup_Key_Right_Pressed()
{
  switch (SETUP_MODE)
    4626:	85 30       	cpi	r24, 0x05	; 5
    4628:	09 f4       	brne	.+2      	; 0x462c <_Z23Setup_Key_Right_Pressedv+0x4c>
    462a:	ab c0       	rjmp	.+342    	; 0x4782 <_Z23Setup_Key_Right_Pressedv+0x1a2>
    462c:	08 f4       	brcc	.+2      	; 0x4630 <_Z23Setup_Key_Right_Pressedv+0x50>
    462e:	a1 c0       	rjmp	.+322    	; 0x4772 <_Z23Setup_Key_Right_Pressedv+0x192>
    4630:	86 30       	cpi	r24, 0x06	; 6
    4632:	61 f7       	brne	.-40     	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      {
        bModeSaveAndExit = true;
      }
      break;
    case MODE_EXIT_WITHOUT_SAVING:                    //ВЫХОД БЕЗ СОХРАНЕНИЯ
      if (!bModeWithoutExit)
    4634:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <bModeWithoutExit>
    4638:	81 11       	cpse	r24, r1
    463a:	e8 cf       	rjmp	.-48     	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      {
        bModeWithoutExit = true;
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <bModeWithoutExit>
    4642:	e4 cf       	rjmp	.-56     	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
void Setup_Key_Right_Pressed()
{
  switch (SETUP_MODE)
  {
    case MODE_PARAMETERS:                             //ПРОСМОТР И РЕДАКТИРОВАНИЕ ОСНОВНЫХ ПАРАМЕТРОВ "ЖЕЛЕЗА"
      if (!bModeParameters)
    4644:	90 91 c4 11 	lds	r25, 0x11C4	; 0x8011c4 <bModeParameters>
    4648:	91 11       	cpse	r25, r1
    464a:	03 c0       	rjmp	.+6      	; 0x4652 <_Z23Setup_Key_Right_Pressedv+0x72>
      {
        //Обработчик для изменения параметра в режиме редактирования
        bModeParameters = true;                       //Заходим в подменю просмотра/редактирования параметров
    464c:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <bModeParameters>
    4650:	dd cf       	rjmp	.-70     	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      } else {
        if (bEditParameters)                         //Листаем, если переменная не находится в режиме редактирования и не достигла конца списка
    4652:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    4656:	88 23       	and	r24, r24
    4658:	c9 f2       	breq	.-78     	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
        {
          //Если находимся в режиме редактирования переменной ENC_LINE_PER_REV
          //Вдвое меньше диапазона переменной, и чётное
          if (SETUP_ID == ID_ENC_LINE_PER_REV && ENC_LINE_PER_REV <= 16372)    //Фактический максимум после увеличения 16382. ENC_TICK = 2*16382 = 32764
    465a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <SETUP_ID>
    465e:	81 30       	cpi	r24, 0x01	; 1
    4660:	a9 f6       	brne	.-86     	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
    4662:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    4666:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    466a:	85 3f       	cpi	r24, 0xF5	; 245
    466c:	2f e3       	ldi	r18, 0x3F	; 63
    466e:	92 07       	cpc	r25, r18
    4670:	6c f6       	brge	.-102    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
          {
            ENC_LINE_PER_REV = Check_All(ENC_LINE_PER_REV, ENC_LINE_PER_REV + 10); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    4672:	bc 01       	movw	r22, r24
    4674:	66 5f       	subi	r22, 0xF6	; 246
    4676:	7f 4f       	sbci	r23, 0xFF	; 255
    4678:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    467c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <ENC_LINE_PER_REV+0x1>
    4680:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <ENC_LINE_PER_REV>
    4684:	c3 cf       	rjmp	.-122    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
          }
        }
      }
      break;
    case MODE_READ_THREAD:                            //ПРОСМОТР КОЭФФИЦИЕНТОВ РЕЗЬБ
      if (!bEditUserThread)
    4686:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <bEditUserThread>
    468a:	81 11       	cpse	r24, r1
    468c:	08 c0       	rjmp	.+16     	; 0x469e <_Z23Setup_Key_Right_Pressedv+0xbe>
      {
        if (!bModeThread)
    468e:	80 91 b4 11 	lds	r24, 0x11B4	; 0x8011b4 <bModeThread>
    4692:	81 11       	cpse	r24, r1
    4694:	bb cf       	rjmp	.-138    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
        {
          bModeThread = true;                           //Заходим в подменю просмотра коэффициентов РЕЗЬБ
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	80 93 b4 11 	sts	0x11B4, r24	; 0x8011b4 <bModeThread>
    469c:	b7 cf       	rjmp	.-146    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
          //} else {
          //  //Если находимся в режиме просмотра коэффициентов РЕЗЬБ...
        }
      } else {
        //Если находимся в процессе редактирования пользовательской резьбы...
        if (Thread_Info[CURRENT_THREAD].Pass < 255) ++Thread_Info[CURRENT_THREAD].Pass;
    469e:	e0 91 c2 11 	lds	r30, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    46a2:	8a e1       	ldi	r24, 0x1A	; 26
    46a4:	e8 9f       	mul	r30, r24
    46a6:	f0 01       	movw	r30, r0
    46a8:	11 24       	eor	r1, r1
    46aa:	e9 53       	subi	r30, 0x39	; 57
    46ac:	fb 4f       	sbci	r31, 0xFB	; 251
    46ae:	81 89       	ldd	r24, Z+17	; 0x11
    46b0:	8f 3f       	cpi	r24, 0xFF	; 255
    46b2:	09 f4       	brne	.+2      	; 0x46b6 <_Z23Setup_Key_Right_Pressedv+0xd6>
    46b4:	ab cf       	rjmp	.-170    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
    46b6:	8f 5f       	subi	r24, 0xFF	; 255
    46b8:	81 8b       	std	Z+17, r24	; 0x11
    46ba:	a8 cf       	rjmp	.-176    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      }
      break;
    case MODE_READ_CONE:                              //ПРОСМОТР КОЭФФИЦИЕНТОВ КОНУСОВ
      if (!bEditUserConeAB && !bEditUserConeDEG)                //Если мы не редактируем пользовательский конус...
    46bc:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <bEditUserConeAB>
    46c0:	81 11       	cpse	r24, r1
    46c2:	0c c0       	rjmp	.+24     	; 0x46dc <_Z23Setup_Key_Right_Pressedv+0xfc>
    46c4:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <bEditUserConeDEG>
    46c8:	81 11       	cpse	r24, r1
    46ca:	a0 cf       	rjmp	.-192    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      {
        if (!bModeCone)
    46cc:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <bModeCone>
    46d0:	81 11       	cpse	r24, r1
    46d2:	9c cf       	rjmp	.-200    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
        {
          bModeCone = true;                             //Заходим в подменю просмотра коэффициентов КОНУСОВ
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <bModeCone>
    46da:	98 cf       	rjmp	.-208    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
        if (bEditUserConeAB)
        {
          ////float MinC2 = Get_B_AB(Cone_Info[CURRENT_CONE].C1, 2.0f);           //Расчёт допустимого значения C2 при заданном C1
          //float MaxC2 = Get_B_AB(Cone_Info[CURRENT_CONE].C1, 254.99f);       //Расчёт допустимого значения C2 при заданном C1

          float MaxC2 = Get_B_AB(Cone_Info[CURRENT_CONE].C1, 254.99f, (byte)0);       //Расчёт допустимого значения C2 при заданном C1
    46dc:	c0 91 c0 11 	lds	r28, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    46e0:	23 e1       	ldi	r18, 0x13	; 19
    46e2:	c2 9f       	mul	r28, r18
    46e4:	e0 01       	movw	r28, r0
    46e6:	11 24       	eor	r1, r1
    46e8:	c0 5d       	subi	r28, 0xD0	; 208
    46ea:	dd 4f       	sbci	r29, 0xFD	; 253
    46ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    46ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    46f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    46f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    46f4:	40 e0       	ldi	r20, 0x00	; 0
    46f6:	0e 94 9c 02 	call	0x538	; 0x538 <_Z8Get_B_ABffh.constprop.10>
    46fa:	4b 01       	movw	r8, r22
    46fc:	5c 01       	movw	r10, r24


          float NextC2 = Cone_Info[CURRENT_CONE].C2 + scaleFloat * USER_CONEAB_STEP;
    46fe:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <scaleFloat>
    4702:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <scaleFloat+0x1>
    4706:	b8 01       	movw	r22, r16
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    4710:	27 e1       	ldi	r18, 0x17	; 23
    4712:	37 eb       	ldi	r19, 0xB7	; 183
    4714:	41 ed       	ldi	r20, 0xD1	; 209
    4716:	58 e3       	ldi	r21, 0x38	; 56
    4718:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    471c:	2e 85       	ldd	r18, Y+14	; 0x0e
    471e:	3f 85       	ldd	r19, Y+15	; 0x0f
    4720:	48 89       	ldd	r20, Y+16	; 0x10
    4722:	59 89       	ldd	r21, Y+17	; 0x11
    4724:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    4728:	6b 01       	movw	r12, r22
    472a:	7c 01       	movw	r14, r24
          if (NextC2 <= USER_CONEAB_MAX && NextC2 < MaxC2)
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	4e e7       	ldi	r20, 0x7E	; 126
    4732:	53 e4       	ldi	r21, 0x43	; 67
    4734:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    4738:	18 16       	cp	r1, r24
    473a:	c4 f0       	brlt	.+48     	; 0x476c <_Z23Setup_Key_Right_Pressedv+0x18c>
    473c:	a7 01       	movw	r20, r14
    473e:	96 01       	movw	r18, r12
    4740:	c5 01       	movw	r24, r10
    4742:	b4 01       	movw	r22, r8
    4744:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4748:	18 16       	cp	r1, r24
    474a:	84 f4       	brge	.+32     	; 0x476c <_Z23Setup_Key_Right_Pressedv+0x18c>
          {
            Cone_Info[CURRENT_CONE].C2 = NextC2;
    474c:	ce 86       	std	Y+14, r12	; 0x0e
    474e:	df 86       	std	Y+15, r13	; 0x0f
    4750:	e8 8a       	std	Y+16, r14	; 0x10
    4752:	f9 8a       	std	Y+17, r15	; 0x11
            if (scaleFloat < (32767 - USER_CONEAB_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEAB_CHANGE_SPEED;
    4754:	0b 3e       	cpi	r16, 0xEB	; 235
    4756:	8f e7       	ldi	r24, 0x7F	; 127
    4758:	18 07       	cpc	r17, r24
    475a:	08 f0       	brcs	.+2      	; 0x475e <_Z23Setup_Key_Right_Pressedv+0x17e>
    475c:	57 cf       	rjmp	.-338    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
    475e:	0c 5e       	subi	r16, 0xEC	; 236
    4760:	1f 4f       	sbci	r17, 0xFF	; 255
    4762:	10 93 16 02 	sts	0x0216, r17	; 0x800216 <scaleFloat+0x1>
    4766:	00 93 15 02 	sts	0x0215, r16	; 0x800215 <scaleFloat>
    476a:	50 cf       	rjmp	.-352    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
          } else {
            ScaleDiv2();
    476c:	0e 94 09 04 	call	0x812	; 0x812 <_Z9ScaleDiv2v>
    4770:	4d cf       	rjmp	.-358    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
          }
        }
      }
      break;
    case MODE_RESET_TO_DEFAULTS:                     //СБРОС НА ДЕФОЛТНЫЕ
      if (!bModeResetToDefaults)
    4772:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <bModeResetToDefaults>
    4776:	81 11       	cpse	r24, r1
    4778:	49 cf       	rjmp	.-366    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      {
        bModeResetToDefaults = true;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <bModeResetToDefaults>
    4780:	45 cf       	rjmp	.-374    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      }
      break;
    case MODE_EXIT_AND_SAVING:                        //ВЫХОД И СОХРАНЕНИЕ
      if (!bModeSaveAndExit)
    4782:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <bModeSaveAndExit>
    4786:	81 11       	cpse	r24, r1
    4788:	41 cf       	rjmp	.-382    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>
      {
        bModeSaveAndExit = true;
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	80 93 bc 11 	sts	0x11BC, r24	; 0x8011bc <bModeSaveAndExit>
    4790:	3d cf       	rjmp	.-390    	; 0x460c <_Z23Setup_Key_Right_Pressedv+0x2c>

00004792 <_Z22Setup_Key_Down_Pressedv>:
  Beep();
}

// ********** Обработчик нажатия кнопки Down **********
void Setup_Key_Down_Pressed()
{
    4792:	2f 92       	push	r2
    4794:	3f 92       	push	r3
    4796:	4f 92       	push	r4
    4798:	5f 92       	push	r5
    479a:	6f 92       	push	r6
    479c:	7f 92       	push	r7
    479e:	8f 92       	push	r8
    47a0:	9f 92       	push	r9
    47a2:	af 92       	push	r10
    47a4:	bf 92       	push	r11
    47a6:	cf 92       	push	r12
    47a8:	df 92       	push	r13
    47aa:	ef 92       	push	r14
    47ac:	ff 92       	push	r15
    47ae:	0f 93       	push	r16
    47b0:	1f 93       	push	r17
    47b2:	cf 93       	push	r28
    47b4:	df 93       	push	r29
  if (SETUP_MODE == MODE_PARAMETERS)                  //ПРОСМОТР И РЕДАКТИРОВАНИЕ ОСНОВНЫХ ПАРАМЕТРОВ "ЖЕЛЕЗА"
    47b6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SETUP_MODE>
    47ba:	81 30       	cpi	r24, 0x01	; 1
    47bc:	09 f0       	breq	.+2      	; 0x47c0 <_Z22Setup_Key_Down_Pressedv+0x2e>
    47be:	db c1       	rjmp	.+950    	; 0x4b76 <_Z22Setup_Key_Down_Pressedv+0x3e4>
  {
    if (!bModeParameters)
    47c0:	90 91 c4 11 	lds	r25, 0x11C4	; 0x8011c4 <bModeParameters>
    47c4:	91 11       	cpse	r25, r1
    47c6:	04 c0       	rjmp	.+8      	; 0x47d0 <_Z22Setup_Key_Down_Pressedv+0x3e>
    {
      ++SETUP_MODE;                       //т.е фактически SETUP_MODE = MODE_READ_THREAD;
    47c8:	82 e0       	ldi	r24, 0x02	; 2
  } else if (SETUP_MODE == MODE_EXIT_AND_SAVING)             //ВЫХОД И СОХРАНЕНИЕ
  {
    ++SETUP_MODE;                         //Переход к пункту меню MODE_EXIT_WITHOUT_SAVING
  } else if (SETUP_MODE == LAST_SETUP_Mode)         //Последний пункт меню - MODE_EXIT_WITHOUT_SAVING
  {
    SETUP_MODE = 1;                       //Переход к первому пункту меню
    47ca:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <SETUP_MODE>
    47ce:	0b c0       	rjmp	.+22     	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    47d0:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <SETUP_ID>
  {
    if (!bModeParameters)
    {
      ++SETUP_MODE;                       //т.е фактически SETUP_MODE = MODE_READ_THREAD;
    } else {
      if (!bEditParameters)               //Листаем, если переменная не находится в режиме редактирования и не достигла конца списка
    47d4:	90 91 c3 11 	lds	r25, 0x11C3	; 0x8011c3 <bEditParameters>
    47d8:	91 11       	cpse	r25, r1
    47da:	1b c0       	rjmp	.+54     	; 0x4812 <_Z22Setup_Key_Down_Pressedv+0x80>
      {
        if (SETUP_ID < LAST_SETUP_id)       //Листаем на следующий параметр, если переменная не достигла конца списка
    47dc:	e9 31       	cpi	r30, 0x19	; 25
    47de:	b0 f4       	brcc	.+44     	; 0x480c <_Z22Setup_Key_Down_Pressedv+0x7a>
        {
          ++SETUP_ID;
    47e0:	ef 5f       	subi	r30, 0xFF	; 255
    47e2:	e0 93 0d 02 	sts	0x020D, r30	; 0x80020d <SETUP_ID>
  } else if (SETUP_MODE == LAST_SETUP_Mode)         //Последний пункт меню - MODE_EXIT_WITHOUT_SAVING
  {
    SETUP_MODE = 1;                       //Переход к первому пункту меню
  }
  Beep();
}
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	9f 90       	pop	r9
    47fc:	8f 90       	pop	r8
    47fe:	7f 90       	pop	r7
    4800:	6f 90       	pop	r6
    4802:	5f 90       	pop	r5
    4804:	4f 90       	pop	r4
    4806:	3f 90       	pop	r3
    ++SETUP_MODE;                         //Переход к пункту меню MODE_EXIT_WITHOUT_SAVING
  } else if (SETUP_MODE == LAST_SETUP_Mode)         //Последний пункт меню - MODE_EXIT_WITHOUT_SAVING
  {
    SETUP_MODE = 1;                       //Переход к первому пункту меню
  }
  Beep();
    4808:	2f 90       	pop	r2
    480a:	17 ce       	rjmp	.-978    	; 0x443a <_Z4Beepv>
      {
        if (SETUP_ID < LAST_SETUP_id)       //Листаем на следующий параметр, если переменная не достигла конца списка
        {
          ++SETUP_ID;
        } else {                          //Если достигли конца списка, то переходим на начало списка
          SETUP_ID = ID_ENC_LINE_PER_REV;
    480c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <SETUP_ID>
    4810:	ea cf       	rjmp	.-44     	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
        }
      } else {
        //Изменение переменных в режиме редактирования...
        switch (SETUP_ID)
    4812:	e1 50       	subi	r30, 0x01	; 1
    4814:	e9 31       	cpi	r30, 0x19	; 25
    4816:	38 f7       	brcc	.-50     	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	88 27       	eor	r24, r24
    481c:	ed 5e       	subi	r30, 0xED	; 237
    481e:	fb 4d       	sbci	r31, 0xDB	; 219
    4820:	8f 4f       	sbci	r24, 0xFF	; 255
    4822:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
    4826:	2c 24       	eor	r2, r12
    4828:	3e 24       	eor	r3, r14
    482a:	50 24       	eor	r5, r0
    482c:	62 24       	eor	r6, r2
    482e:	74 24       	eor	r7, r4
    4830:	82 24       	eor	r8, r2
    4832:	94 24       	eor	r9, r4
    4834:	a6 24       	eor	r10, r6
    4836:	b8 24       	eor	r11, r8
    4838:	c6 24       	eor	r12, r6
    483a:	cf 24       	eor	r12, r15
    483c:	dd 24       	eor	r13, r13
    483e:	ef 24       	eor	r14, r15
    4840:	09 25       	eor	r16, r9
    4842:	1b 25       	eor	r17, r11
    4844:	35 25       	eor	r19, r5
        {
          case   ID_ENC_LINE_PER_REV:
            //Вдвое меньше диапазона переменной, и чётное
            if (ENC_LINE_PER_REV > 2)
    4846:	43 25       	eor	r20, r3
    4848:	51 25       	eor	r21, r1
    484a:	5f 25       	eor	r21, r15
    484c:	6d 25       	eor	r22, r13
    484e:	7b 25       	eor	r23, r11
    4850:	89 25       	eor	r24, r9
    4852:	97 25       	eor	r25, r7
    4854:	a5 25       	eor	r26, r5
            {
              ENC_LINE_PER_REV = Check_All(ENC_LINE_PER_REV, ENC_LINE_PER_REV - 2); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    4856:	b3 25       	eor	r27, r3
    4858:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    485c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    4860:	83 30       	cpi	r24, 0x03	; 3
    4862:	91 05       	cpc	r25, r1
    4864:	0c f4       	brge	.+2      	; 0x4868 <_Z22Setup_Key_Down_Pressedv+0xd6>
    4866:	bf cf       	rjmp	.-130    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4868:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_MOTOR_Z_STEP_PER_REV:
            if (MOTOR_Z_STEP_PER_REV > 0)
    486a:	62 50       	subi	r22, 0x02	; 2
    486c:	71 09       	sbc	r23, r1
    486e:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4872:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <ENC_LINE_PER_REV+0x1>
    4876:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <ENC_LINE_PER_REV>
            {
              MOTOR_Z_STEP_PER_REV = Check_All(MOTOR_Z_STEP_PER_REV, MOTOR_Z_STEP_PER_REV - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    487a:	b5 cf       	rjmp	.-150    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    487c:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    4880:	90 91 06 0a 	lds	r25, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    4884:	18 16       	cp	r1, r24
    4886:	19 06       	cpc	r1, r25
    4888:	0c f0       	brlt	.+2      	; 0x488c <_Z22Setup_Key_Down_Pressedv+0xfa>
    488a:	ad cf       	rjmp	.-166    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    488c:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_SCREW_Z:
            if (SCREW_Z > 0)
    488e:	61 50       	subi	r22, 0x01	; 1
    4890:	71 09       	sbc	r23, r1
    4892:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4896:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    489a:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
            {
              SCREW_Z = Check_All(SCREW_Z, SCREW_Z - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    489e:	a3 cf       	rjmp	.-186    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    48a0:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <SCREW_Z>
    48a4:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    48a8:	18 16       	cp	r1, r24
    48aa:	19 06       	cpc	r1, r25
    48ac:	0c f0       	brlt	.+2      	; 0x48b0 <_Z22Setup_Key_Down_Pressedv+0x11e>
    48ae:	9b cf       	rjmp	.-202    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    48b0:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_McSTEP_Z:
            if (McSTEP_Z > 0)
    48b2:	61 50       	subi	r22, 0x01	; 1
    48b4:	71 09       	sbc	r23, r1
    48b6:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    48ba:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <SCREW_Z+0x1>
    48be:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <SCREW_Z>
            {
              McSTEP_Z = Check_All(McSTEP_Z, McSTEP_Z - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    48c2:	91 cf       	rjmp	.-222    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    48c4:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
    48c8:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    48cc:	18 16       	cp	r1, r24
    48ce:	19 06       	cpc	r1, r25
    48d0:	0c f0       	brlt	.+2      	; 0x48d4 <_Z22Setup_Key_Down_Pressedv+0x142>
    48d2:	89 cf       	rjmp	.-238    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    48d4:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_REBOUND_Z:
            if (REBOUND_Z > 0) --REBOUND_Z;
    48d6:	61 50       	subi	r22, 0x01	; 1
    48d8:	71 09       	sbc	r23, r1
    48da:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    48de:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <McSTEP_Z+0x1>
    48e2:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <McSTEP_Z>
    48e6:	7f cf       	rjmp	.-258    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    48e8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    48ec:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    48f0:	18 16       	cp	r1, r24
            break;
          case   ID_MOTOR_X_STEP_PER_REV:
            if (MOTOR_X_STEP_PER_REV > 0)
    48f2:	19 06       	cpc	r1, r25
    48f4:	0c f0       	brlt	.+2      	; 0x48f8 <_Z22Setup_Key_Down_Pressedv+0x166>
    48f6:	77 cf       	rjmp	.-274    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <REBOUND_Z+0x1>
    48fe:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <REBOUND_Z>
            {
              MOTOR_X_STEP_PER_REV = Check_All(MOTOR_X_STEP_PER_REV, MOTOR_X_STEP_PER_REV - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    4902:	71 cf       	rjmp	.-286    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4904:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    4908:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    490c:	18 16       	cp	r1, r24
    490e:	19 06       	cpc	r1, r25
    4910:	0c f0       	brlt	.+2      	; 0x4914 <_Z22Setup_Key_Down_Pressedv+0x182>
    4912:	69 cf       	rjmp	.-302    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4914:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_SCREW_X:
            if (SCREW_X > 0)
    4916:	61 50       	subi	r22, 0x01	; 1
    4918:	71 09       	sbc	r23, r1
    491a:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    491e:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    4922:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <MOTOR_X_STEP_PER_REV>
            {
              SCREW_X = Check_All(SCREW_X, SCREW_X - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    4926:	5f cf       	rjmp	.-322    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4928:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SCREW_X>
    492c:	90 91 08 0a 	lds	r25, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    4930:	18 16       	cp	r1, r24
    4932:	19 06       	cpc	r1, r25
    4934:	0c f0       	brlt	.+2      	; 0x4938 <_Z22Setup_Key_Down_Pressedv+0x1a6>
    4936:	57 cf       	rjmp	.-338    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4938:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_McSTEP_X:
            if (McSTEP_X > 0)
    493a:	61 50       	subi	r22, 0x01	; 1
    493c:	71 09       	sbc	r23, r1
    493e:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4942:	90 93 08 0a 	sts	0x0A08, r25	; 0x800a08 <SCREW_X+0x1>
    4946:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <SCREW_X>
            {
              McSTEP_X = Check_All(McSTEP_X, McSTEP_X - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    494a:	4d cf       	rjmp	.-358    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    494c:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    4950:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    4954:	18 16       	cp	r1, r24
    4956:	19 06       	cpc	r1, r25
    4958:	0c f0       	brlt	.+2      	; 0x495c <_Z22Setup_Key_Down_Pressedv+0x1ca>
    495a:	45 cf       	rjmp	.-374    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    495c:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_REBOUND_X:
            if (REBOUND_X > 0) --REBOUND_X;
    495e:	61 50       	subi	r22, 0x01	; 1
    4960:	71 09       	sbc	r23, r1
    4962:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4966:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <McSTEP_X+0x1>
    496a:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <McSTEP_X>
    496e:	3b cf       	rjmp	.-394    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4970:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    4974:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    4978:	18 16       	cp	r1, r24
            break;

          //Fix Отсутствовали
          case   ID_THRD_ACCEL:
            if (THRD_ACCEL > 1) --THRD_ACCEL;
    497a:	19 06       	cpc	r1, r25
    497c:	0c f0       	brlt	.+2      	; 0x4980 <_Z22Setup_Key_Down_Pressedv+0x1ee>
    497e:	33 cf       	rjmp	.-410    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4980:	01 97       	sbiw	r24, 0x01	; 1
    4982:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <REBOUND_X+0x1>
    4986:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <REBOUND_X>
    498a:	2d cf       	rjmp	.-422    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
            break;

          case   ID_FEED_ACCEL:
            if (FEED_ACCEL > 1) --FEED_ACCEL;
    498c:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <THRD_ACCEL>
    4990:	82 30       	cpi	r24, 0x02	; 2
    4992:	08 f4       	brcc	.+2      	; 0x4996 <_Z22Setup_Key_Down_Pressedv+0x204>
    4994:	28 cf       	rjmp	.-432    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4996:	81 50       	subi	r24, 0x01	; 1
    4998:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <THRD_ACCEL>
    499c:	24 cf       	rjmp	.-440    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    499e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <FEED_ACCEL>
    49a2:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    49a6:	82 30       	cpi	r24, 0x02	; 2
            break;
          //---

          case   ID_MIN_FEED:
            if (MIN_FEED > 0)
    49a8:	91 05       	cpc	r25, r1
    49aa:	0c f4       	brge	.+2      	; 0x49ae <_Z22Setup_Key_Down_Pressedv+0x21c>
    49ac:	1c cf       	rjmp	.-456    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <FEED_ACCEL+0x1>
    49b4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <FEED_ACCEL>
            {
              MIN_FEED = Check_All(MIN_FEED, MIN_FEED - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    49b8:	16 cf       	rjmp	.-468    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    49ba:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <MIN_FEED>
    49be:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <MIN_FEED+0x1>
    49c2:	18 16       	cp	r1, r24
    49c4:	19 06       	cpc	r1, r25
    49c6:	0c f0       	brlt	.+2      	; 0x49ca <_Z22Setup_Key_Down_Pressedv+0x238>
    49c8:	0e cf       	rjmp	.-484    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    49ca:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_MAX_FEED:
            if (MAX_FEED > 0 && MIN_FEED < MAX_FEED - 1)
    49cc:	61 50       	subi	r22, 0x01	; 1
    49ce:	71 09       	sbc	r23, r1
    49d0:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    49d4:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <MIN_FEED+0x1>
    49d8:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <MIN_FEED>
    49dc:	04 cf       	rjmp	.-504    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    49de:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <MAX_FEED>
    49e2:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <MAX_FEED+0x1>
    49e6:	18 16       	cp	r1, r24
    49e8:	19 06       	cpc	r1, r25
    49ea:	0c f0       	brlt	.+2      	; 0x49ee <_Z22Setup_Key_Down_Pressedv+0x25c>
    49ec:	fc ce       	rjmp	.-520    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    49ee:	bc 01       	movw	r22, r24
    49f0:	61 50       	subi	r22, 0x01	; 1
            {
              MAX_FEED = Check_All(MAX_FEED, MAX_FEED - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    49f2:	71 09       	sbc	r23, r1
    49f4:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <MIN_FEED>
    49f8:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <MIN_FEED+0x1>
    49fc:	26 17       	cp	r18, r22
    49fe:	37 07       	cpc	r19, r23
            }
            break;
          case   ID_MIN_aFEED:
            if (MIN_aFEED > 0)
    4a00:	0c f0       	brlt	.+2      	; 0x4a04 <_Z22Setup_Key_Down_Pressedv+0x272>
    4a02:	f1 ce       	rjmp	.-542    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a04:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4a08:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <MAX_FEED+0x1>
    4a0c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <MAX_FEED>
            {
              MIN_aFEED = Check_All(MIN_aFEED, MIN_aFEED - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    4a10:	ea ce       	rjmp	.-556    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a12:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <MIN_aFEED>
    4a16:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    4a1a:	18 16       	cp	r1, r24
    4a1c:	19 06       	cpc	r1, r25
    4a1e:	0c f0       	brlt	.+2      	; 0x4a22 <_Z22Setup_Key_Down_Pressedv+0x290>
    4a20:	e2 ce       	rjmp	.-572    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a22:	bc 01       	movw	r22, r24
            }
            break;
          case   ID_MAX_aFEED:
            if (MAX_aFEED > 0 && MIN_aFEED < MAX_aFEED - 1)
    4a24:	61 50       	subi	r22, 0x01	; 1
    4a26:	71 09       	sbc	r23, r1
    4a28:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4a2c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <MIN_aFEED+0x1>
    4a30:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <MIN_aFEED>
    4a34:	d8 ce       	rjmp	.-592    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a36:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MAX_aFEED>
    4a3a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <MAX_aFEED+0x1>
    4a3e:	18 16       	cp	r1, r24
    4a40:	19 06       	cpc	r1, r25
    4a42:	0c f0       	brlt	.+2      	; 0x4a46 <_Z22Setup_Key_Down_Pressedv+0x2b4>
    4a44:	d0 ce       	rjmp	.-608    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a46:	bc 01       	movw	r22, r24
    4a48:	61 50       	subi	r22, 0x01	; 1
            {
              MAX_aFEED = Check_All(MAX_aFEED, MAX_aFEED - 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    4a4a:	71 09       	sbc	r23, r1
    4a4c:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <MIN_aFEED>
    4a50:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    4a54:	26 17       	cp	r18, r22
    4a56:	37 07       	cpc	r19, r23
            }
            break;
          case   ID_MAX_RAPID_MOTION:
            if (MAX_RAPID_MOTION > 0) --MAX_RAPID_MOTION;
    4a58:	0c f0       	brlt	.+2      	; 0x4a5c <_Z22Setup_Key_Down_Pressedv+0x2ca>
    4a5a:	c5 ce       	rjmp	.-630    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a5c:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    4a60:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <MAX_aFEED+0x1>
    4a64:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <MAX_aFEED>
    4a68:	be ce       	rjmp	.-644    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a6a:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    4a6e:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    4a72:	18 16       	cp	r1, r24
            break;
          case   ID_MIN_RAPID_MOTION:
            if (MIN_RAPID_MOTION > 0) --MIN_RAPID_MOTION;
    4a74:	19 06       	cpc	r1, r25
    4a76:	0c f0       	brlt	.+2      	; 0x4a7a <_Z22Setup_Key_Down_Pressedv+0x2e8>
    4a78:	b6 ce       	rjmp	.-660    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    4a80:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <MAX_RAPID_MOTION>
    4a84:	b0 ce       	rjmp	.-672    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a86:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    4a8a:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    4a8e:	18 16       	cp	r1, r24
            break;
          case   ID_REPEAt:
            if (REPEAt > 0) --REPEAt;
    4a90:	19 06       	cpc	r1, r25
    4a92:	0c f0       	brlt	.+2      	; 0x4a96 <_Z22Setup_Key_Down_Pressedv+0x304>
    4a94:	a8 ce       	rjmp	.-688    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4a96:	01 97       	sbiw	r24, 0x01	; 1
    4a98:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    4a9c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <MIN_RAPID_MOTION>
    4aa0:	a2 ce       	rjmp	.-700    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4aa2:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
    4aa6:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
    4aaa:	18 16       	cp	r1, r24
            break;
          case   ID_HC_SCALE_1:
            if (HC_SCALE_1 > 0) --HC_SCALE_1;
    4aac:	19 06       	cpc	r1, r25
    4aae:	0c f0       	brlt	.+2      	; 0x4ab2 <_Z22Setup_Key_Down_Pressedv+0x320>
    4ab0:	9a ce       	rjmp	.-716    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4ab2:	01 97       	sbiw	r24, 0x01	; 1
    4ab4:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <REPEAt+0x1>
    4ab8:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <REPEAt>
    4abc:	94 ce       	rjmp	.-728    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4abe:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <HC_SCALE_1>
    4ac2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <HC_SCALE_1+0x1>
    4ac6:	18 16       	cp	r1, r24
            break;
          case   ID_HC_SCALE_10:
            if (HC_SCALE_10 > 0) --HC_SCALE_10;
    4ac8:	19 06       	cpc	r1, r25
    4aca:	0c f0       	brlt	.+2      	; 0x4ace <_Z22Setup_Key_Down_Pressedv+0x33c>
    4acc:	8c ce       	rjmp	.-744    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4ace:	01 97       	sbiw	r24, 0x01	; 1
    4ad0:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <HC_SCALE_1+0x1>
    4ad4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <HC_SCALE_1>
    4ad8:	86 ce       	rjmp	.-756    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4ada:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <HC_SCALE_10>
    4ade:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <HC_SCALE_10+0x1>
    4ae2:	18 16       	cp	r1, r24
            break;
          case   ID_HC_START_SPEED_1:
            if (HC_START_SPEED_1 > 0) --HC_START_SPEED_1;
    4ae4:	19 06       	cpc	r1, r25
    4ae6:	0c f0       	brlt	.+2      	; 0x4aea <_Z22Setup_Key_Down_Pressedv+0x358>
    4ae8:	7e ce       	rjmp	.-772    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4aea:	01 97       	sbiw	r24, 0x01	; 1
    4aec:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <HC_SCALE_10+0x1>
    4af0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <HC_SCALE_10>
    4af4:	78 ce       	rjmp	.-784    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4af6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <HC_START_SPEED_1>
    4afa:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <HC_START_SPEED_1+0x1>
    4afe:	18 16       	cp	r1, r24
            break;
          case   ID_HC_MAX_SPEED_1:
            if (HC_MAX_SPEED_1 > 0) --HC_MAX_SPEED_1;
    4b00:	19 06       	cpc	r1, r25
    4b02:	0c f0       	brlt	.+2      	; 0x4b06 <_Z22Setup_Key_Down_Pressedv+0x374>
    4b04:	70 ce       	rjmp	.-800    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b06:	01 97       	sbiw	r24, 0x01	; 1
    4b08:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <HC_START_SPEED_1+0x1>
    4b0c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <HC_START_SPEED_1>
    4b10:	6a ce       	rjmp	.-812    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b12:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <HC_MAX_SPEED_1>
    4b16:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <HC_MAX_SPEED_1+0x1>
    4b1a:	18 16       	cp	r1, r24
            break;
          case   ID_HC_START_SPEED_10:
            if (HC_START_SPEED_10 > 0) --HC_START_SPEED_10;
    4b1c:	19 06       	cpc	r1, r25
    4b1e:	0c f0       	brlt	.+2      	; 0x4b22 <_Z22Setup_Key_Down_Pressedv+0x390>
    4b20:	62 ce       	rjmp	.-828    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b22:	01 97       	sbiw	r24, 0x01	; 1
    4b24:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <HC_MAX_SPEED_1+0x1>
    4b28:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <HC_MAX_SPEED_1>
    4b2c:	5c ce       	rjmp	.-840    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b2e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <HC_START_SPEED_10>
    4b32:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <HC_START_SPEED_10+0x1>
    4b36:	18 16       	cp	r1, r24
            break;
          case   ID_HC_MAX_SPEED_10:
            if (HC_MAX_SPEED_10 > 0) --HC_MAX_SPEED_10;
    4b38:	19 06       	cpc	r1, r25
    4b3a:	0c f0       	brlt	.+2      	; 0x4b3e <_Z22Setup_Key_Down_Pressedv+0x3ac>
    4b3c:	54 ce       	rjmp	.-856    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b3e:	01 97       	sbiw	r24, 0x01	; 1
    4b40:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <HC_START_SPEED_10+0x1>
    4b44:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <HC_START_SPEED_10>
    4b48:	4e ce       	rjmp	.-868    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b4a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <HC_MAX_SPEED_10>
    4b4e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <HC_MAX_SPEED_10+0x1>
    4b52:	18 16       	cp	r1, r24
            break;
          case   ID_HC_X_DIR:
            if (HC_X_DIR == 1) --HC_X_DIR;
    4b54:	19 06       	cpc	r1, r25
    4b56:	0c f0       	brlt	.+2      	; 0x4b5a <_Z22Setup_Key_Down_Pressedv+0x3c8>
    4b58:	46 ce       	rjmp	.-884    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b5a:	01 97       	sbiw	r24, 0x01	; 1
    4b5c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <HC_MAX_SPEED_10+0x1>
    4b60:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <HC_MAX_SPEED_10>
            //  break;
        }
        //---
      }
    }
  } else if (SETUP_MODE == MODE_READ_THREAD)                 //ПРОСМОТР КОЭФФИЦИЕНТОВ РЕЗЬБ
    4b64:	40 ce       	rjmp	.-896    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b66:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
  {
    if (!bEditUserThread)
    4b6a:	81 30       	cpi	r24, 0x01	; 1
    4b6c:	09 f0       	breq	.+2      	; 0x4b70 <_Z22Setup_Key_Down_Pressedv+0x3de>
    4b6e:	3b ce       	rjmp	.-906    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b70:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
    {
      if (bModeThread)
    4b74:	38 ce       	rjmp	.-912    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b76:	82 30       	cpi	r24, 0x02	; 2
    4b78:	09 f0       	breq	.+2      	; 0x4b7c <_Z22Setup_Key_Down_Pressedv+0x3ea>
      {
        if (CURRENT_THREAD < ((sizeof(Thread_Info) / sizeof(Thread_Info[0])) - 1) )
    4b7a:	a8 c0       	rjmp	.+336    	; 0x4ccc <_Z22Setup_Key_Down_Pressedv+0x53a>
    4b7c:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <bEditUserThread>
    4b80:	81 11       	cpse	r24, r1
        {
          ++CURRENT_THREAD;                 //Листаем список до конца
    4b82:	14 c0       	rjmp	.+40     	; 0x4bac <_Z22Setup_Key_Down_Pressedv+0x41a>
    4b84:	80 91 b4 11 	lds	r24, 0x11B4	; 0x8011b4 <bModeThread>
    4b88:	88 23       	and	r24, r24
        } else if (CURRENT_THREAD == ((sizeof(Thread_Info) / sizeof(Thread_Info[0])) - 1) )
    4b8a:	71 f0       	breq	.+28     	; 0x4ba8 <_Z22Setup_Key_Down_Pressedv+0x416>
    4b8c:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
        {
          CURRENT_THREAD = 0;               //Как достигли конца списка - переходим на его начало
    4b90:	82 33       	cpi	r24, 0x32	; 50
    4b92:	20 f4       	brcc	.+8      	; 0x4b9c <_Z22Setup_Key_Down_Pressedv+0x40a>
    4b94:	8f 5f       	subi	r24, 0xFF	; 255
        }
      } else {
        ++SETUP_MODE;                       //Переход к пункту меню MODE_READ_CONE
    4b96:	80 93 c2 11 	sts	0x11C2, r24	; 0x8011c2 <CURRENT_THREAD>
      }
    } else {
      //Если находимся в процессе редактирования пользовательской резьбы...
      //-------------------------------------------------------------------------------------------------------------------------------------------------------------------
      float NextStep = Thread_Info[CURRENT_THREAD].Step - scaleFloat * USER_THREAD_STEP;
    4b9a:	25 ce       	rjmp	.-950    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4b9c:	82 33       	cpi	r24, 0x32	; 50
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <_Z22Setup_Key_Down_Pressedv+0x410>
    4ba0:	22 ce       	rjmp	.-956    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4ba2:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <CURRENT_THREAD>
    4ba6:	1f ce       	rjmp	.-962    	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4ba8:	83 e0       	ldi	r24, 0x03	; 3
    4baa:	0f ce       	rjmp	.-994    	; 0x47ca <_Z22Setup_Key_Down_Pressedv+0x38>
    4bac:	00 91 c2 11 	lds	r16, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    4bb0:	c0 91 15 02 	lds	r28, 0x0215	; 0x800215 <scaleFloat>
    4bb4:	d0 91 16 02 	lds	r29, 0x0216	; 0x800216 <scaleFloat+0x1>
    4bb8:	20 2e       	mov	r2, r16
    4bba:	31 2c       	mov	r3, r1
    4bbc:	8a e1       	ldi	r24, 0x1A	; 26
    4bbe:	08 9f       	mul	r16, r24
    4bc0:	80 01       	movw	r16, r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	09 53       	subi	r16, 0x39	; 57
    4bc6:	1b 4f       	sbci	r17, 0xFB	; 251
    4bc8:	be 01       	movw	r22, r28
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    4bd2:	27 e1       	ldi	r18, 0x17	; 23
    4bd4:	37 eb       	ldi	r19, 0xB7	; 183
    4bd6:	41 ed       	ldi	r20, 0xD1	; 209
    4bd8:	58 e3       	ldi	r21, 0x38	; 56
    4bda:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4bde:	9b 01       	movw	r18, r22
    4be0:	ac 01       	movw	r20, r24
      float MinStepZ = MinimumStepZ(254.999f);
    4be2:	f8 01       	movw	r30, r16
    4be4:	65 85       	ldd	r22, Z+13	; 0x0d
    4be6:	76 85       	ldd	r23, Z+14	; 0x0e
    4be8:	87 85       	ldd	r24, Z+15	; 0x0f
    4bea:	90 89       	ldd	r25, Z+16	; 0x10
    4bec:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    4bf0:	6b 01       	movw	r12, r22
      float MinStepX = MinimumStepX(254.999f);
    4bf2:	7c 01       	movw	r14, r24
    4bf4:	6e eb       	ldi	r22, 0xBE	; 190
    4bf6:	7f ef       	ldi	r23, 0xFF	; 255
    4bf8:	8e e7       	ldi	r24, 0x7E	; 126
    4bfa:	93 e4       	ldi	r25, 0x43	; 67
    4bfc:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z12MinimumStepZf>
    4c00:	2b 01       	movw	r4, r22
      if (NextStep >= USER_THREAD_MIN) {
    4c02:	3c 01       	movw	r6, r24
    4c04:	6e eb       	ldi	r22, 0xBE	; 190
    4c06:	7f ef       	ldi	r23, 0xFF	; 255
    4c08:	8e e7       	ldi	r24, 0x7E	; 126
    4c0a:	93 e4       	ldi	r25, 0x43	; 67
    4c0c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12MinimumStepXf>
    4c10:	4b 01       	movw	r8, r22
    4c12:	5c 01       	movw	r10, r24
    4c14:	2a e9       	ldi	r18, 0x9A	; 154
        if (NextStep > MinStepZ && NextStep > MinStepX) {
    4c16:	39 e9       	ldi	r19, 0x99	; 153
    4c18:	49 e9       	ldi	r20, 0x99	; 153
    4c1a:	5d e3       	ldi	r21, 0x3D	; 61
    4c1c:	c7 01       	movw	r24, r14
    4c1e:	b6 01       	movw	r22, r12
    4c20:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4c24:	87 fd       	sbrc	r24, 7
    4c26:	4f c0       	rjmp	.+158    	; 0x4cc6 <_Z22Setup_Key_Down_Pressedv+0x534>
    4c28:	a3 01       	movw	r20, r6
    4c2a:	92 01       	movw	r18, r4
    4c2c:	c7 01       	movw	r24, r14
    4c2e:	b6 01       	movw	r22, r12
    4c30:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4c34:	18 16       	cp	r1, r24
          Thread_Info[CURRENT_THREAD].Step = NextStep;
    4c36:	c4 f4       	brge	.+48     	; 0x4c68 <_Z22Setup_Key_Down_Pressedv+0x4d6>
    4c38:	a5 01       	movw	r20, r10
    4c3a:	94 01       	movw	r18, r8
    4c3c:	c7 01       	movw	r24, r14
    4c3e:	b6 01       	movw	r22, r12

        NextC1 = Cone_Info[CURRENT_CONE].C1 - scaleFloat * USER_CONEAB_STEP;
        if (NextC1 >= USER_CONEAB_MIN && NextC1 > MinC1)
        {
          Cone_Info[CURRENT_CONE].C1 = NextC1;
          if (scaleFloat < (32767 - USER_CONEAB_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEAB_CHANGE_SPEED;
    4c40:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4c44:	18 16       	cp	r1, r24
    4c46:	84 f4       	brge	.+32     	; 0x4c68 <_Z22Setup_Key_Down_Pressedv+0x4d6>
    4c48:	f8 01       	movw	r30, r16
    4c4a:	c5 86       	std	Z+13, r12	; 0x0d
    4c4c:	d6 86       	std	Z+14, r13	; 0x0e
    4c4e:	e7 86       	std	Z+15, r14	; 0x0f
    4c50:	f0 8a       	std	Z+16, r15	; 0x10
    4c52:	cb 3e       	cpi	r28, 0xEB	; 235
    4c54:	ff e7       	ldi	r31, 0x7F	; 127
      if (NextStep >= USER_THREAD_MIN) {
        if (NextStep > MinStepZ && NextStep > MinStepX) {
          Thread_Info[CURRENT_THREAD].Step = NextStep;
          if (scaleFloat < (32767 - USER_THREAD_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_THREAD_CHANGE_SPEED;
        } else {
          ScaleDiv2();
    4c56:	df 07       	cpc	r29, r31
    4c58:	08 f0       	brcs	.+2      	; 0x4c5c <_Z22Setup_Key_Down_Pressedv+0x4ca>
          if (Thread_Info[CURRENT_THREAD].Step < MinStepZ)
    4c5a:	c5 cd       	rjmp	.-1142   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4c5c:	64 96       	adiw	r28, 0x14	; 20
    4c5e:	d0 93 16 02 	sts	0x0216, r29	; 0x800216 <scaleFloat+0x1>
    4c62:	c0 93 15 02 	sts	0x0215, r28	; 0x800215 <scaleFloat>
    4c66:	bf cd       	rjmp	.-1154   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4c68:	0e 94 09 04 	call	0x812	; 0x812 <_Z9ScaleDiv2v>
    4c6c:	8a e1       	ldi	r24, 0x1A	; 26
    4c6e:	82 9d       	mul	r24, r2
    4c70:	e0 01       	movw	r28, r0
    4c72:	83 9d       	mul	r24, r3
    4c74:	d0 0d       	add	r29, r0
    4c76:	11 24       	eor	r1, r1
    4c78:	c9 53       	subi	r28, 0x39	; 57
    4c7a:	db 4f       	sbci	r29, 0xFB	; 251
    4c7c:	a3 01       	movw	r20, r6
          {
            Thread_Info[CURRENT_THREAD].Step = MinStepZ;
    4c7e:	92 01       	movw	r18, r4
    4c80:	6d 85       	ldd	r22, Y+13	; 0x0d
    4c82:	7e 85       	ldd	r23, Y+14	; 0x0e
    4c84:	8f 85       	ldd	r24, Y+15	; 0x0f
          }
          if (Thread_Info[CURRENT_THREAD].Step < MinStepX)
    4c86:	98 89       	ldd	r25, Y+16	; 0x10
    4c88:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    4c8c:	87 ff       	sbrs	r24, 7
    4c8e:	04 c0       	rjmp	.+8      	; 0x4c98 <_Z22Setup_Key_Down_Pressedv+0x506>
    4c90:	4d 86       	std	Y+13, r4	; 0x0d
    4c92:	5e 86       	std	Y+14, r5	; 0x0e
    4c94:	6f 86       	std	Y+15, r6	; 0x0f
    4c96:	78 8a       	std	Y+16, r7	; 0x10
    4c98:	8a e1       	ldi	r24, 0x1A	; 26
    4c9a:	82 9d       	mul	r24, r2
    4c9c:	e0 01       	movw	r28, r0
    4c9e:	83 9d       	mul	r24, r3
    4ca0:	d0 0d       	add	r29, r0
    4ca2:	11 24       	eor	r1, r1
    4ca4:	c9 53       	subi	r28, 0x39	; 57
    4ca6:	db 4f       	sbci	r29, 0xFB	; 251
    4ca8:	a5 01       	movw	r20, r10
          {
            Thread_Info[CURRENT_THREAD].Step = MinStepX;
    4caa:	94 01       	movw	r18, r8
    4cac:	6d 85       	ldd	r22, Y+13	; 0x0d
    4cae:	7e 85       	ldd	r23, Y+14	; 0x0e
    4cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cb2:	98 89       	ldd	r25, Y+16	; 0x10
          }
        }
      } else {
        ScaleDiv2();
    4cb4:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    4cb8:	87 ff       	sbrs	r24, 7
      }
      //-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    }
  } else if (SETUP_MODE == MODE_READ_CONE)                   //ПРОСМОТР КОЭФФИЦИЕНТОВ КОНУСОВ
    4cba:	95 cd       	rjmp	.-1238   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4cbc:	8d 86       	std	Y+13, r8	; 0x0d
    4cbe:	9e 86       	std	Y+14, r9	; 0x0e
  {
    if (!bEditUserConeAB && !bEditUserConeDEG)                //Если мы не редактируем пользовательский конус...
    4cc0:	af 86       	std	Y+15, r10	; 0x0f
    4cc2:	b8 8a       	std	Y+16, r11	; 0x10
    4cc4:	90 cd       	rjmp	.-1248   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4cc6:	0e 94 09 04 	call	0x812	; 0x812 <_Z9ScaleDiv2v>
    4cca:	8d cd       	rjmp	.-1254   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4ccc:	83 30       	cpi	r24, 0x03	; 3
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <_Z22Setup_Key_Down_Pressedv+0x540>
    {
      if (bModeCone)
    4cd0:	16 c1       	rjmp	.+556    	; 0x4efe <_Z22Setup_Key_Down_Pressedv+0x76c>
    4cd2:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <bEditUserConeAB>
    4cd6:	81 11       	cpse	r24, r1
      {
        if (CURRENT_CONE < ((sizeof(Cone_Info) / sizeof(Cone_Info[0])) - 1) )
    4cd8:	18 c0       	rjmp	.+48     	; 0x4d0a <_Z22Setup_Key_Down_Pressedv+0x578>
    4cda:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <bEditUserConeDEG>
    4cde:	81 11       	cpse	r24, r1
        {
          ++CURRENT_CONE;                 //Листаем список до конца
    4ce0:	c9 c0       	rjmp	.+402    	; 0x4e74 <_Z22Setup_Key_Down_Pressedv+0x6e2>
    4ce2:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <bModeCone>
    4ce6:	88 23       	and	r24, r24
        } else if (CURRENT_CONE == ((sizeof(Cone_Info) / sizeof(Cone_Info[0])) - 1) )
    4ce8:	71 f0       	breq	.+28     	; 0x4d06 <_Z22Setup_Key_Down_Pressedv+0x574>
    4cea:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <CURRENT_CONE>
        {
          CURRENT_CONE = 0;               //Как достигли конца списка - переходим на его начало
    4cee:	81 32       	cpi	r24, 0x21	; 33
    4cf0:	20 f4       	brcc	.+8      	; 0x4cfa <_Z22Setup_Key_Down_Pressedv+0x568>
    4cf2:	8f 5f       	subi	r24, 0xFF	; 255
        }
      } else {
        ++SETUP_MODE;                       //Переход к пункту меню MODE_EXIT_AND_SAVING
    4cf4:	80 93 c0 11 	sts	0x11C0, r24	; 0x8011c0 <CURRENT_CONE>
      if (bEditUserConeAB)
      {
        //float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f);           //Расчёт допустимого значения C2 при заданном C1
        ////float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 2.0f);       //Расчёт допустимого значения C2 при заданном C1

        float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f, (byte)0);           //Расчёт допустимого значения C2 при заданном C1
    4cf8:	76 cd       	rjmp	.-1300   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4cfa:	81 32       	cpi	r24, 0x21	; 33
    4cfc:	09 f0       	breq	.+2      	; 0x4d00 <_Z22Setup_Key_Down_Pressedv+0x56e>
float Get_A_AB(float B, float Divider, byte XZ)
{
  float tmp;
  if (XZ == (byte)0)
  {
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)Divider * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
    4cfe:	73 cd       	rjmp	.-1306   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4d00:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <CURRENT_CONE>
    4d04:	70 cd       	rjmp	.-1312   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4d06:	84 e0       	ldi	r24, 0x04	; 4
    4d08:	60 cd       	rjmp	.-1344   	; 0x47ca <_Z22Setup_Key_Down_Pressedv+0x38>
    4d0a:	c0 91 c0 11 	lds	r28, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    4d0e:	d0 e0       	ldi	r29, 0x00	; 0
    4d10:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    4d14:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    4d18:	07 2e       	mov	r0, r23
    4d1a:	00 0c       	add	r0, r0
    4d1c:	88 0b       	sbc	r24, r24
    4d1e:	99 0b       	sbc	r25, r25
    4d20:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	40 e8       	ldi	r20, 0x80	; 128
    4d2a:	50 e4       	ldi	r21, 0x40	; 64
    4d2c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4d30:	6b 01       	movw	r12, r22
    4d32:	7c 01       	movw	r14, r24
    4d34:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    4d38:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    4d3c:	07 2e       	mov	r0, r23
    4d3e:	00 0c       	add	r0, r0
    4d40:	88 0b       	sbc	r24, r24
    4d42:	99 0b       	sbc	r25, r25
    4d44:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4d48:	9b 01       	movw	r18, r22
    4d4a:	ac 01       	movw	r20, r24
    4d4c:	c7 01       	movw	r24, r14
    4d4e:	b6 01       	movw	r22, r12
    4d50:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4d54:	6b 01       	movw	r12, r22
    4d56:	7c 01       	movw	r14, r24
    4d58:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    4d5c:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    4d60:	07 2e       	mov	r0, r23
    4d62:	00 0c       	add	r0, r0
    4d64:	88 0b       	sbc	r24, r24
    4d66:	99 0b       	sbc	r25, r25
    4d68:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4d6c:	9b 01       	movw	r18, r22
    4d6e:	ac 01       	movw	r20, r24
    4d70:	c7 01       	movw	r24, r14
    4d72:	b6 01       	movw	r22, r12
    4d74:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4d78:	6b 01       	movw	r12, r22
    4d7a:	7c 01       	movw	r14, r24
    4d7c:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    4d80:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    4d84:	07 2e       	mov	r0, r23
    4d86:	00 0c       	add	r0, r0
    4d88:	88 0b       	sbc	r24, r24
    4d8a:	99 0b       	sbc	r25, r25
    4d8c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4d90:	21 e7       	ldi	r18, 0x71	; 113
    4d92:	3d ef       	ldi	r19, 0xFD	; 253
    4d94:	4e e7       	ldi	r20, 0x7E	; 126
    4d96:	53 e4       	ldi	r21, 0x43	; 67
    4d98:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4d9c:	4b 01       	movw	r8, r22
    4d9e:	5c 01       	movw	r10, r24
    4da0:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    4da4:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    4da8:	07 2e       	mov	r0, r23
    4daa:	00 0c       	add	r0, r0
    4dac:	88 0b       	sbc	r24, r24
    4dae:	99 0b       	sbc	r25, r25
    4db0:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4db4:	9b 01       	movw	r18, r22
    4db6:	ac 01       	movw	r20, r24
    4db8:	c5 01       	movw	r24, r10
    4dba:	b4 01       	movw	r22, r8
    4dbc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4dc0:	4b 01       	movw	r8, r22
    4dc2:	5c 01       	movw	r10, r24
    4dc4:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    4dc8:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    4dcc:	07 2e       	mov	r0, r23
    4dce:	00 0c       	add	r0, r0
    4dd0:	88 0b       	sbc	r24, r24
    4dd2:	99 0b       	sbc	r25, r25
    4dd4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4dd8:	9b 01       	movw	r18, r22
    4dda:	ac 01       	movw	r20, r24
    4ddc:	c5 01       	movw	r24, r10
      if (bEditUserConeAB)
      {
        //float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f);           //Расчёт допустимого значения C2 при заданном C1
        ////float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 2.0f);       //Расчёт допустимого значения C2 при заданном C1

        float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f, (byte)0);           //Расчёт допустимого значения C2 при заданном C1
    4dde:	b4 01       	movw	r22, r8
    4de0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4de4:	9b 01       	movw	r18, r22
    4de6:	ac 01       	movw	r20, r24
    4de8:	c7 01       	movw	r24, r14
    4dea:	b6 01       	movw	r22, r12
    4dec:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)Divider * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
  } else {
    float DividerXZ = 1.0f / Divider;
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)DividerXZ * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
  }
  return (float)(B * tmp);
    4df0:	23 e1       	ldi	r18, 0x13	; 19
    4df2:	2c 9f       	mul	r18, r28
    4df4:	80 01       	movw	r16, r0
    4df6:	2d 9f       	mul	r18, r29
    4df8:	10 0d       	add	r17, r0
    4dfa:	11 24       	eor	r1, r1
    4dfc:	00 5d       	subi	r16, 0xD0	; 208
    4dfe:	1d 4f       	sbci	r17, 0xFD	; 253
        //float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f);           //Расчёт допустимого значения C2 при заданном C1
        ////float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 2.0f);       //Расчёт допустимого значения C2 при заданном C1

        float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f, (byte)0);           //Расчёт допустимого значения C2 при заданном C1

        NextC1 = Cone_Info[CURRENT_CONE].C1 - scaleFloat * USER_CONEAB_STEP;
    4e00:	f8 01       	movw	r30, r16
    4e02:	26 85       	ldd	r18, Z+14	; 0x0e
    4e04:	37 85       	ldd	r19, Z+15	; 0x0f
    4e06:	40 89       	ldd	r20, Z+16	; 0x10
    4e08:	51 89       	ldd	r21, Z+17	; 0x11
    4e0a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4e0e:	4b 01       	movw	r8, r22
    4e10:	5c 01       	movw	r10, r24
    4e12:	c0 91 15 02 	lds	r28, 0x0215	; 0x800215 <scaleFloat>
    4e16:	d0 91 16 02 	lds	r29, 0x0216	; 0x800216 <scaleFloat+0x1>
    4e1a:	be 01       	movw	r22, r28
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    4e24:	27 e1       	ldi	r18, 0x17	; 23
    4e26:	37 eb       	ldi	r19, 0xB7	; 183
    4e28:	41 ed       	ldi	r20, 0xD1	; 209
    4e2a:	58 e3       	ldi	r21, 0x38	; 56
    4e2c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4e30:	9b 01       	movw	r18, r22
    4e32:	ac 01       	movw	r20, r24
        if (NextC1 >= USER_CONEAB_MIN && NextC1 > MinC1)
    4e34:	f8 01       	movw	r30, r16
    4e36:	62 85       	ldd	r22, Z+10	; 0x0a
    4e38:	73 85       	ldd	r23, Z+11	; 0x0b
    4e3a:	84 85       	ldd	r24, Z+12	; 0x0c
    4e3c:	95 85       	ldd	r25, Z+13	; 0x0d
    4e3e:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    4e42:	6b 01       	movw	r12, r22
    4e44:	7c 01       	movw	r14, r24
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e8       	ldi	r20, 0x80	; 128
    4e4c:	5f e3       	ldi	r21, 0x3F	; 63
    4e4e:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4e52:	87 fd       	sbrc	r24, 7
    4e54:	38 cf       	rjmp	.-400    	; 0x4cc6 <_Z22Setup_Key_Down_Pressedv+0x534>
        {
          Cone_Info[CURRENT_CONE].C1 = NextC1;
    4e56:	a5 01       	movw	r20, r10
    4e58:	94 01       	movw	r18, r8
    4e5a:	c7 01       	movw	r24, r14
    4e5c:	b6 01       	movw	r22, r12
    4e5e:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4e62:	18 16       	cp	r1, r24
    4e64:	0c f0       	brlt	.+2      	; 0x4e68 <_Z22Setup_Key_Down_Pressedv+0x6d6>
    4e66:	2f cf       	rjmp	.-418    	; 0x4cc6 <_Z22Setup_Key_Down_Pressedv+0x534>
    4e68:	f8 01       	movw	r30, r16
        //float MinDEG = Get_deg_DEG(254.99f);
        ////float MaxDEG = Get_deg_DEG(2.0f);
        //С учётом типа тактования конуса
        float MinDEG = Get_deg_DEG(254.99f, (byte)0);

        NextC1 = Cone_Info[CURRENT_CONE].C1 - scaleFloat * USER_CONEDEG_STEP;
    4e6a:	c2 86       	std	Z+10, r12	; 0x0a
    4e6c:	d3 86       	std	Z+11, r13	; 0x0b
    4e6e:	e4 86       	std	Z+12, r14	; 0x0c
    4e70:	f5 86       	std	Z+13, r15	; 0x0d
    4e72:	ef ce       	rjmp	.-546    	; 0x4c52 <_Z22Setup_Key_Down_Pressedv+0x4c0>
    4e74:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z11Get_deg_DEGfh.part.13.constprop.31>
    4e78:	4b 01       	movw	r8, r22
    4e7a:	5c 01       	movw	r10, r24
    4e7c:	c0 91 c0 11 	lds	r28, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    4e80:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <scaleFloat>
    4e84:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <scaleFloat+0x1>
    4e88:	83 e1       	ldi	r24, 0x13	; 19
    4e8a:	c8 9f       	mul	r28, r24
    4e8c:	e0 01       	movw	r28, r0
    4e8e:	11 24       	eor	r1, r1
    4e90:	c0 5d       	subi	r28, 0xD0	; 208
    4e92:	dd 4f       	sbci	r29, 0xFD	; 253
    4e94:	b8 01       	movw	r22, r16
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	80 e0       	ldi	r24, 0x00	; 0
    4e9a:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    4e9e:	2a e0       	ldi	r18, 0x0A	; 10
    4ea0:	37 ed       	ldi	r19, 0xD7	; 215
    4ea2:	43 e2       	ldi	r20, 0x23	; 35
    4ea4:	5c e3       	ldi	r21, 0x3C	; 60
    4ea6:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4eaa:	9b 01       	movw	r18, r22
        if (NextC1 >= USER_CONEDEG_MIN && NextC1 > MinDEG )
    4eac:	ac 01       	movw	r20, r24
    4eae:	6a 85       	ldd	r22, Y+10	; 0x0a
    4eb0:	7b 85       	ldd	r23, Y+11	; 0x0b
    4eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4eb6:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    4eba:	6b 01       	movw	r12, r22
    4ebc:	7c 01       	movw	r14, r24
    4ebe:	2d ec       	ldi	r18, 0xCD	; 205
    4ec0:	3c ec       	ldi	r19, 0xCC	; 204
    4ec2:	4c ec       	ldi	r20, 0xCC	; 204
    4ec4:	5d e3       	ldi	r21, 0x3D	; 61
    4ec6:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    4eca:	87 fd       	sbrc	r24, 7
        {
          Cone_Info[CURRENT_CONE].C1 = NextC1;
    4ecc:	fc ce       	rjmp	.-520    	; 0x4cc6 <_Z22Setup_Key_Down_Pressedv+0x534>
    4ece:	a7 01       	movw	r20, r14
    4ed0:	96 01       	movw	r18, r12
    4ed2:	c5 01       	movw	r24, r10
          if (scaleFloat < (32767 - USER_CONEDEG_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEDEG_CHANGE_SPEED;
    4ed4:	b4 01       	movw	r22, r8
    4ed6:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    4eda:	87 ff       	sbrs	r24, 7
    4edc:	f4 ce       	rjmp	.-536    	; 0x4cc6 <_Z22Setup_Key_Down_Pressedv+0x534>
    4ede:	ca 86       	std	Y+10, r12	; 0x0a
    4ee0:	db 86       	std	Y+11, r13	; 0x0b
    4ee2:	ec 86       	std	Y+12, r14	; 0x0c
    4ee4:	fd 86       	std	Y+13, r15	; 0x0d
    4ee6:	0a 3f       	cpi	r16, 0xFA	; 250
    4ee8:	ef e7       	ldi	r30, 0x7F	; 127
    4eea:	1e 07       	cpc	r17, r30
          ScaleDiv2();
        }
      }
      //-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    }
  } else if (SETUP_MODE == MODE_RESET_TO_DEFAULTS)             //СБРОС НАСТРОЕК НА ДЕФОЛТНЫЕ (Требует последующего сохранения)
    4eec:	08 f0       	brcs	.+2      	; 0x4ef0 <_Z22Setup_Key_Down_Pressedv+0x75e>
    4eee:	7b cc       	rjmp	.-1802   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
  {
    ++SETUP_MODE;                         //Переход к пункту меню MODE_EXIT_AND_SAVING
    4ef0:	0b 5f       	subi	r16, 0xFB	; 251
    4ef2:	1f 4f       	sbci	r17, 0xFF	; 255
  } else if (SETUP_MODE == MODE_EXIT_AND_SAVING)             //ВЫХОД И СОХРАНЕНИЕ
    4ef4:	10 93 16 02 	sts	0x0216, r17	; 0x800216 <scaleFloat+0x1>
  {
    ++SETUP_MODE;                         //Переход к пункту меню MODE_EXIT_WITHOUT_SAVING
    4ef8:	00 93 15 02 	sts	0x0215, r16	; 0x800215 <scaleFloat>
  } else if (SETUP_MODE == LAST_SETUP_Mode)         //Последний пункт меню - MODE_EXIT_WITHOUT_SAVING
    4efc:	74 cc       	rjmp	.-1816   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4efe:	84 30       	cpi	r24, 0x04	; 4
    4f00:	11 f4       	brne	.+4      	; 0x4f06 <_Z22Setup_Key_Down_Pressedv+0x774>
  {
    SETUP_MODE = 1;                       //Переход к первому пункту меню
    4f02:	85 e0       	ldi	r24, 0x05	; 5
    4f04:	62 cc       	rjmp	.-1852   	; 0x47ca <_Z22Setup_Key_Down_Pressedv+0x38>
//  float x = (180.0f / M_PI) * atan( 2.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z / (float(Divider) * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X) );
//  return x;
//}

//"Обратная" функция - по делителю определить угол конуса с учётом типа тактования
float Get_deg_DEG(float Divider, byte XZ)
    4f06:	85 30       	cpi	r24, 0x05	; 5
    4f08:	11 f4       	brne	.+4      	; 0x4f0e <_Z22Setup_Key_Down_Pressedv+0x77c>
    4f0a:	86 e0       	ldi	r24, 0x06	; 6
    4f0c:	5e cc       	rjmp	.-1860   	; 0x47ca <_Z22Setup_Key_Down_Pressedv+0x38>
    4f0e:	86 30       	cpi	r24, 0x06	; 6
    4f10:	09 f0       	breq	.+2      	; 0x4f14 <_Z22Setup_Key_Down_Pressedv+0x782>
    4f12:	69 cc       	rjmp	.-1838   	; 0x47e6 <_Z22Setup_Key_Down_Pressedv+0x54>
    4f14:	81 e0       	ldi	r24, 0x01	; 1
  if (XZ == (byte)0)     //XZ == 0 Тип тактования ZX
  {
    x = (180.0f / M_PI) * atan( 2.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z / (float(Divider) * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X) );
  } else {              //XZ == 1 Тип тактования XZ
    float DividerXZ = 1.0f / Divider;
    x = (180.0f / M_PI) * atan( 2.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z / (float(DividerXZ) * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X) );
    4f16:	59 cc       	rjmp	.-1870   	; 0x47ca <_Z22Setup_Key_Down_Pressedv+0x38>

00004f18 <_Z11Get_deg_DEGfh.constprop.9>:
    4f18:	8f 92       	push	r8
    4f1a:	9f 92       	push	r9
    4f1c:	af 92       	push	r10
    4f1e:	bf 92       	push	r11
    4f20:	cf 92       	push	r12
    4f22:	df 92       	push	r13
    4f24:	ef 92       	push	r14
    4f26:	ff 92       	push	r15
    4f28:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    4f2c:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    4f30:	07 2e       	mov	r0, r23
    4f32:	00 0c       	add	r0, r0
    4f34:	88 0b       	sbc	r24, r24
    4f36:	99 0b       	sbc	r25, r25
    4f38:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4f3c:	9b 01       	movw	r18, r22
    4f3e:	ac 01       	movw	r20, r24
    4f40:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    4f44:	6b 01       	movw	r12, r22
    4f46:	7c 01       	movw	r14, r24
    4f48:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    4f4c:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    4f50:	07 2e       	mov	r0, r23
    4f52:	00 0c       	add	r0, r0
    4f54:	88 0b       	sbc	r24, r24
    4f56:	99 0b       	sbc	r25, r25
    4f58:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4f5c:	9b 01       	movw	r18, r22
    4f5e:	ac 01       	movw	r20, r24
    4f60:	c7 01       	movw	r24, r14
    4f62:	b6 01       	movw	r22, r12
    4f64:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4f68:	6b 01       	movw	r12, r22
    4f6a:	7c 01       	movw	r14, r24
    4f6c:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    4f70:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    4f74:	07 2e       	mov	r0, r23
    4f76:	00 0c       	add	r0, r0
    4f78:	88 0b       	sbc	r24, r24
    4f7a:	99 0b       	sbc	r25, r25
    4f7c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4f80:	9b 01       	movw	r18, r22
    4f82:	ac 01       	movw	r20, r24
    4f84:	c7 01       	movw	r24, r14
    4f86:	b6 01       	movw	r22, r12
    4f88:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4f8c:	6b 01       	movw	r12, r22
    4f8e:	7c 01       	movw	r14, r24
    4f90:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    4f94:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    4f98:	07 2e       	mov	r0, r23
    4f9a:	00 0c       	add	r0, r0
    4f9c:	88 0b       	sbc	r24, r24
    4f9e:	99 0b       	sbc	r25, r25
    4fa0:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4fa4:	2b ec       	ldi	r18, 0xCB	; 203
    4fa6:	31 e8       	ldi	r19, 0x81	; 129
    4fa8:	40 e8       	ldi	r20, 0x80	; 128
    4faa:	5b e3       	ldi	r21, 0x3B	; 59
    4fac:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4fb0:	4b 01       	movw	r8, r22
    4fb2:	5c 01       	movw	r10, r24
    4fb4:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    4fb8:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    4fbc:	07 2e       	mov	r0, r23
    4fbe:	00 0c       	add	r0, r0
    4fc0:	88 0b       	sbc	r24, r24
    4fc2:	99 0b       	sbc	r25, r25
    4fc4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4fc8:	9b 01       	movw	r18, r22
    4fca:	ac 01       	movw	r20, r24
    4fcc:	c5 01       	movw	r24, r10
    4fce:	b4 01       	movw	r22, r8
    4fd0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4fd4:	4b 01       	movw	r8, r22
    4fd6:	5c 01       	movw	r10, r24
    4fd8:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    4fdc:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    4fe0:	07 2e       	mov	r0, r23
    4fe2:	00 0c       	add	r0, r0
    4fe4:	88 0b       	sbc	r24, r24
    4fe6:	99 0b       	sbc	r25, r25
    4fe8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    4fec:	9b 01       	movw	r18, r22
    4fee:	ac 01       	movw	r20, r24
    4ff0:	c5 01       	movw	r24, r10
    4ff2:	b4 01       	movw	r22, r8
    4ff4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    4ff8:	9b 01       	movw	r18, r22
    4ffa:	ac 01       	movw	r20, r24
    4ffc:	c7 01       	movw	r24, r14
    4ffe:	b6 01       	movw	r22, r12
    5000:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
  }
  return x;
}
    5004:	0e 94 9a 95 	call	0x12b34	; 0x12b34 <atan>
    5008:	20 ee       	ldi	r18, 0xE0	; 224
    500a:	3e e2       	ldi	r19, 0x2E	; 46
    500c:	45 e6       	ldi	r20, 0x65	; 101
    500e:	52 e4       	ldi	r21, 0x42	; 66
    5010:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
  }
}

// ********** Обработчик нажатия кнопки Up **********
void Setup_Key_Up_Pressed()
{
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	bf 90       	pop	r11
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	08 95       	ret

00005026 <_Z20Setup_Key_Up_Pressedv>:
    5026:	2f 92       	push	r2
    5028:	3f 92       	push	r3
    502a:	4f 92       	push	r4
    502c:	5f 92       	push	r5
    502e:	6f 92       	push	r6
    5030:	7f 92       	push	r7
    5032:	8f 92       	push	r8
    5034:	9f 92       	push	r9
    5036:	af 92       	push	r10
  if (SETUP_MODE == MODE_PARAMETERS)                            //ПРОСМОТР И РЕДАКТИРОВАНИЕ ОСНОВНЫХ ПАРАМЕТРОВ "ЖЕЛЕЗА"
    5038:	bf 92       	push	r11
    503a:	cf 92       	push	r12
    503c:	df 92       	push	r13
    503e:	ef 92       	push	r14
    5040:	ff 92       	push	r15
  {
    if (!bModeParameters)
    5042:	0f 93       	push	r16
    5044:	1f 93       	push	r17
    5046:	cf 93       	push	r28
    5048:	df 93       	push	r29
    {
      SETUP_MODE = LAST_SETUP_Mode;                 //Переходим к последнему пункту меню
    504a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SETUP_MODE>
  } else if (SETUP_MODE == MODE_EXIT_AND_SAVING)                       //ВЫХОД И СОХРАНЕНИЕ
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_READ_CONE
  } else if (SETUP_MODE == MODE_EXIT_WITHOUT_SAVING)                   //ВЫХОД БЕЗ СОХРАНЕНИЯ
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_EXIT_AND_SAVING
    504e:	81 30       	cpi	r24, 0x01	; 1
    5050:	09 f0       	breq	.+2      	; 0x5054 <_Z20Setup_Key_Up_Pressedv+0x2e>
    5052:	f0 c1       	rjmp	.+992    	; 0x5434 <_Z20Setup_Key_Up_Pressedv+0x40e>
    5054:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <bModeParameters>
  {
    if (!bModeParameters)
    {
      SETUP_MODE = LAST_SETUP_Mode;                 //Переходим к последнему пункту меню
    } else {
      if (!bEditParameters)                         //Листаем, если переменная не находится в режиме редактирования и не достигла конца списка
    5058:	81 11       	cpse	r24, r1
    505a:	04 c0       	rjmp	.+8      	; 0x5064 <_Z20Setup_Key_Up_Pressedv+0x3e>
    505c:	86 e0       	ldi	r24, 0x06	; 6
      {
        if (SETUP_ID == ID_ENC_LINE_PER_REV )       //Если достигли начала списка, то переходим в конец списка
    505e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <SETUP_MODE>
        {
          SETUP_ID = LAST_SETUP_id;
    5062:	0b c0       	rjmp	.+22     	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5064:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <SETUP_ID>
  } else if (SETUP_MODE == MODE_EXIT_WITHOUT_SAVING)                   //ВЫХОД БЕЗ СОХРАНЕНИЯ
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_EXIT_AND_SAVING
  }
  Beep();
}
    5068:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    506c:	81 11       	cpse	r24, r1
    506e:	1c c0       	rjmp	.+56     	; 0x50a8 <_Z20Setup_Key_Up_Pressedv+0x82>
    5070:	e1 30       	cpi	r30, 0x01	; 1
    5072:	b1 f4       	brne	.+44     	; 0x50a0 <_Z20Setup_Key_Up_Pressedv+0x7a>
    5074:	89 e1       	ldi	r24, 0x19	; 25
    5076:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <SETUP_ID>
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	ff 90       	pop	r15
    5084:	ef 90       	pop	r14
    5086:	df 90       	pop	r13
    5088:	cf 90       	pop	r12
    508a:	bf 90       	pop	r11
    --SETUP_MODE;                                   //Переход к пункту меню MODE_READ_CONE
  } else if (SETUP_MODE == MODE_EXIT_WITHOUT_SAVING)                   //ВЫХОД БЕЗ СОХРАНЕНИЯ
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_EXIT_AND_SAVING
  }
  Beep();
    508c:	af 90       	pop	r10
      {
        if (SETUP_ID == ID_ENC_LINE_PER_REV )       //Если достигли начала списка, то переходим в конец списка
        {
          SETUP_ID = LAST_SETUP_id;
        } else {
          --SETUP_ID;                               //Листаем на предыдущий параметр, если переменная не достигла начала списка
    508e:	9f 90       	pop	r9
    5090:	8f 90       	pop	r8
    5092:	7f 90       	pop	r7
    5094:	6f 90       	pop	r6
        }
      } else {
        //Изменение переменных в режиме редактирования...
        switch (SETUP_ID)
    5096:	5f 90       	pop	r5
    5098:	4f 90       	pop	r4
    509a:	3f 90       	pop	r3
    509c:	2f 90       	pop	r2
    509e:	cd c9       	rjmp	.-3174   	; 0x443a <_Z4Beepv>
    50a0:	e1 50       	subi	r30, 0x01	; 1
    50a2:	e0 93 0d 02 	sts	0x020D, r30	; 0x80020d <SETUP_ID>
    50a6:	e9 cf       	rjmp	.-46     	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    50a8:	e1 50       	subi	r30, 0x01	; 1
    50aa:	e9 31       	cpi	r30, 0x19	; 25
    50ac:	30 f7       	brcc	.-52     	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    50ae:	f0 e0       	ldi	r31, 0x00	; 0
    50b0:	88 27       	eor	r24, r24
    50b2:	e2 5a       	subi	r30, 0xA2	; 162
    50b4:	f7 4d       	sbci	r31, 0xD7	; 215
    50b6:	8f 4f       	sbci	r24, 0xFF	; 255
    50b8:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
    50bc:	77 28       	or	r7, r7
    50be:	8a 28       	or	r8, r10
    50c0:	9d 28       	or	r9, r13
    50c2:	b0 28       	or	r11, r0
    50c4:	c3 28       	or	r12, r3
    50c6:	d2 28       	or	r13, r2
        {
          case   ID_ENC_LINE_PER_REV:
            //Вдвое меньше диапазона переменной, и чётное
            if (ENC_LINE_PER_REV <= 16380) //Фактический максимум после увеличения 16382. ENC_TICK = 2*16382 = 32764
    50c8:	e5 28       	or	r14, r5
    50ca:	f8 28       	or	r15, r8
    50cc:	0b 29       	or	r16, r11
    50ce:	1a 29       	or	r17, r10
    50d0:	23 29       	or	r18, r3
    50d2:	31 29       	or	r19, r1
    50d4:	4c 29       	or	r20, r12
    50d6:	5f 29       	or	r21, r15
    50d8:	7a 29       	or	r23, r10
            {
              ENC_LINE_PER_REV = Check_All(ENC_LINE_PER_REV, ENC_LINE_PER_REV + 2); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    50da:	8d 29       	or	r24, r13
    50dc:	9b 29       	or	r25, r11
    50de:	a9 29       	or	r26, r9
    50e0:	b8 29       	or	r27, r8
    50e2:	c7 29       	or	r28, r7
    50e4:	d6 29       	or	r29, r6
    50e6:	e5 29       	or	r30, r5
    50e8:	f4 29       	or	r31, r4
    50ea:	03 2a       	or	r0, r19
    50ec:	12 2a       	or	r1, r18
            }
            break;
          case   ID_MOTOR_Z_STEP_PER_REV:
            if (MOTOR_Z_STEP_PER_REV < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    50ee:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    50f2:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    50f6:	8d 3f       	cpi	r24, 0xFD	; 253
    50f8:	2f e3       	ldi	r18, 0x3F	; 63
    50fa:	92 07       	cpc	r25, r18
    50fc:	0c f0       	brlt	.+2      	; 0x5100 <_Z20Setup_Key_Up_Pressedv+0xda>
    50fe:	bd cf       	rjmp	.-134    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            {
              MOTOR_Z_STEP_PER_REV = Check_All(MOTOR_Z_STEP_PER_REV, MOTOR_Z_STEP_PER_REV + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    5100:	bc 01       	movw	r22, r24
    5102:	6e 5f       	subi	r22, 0xFE	; 254
    5104:	7f 4f       	sbci	r23, 0xFF	; 255
    5106:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    510a:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <ENC_LINE_PER_REV+0x1>
    510e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <ENC_LINE_PER_REV>
    5112:	b3 cf       	rjmp	.-154    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_SCREW_Z:
            if (SCREW_Z < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    5114:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    5118:	90 91 06 0a 	lds	r25, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    511c:	8f 3f       	cpi	r24, 0xFF	; 255
    511e:	ef e7       	ldi	r30, 0x7F	; 127
    5120:	9e 07       	cpc	r25, r30
    5122:	09 f4       	brne	.+2      	; 0x5126 <_Z20Setup_Key_Up_Pressedv+0x100>
    5124:	aa cf       	rjmp	.-172    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            {
              SCREW_Z = Check_All(SCREW_Z, SCREW_Z + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    5126:	bc 01       	movw	r22, r24
    5128:	6f 5f       	subi	r22, 0xFF	; 255
    512a:	7f 4f       	sbci	r23, 0xFF	; 255
    512c:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    5130:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    5134:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    5138:	a0 cf       	rjmp	.-192    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_McSTEP_Z:
            if (McSTEP_Z < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    513a:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <SCREW_Z>
    513e:	90 91 02 0a 	lds	r25, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    5142:	8f 3f       	cpi	r24, 0xFF	; 255
    5144:	ff e7       	ldi	r31, 0x7F	; 127
    5146:	9f 07       	cpc	r25, r31
    5148:	09 f4       	brne	.+2      	; 0x514c <_Z20Setup_Key_Up_Pressedv+0x126>
    514a:	97 cf       	rjmp	.-210    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            {
              McSTEP_Z = Check_All(McSTEP_Z, McSTEP_Z + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    514c:	bc 01       	movw	r22, r24
    514e:	6f 5f       	subi	r22, 0xFF	; 255
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    5156:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <SCREW_Z+0x1>
    515a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <SCREW_Z>
    515e:	8d cf       	rjmp	.-230    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_REBOUND_Z:
            if (REBOUND_Z < 32767) ++REBOUND_Z;
    5160:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
    5164:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    5168:	8f 3f       	cpi	r24, 0xFF	; 255
    516a:	2f e7       	ldi	r18, 0x7F	; 127
    516c:	92 07       	cpc	r25, r18
    516e:	09 f4       	brne	.+2      	; 0x5172 <_Z20Setup_Key_Up_Pressedv+0x14c>
    5170:	84 cf       	rjmp	.-248    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5172:	bc 01       	movw	r22, r24
    5174:	6f 5f       	subi	r22, 0xFF	; 255
    5176:	7f 4f       	sbci	r23, 0xFF	; 255
    5178:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    517c:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <McSTEP_Z+0x1>
            break;
          case   ID_MOTOR_X_STEP_PER_REV:
            if (MOTOR_X_STEP_PER_REV < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    5180:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <McSTEP_Z>
    5184:	7a cf       	rjmp	.-268    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5186:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    518a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    518e:	8f 3f       	cpi	r24, 0xFF	; 255
            {
              MOTOR_X_STEP_PER_REV = Check_All(MOTOR_X_STEP_PER_REV, MOTOR_X_STEP_PER_REV + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    5190:	ef e7       	ldi	r30, 0x7F	; 127
    5192:	9e 07       	cpc	r25, r30
    5194:	09 f4       	brne	.+2      	; 0x5198 <_Z20Setup_Key_Up_Pressedv+0x172>
    5196:	71 cf       	rjmp	.-286    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5198:	01 96       	adiw	r24, 0x01	; 1
    519a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <REBOUND_Z+0x1>
    519e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <REBOUND_Z>
    51a2:	6b cf       	rjmp	.-298    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_SCREW_X:
            if (SCREW_X < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    51a4:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    51a8:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    51ac:	8f 3f       	cpi	r24, 0xFF	; 255
    51ae:	ff e7       	ldi	r31, 0x7F	; 127
    51b0:	9f 07       	cpc	r25, r31
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <_Z20Setup_Key_Up_Pressedv+0x190>
    51b4:	62 cf       	rjmp	.-316    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            {
              SCREW_X = Check_All(SCREW_X, SCREW_X + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    51b6:	bc 01       	movw	r22, r24
    51b8:	6f 5f       	subi	r22, 0xFF	; 255
    51ba:	7f 4f       	sbci	r23, 0xFF	; 255
    51bc:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    51c0:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    51c4:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    51c8:	58 cf       	rjmp	.-336    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_McSTEP_X:
            if (McSTEP_X < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    51ca:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SCREW_X>
    51ce:	90 91 08 0a 	lds	r25, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    51d2:	8f 3f       	cpi	r24, 0xFF	; 255
    51d4:	2f e7       	ldi	r18, 0x7F	; 127
    51d6:	92 07       	cpc	r25, r18
    51d8:	09 f4       	brne	.+2      	; 0x51dc <_Z20Setup_Key_Up_Pressedv+0x1b6>
    51da:	4f cf       	rjmp	.-354    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            {
              McSTEP_X = Check_All(McSTEP_X, McSTEP_X + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    51dc:	bc 01       	movw	r22, r24
    51de:	6f 5f       	subi	r22, 0xFF	; 255
    51e0:	7f 4f       	sbci	r23, 0xFF	; 255
    51e2:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    51e6:	90 93 08 0a 	sts	0x0A08, r25	; 0x800a08 <SCREW_X+0x1>
    51ea:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <SCREW_X>
    51ee:	45 cf       	rjmp	.-374    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_REBOUND_X:
            if (REBOUND_X < 32767) ++REBOUND_X;
    51f0:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    51f4:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    51f8:	8f 3f       	cpi	r24, 0xFF	; 255
    51fa:	ef e7       	ldi	r30, 0x7F	; 127
    51fc:	9e 07       	cpc	r25, r30
    51fe:	09 f4       	brne	.+2      	; 0x5202 <_Z20Setup_Key_Up_Pressedv+0x1dc>
    5200:	3c cf       	rjmp	.-392    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5202:	bc 01       	movw	r22, r24
    5204:	6f 5f       	subi	r22, 0xFF	; 255
    5206:	7f 4f       	sbci	r23, 0xFF	; 255
    5208:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    520c:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <McSTEP_X+0x1>
            break;

          //Fix Отсутствовали
          case   ID_THRD_ACCEL:
            if (THRD_ACCEL < 255) ++THRD_ACCEL;
    5210:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <McSTEP_X>
    5214:	32 cf       	rjmp	.-412    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5216:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    521a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    521e:	8f 3f       	cpi	r24, 0xFF	; 255
            break;

          case   ID_FEED_ACCEL:
            if (FEED_ACCEL < 255) ++FEED_ACCEL;
    5220:	ff e7       	ldi	r31, 0x7F	; 127
    5222:	9f 07       	cpc	r25, r31
    5224:	09 f4       	brne	.+2      	; 0x5228 <_Z20Setup_Key_Up_Pressedv+0x202>
    5226:	29 cf       	rjmp	.-430    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5228:	01 96       	adiw	r24, 0x01	; 1
    522a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <REBOUND_X+0x1>
    522e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <REBOUND_X>
    5232:	23 cf       	rjmp	.-442    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5234:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <THRD_ACCEL>
    5238:	8f 3f       	cpi	r24, 0xFF	; 255
    523a:	09 f4       	brne	.+2      	; 0x523e <_Z20Setup_Key_Up_Pressedv+0x218>
            break;
          //---

          case   ID_MIN_FEED:
            if (MIN_FEED < 32767 && MIN_FEED + 1 < MAX_FEED)
    523c:	1e cf       	rjmp	.-452    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    523e:	8f 5f       	subi	r24, 0xFF	; 255
    5240:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <THRD_ACCEL>
    5244:	1a cf       	rjmp	.-460    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5246:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <FEED_ACCEL>
    524a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    524e:	8f 3f       	cpi	r24, 0xFF	; 255
    5250:	91 05       	cpc	r25, r1
    5252:	0c f0       	brlt	.+2      	; 0x5256 <_Z20Setup_Key_Up_Pressedv+0x230>
    5254:	12 cf       	rjmp	.-476    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5256:	01 96       	adiw	r24, 0x01	; 1
    5258:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <FEED_ACCEL+0x1>
    525c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <FEED_ACCEL>
    5260:	0c cf       	rjmp	.-488    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5262:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <MIN_FEED>
            {
              MIN_FEED = Check_All(MIN_FEED, MIN_FEED + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    5266:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <MIN_FEED+0x1>
    526a:	8f 3f       	cpi	r24, 0xFF	; 255
    526c:	2f e7       	ldi	r18, 0x7F	; 127
    526e:	92 07       	cpc	r25, r18
    5270:	09 f4       	brne	.+2      	; 0x5274 <_Z20Setup_Key_Up_Pressedv+0x24e>
            }
            break;
          case   ID_MAX_FEED:
            if (MAX_FEED < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    5272:	03 cf       	rjmp	.-506    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5274:	bc 01       	movw	r22, r24
    5276:	6f 5f       	subi	r22, 0xFF	; 255
    5278:	7f 4f       	sbci	r23, 0xFF	; 255
    527a:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <MAX_FEED>
    527e:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <MAX_FEED+0x1>
    5282:	62 17       	cp	r22, r18
            {
              MAX_FEED = Check_All(MAX_FEED, MAX_FEED + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    5284:	73 07       	cpc	r23, r19
    5286:	0c f0       	brlt	.+2      	; 0x528a <_Z20Setup_Key_Up_Pressedv+0x264>
    5288:	f8 ce       	rjmp	.-528    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    528a:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    528e:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <MIN_FEED+0x1>
    5292:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <MIN_FEED>
    5296:	f1 ce       	rjmp	.-542    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_MIN_aFEED:
            if (MIN_aFEED < 32767 && MIN_aFEED + 1 < MAX_aFEED)
    5298:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <MAX_FEED>
    529c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <MAX_FEED+0x1>
    52a0:	8f 3f       	cpi	r24, 0xFF	; 255
    52a2:	ef e7       	ldi	r30, 0x7F	; 127
    52a4:	9e 07       	cpc	r25, r30
    52a6:	09 f4       	brne	.+2      	; 0x52aa <_Z20Setup_Key_Up_Pressedv+0x284>
    52a8:	e8 ce       	rjmp	.-560    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    52aa:	bc 01       	movw	r22, r24
    52ac:	6f 5f       	subi	r22, 0xFF	; 255
    52ae:	7f 4f       	sbci	r23, 0xFF	; 255
    52b0:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    52b4:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <MAX_FEED+0x1>
    52b8:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <MAX_FEED>
    52bc:	de ce       	rjmp	.-580    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    52be:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <MIN_aFEED>
            {
              MIN_aFEED = Check_All(MIN_aFEED, MIN_aFEED + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    52c2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    52c6:	8f 3f       	cpi	r24, 0xFF	; 255
    52c8:	ff e7       	ldi	r31, 0x7F	; 127
    52ca:	9f 07       	cpc	r25, r31
    52cc:	09 f4       	brne	.+2      	; 0x52d0 <_Z20Setup_Key_Up_Pressedv+0x2aa>
            }
            break;
          case   ID_MAX_aFEED:
            if (MAX_aFEED < 32767) //Фактический максимум после увеличения 32767 (Это предел для числа типа int)
    52ce:	d5 ce       	rjmp	.-598    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    52d0:	bc 01       	movw	r22, r24
    52d2:	6f 5f       	subi	r22, 0xFF	; 255
    52d4:	7f 4f       	sbci	r23, 0xFF	; 255
    52d6:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <MAX_aFEED>
    52da:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <MAX_aFEED+0x1>
    52de:	62 17       	cp	r22, r18
            {
              MAX_aFEED = Check_All(MAX_aFEED, MAX_aFEED + 1); // ENC_LINE_PER_REV, MOTOR_Z_STEP_PER_REV, MOTOR_X_STEP_PER_REV, McSTEP_Z, McSTEP_X, SCREW_Z, SCREW_X, MIN_FEED, MAX_FEED, MIN_aFEED, MAX_aFEED
    52e0:	73 07       	cpc	r23, r19
    52e2:	0c f0       	brlt	.+2      	; 0x52e6 <_Z20Setup_Key_Up_Pressedv+0x2c0>
    52e4:	ca ce       	rjmp	.-620    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    52e6:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
    52ea:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <MIN_aFEED+0x1>
    52ee:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <MIN_aFEED>
    52f2:	c3 ce       	rjmp	.-634    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
            }
            break;
          case   ID_MAX_RAPID_MOTION:
            if (MAX_RAPID_MOTION < 254) ++MAX_RAPID_MOTION;   //Fix: Допустимое значение не выше 255
    52f4:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MAX_aFEED>
    52f8:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <MAX_aFEED+0x1>
    52fc:	8f 3f       	cpi	r24, 0xFF	; 255
    52fe:	2f e7       	ldi	r18, 0x7F	; 127
    5300:	92 07       	cpc	r25, r18
    5302:	09 f4       	brne	.+2      	; 0x5306 <_Z20Setup_Key_Up_Pressedv+0x2e0>
    5304:	ba ce       	rjmp	.-652    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5306:	bc 01       	movw	r22, r24
    5308:	6f 5f       	subi	r22, 0xFF	; 255
    530a:	7f 4f       	sbci	r23, 0xFF	; 255
    530c:	0e 94 17 04 	call	0x82e	; 0x82e <_Z9Check_Alljj>
            break;
          case   ID_MIN_RAPID_MOTION:
            if (MIN_RAPID_MOTION < 254) ++MIN_RAPID_MOTION;   //Fix: Допустимое значение не выше 255
    5310:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <MAX_aFEED+0x1>
    5314:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <MAX_aFEED>
    5318:	b0 ce       	rjmp	.-672    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    531a:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    531e:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    5322:	8e 3f       	cpi	r24, 0xFE	; 254
    5324:	91 05       	cpc	r25, r1
    5326:	0c f0       	brlt	.+2      	; 0x532a <_Z20Setup_Key_Up_Pressedv+0x304>
    5328:	a8 ce       	rjmp	.-688    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    532a:	01 96       	adiw	r24, 0x01	; 1
            break;
          case   ID_REPEAt:
            if (REPEAt < 32767) ++REPEAt;
    532c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    5330:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <MAX_RAPID_MOTION>
    5334:	a2 ce       	rjmp	.-700    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5336:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    533a:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    533e:	8e 3f       	cpi	r24, 0xFE	; 254
    5340:	91 05       	cpc	r25, r1
    5342:	0c f0       	brlt	.+2      	; 0x5346 <_Z20Setup_Key_Up_Pressedv+0x320>
    5344:	9a ce       	rjmp	.-716    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5346:	01 96       	adiw	r24, 0x01	; 1
    5348:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
            break;
          case   ID_HC_SCALE_1:
            if (HC_SCALE_1 < 32767) ++HC_SCALE_1;
    534c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <MIN_RAPID_MOTION>
    5350:	94 ce       	rjmp	.-728    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5352:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
    5356:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
    535a:	8f 3f       	cpi	r24, 0xFF	; 255
    535c:	ef e7       	ldi	r30, 0x7F	; 127
    535e:	9e 07       	cpc	r25, r30
    5360:	09 f4       	brne	.+2      	; 0x5364 <_Z20Setup_Key_Up_Pressedv+0x33e>
    5362:	8b ce       	rjmp	.-746    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5364:	01 96       	adiw	r24, 0x01	; 1
    5366:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <REPEAt+0x1>
            break;
          case   ID_HC_SCALE_10:
            if (HC_SCALE_10 < 32767) ++HC_SCALE_10;
    536a:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <REPEAt>
    536e:	85 ce       	rjmp	.-758    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5370:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <HC_SCALE_1>
    5374:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <HC_SCALE_1+0x1>
    5378:	8f 3f       	cpi	r24, 0xFF	; 255
    537a:	ff e7       	ldi	r31, 0x7F	; 127
    537c:	9f 07       	cpc	r25, r31
    537e:	09 f4       	brne	.+2      	; 0x5382 <_Z20Setup_Key_Up_Pressedv+0x35c>
    5380:	7c ce       	rjmp	.-776    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5382:	01 96       	adiw	r24, 0x01	; 1
    5384:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <HC_SCALE_1+0x1>
            break;
          case   ID_HC_START_SPEED_1:
            if (HC_START_SPEED_1 < 32767) ++HC_START_SPEED_1;
    5388:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <HC_SCALE_1>
    538c:	76 ce       	rjmp	.-788    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    538e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <HC_SCALE_10>
    5392:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <HC_SCALE_10+0x1>
    5396:	8f 3f       	cpi	r24, 0xFF	; 255
    5398:	2f e7       	ldi	r18, 0x7F	; 127
    539a:	92 07       	cpc	r25, r18
    539c:	09 f4       	brne	.+2      	; 0x53a0 <_Z20Setup_Key_Up_Pressedv+0x37a>
    539e:	6d ce       	rjmp	.-806    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <HC_SCALE_10+0x1>
            break;
          case   ID_HC_MAX_SPEED_1:
            if (HC_MAX_SPEED_1 < 32767) ++HC_MAX_SPEED_1;
    53a6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <HC_SCALE_10>
    53aa:	67 ce       	rjmp	.-818    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53ac:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <HC_START_SPEED_1>
    53b0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <HC_START_SPEED_1+0x1>
    53b4:	8f 3f       	cpi	r24, 0xFF	; 255
    53b6:	ef e7       	ldi	r30, 0x7F	; 127
    53b8:	9e 07       	cpc	r25, r30
    53ba:	09 f4       	brne	.+2      	; 0x53be <_Z20Setup_Key_Up_Pressedv+0x398>
    53bc:	5e ce       	rjmp	.-836    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53be:	01 96       	adiw	r24, 0x01	; 1
    53c0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <HC_START_SPEED_1+0x1>
            break;
          case   ID_HC_START_SPEED_10:
            if (HC_START_SPEED_10 < 32767) ++HC_START_SPEED_10;
    53c4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <HC_START_SPEED_1>
    53c8:	58 ce       	rjmp	.-848    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53ca:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <HC_MAX_SPEED_1>
    53ce:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <HC_MAX_SPEED_1+0x1>
    53d2:	8f 3f       	cpi	r24, 0xFF	; 255
    53d4:	ff e7       	ldi	r31, 0x7F	; 127
    53d6:	9f 07       	cpc	r25, r31
    53d8:	09 f4       	brne	.+2      	; 0x53dc <_Z20Setup_Key_Up_Pressedv+0x3b6>
    53da:	4f ce       	rjmp	.-866    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53dc:	01 96       	adiw	r24, 0x01	; 1
    53de:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <HC_MAX_SPEED_1+0x1>
            break;
          case   ID_HC_MAX_SPEED_10:
            if (HC_MAX_SPEED_10 < 32767) ++HC_MAX_SPEED_10;
    53e2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <HC_MAX_SPEED_1>
    53e6:	49 ce       	rjmp	.-878    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53e8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <HC_START_SPEED_10>
    53ec:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <HC_START_SPEED_10+0x1>
    53f0:	8f 3f       	cpi	r24, 0xFF	; 255
    53f2:	2f e7       	ldi	r18, 0x7F	; 127
    53f4:	92 07       	cpc	r25, r18
    53f6:	09 f4       	brne	.+2      	; 0x53fa <_Z20Setup_Key_Up_Pressedv+0x3d4>
    53f8:	40 ce       	rjmp	.-896    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    53fa:	01 96       	adiw	r24, 0x01	; 1
    53fc:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <HC_START_SPEED_10+0x1>
            break;
          case   ID_HC_X_DIR:
            if (HC_X_DIR == 0) ++HC_X_DIR;
    5400:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <HC_START_SPEED_10>
    5404:	3a ce       	rjmp	.-908    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5406:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <HC_MAX_SPEED_10>
    540a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <HC_MAX_SPEED_10+0x1>
            //  break;
        }
        //---
      }
    }
  } else if (SETUP_MODE == MODE_READ_THREAD)                           //ПРОСМОТР КОЭФФИЦИЕНТОВ РЕЗЬБ
    540e:	8f 3f       	cpi	r24, 0xFF	; 255
    5410:	ef e7       	ldi	r30, 0x7F	; 127
    5412:	9e 07       	cpc	r25, r30
  {
    if (!bEditUserThread)
    5414:	09 f4       	brne	.+2      	; 0x5418 <_Z20Setup_Key_Up_Pressedv+0x3f2>
    5416:	31 ce       	rjmp	.-926    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5418:	01 96       	adiw	r24, 0x01	; 1
    541a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <HC_MAX_SPEED_10+0x1>
    {
      if (bModeThread)
    541e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <HC_MAX_SPEED_10>
    5422:	2b ce       	rjmp	.-938    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
      {
        if (CURRENT_THREAD > 0 )
    5424:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    5428:	81 11       	cpse	r24, r1
    542a:	27 ce       	rjmp	.-946    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
        {
          --CURRENT_THREAD;                           //Листаем список до начала
    542c:	81 e0       	ldi	r24, 0x01	; 1
        } else if (CURRENT_THREAD == 0 )
        {
          CURRENT_THREAD = ((sizeof(Thread_Info) / sizeof(Thread_Info[0])) - 1); //Как достигли начала списка - переходим в его конец
    542e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    5432:	23 ce       	rjmp	.-954    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5434:	82 30       	cpi	r24, 0x02	; 2
    5436:	09 f0       	breq	.+2      	; 0x543a <_Z20Setup_Key_Up_Pressedv+0x414>
        }
      } else {
        --SETUP_MODE;                                 //Переход к пункту меню MODE_PARAMETERS
    5438:	a4 c0       	rjmp	.+328    	; 0x5582 <_Z20Setup_Key_Up_Pressedv+0x55c>
    543a:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <bEditUserThread>
      }
    } else {
      //Если находимся в процессе редактирования пользовательской резьбы...
      //-------------------------------------------------------------------------------------------------------------------------------------------------------------------
      float NextStep = Thread_Info[CURRENT_THREAD].Step + scaleFloat * USER_THREAD_STEP;
    543e:	81 11       	cpse	r24, r1
    5440:	10 c0       	rjmp	.+32     	; 0x5462 <_Z20Setup_Key_Up_Pressedv+0x43c>
    5442:	80 91 b4 11 	lds	r24, 0x11B4	; 0x8011b4 <bModeThread>
    5446:	88 23       	and	r24, r24
    5448:	51 f0       	breq	.+20     	; 0x545e <_Z20Setup_Key_Up_Pressedv+0x438>
    544a:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    544e:	88 23       	and	r24, r24
    5450:	21 f0       	breq	.+8      	; 0x545a <_Z20Setup_Key_Up_Pressedv+0x434>
    5452:	81 50       	subi	r24, 0x01	; 1
    5454:	80 93 c2 11 	sts	0x11C2, r24	; 0x8011c2 <CURRENT_THREAD>
    5458:	10 ce       	rjmp	.-992    	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    545a:	82 e3       	ldi	r24, 0x32	; 50
    545c:	fb cf       	rjmp	.-10     	; 0x5454 <_Z20Setup_Key_Up_Pressedv+0x42e>
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	fe cd       	rjmp	.-1028   	; 0x505e <_Z20Setup_Key_Up_Pressedv+0x38>
    5462:	00 91 c2 11 	lds	r16, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    5466:	c0 91 15 02 	lds	r28, 0x0215	; 0x800215 <scaleFloat>
    546a:	d0 91 16 02 	lds	r29, 0x0216	; 0x800216 <scaleFloat+0x1>
    546e:	20 2e       	mov	r2, r16
    5470:	31 2c       	mov	r3, r1
    5472:	fa e1       	ldi	r31, 0x1A	; 26
    5474:	0f 9f       	mul	r16, r31
    5476:	80 01       	movw	r16, r0
    5478:	11 24       	eor	r1, r1
    547a:	09 53       	subi	r16, 0x39	; 57
    547c:	1b 4f       	sbci	r17, 0xFB	; 251
    547e:	be 01       	movw	r22, r28
      //float minStepZ = MinimumStepZ(254.999f);
      //float minStepX = MinimumStepX(254.999f);
      //float MaxStepZ = MinimumStepZ(2.0f);
      //float MaxStepX = MinimumStepX(2.0f);

      float MaxStepZ = MinimumStepZ(1.0f);        //С новым алгоритмом в INT0
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	80 e0       	ldi	r24, 0x00	; 0
    5484:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    5488:	27 e1       	ldi	r18, 0x17	; 23
    548a:	37 eb       	ldi	r19, 0xB7	; 183
    548c:	41 ed       	ldi	r20, 0xD1	; 209
    548e:	58 e3       	ldi	r21, 0x38	; 56
      float MaxStepX = MinimumStepX(1.0f);        //С новым алгоритмом в INT0
    5490:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    5494:	f8 01       	movw	r30, r16
    5496:	25 85       	ldd	r18, Z+13	; 0x0d
    5498:	36 85       	ldd	r19, Z+14	; 0x0e
    549a:	47 85       	ldd	r20, Z+15	; 0x0f
    549c:	50 89       	ldd	r21, Z+16	; 0x10
    549e:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
      
      if (NextStep <= USER_THREAD_MAX) {
    54a2:	6b 01       	movw	r12, r22
    54a4:	7c 01       	movw	r14, r24
    54a6:	60 e0       	ldi	r22, 0x00	; 0
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	80 e8       	ldi	r24, 0x80	; 128
    54ac:	9f e3       	ldi	r25, 0x3F	; 63
    54ae:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z12MinimumStepZf>
    54b2:	2b 01       	movw	r4, r22
    54b4:	3c 01       	movw	r6, r24
        //if (NextStep > minStepZ && NextStep > minStepX) {
        if (NextStep < MaxStepZ && NextStep < MaxStepX) {
    54b6:	60 e0       	ldi	r22, 0x00	; 0
    54b8:	70 e0       	ldi	r23, 0x00	; 0
    54ba:	80 e8       	ldi	r24, 0x80	; 128
    54bc:	9f e3       	ldi	r25, 0x3F	; 63
    54be:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12MinimumStepXf>
    54c2:	4b 01       	movw	r8, r22
    54c4:	5c 01       	movw	r10, r24
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	40 e0       	ldi	r20, 0x00	; 0
    54cc:	51 e4       	ldi	r21, 0x41	; 65
    54ce:	c7 01       	movw	r24, r14
    54d0:	b6 01       	movw	r22, r12
    54d2:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
          Thread_Info[CURRENT_THREAD].Step = NextStep;
    54d6:	18 16       	cp	r1, r24
    54d8:	0c f4       	brge	.+2      	; 0x54dc <_Z20Setup_Key_Up_Pressedv+0x4b6>
    54da:	50 c0       	rjmp	.+160    	; 0x557c <_Z20Setup_Key_Up_Pressedv+0x556>
    54dc:	a3 01       	movw	r20, r6
    54de:	92 01       	movw	r18, r4
          if (scaleFloat < (32767 - USER_THREAD_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_THREAD_CHANGE_SPEED;
    54e0:	c7 01       	movw	r24, r14
    54e2:	b6 01       	movw	r22, r12
    54e4:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    54e8:	87 ff       	sbrs	r24, 7
    54ea:	18 c0       	rjmp	.+48     	; 0x551c <_Z20Setup_Key_Up_Pressedv+0x4f6>
    54ec:	a5 01       	movw	r20, r10
    54ee:	94 01       	movw	r18, r8
    54f0:	c7 01       	movw	r24, r14
    54f2:	b6 01       	movw	r22, r12
    54f4:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
        } else {
          ScaleDiv2();
    54f8:	87 ff       	sbrs	r24, 7
          if (Thread_Info[CURRENT_THREAD].Step > MaxStepZ)
    54fa:	10 c0       	rjmp	.+32     	; 0x551c <_Z20Setup_Key_Up_Pressedv+0x4f6>
    54fc:	f8 01       	movw	r30, r16
    54fe:	c5 86       	std	Z+13, r12	; 0x0d
    5500:	d6 86       	std	Z+14, r13	; 0x0e
    5502:	e7 86       	std	Z+15, r14	; 0x0f
    5504:	f0 8a       	std	Z+16, r15	; 0x10
    5506:	cb 3e       	cpi	r28, 0xEB	; 235
    5508:	ff e7       	ldi	r31, 0x7F	; 127
    550a:	df 07       	cpc	r29, r31
    550c:	08 f0       	brcs	.+2      	; 0x5510 <_Z20Setup_Key_Up_Pressedv+0x4ea>
    550e:	b5 cd       	rjmp	.-1174   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5510:	64 96       	adiw	r28, 0x14	; 20
    5512:	d0 93 16 02 	sts	0x0216, r29	; 0x800216 <scaleFloat+0x1>
    5516:	c0 93 15 02 	sts	0x0215, r28	; 0x800215 <scaleFloat>
    551a:	af cd       	rjmp	.-1186   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    551c:	0e 94 09 04 	call	0x812	; 0x812 <_Z9ScaleDiv2v>
          {
            Thread_Info[CURRENT_THREAD].Step = MaxStepZ;
    5520:	8a e1       	ldi	r24, 0x1A	; 26
    5522:	82 9d       	mul	r24, r2
    5524:	e0 01       	movw	r28, r0
          }
          if (Thread_Info[CURRENT_THREAD].Step > MaxStepX)
    5526:	83 9d       	mul	r24, r3
    5528:	d0 0d       	add	r29, r0
    552a:	11 24       	eor	r1, r1
    552c:	c9 53       	subi	r28, 0x39	; 57
    552e:	db 4f       	sbci	r29, 0xFB	; 251
    5530:	a3 01       	movw	r20, r6
    5532:	92 01       	movw	r18, r4
    5534:	6d 85       	ldd	r22, Y+13	; 0x0d
    5536:	7e 85       	ldd	r23, Y+14	; 0x0e
    5538:	8f 85       	ldd	r24, Y+15	; 0x0f
    553a:	98 89       	ldd	r25, Y+16	; 0x10
    553c:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    5540:	18 16       	cp	r1, r24
    5542:	24 f4       	brge	.+8      	; 0x554c <_Z20Setup_Key_Up_Pressedv+0x526>
    5544:	4d 86       	std	Y+13, r4	; 0x0d
    5546:	5e 86       	std	Y+14, r5	; 0x0e
    5548:	6f 86       	std	Y+15, r6	; 0x0f
    554a:	78 8a       	std	Y+16, r7	; 0x10
          {
            Thread_Info[CURRENT_THREAD].Step = MaxStepX;
    554c:	8a e1       	ldi	r24, 0x1A	; 26
    554e:	82 9d       	mul	r24, r2
    5550:	e0 01       	movw	r28, r0
    5552:	83 9d       	mul	r24, r3
    5554:	d0 0d       	add	r29, r0
          }
        }
      } else {
        ScaleDiv2();
    5556:	11 24       	eor	r1, r1
    5558:	c9 53       	subi	r28, 0x39	; 57
    555a:	db 4f       	sbci	r29, 0xFB	; 251
      }
      //-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    }
  } else if (SETUP_MODE == MODE_READ_CONE)                             //ПРОСМОТР КОЭФФИЦИЕНТОВ КОНУСОВ
    555c:	a5 01       	movw	r20, r10
    555e:	94 01       	movw	r18, r8
    5560:	6d 85       	ldd	r22, Y+13	; 0x0d
  {
    if (!bEditUserConeAB && !bEditUserConeDEG)                //Если мы не редактируем пользовательский конус...
    5562:	7e 85       	ldd	r23, Y+14	; 0x0e
    5564:	8f 85       	ldd	r24, Y+15	; 0x0f
    5566:	98 89       	ldd	r25, Y+16	; 0x10
    5568:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    556c:	18 16       	cp	r1, r24
    556e:	0c f0       	brlt	.+2      	; 0x5572 <_Z20Setup_Key_Up_Pressedv+0x54c>
    5570:	84 cd       	rjmp	.-1272   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    {
      if (bModeCone)
    5572:	8d 86       	std	Y+13, r8	; 0x0d
    5574:	9e 86       	std	Y+14, r9	; 0x0e
    5576:	af 86       	std	Y+15, r10	; 0x0f
    5578:	b8 8a       	std	Y+16, r11	; 0x10
      {
        if (CURRENT_CONE > 0 )
    557a:	7f cd       	rjmp	.-1282   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    557c:	0e 94 09 04 	call	0x812	; 0x812 <_Z9ScaleDiv2v>
    5580:	7c cd       	rjmp	.-1288   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
        {
          --CURRENT_CONE;                           //Листаем список до начала
    5582:	83 30       	cpi	r24, 0x03	; 3
        } else if (CURRENT_CONE == 0 )
        {
          CURRENT_CONE = ((sizeof(Cone_Info) / sizeof(Cone_Info[0])) - 1); //Как достигли начала списка - переходим в его конец
    5584:	09 f0       	breq	.+2      	; 0x5588 <_Z20Setup_Key_Up_Pressedv+0x562>
    5586:	0e c1       	rjmp	.+540    	; 0x57a4 <_Z20Setup_Key_Up_Pressedv+0x77e>
    5588:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <bEditUserConeAB>
    558c:	81 11       	cpse	r24, r1
        }
      } else {
        --SETUP_MODE;                                 //Переход к пункту меню MODE_READ_THREAD
    558e:	14 c0       	rjmp	.+40     	; 0x55b8 <_Z20Setup_Key_Up_Pressedv+0x592>
    5590:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <bEditUserConeDEG>
      if (bEditUserConeAB)
      {
        ////float MinC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f);           //Расчёт допустимого значения C2 при заданном C1
        //float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 2.0f);       //Расчёт допустимого значения C2 при заданном C1

        float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f, (byte)1);       //Расчёт допустимого значения C2 при заданном C1
    5594:	81 11       	cpse	r24, r1

        NextC1 = Cone_Info[CURRENT_CONE].C1 + scaleFloat * USER_CONEAB_STEP;
    5596:	c6 c0       	rjmp	.+396    	; 0x5724 <_Z20Setup_Key_Up_Pressedv+0x6fe>
    5598:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <bModeCone>
    559c:	88 23       	and	r24, r24
    559e:	51 f0       	breq	.+20     	; 0x55b4 <_Z20Setup_Key_Up_Pressedv+0x58e>
    55a0:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    55a4:	88 23       	and	r24, r24
    55a6:	21 f0       	breq	.+8      	; 0x55b0 <_Z20Setup_Key_Up_Pressedv+0x58a>
    55a8:	81 50       	subi	r24, 0x01	; 1
    55aa:	80 93 c0 11 	sts	0x11C0, r24	; 0x8011c0 <CURRENT_CONE>
    55ae:	65 cd       	rjmp	.-1334   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    55b0:	81 e2       	ldi	r24, 0x21	; 33
    55b2:	fb cf       	rjmp	.-10     	; 0x55aa <_Z20Setup_Key_Up_Pressedv+0x584>
    55b4:	82 e0       	ldi	r24, 0x02	; 2
    55b6:	53 cd       	rjmp	.-1370   	; 0x505e <_Z20Setup_Key_Up_Pressedv+0x38>
    55b8:	c0 91 c0 11 	lds	r28, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    55bc:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <scaleFloat>
    55c0:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <scaleFloat+0x1>
    55c4:	23 e1       	ldi	r18, 0x13	; 19
    55c6:	c2 9f       	mul	r28, r18
    55c8:	e0 01       	movw	r28, r0
    55ca:	11 24       	eor	r1, r1
    55cc:	c0 5d       	subi	r28, 0xD0	; 208
    55ce:	dd 4f       	sbci	r29, 0xFD	; 253
        if (NextC1 <= USER_CONEAB_MAX && NextC1 < MaxC1)
    55d0:	b8 01       	movw	r22, r16
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	80 e0       	ldi	r24, 0x00	; 0
    55d6:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    55da:	27 e1       	ldi	r18, 0x17	; 23
    55dc:	37 eb       	ldi	r19, 0xB7	; 183
    55de:	41 ed       	ldi	r20, 0xD1	; 209
    55e0:	58 e3       	ldi	r21, 0x38	; 56
  if (XZ == (byte)0)
  {
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)Divider * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
  } else {
    float DividerXZ = 1.0f / Divider;
    tmp = (float)(4.0f * SCREW_X * MOTOR_Z_STEP_PER_REV * McSTEP_Z) / (float)((float)DividerXZ * SCREW_Z * MOTOR_X_STEP_PER_REV * McSTEP_X);
    55e2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    55e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    55e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    55ea:	4c 85       	ldd	r20, Y+12	; 0x0c
    55ec:	5d 85       	ldd	r21, Y+13	; 0x0d
    55ee:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    55f2:	6b 01       	movw	r12, r22
    55f4:	7c 01       	movw	r14, r24
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	4e e7       	ldi	r20, 0x7E	; 126
    55fc:	53 e4       	ldi	r21, 0x43	; 67
    55fe:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    5602:	18 16       	cp	r1, r24
    5604:	0c f4       	brge	.+2      	; 0x5608 <_Z20Setup_Key_Up_Pressedv+0x5e2>
    5606:	ba cf       	rjmp	.-140    	; 0x557c <_Z20Setup_Key_Up_Pressedv+0x556>
    5608:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    560c:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    5610:	07 2e       	mov	r0, r23
    5612:	00 0c       	add	r0, r0
    5614:	88 0b       	sbc	r24, r24
    5616:	99 0b       	sbc	r25, r25
    5618:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	40 e8       	ldi	r20, 0x80	; 128
    5622:	50 e4       	ldi	r21, 0x40	; 64
    5624:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    5628:	4b 01       	movw	r8, r22
    562a:	5c 01       	movw	r10, r24
    562c:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    5630:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    5634:	07 2e       	mov	r0, r23
    5636:	00 0c       	add	r0, r0
    5638:	88 0b       	sbc	r24, r24
    563a:	99 0b       	sbc	r25, r25
    563c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    5640:	9b 01       	movw	r18, r22
    5642:	ac 01       	movw	r20, r24
    5644:	c5 01       	movw	r24, r10
    5646:	b4 01       	movw	r22, r8
    5648:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    564c:	4b 01       	movw	r8, r22
    564e:	5c 01       	movw	r10, r24
    5650:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    5654:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    5658:	07 2e       	mov	r0, r23
    565a:	00 0c       	add	r0, r0
    565c:	88 0b       	sbc	r24, r24
    565e:	99 0b       	sbc	r25, r25
    5660:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    5664:	9b 01       	movw	r18, r22
    5666:	ac 01       	movw	r20, r24
    5668:	c5 01       	movw	r24, r10
    566a:	b4 01       	movw	r22, r8
    566c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    5670:	4b 01       	movw	r8, r22
    5672:	5c 01       	movw	r10, r24
    5674:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    5678:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    567c:	07 2e       	mov	r0, r23
    567e:	00 0c       	add	r0, r0
    5680:	88 0b       	sbc	r24, r24
    5682:	99 0b       	sbc	r25, r25
    5684:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    5688:	2b ec       	ldi	r18, 0xCB	; 203
    568a:	31 e8       	ldi	r19, 0x81	; 129
    568c:	40 e8       	ldi	r20, 0x80	; 128
    568e:	5b e3       	ldi	r21, 0x3B	; 59
    5690:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    5694:	2b 01       	movw	r4, r22
    5696:	3c 01       	movw	r6, r24
    5698:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    569c:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    56a0:	07 2e       	mov	r0, r23
    56a2:	00 0c       	add	r0, r0
    56a4:	88 0b       	sbc	r24, r24
    56a6:	99 0b       	sbc	r25, r25
    56a8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    56ac:	9b 01       	movw	r18, r22
    56ae:	ac 01       	movw	r20, r24
    56b0:	c3 01       	movw	r24, r6
    56b2:	b2 01       	movw	r22, r4
    56b4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    56b8:	2b 01       	movw	r4, r22
    56ba:	3c 01       	movw	r6, r24
    56bc:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    56c0:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
  }
  return (float)(B * tmp);
    56c4:	07 2e       	mov	r0, r23
    56c6:	00 0c       	add	r0, r0
    56c8:	88 0b       	sbc	r24, r24
    56ca:	99 0b       	sbc	r25, r25
    56cc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    56d0:	9b 01       	movw	r18, r22
        //float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 2.0f);       //Расчёт допустимого значения C2 при заданном C1

        float MaxC1 = Get_A_AB(Cone_Info[CURRENT_CONE].C2, 254.99f, (byte)1);       //Расчёт допустимого значения C2 при заданном C1

        NextC1 = Cone_Info[CURRENT_CONE].C1 + scaleFloat * USER_CONEAB_STEP;
        if (NextC1 <= USER_CONEAB_MAX && NextC1 < MaxC1)
    56d2:	ac 01       	movw	r20, r24
    56d4:	c3 01       	movw	r24, r6
    56d6:	b2 01       	movw	r22, r4
    56d8:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    56dc:	9b 01       	movw	r18, r22
        {
          Cone_Info[CURRENT_CONE].C1 = NextC1;
    56de:	ac 01       	movw	r20, r24
    56e0:	c5 01       	movw	r24, r10
    56e2:	b4 01       	movw	r22, r8
    56e4:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
          if (scaleFloat < (32767 - USER_CONEAB_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEAB_CHANGE_SPEED;
    56e8:	2e 85       	ldd	r18, Y+14	; 0x0e
    56ea:	3f 85       	ldd	r19, Y+15	; 0x0f
    56ec:	48 89       	ldd	r20, Y+16	; 0x10
    56ee:	59 89       	ldd	r21, Y+17	; 0x11
    56f0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>

        NextC1 = Cone_Info[CURRENT_CONE].C1 + scaleFloat * USER_CONEDEG_STEP;
        if (NextC1 <= USER_CONEDEG_MAX && NextC1 < MaxDEG )
        {
          Cone_Info[CURRENT_CONE].C1 = NextC1;
          if (scaleFloat < (32767 - USER_CONEDEG_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEDEG_CHANGE_SPEED;
    56f4:	9b 01       	movw	r18, r22
    56f6:	ac 01       	movw	r20, r24
    56f8:	c7 01       	movw	r24, r14
    56fa:	b6 01       	movw	r22, r12
    56fc:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
      } else if (bEditUserConeDEG)
      {
        ////float MinDEG = Get_deg_DEG(254.99f);
        //float MaxDEG = Get_deg_DEG(2.0f);
        //С учётом типа тактования конуса
        float MaxDEG = Get_deg_DEG(254.99f, (byte)1);
    5700:	87 ff       	sbrs	r24, 7
    5702:	3c cf       	rjmp	.-392    	; 0x557c <_Z20Setup_Key_Up_Pressedv+0x556>

        NextC1 = Cone_Info[CURRENT_CONE].C1 + scaleFloat * USER_CONEDEG_STEP;
    5704:	ca 86       	std	Y+10, r12	; 0x0a
    5706:	db 86       	std	Y+11, r13	; 0x0b
    5708:	ec 86       	std	Y+12, r14	; 0x0c
    570a:	fd 86       	std	Y+13, r15	; 0x0d
    570c:	0b 3e       	cpi	r16, 0xEB	; 235
    570e:	8f e7       	ldi	r24, 0x7F	; 127
    5710:	18 07       	cpc	r17, r24
    5712:	08 f0       	brcs	.+2      	; 0x5716 <_Z20Setup_Key_Up_Pressedv+0x6f0>
    5714:	b2 cc       	rjmp	.-1692   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5716:	0c 5e       	subi	r16, 0xEC	; 236
    5718:	1f 4f       	sbci	r17, 0xFF	; 255
    571a:	10 93 16 02 	sts	0x0216, r17	; 0x800216 <scaleFloat+0x1>
    571e:	00 93 15 02 	sts	0x0215, r16	; 0x800215 <scaleFloat>
    5722:	ab cc       	rjmp	.-1706   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    5724:	f9 db       	rcall	.-2062   	; 0x4f18 <_Z11Get_deg_DEGfh.constprop.9>
    5726:	4b 01       	movw	r8, r22
    5728:	5c 01       	movw	r10, r24
    572a:	c0 91 c0 11 	lds	r28, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    572e:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <scaleFloat>
    5732:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <scaleFloat+0x1>
    5736:	e3 e1       	ldi	r30, 0x13	; 19
    5738:	ce 9f       	mul	r28, r30
    573a:	e0 01       	movw	r28, r0
    573c:	11 24       	eor	r1, r1
    573e:	c0 5d       	subi	r28, 0xD0	; 208
    5740:	dd 4f       	sbci	r29, 0xFD	; 253
        if (NextC1 <= USER_CONEDEG_MAX && NextC1 < MaxDEG )
    5742:	b8 01       	movw	r22, r16
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	80 e0       	ldi	r24, 0x00	; 0
    5748:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    574c:	2a e0       	ldi	r18, 0x0A	; 10
    574e:	37 ed       	ldi	r19, 0xD7	; 215
    5750:	43 e2       	ldi	r20, 0x23	; 35
    5752:	5c e3       	ldi	r21, 0x3C	; 60
    5754:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    5758:	2a 85       	ldd	r18, Y+10	; 0x0a
    575a:	3b 85       	ldd	r19, Y+11	; 0x0b
    575c:	4c 85       	ldd	r20, Y+12	; 0x0c
    575e:	5d 85       	ldd	r21, Y+13	; 0x0d
    5760:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    5764:	6b 01       	movw	r12, r22
        {
          Cone_Info[CURRENT_CONE].C1 = NextC1;
    5766:	7c 01       	movw	r14, r24
    5768:	2d ec       	ldi	r18, 0xCD	; 205
    576a:	3c ec       	ldi	r19, 0xCC	; 204
    576c:	43 eb       	ldi	r20, 0xB3	; 179
          if (scaleFloat < (32767 - USER_CONEDEG_CHANGE_SPEED)) scaleFloat = scaleFloat + USER_CONEDEG_CHANGE_SPEED;
    576e:	52 e4       	ldi	r21, 0x42	; 66
    5770:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    5774:	18 16       	cp	r1, r24
    5776:	0c f4       	brge	.+2      	; 0x577a <_Z20Setup_Key_Up_Pressedv+0x754>
    5778:	01 cf       	rjmp	.-510    	; 0x557c <_Z20Setup_Key_Up_Pressedv+0x556>
    577a:	a7 01       	movw	r20, r14
    577c:	96 01       	movw	r18, r12
          ScaleDiv2();
        }
      }
      //-------------------------------------------------------------------------------------------------------------------------------------------------------------------
    }
  } else if (SETUP_MODE == MODE_RESET_TO_DEFAULTS)                       //СБРОС НАСТРОЕК НА ДЕФОЛТНЫЕ (Требует последующего сохранения)
    577e:	c5 01       	movw	r24, r10
    5780:	b4 01       	movw	r22, r8
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_EXIT_AND_SAVING
    5782:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
  } else if (SETUP_MODE == MODE_EXIT_AND_SAVING)                       //ВЫХОД И СОХРАНЕНИЕ
    5786:	18 16       	cp	r1, r24
    5788:	0c f0       	brlt	.+2      	; 0x578c <_Z20Setup_Key_Up_Pressedv+0x766>
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_READ_CONE
    578a:	f8 ce       	rjmp	.-528    	; 0x557c <_Z20Setup_Key_Up_Pressedv+0x556>
    578c:	ca 86       	std	Y+10, r12	; 0x0a
  } else if (SETUP_MODE == MODE_EXIT_WITHOUT_SAVING)                   //ВЫХОД БЕЗ СОХРАНЕНИЯ
    578e:	db 86       	std	Y+11, r13	; 0x0b
    5790:	ec 86       	std	Y+12, r14	; 0x0c
    5792:	fd 86       	std	Y+13, r15	; 0x0d
  {
    --SETUP_MODE;                                   //Переход к пункту меню MODE_EXIT_AND_SAVING
    5794:	0a 3f       	cpi	r16, 0xFA	; 250
    5796:	ff e7       	ldi	r31, 0x7F	; 127
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
    5798:	1f 07       	cpc	r17, r31
    579a:	08 f0       	brcs	.+2      	; 0x579e <_Z20Setup_Key_Up_Pressedv+0x778>
    579c:	6e cc       	rjmp	.-1828   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
  digitalWrite(_enable_pin, LOW);
    579e:	0b 5f       	subi	r16, 0xFB	; 251
    57a0:	1f 4f       	sbci	r17, 0xFF	; 255
    57a2:	bb cf       	rjmp	.-138    	; 0x571a <_Z20Setup_Key_Up_Pressedv+0x6f4>
    57a4:	84 30       	cpi	r24, 0x04	; 4
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
    57a6:	11 f4       	brne	.+4      	; 0x57ac <_Z20Setup_Key_Up_Pressedv+0x786>
    57a8:	83 e0       	ldi	r24, 0x03	; 3
    57aa:	59 cc       	rjmp	.-1870   	; 0x505e <_Z20Setup_Key_Up_Pressedv+0x38>
    57ac:	85 30       	cpi	r24, 0x05	; 5
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
    57ae:	11 f4       	brne	.+4      	; 0x57b4 <_Z20Setup_Key_Up_Pressedv+0x78e>
    57b0:	84 e0       	ldi	r24, 0x04	; 4
    57b2:	55 cc       	rjmp	.-1878   	; 0x505e <_Z20Setup_Key_Up_Pressedv+0x38>
    57b4:	86 30       	cpi	r24, 0x06	; 6
	

#endif

	// busy wait
	__asm__ __volatile__ (
    57b6:	09 f0       	breq	.+2      	; 0x57ba <_Z20Setup_Key_Up_Pressedv+0x794>
    57b8:	60 cc       	rjmp	.-1856   	; 0x507a <_Z20Setup_Key_Up_Pressedv+0x54>
    57ba:	85 e0       	ldi	r24, 0x05	; 5
    57bc:	50 cc       	rjmp	.-1888   	; 0x505e <_Z20Setup_Key_Up_Pressedv+0x38>

000057be <_ZN13LiquidCrystal11pulseEnableEv>:
  delayMicroseconds(100);   // commands need > 37us to settle
}
    57be:	cf 93       	push	r28
    57c0:	df 93       	push	r29
    57c2:	ec 01       	movw	r28, r24

void LiquidCrystal::write4bits(uint8_t value) {
    57c4:	60 e0       	ldi	r22, 0x00	; 0
    57c6:	8e 81       	ldd	r24, Y+6	; 0x06
    57c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    57cc:	61 e0       	ldi	r22, 0x01	; 1
    57ce:	8e 81       	ldd	r24, Y+6	; 0x06
    57d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    57d4:	60 e0       	ldi	r22, 0x00	; 0
    57d6:	8e 81       	ldd	r24, Y+6	; 0x06
    57d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    57dc:	8b e8       	ldi	r24, 0x8B	; 139
  for (int i = 0; i < 4; i++) {
    57de:	91 e0       	ldi	r25, 0x01	; 1
    57e0:	01 97       	sbiw	r24, 0x01	; 1
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    57e2:	f1 f7       	brne	.-4      	; 0x57e0 <_ZN13LiquidCrystal11pulseEnableEv+0x22>
    57e4:	df 91       	pop	r29
    57e6:	cf 91       	pop	r28
    57e8:	08 95       	ret

000057ea <_ZN13LiquidCrystal10write4bitsEh>:
    57ea:	cf 92       	push	r12
    57ec:	df 92       	push	r13
    57ee:	ef 92       	push	r14
    57f0:	ff 92       	push	r15
    57f2:	0f 93       	push	r16
    57f4:	1f 93       	push	r17
    57f6:	cf 93       	push	r28
    57f8:	df 93       	push	r29
    57fa:	6c 01       	movw	r12, r24
    57fc:	7c 01       	movw	r14, r24
    57fe:	87 e0       	ldi	r24, 0x07	; 7
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    5800:	e8 0e       	add	r14, r24
    5802:	f1 1c       	adc	r15, r1
    5804:	d0 e0       	ldi	r29, 0x00	; 0
    5806:	c0 e0       	ldi	r28, 0x00	; 0
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    5808:	06 2f       	mov	r16, r22
}
    580a:	10 e0       	ldi	r17, 0x00	; 0
    580c:	b8 01       	movw	r22, r16
    580e:	0c 2e       	mov	r0, r28
    5810:	02 c0       	rjmp	.+4      	; 0x5816 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    5812:	75 95       	asr	r23
    5814:	67 95       	ror	r22
    5816:	0a 94       	dec	r0
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    5818:	e2 f7       	brpl	.-8      	; 0x5812 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    581a:	61 70       	andi	r22, 0x01	; 1
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    581c:	f7 01       	movw	r30, r14
    581e:	81 91       	ld	r24, Z+
    5820:	7f 01       	movw	r14, r30
    5822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    5826:	21 96       	adiw	r28, 0x01	; 1
    5828:	c4 30       	cpi	r28, 0x04	; 4
    582a:	d1 05       	cpc	r29, r1
    582c:	79 f7       	brne	.-34     	; 0x580c <_ZN13LiquidCrystal10write4bitsEh+0x22>
    582e:	c6 01       	movw	r24, r12
  digitalWrite(_rs_pin, mode);
    5830:	df 91       	pop	r29
    5832:	cf 91       	pop	r28
    5834:	1f 91       	pop	r17
    5836:	0f 91       	pop	r16

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    5838:	ff 90       	pop	r15
    583a:	ef 90       	pop	r14
    583c:	df 90       	pop	r13
    digitalWrite(_rw_pin, LOW);
    583e:	cf 90       	pop	r12
    5840:	be cf       	rjmp	.-132    	; 0x57be <_ZN13LiquidCrystal11pulseEnableEv>

00005842 <_ZN13LiquidCrystal4sendEhh>:
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    5848:	ff 92       	push	r15
    584a:	0f 93       	push	r16
    584c:	1f 93       	push	r17
    584e:	cf 93       	push	r28
    5850:	df 93       	push	r29
    5852:	ec 01       	movw	r28, r24
    5854:	f6 2e       	mov	r15, r22

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    5856:	64 2f       	mov	r22, r20
    5858:	8c 81       	ldd	r24, Y+4	; 0x04
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    585a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    585e:	8d 81       	ldd	r24, Y+5	; 0x05
    5860:	8f 3f       	cpi	r24, 0xFF	; 255
    5862:	19 f0       	breq	.+6      	; 0x586a <_ZN13LiquidCrystal4sendEhh+0x28>
    5864:	60 e0       	ldi	r22, 0x00	; 0
    5866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    586a:	0f 2d       	mov	r16, r15
    586c:	10 e0       	ldi	r17, 0x00	; 0
    586e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5870:	84 ff       	sbrs	r24, 4
    5872:	24 c0       	rjmp	.+72     	; 0x58bc <_ZN13LiquidCrystal4sendEhh+0x7a>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    5874:	6e 01       	movw	r12, r28
    5876:	87 e0       	ldi	r24, 0x07	; 7
    5878:	c8 0e       	add	r12, r24
    587a:	d1 1c       	adc	r13, r1
    587c:	f1 2c       	mov	r15, r1
    587e:	e1 2c       	mov	r14, r1
    5880:	b8 01       	movw	r22, r16
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    5882:	0e 2c       	mov	r0, r14
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
    5884:	02 c0       	rjmp	.+4      	; 0x588a <_ZN13LiquidCrystal4sendEhh+0x48>
    5886:	75 95       	asr	r23
    5888:	67 95       	ror	r22
    588a:	0a 94       	dec	r0
    588c:	e2 f7       	brpl	.-8      	; 0x5886 <_ZN13LiquidCrystal4sendEhh+0x44>
    588e:	61 70       	andi	r22, 0x01	; 1
    5890:	f6 01       	movw	r30, r12
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    5892:	81 91       	ld	r24, Z+
    5894:	6f 01       	movw	r12, r30
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    5896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    589a:	ff ef       	ldi	r31, 0xFF	; 255
    589c:	ef 1a       	sub	r14, r31
    589e:	ff 0a       	sbc	r15, r31
    58a0:	88 e0       	ldi	r24, 0x08	; 8
    58a2:	e8 16       	cp	r14, r24
    58a4:	f1 04       	cpc	r15, r1
    write4bits(value);
    58a6:	61 f7       	brne	.-40     	; 0x5880 <_ZN13LiquidCrystal4sendEhh+0x3e>
    58a8:	ce 01       	movw	r24, r28
  }
}
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	ff 90       	pop	r15
    58b4:	ef 90       	pop	r14
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
    58b6:	df 90       	pop	r13
    58b8:	cf 90       	pop	r12
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    58ba:	81 cf       	rjmp	.-254    	; 0x57be <_ZN13LiquidCrystal11pulseEnableEv>
    58bc:	b8 01       	movw	r22, r16
  return 1; // assume sucess
}
    58be:	84 e0       	ldi	r24, 0x04	; 4
    58c0:	75 95       	asr	r23
    58c2:	67 95       	ror	r22
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
    58c4:	8a 95       	dec	r24
    58c6:	e1 f7       	brne	.-8      	; 0x58c0 <_ZN13LiquidCrystal4sendEhh+0x7e>
    58c8:	ce 01       	movw	r24, r28
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    58ca:	8f df       	rcall	.-226    	; 0x57ea <_ZN13LiquidCrystal10write4bitsEh>
    58cc:	6f 2d       	mov	r22, r15
    58ce:	ce 01       	movw	r24, r28
    58d0:	df 91       	pop	r29
    58d2:	cf 91       	pop	r28
  if (lines > 1) {
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    _displayfunction |= LCD_2LINE;
    58d8:	ff 90       	pop	r15
    58da:	ef 90       	pop	r14
    58dc:	df 90       	pop	r13
  }
  _numlines = lines;
    58de:	cf 90       	pop	r12

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
    58e0:	84 cf       	rjmp	.-248    	; 0x57ea <_ZN13LiquidCrystal10write4bitsEh>

000058e2 <_ZN13LiquidCrystal5writeEh>:
  _row_offsets[1] = row1;
    58e2:	41 e0       	ldi	r20, 0x01	; 1
    58e4:	ae df       	rcall	.-164    	; 0x5842 <_ZN13LiquidCrystal4sendEhh>
  _row_offsets[2] = row2;
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	90 e0       	ldi	r25, 0x00	; 0
  _row_offsets[3] = row3;
    58ea:	08 95       	ret

000058ec <_ZN13LiquidCrystal7commandEh>:
    58ec:	40 e0       	ldi	r20, 0x00	; 0
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
    58ee:	a9 cf       	rjmp	.-174    	; 0x5842 <_ZN13LiquidCrystal4sendEhh>

000058f0 <_ZN13LiquidCrystal5beginEhhh.constprop.35>:
    58f0:	0f 93       	push	r16
    58f2:	1f 93       	push	r17
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
    58f4:	cf 93       	push	r28
    58f6:	df 93       	push	r29
    58f8:	ec 01       	movw	r28, r24
    pinMode(_rw_pin, OUTPUT);
    58fa:	62 30       	cpi	r22, 0x02	; 2
    58fc:	19 f4       	brne	.+6      	; 0x5904 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x14>
  }
  pinMode(_enable_pin, OUTPUT);
    58fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5900:	88 60       	ori	r24, 0x08	; 8
    5902:	8f 87       	std	Y+15, r24	; 0x0f
    5904:	6b 8b       	std	Y+19, r22	; 0x13
    5906:	1c 8a       	std	Y+20, r1	; 0x14
    5908:	80 e4       	ldi	r24, 0x40	; 64
    590a:	8d 8b       	std	Y+21, r24	; 0x15
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
    590c:	80 e1       	ldi	r24, 0x10	; 16
    590e:	8e 8b       	std	Y+22, r24	; 0x16
    5910:	80 e5       	ldi	r24, 0x50	; 80
    5912:	8f 8b       	std	Y+23, r24	; 0x17
    5914:	8c 81       	ldd	r24, Y+4	; 0x04
    5916:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode.constprop.36>
    591a:	8d 81       	ldd	r24, Y+5	; 0x05
    591c:	8f 3f       	cpi	r24, 0xFF	; 255
    591e:	11 f0       	breq	.+4      	; 0x5924 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x34>
  {
    pinMode(_data_pins[i], OUTPUT);
    5920:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode.constprop.36>
    5924:	8e 81       	ldd	r24, Y+6	; 0x06
    5926:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode.constprop.36>
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
    592a:	8e 01       	movw	r16, r28
    592c:	98 01       	movw	r18, r16
    592e:	2c 1b       	sub	r18, r28
    5930:	3d 0b       	sbc	r19, r29
    5932:	8f 85       	ldd	r24, Y+15	; 0x0f
    5934:	84 fd       	sbrc	r24, 4
    5936:	0c c0       	rjmp	.+24     	; 0x5950 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x60>
  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
    5938:	84 e0       	ldi	r24, 0x04	; 4
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	0f 5f       	subi	r16, 0xFF	; 255
    593e:	1f 4f       	sbci	r17, 0xFF	; 255
  digitalWrite(_enable_pin, LOW);
    5940:	28 17       	cp	r18, r24
    5942:	39 07       	cpc	r19, r25
    5944:	44 f4       	brge	.+16     	; 0x5956 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x66>
    5946:	f8 01       	movw	r30, r16
  if (_rw_pin != 255) { 
    5948:	86 81       	ldd	r24, Z+6	; 0x06
    594a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <pinMode.constprop.36>
    digitalWrite(_rw_pin, LOW);
    594e:	ee cf       	rjmp	.-36     	; 0x592c <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x3c>
    5950:	88 e0       	ldi	r24, 0x08	; 8
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	f3 cf       	rjmp	.-26     	; 0x593c <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x4c>
    5956:	8b e3       	ldi	r24, 0x3B	; 59
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
    5958:	9d e0       	ldi	r25, 0x0D	; 13
    595a:	01 97       	sbiw	r24, 0x01	; 1
    595c:	f1 f7       	brne	.-4      	; 0x595a <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x6a>
    595e:	60 e0       	ldi	r22, 0x00	; 0
    5960:	8c 81       	ldd	r24, Y+4	; 0x04
    5962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    5966:	60 e0       	ldi	r22, 0x00	; 0
    delayMicroseconds(4500); // wait min 4.1ms

    // second try
    write4bits(0x03);
    5968:	8e 81       	ldd	r24, Y+6	; 0x06
    596a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    596e:	8d 81       	ldd	r24, Y+5	; 0x05
    5970:	8f 3f       	cpi	r24, 0xFF	; 255
    5972:	19 f0       	breq	.+6      	; 0x597a <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x8a>
    delayMicroseconds(4500); // wait min 4.1ms
    
    // third go!
    write4bits(0x03); 
    5974:	60 e0       	ldi	r22, 0x00	; 0
    5976:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
    597a:	6f 85       	ldd	r22, Y+15	; 0x0f
    597c:	64 fd       	sbrc	r22, 4
    597e:	31 c0       	rjmp	.+98     	; 0x59e2 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0xf2>
    delayMicroseconds(150);

    // finally, set to 4-bit interface
    write4bits(0x02); 
    5980:	63 e0       	ldi	r22, 0x03	; 3
    5982:	ce 01       	movw	r24, r28
    5984:	32 df       	rcall	.-412    	; 0x57ea <_ZN13LiquidCrystal10write4bitsEh>
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
    5986:	0b e4       	ldi	r16, 0x4B	; 75
    5988:	16 e4       	ldi	r17, 0x46	; 70
    598a:	c8 01       	movw	r24, r16
    598c:	01 97       	sbiw	r24, 0x01	; 1

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    598e:	f1 f7       	brne	.-4      	; 0x598c <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x9c>
    5990:	63 e0       	ldi	r22, 0x03	; 3
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
    5992:	ce 01       	movw	r24, r28
    5994:	2a df       	rcall	.-428    	; 0x57ea <_ZN13LiquidCrystal10write4bitsEh>
    5996:	c8 01       	movw	r24, r16
    5998:	01 97       	sbiw	r24, 0x01	; 1
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    599a:	f1 f7       	brne	.-4      	; 0x5998 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0xa8>
    599c:	63 e0       	ldi	r22, 0x03	; 3
    599e:	ce 01       	movw	r24, r28
    59a0:	24 df       	rcall	.-440    	; 0x57ea <_ZN13LiquidCrystal10write4bitsEh>
    59a2:	83 e5       	ldi	r24, 0x53	; 83
    59a4:	92 e0       	ldi	r25, 0x02	; 2

  // clear it off
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    59a6:	01 97       	sbiw	r24, 0x01	; 1
    59a8:	f1 f7       	brne	.-4      	; 0x59a6 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0xb6>
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
    59aa:	62 e0       	ldi	r22, 0x02	; 2
    59ac:	ce 01       	movw	r24, r28

}
    59ae:	1d df       	rcall	.-454    	; 0x57ea <_ZN13LiquidCrystal10write4bitsEh>
    59b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    59b2:	60 62       	ori	r22, 0x20	; 32
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
    59b4:	ce 01       	movw	r24, r28
    59b6:	9a df       	rcall	.-204    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
    59b8:	84 e0       	ldi	r24, 0x04	; 4
    59ba:	88 8b       	std	Y+16, r24	; 0x10
    59bc:	6c e0       	ldi	r22, 0x0C	; 12
    59be:	ce 01       	movw	r24, r28
    59c0:	95 df       	rcall	.-214    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
    59c2:	61 e0       	ldi	r22, 0x01	; 1
    59c4:	ce 01       	movw	r24, r28
    delayMicroseconds(4500);  // wait more than 4.1ms

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
    59c6:	92 df       	rcall	.-220    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
    59c8:	8b e3       	ldi	r24, 0x3B	; 59
    59ca:	9f e1       	ldi	r25, 0x1F	; 31
    59cc:	01 97       	sbiw	r24, 0x01	; 1
    59ce:	f1 f7       	brne	.-4      	; 0x59cc <_ZN13LiquidCrystal5beginEhhh.constprop.35+0xdc>
    59d0:	82 e0       	ldi	r24, 0x02	; 2
    59d2:	89 8b       	std	Y+17, r24	; 0x11
    59d4:	66 e0       	ldi	r22, 0x06	; 6
    59d6:	ce 01       	movw	r24, r28
    delayMicroseconds(150);

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
    59d8:	df 91       	pop	r29
    59da:	cf 91       	pop	r28
    59dc:	1f 91       	pop	r17
    59de:	0f 91       	pop	r16
    59e0:	85 cf       	rjmp	.-246    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
    59e2:	60 62       	ori	r22, 0x20	; 32
}
//-

void LiquidCrystal_1602_RUS::setCursor(uint8_t col, uint8_t row)
{
  cursor_col = col;
    59e4:	ce 01       	movw	r24, r28
    59e6:	82 df       	rcall	.-252    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
  cursor_row = row;
    59e8:	8b e4       	ldi	r24, 0x4B	; 75
    59ea:	96 e4       	ldi	r25, 0x46	; 70
    59ec:	01 97       	sbiw	r24, 0x01	; 1
    59ee:	f1 f7       	brne	.-4      	; 0x59ec <_ZN13LiquidCrystal5beginEhhh.constprop.35+0xfc>
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
    59f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    59f2:	60 62       	ori	r22, 0x20	; 32
    59f4:	ce 01       	movw	r24, r28
    59f6:	7a df       	rcall	.-268    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
    row = _numlines - 1;    // we count rows starting w/0
    59f8:	83 e5       	ldi	r24, 0x53	; 83
    59fa:	92 e0       	ldi	r25, 0x02	; 2
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    59fc:	01 97       	sbiw	r24, 0x01	; 1
    59fe:	f1 f7       	brne	.-4      	; 0x59fc <_ZN13LiquidCrystal5beginEhhh.constprop.35+0x10c>
    5a00:	6f 85       	ldd	r22, Y+15	; 0x0f
    5a02:	60 62       	ori	r22, 0x20	; 32
    5a04:	ce 01       	movw	r24, r28
    5a06:	72 df       	rcall	.-284    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
    5a08:	d3 cf       	rjmp	.-90     	; 0x59b0 <_ZN13LiquidCrystal5beginEhhh.constprop.35+0xc0>

00005a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>:
    5a0a:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <lcd+0x1b>
    5a0e:	60 93 7a 12 	sts	0x127A, r22	; 0x80127a <lcd+0x1c>
    current_char++;
    cursor_col++;
  }

}
void LiquidCrystal_1602_RUS::CharSetToLCD(uint8_t *array, uint8_t *index)
    5a12:	64 30       	cpi	r22, 0x04	; 4
    5a14:	08 f0       	brcs	.+2      	; 0x5a18 <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17+0xe>
    5a16:	63 e0       	ldi	r22, 0x03	; 3
    5a18:	90 91 71 12 	lds	r25, 0x1271	; 0x801271 <lcd+0x13>
    5a1c:	69 17       	cp	r22, r25
    5a1e:	10 f0       	brcs	.+4      	; 0x5a24 <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17+0x1a>
    5a20:	6f ef       	ldi	r22, 0xFF	; 255
{
  uint8_t x, y;

  if (*index == 255) // Если символ еще не создан, то создаем
    5a22:	69 0f       	add	r22, r25
    5a24:	e6 2f       	mov	r30, r22
    5a26:	f0 e0       	ldi	r31, 0x00	; 0
    5a28:	e2 5a       	subi	r30, 0xA2	; 162
    5a2a:	fd 4e       	sbci	r31, 0xED	; 237
    5a2c:	64 89       	ldd	r22, Z+20	; 0x14
  cursor_row = row;
  LiquidCrystal::setCursor(cursor_col, cursor_row);
}
uint8_t LiquidCrystal_1602_RUS::getCursorCol()
{
  return cursor_col;
    5a2e:	68 0f       	add	r22, r24
    5a30:	60 68       	ori	r22, 0x80	; 128
}
uint8_t LiquidCrystal_1602_RUS::getCursorRow()
{
  return cursor_row;
    5a32:	8e e5       	ldi	r24, 0x5E	; 94
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
    5a34:	92 e1       	ldi	r25, 0x12	; 18
    5a36:	5a cf       	rjmp	.-332    	; 0x58ec <_ZN13LiquidCrystal7commandEh>

00005a38 <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15>:
    5a38:	cf 92       	push	r12
  command(LCD_SETCGRAMADDR | (location << 3));
    5a3a:	df 92       	push	r13
    5a3c:	ef 92       	push	r14
    5a3e:	ff 92       	push	r15
    5a40:	0f 93       	push	r16
    5a42:	1f 93       	push	r17
    5a44:	cf 93       	push	r28
    5a46:	df 93       	push	r29
    5a48:	fb 01       	movw	r30, r22
    5a4a:	20 81       	ld	r18, Z
    5a4c:	2f 3f       	cpi	r18, 0xFF	; 255
    5a4e:	09 f0       	breq	.+2      	; 0x5a52 <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15+0x1a>
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    5a50:	45 c0       	rjmp	.+138    	; 0x5adc <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15+0xa4>
    5a52:	8b 01       	movw	r16, r22
    5a54:	7c 01       	movw	r14, r24
    5a56:	d0 90 79 12 	lds	r13, 0x1279	; 0x801279 <lcd+0x1b>
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    5a5a:	c0 90 7a 12 	lds	r12, 0x127A	; 0x80127a <lcd+0x1c>
    5a5e:	60 91 77 12 	lds	r22, 0x1277	; 0x801277 <lcd+0x19>
  if (*index == 255) // Если символ еще не создан, то создаем
  {
    x = getCursorCol();
    y = getCursorRow();
    createChar(symbol_index, (uint8_t *)array);// Создаем символ на текущем (по очереди) месте в знакогенераторе (от 0 до MAX_SYMBOL_COUNT)
    setCursor(x, y);
    5a62:	67 70       	andi	r22, 0x07	; 7
    5a64:	f8 e0       	ldi	r31, 0x08	; 8
    5a66:	6f 9f       	mul	r22, r31
    write(symbol_index);// Выводим символ на экран
    5a68:	b0 01       	movw	r22, r0
    5a6a:	11 24       	eor	r1, r1
    5a6c:	60 64       	ori	r22, 0x40	; 64
    5a6e:	8e e5       	ldi	r24, 0x5E	; 94
    5a70:	92 e1       	ldi	r25, 0x12	; 18
    5a72:	3c df       	rcall	.-392    	; 0x58ec <_ZN13LiquidCrystal7commandEh>
    //Запомианем, что букве соответствует определенный индекс
    *index = symbol_index;
    5a74:	e7 01       	movw	r28, r14
    5a76:	88 e0       	ldi	r24, 0x08	; 8
    5a78:	e8 0e       	add	r14, r24
    5a7a:	f1 1c       	adc	r15, r1
    symbol_index++;
    5a7c:	69 91       	ld	r22, Y+
    5a7e:	8e e5       	ldi	r24, 0x5E	; 94
    5a80:	92 e1       	ldi	r25, 0x12	; 18
    5a82:	2f df       	rcall	.-418    	; 0x58e2 <_ZN13LiquidCrystal5writeEh>
    5a84:	ec 16       	cp	r14, r28
    5a86:	fd 06       	cpc	r15, r29
    5a88:	c9 f7       	brne	.-14     	; 0x5a7c <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15+0x44>
    5a8a:	6c 2d       	mov	r22, r12
    5a8c:	8d 2d       	mov	r24, r13
    if (symbol_index >= max_symbol_count)
    5a8e:	bd df       	rcall	.-134    	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    5a90:	60 91 77 12 	lds	r22, 0x1277	; 0x801277 <lcd+0x19>
    5a94:	8e e5       	ldi	r24, 0x5E	; 94
    5a96:	92 e1       	ldi	r25, 0x12	; 18
    5a98:	24 df       	rcall	.-440    	; 0x58e2 <_ZN13LiquidCrystal5writeEh>
    {
      symbol_index = 0;
    5a9a:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <lcd+0x19>
    5a9e:	f8 01       	movw	r30, r16
      ResetAllIndex();
    }
  }
  else   //Иначе печатаем уже существующий
    write(*index);
}
    5aa0:	80 83       	st	Z, r24
    5aa2:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <lcd+0x19>
    5aa6:	90 91 78 12 	lds	r25, 0x1278	; 0x801278 <lcd+0x1a>
    5aaa:	01 96       	adiw	r24, 0x01	; 1
    5aac:	90 93 78 12 	sts	0x1278, r25	; 0x801278 <lcd+0x1a>
    *index = symbol_index;
    symbol_index++;
    if (symbol_index >= max_symbol_count)
    {
      symbol_index = 0;
      ResetAllIndex();
    5ab0:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <lcd+0x19>
    }
  }
  else   //Иначе печатаем уже существующий
    write(*index);
    5ab4:	20 91 76 12 	lds	r18, 0x1276	; 0x801276 <lcd+0x18>
    5ab8:	28 17       	cp	r18, r24
}
    5aba:	19 06       	cpc	r1, r25
    5abc:	09 f0       	breq	.+2      	; 0x5ac0 <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15+0x88>
    5abe:	d4 f4       	brge	.+52     	; 0x5af4 <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15+0xbc>
    5ac0:	10 92 78 12 	sts	0x1278, r1	; 0x801278 <lcd+0x1a>
    5ac4:	10 92 77 12 	sts	0x1277, r1	; 0x801277 <lcd+0x19>
    5ac8:	df 91       	pop	r29
      symbol_index = 0;
      ResetAllIndex();
    }
  }
  else   //Иначе печатаем уже существующий
    write(*index);
    5aca:	cf 91       	pop	r28
    5acc:	1f 91       	pop	r17
}
    5ace:	0f 91       	pop	r16
    5ad0:	ff 90       	pop	r15
    5ad2:	ef 90       	pop	r14
    5ad4:	df 90       	pop	r13
    5ad6:	cf 90       	pop	r12
    5ad8:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37>
    5adc:	62 2f       	mov	r22, r18
    5ade:	8e e5       	ldi	r24, 0x5E	; 94
    *_chr = _str[0];
    return 1;
  }
}

void LiquidCrystal_1602_RUS::print(const char *c_str) {
    5ae0:	92 e1       	ldi	r25, 0x12	; 18
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	ff 90       	pop	r15
    5aec:	ef 90       	pop	r14
    5aee:	df 90       	pop	r13
    5af0:	cf 90       	pop	r12
    5af2:	f7 ce       	rjmp	.-530    	; 0x58e2 <_ZN13LiquidCrystal5writeEh>
    5af4:	df 91       	pop	r29
    5af6:	cf 91       	pop	r28
    5af8:	1f 91       	pop	r17
    5afa:	0f 91       	pop	r16
    5afc:	ff 90       	pop	r15
    5afe:	ef 90       	pop	r14
    5b00:	df 90       	pop	r13
    5b02:	cf 90       	pop	r12
    5b04:	08 95       	ret

00005b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>:
    5b06:	4f 92       	push	r4
    5b08:	5f 92       	push	r5
    5b0a:	6f 92       	push	r6
    5b0c:	7f 92       	push	r7
    5b0e:	8f 92       	push	r8
    5b10:	9f 92       	push	r9
  wchar_t _str;
  int current_char = 0;
  int size = strlen(c_str);
    5b12:	af 92       	push	r10
    5b14:	bf 92       	push	r11
    5b16:	cf 92       	push	r12
    5b18:	df 92       	push	r13
    5b1a:	ef 92       	push	r14
    5b1c:	ff 92       	push	r15
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
  }
}

void LiquidCrystal_1602_RUS::print(const char *c_str) {
  wchar_t _str;
  int current_char = 0;
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
      CharSetToLCD((uint8_t *)rus_, &index_rus_yu);
      break;
#endif
#ifdef _rus_ya
    case 1103: //я
      memcpy_PF(rus_, (_uint_farptr_t)rus_ya, 8);
    5b26:	cd b7       	in	r28, 0x3d	; 61
    5b28:	de b7       	in	r29, 0x3e	; 62
    5b2a:	68 97       	sbiw	r28, 0x18	; 24
    5b2c:	0f b6       	in	r0, 0x3f	; 63
    5b2e:	f8 94       	cli
    5b30:	de bf       	out	0x3e, r29	; 62
    5b32:	0f be       	out	0x3f, r0	; 63
    5b34:	cd bf       	out	0x3d, r28	; 61
    5b36:	7c 01       	movw	r14, r24
    5b38:	fc 01       	movw	r30, r24
      CharSetToLCD((uint8_t *)rus_, &index_rus_tverd_mal);
      break;
#endif
#ifdef _rus_y
    case 1099: //ы
      memcpy_PF(rus_, (_uint_farptr_t)rus_y, 8);
    5b3a:	01 90       	ld	r0, Z+
    5b3c:	00 20       	and	r0, r0
    5b3e:	e9 f7       	brne	.-6      	; 0x5b3a <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x34>
    5b40:	31 97       	sbiw	r30, 0x01	; 1
    5b42:	6f 01       	movw	r12, r30
    5b44:	c8 1a       	sub	r12, r24
    5b46:	d9 0a       	sbc	r13, r25
    5b48:	10 e0       	ldi	r17, 0x00	; 0
    5b4a:	00 e0       	ldi	r16, 0x00	; 0
    5b4c:	84 e7       	ldi	r24, 0x74	; 116
      CharSetToLCD((uint8_t *)rus_, &index_rus_ts);
      break;
#endif
#ifdef _rus_ch
    case 1095: //ч
      memcpy_PF(rus_, (_uint_farptr_t)rus_ch, 8);
    5b4e:	92 e0       	ldi	r25, 0x02	; 2
    5b50:	9c 01       	movw	r18, r24
    5b52:	99 0f       	add	r25, r25
    5b54:	44 0b       	sbc	r20, r20
    5b56:	55 0b       	sbc	r21, r21
    5b58:	29 87       	std	Y+9, r18	; 0x09
    5b5a:	3a 87       	std	Y+10, r19	; 0x0a
    5b5c:	4b 87       	std	Y+11, r20	; 0x0b
    5b5e:	5c 87       	std	Y+12, r21	; 0x0c
    5b60:	8c e7       	ldi	r24, 0x7C	; 124
      CharSetToLCD((uint8_t *)rus_, &index_rus_f);
      break;
#endif
#ifdef _rus_ts
    case 1094: //ц
      memcpy_PF(rus_, (_uint_farptr_t)rus_ts, 8);
    5b62:	92 e0       	ldi	r25, 0x02	; 2
    5b64:	9c 01       	movw	r18, r24
    5b66:	99 0f       	add	r25, r25
    5b68:	44 0b       	sbc	r20, r20
    5b6a:	55 0b       	sbc	r21, r21
    5b6c:	2d 87       	std	Y+13, r18	; 0x0d
    5b6e:	3e 87       	std	Y+14, r19	; 0x0e
    5b70:	4f 87       	std	Y+15, r20	; 0x0f
    5b72:	58 8b       	std	Y+16, r21	; 0x10
    5b74:	84 e8       	ldi	r24, 0x84	; 132
      CharSetToLCD((uint8_t *)rus_, &index_rus_p);
      break;
#endif
#ifdef _rus_t
    case 1090: //т
      memcpy_PF(rus_, (_uint_farptr_t)rus_t, 8);
    5b76:	92 e0       	ldi	r25, 0x02	; 2
    5b78:	9c 01       	movw	r18, r24
    5b7a:	99 0f       	add	r25, r25
    5b7c:	44 0b       	sbc	r20, r20
    5b7e:	55 0b       	sbc	r21, r21
    5b80:	29 8b       	std	Y+17, r18	; 0x11
      CharSetToLCD((uint8_t *)rus_, &index_rus_m);
      break;
#endif
#ifdef _rus_n
    case 1085: //н
      memcpy_PF(rus_, (_uint_farptr_t)rus_n, 8);
    5b82:	3a 8b       	std	Y+18, r19	; 0x12
    5b84:	4b 8b       	std	Y+19, r20	; 0x13
    5b86:	5c 8b       	std	Y+20, r21	; 0x14
    5b88:	8c e8       	ldi	r24, 0x8C	; 140
    5b8a:	92 e0       	ldi	r25, 0x02	; 2
    5b8c:	9c 01       	movw	r18, r24
void LiquidCrystal_1602_RUS::print(const char *c_str) {
  wchar_t _str;
  int current_char = 0;
  int size = strlen(c_str);

  while (current_char < size)
    5b8e:	99 0f       	add	r25, r25
    5b90:	44 0b       	sbc	r20, r20
    5b92:	55 0b       	sbc	r21, r21
    5b94:	2d 8b       	std	Y+21, r18	; 0x15
  {
    current_char += mbtowc(&_str, (char *)c_str + current_char, 2);
    5b96:	3e 8b       	std	Y+22, r19	; 0x16
    5b98:	4f 8b       	std	Y+23, r20	; 0x17
    5b9a:	58 8f       	std	Y+24, r21	; 0x18
  return cursor_row;
}

uint8_t LiquidCrystal_1602_RUS::mbtowc(wchar_t *_chr, char *_str, uint8_t mb_num) {
  if (mb_num != 2) return 0;
  if ((_str[0] & 0xC0) == 0xC0 && (_str[1] & 0x80) == 0x80) {
    5b9c:	84 e9       	ldi	r24, 0x94	; 148
    5b9e:	92 e0       	ldi	r25, 0x02	; 2
    5ba0:	4c 01       	movw	r8, r24
    5ba2:	99 0f       	add	r25, r25
    5ba4:	aa 08       	sbc	r10, r10
    5ba6:	bb 08       	sbc	r11, r11
    5ba8:	8c e9       	ldi	r24, 0x9C	; 156
    5baa:	92 e0       	ldi	r25, 0x02	; 2
    5bac:	2c 01       	movw	r4, r24
    5bae:	99 0f       	add	r25, r25
    5bb0:	66 08       	sbc	r6, r6
    5bb2:	77 08       	sbc	r7, r7
    5bb4:	0c 15       	cp	r16, r12
    5bb6:	1d 05       	cpc	r17, r13
    5bb8:	0c f0       	brlt	.+2      	; 0x5bbc <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0xb6>
    5bba:	66 c2       	rjmp	.+1228   	; 0x6088 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x582>
    5bbc:	f7 01       	movw	r30, r14
    5bbe:	e0 0f       	add	r30, r16
    5bc0:	f1 1f       	adc	r31, r17
    5bc2:	60 81       	ld	r22, Z
    5bc4:	06 2e       	mov	r0, r22
    5bc6:	00 0c       	add	r0, r0
    5bc8:	77 0b       	sbc	r23, r23
    5bca:	cb 01       	movw	r24, r22
    5bcc:	80 7c       	andi	r24, 0xC0	; 192
    5bce:	99 27       	eor	r25, r25
    5bd0:	80 3c       	cpi	r24, 0xC0	; 192
    5bd2:	91 05       	cpc	r25, r1
    5bd4:	09 f0       	breq	.+2      	; 0x5bd8 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0xd2>
    5bd6:	5b c0       	rjmp	.+182    	; 0x5c8e <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x188>
    5bd8:	81 81       	ldd	r24, Z+1	; 0x01
    5bda:	87 ff       	sbrs	r24, 7
    5bdc:	58 c0       	rjmp	.+176    	; 0x5c8e <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x188>
    5bde:	96 e0       	ldi	r25, 0x06	; 6
    5be0:	66 0f       	add	r22, r22
    5be2:	77 1f       	adc	r23, r23
    5be4:	9a 95       	dec	r25
    5be6:	e1 f7       	brne	.-8      	; 0x5be0 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0xda>
    5be8:	60 7c       	andi	r22, 0xC0	; 192
    5bea:	77 70       	andi	r23, 0x07	; 7
    5bec:	8f 73       	andi	r24, 0x3F	; 63
    5bee:	68 2b       	or	r22, r24
    5bf0:	82 e0       	ldi	r24, 0x02	; 2
    5bf2:	08 0f       	add	r16, r24
    5bf4:	11 1d       	adc	r17, r1
    5bf6:	fb 01       	movw	r30, r22
    5bf8:	e1 51       	subi	r30, 0x11	; 17
    5bfa:	f4 40       	sbci	r31, 0x04	; 4
    5bfc:	ef 33       	cpi	r30, 0x3F	; 63
    5bfe:	f1 05       	cpc	r31, r1
    5c00:	08 f0       	brcs	.+2      	; 0x5c04 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0xfe>
    5c02:	3d c2       	rjmp	.+1146   	; 0x607e <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x578>
    5c04:	88 27       	eor	r24, r24
    5c06:	e8 5f       	subi	r30, 0xF8	; 248
    5c08:	f1 4d       	sbci	r31, 0xD1	; 209
    5c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c0c:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
    5c10:	49 2e       	mov	r4, r25
    5c12:	3f 30       	cpi	r19, 0x0F	; 15
    5c14:	60 2e       	mov	r6, r16
    5c16:	6f 2e       	mov	r6, r31
    5c18:	3f 30       	cpi	r19, 0x0F	; 15
    5c1a:	7e 2e       	mov	r7, r30
    5c1c:	8d 2e       	mov	r8, r29
    5c1e:	9c 2e       	mov	r9, r28
    5c20:	ab 2e       	mov	r10, r27
    5c22:	3f 30       	cpi	r19, 0x0F	; 15
    5c24:	ba 2e       	mov	r11, r26
    5c26:	3f 30       	cpi	r19, 0x0F	; 15
    5c28:	3f 30       	cpi	r19, 0x0F	; 15
    5c2a:	3f 30       	cpi	r19, 0x0F	; 15
    5c2c:	c9 2e       	mov	r12, r25
    5c2e:	3f 30       	cpi	r19, 0x0F	; 15
    5c30:	3f 30       	cpi	r19, 0x0F	; 15
    5c32:	3f 30       	cpi	r19, 0x0F	; 15
    5c34:	d8 2e       	mov	r13, r24
    5c36:	e7 2e       	mov	r14, r23
    5c38:	3f 30       	cpi	r19, 0x0F	; 15
    5c3a:	f6 2e       	mov	r15, r22
    5c3c:	05 2f       	mov	r16, r21
    5c3e:	14 2f       	mov	r17, r20
    5c40:	3f 30       	cpi	r19, 0x0F	; 15
    5c42:	3f 30       	cpi	r19, 0x0F	; 15
    5c44:	23 2f       	mov	r18, r19
    5c46:	32 2f       	mov	r19, r18
    5c48:	41 2f       	mov	r20, r17
    5c4a:	50 2f       	mov	r21, r16
    5c4c:	5f 2f       	mov	r21, r31
    5c4e:	3f 30       	cpi	r19, 0x0F	; 15
    5c50:	6e 2f       	mov	r22, r30
    5c52:	7d 2f       	mov	r23, r29
    5c54:	8c 2f       	mov	r24, r28
    5c56:	9b 2f       	mov	r25, r27
    5c58:	3f 30       	cpi	r19, 0x0F	; 15
    5c5a:	aa 2f       	mov	r26, r26
    5c5c:	b9 2f       	mov	r27, r25
    5c5e:	c8 2f       	mov	r28, r24
    5c60:	3f 30       	cpi	r19, 0x0F	; 15
    5c62:	d7 2f       	mov	r29, r23
    5c64:	3f 30       	cpi	r19, 0x0F	; 15
    5c66:	e6 2f       	mov	r30, r22
    5c68:	f5 2f       	mov	r31, r21
    5c6a:	3f 30       	cpi	r19, 0x0F	; 15
    5c6c:	3f 30       	cpi	r19, 0x0F	; 15
    5c6e:	3f 30       	cpi	r19, 0x0F	; 15
    5c70:	3f 30       	cpi	r19, 0x0F	; 15
    5c72:	00 30       	cpi	r16, 0x00	; 0
    5c74:	3f 30       	cpi	r19, 0x0F	; 15
    5c76:	3f 30       	cpi	r19, 0x0F	; 15
    5c78:	3f 30       	cpi	r19, 0x0F	; 15
    5c7a:	0b 30       	cpi	r16, 0x0B	; 11
    5c7c:	18 30       	cpi	r17, 0x08	; 8
    5c7e:	3f 30       	cpi	r19, 0x0F	; 15
    5c80:	3f 30       	cpi	r19, 0x0F	; 15
    5c82:	3f 30       	cpi	r19, 0x0F	; 15
    5c84:	25 30       	cpi	r18, 0x05	; 5
    5c86:	3f 30       	cpi	r19, 0x0F	; 15
    5c88:	3f 30       	cpi	r19, 0x0F	; 15
    5c8a:	3f 30       	cpi	r19, 0x0F	; 15
    5c8c:	32 30       	cpi	r19, 0x02	; 2
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	b0 cf       	rjmp	.-160    	; 0x5bf2 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0xec>
    5c92:	4c e7       	ldi	r20, 0x7C	; 124
    5c94:	53 e0       	ldi	r21, 0x03	; 3
    5c96:	28 e0       	ldi	r18, 0x08	; 8
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	05 2e       	mov	r0, r21
    5c9c:	00 0c       	add	r0, r0
    5c9e:	66 0b       	sbc	r22, r22
    5ca0:	77 0b       	sbc	r23, r23
    5ca2:	ce 01       	movw	r24, r28
    5ca4:	01 96       	adiw	r24, 0x01	; 1
    5ca6:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5caa:	6b e7       	ldi	r22, 0x7B	; 123
    5cac:	72 e1       	ldi	r23, 0x12	; 18
    5cae:	ce 01       	movw	r24, r28
    5cb0:	01 96       	adiw	r24, 0x01	; 1
    5cb2:	c2 de       	rcall	.-636    	; 0x5a38 <_ZN22LiquidCrystal_1602_RUS12CharSetToLCDEPhS0_.constprop.15>
    5cb4:	80 91 79 12 	lds	r24, 0x1279	; 0x801279 <lcd+0x1b>
    5cb8:	8f 5f       	subi	r24, 0xFF	; 255
    5cba:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <lcd+0x1b>
    5cbe:	7a cf       	rjmp	.-268    	; 0x5bb4 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0xae>
    5cc0:	44 e7       	ldi	r20, 0x74	; 116
    5cc2:	53 e0       	ldi	r21, 0x03	; 3
    5cc4:	28 e0       	ldi	r18, 0x08	; 8
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	05 2e       	mov	r0, r21
    5cca:	00 0c       	add	r0, r0
    5ccc:	66 0b       	sbc	r22, r22
    5cce:	77 0b       	sbc	r23, r23
    5cd0:	ce 01       	movw	r24, r28
    5cd2:	01 96       	adiw	r24, 0x01	; 1
    5cd4:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5cd8:	6c e7       	ldi	r22, 0x7C	; 124
    5cda:	72 e1       	ldi	r23, 0x12	; 18
    5cdc:	e8 cf       	rjmp	.-48     	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5cde:	4c e6       	ldi	r20, 0x6C	; 108
    5ce0:	53 e0       	ldi	r21, 0x03	; 3
    5ce2:	28 e0       	ldi	r18, 0x08	; 8
    5ce4:	30 e0       	ldi	r19, 0x00	; 0
    5ce6:	05 2e       	mov	r0, r21
    5ce8:	00 0c       	add	r0, r0
    5cea:	66 0b       	sbc	r22, r22
    5cec:	77 0b       	sbc	r23, r23
    5cee:	ce 01       	movw	r24, r28
    5cf0:	01 96       	adiw	r24, 0x01	; 1
    5cf2:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5cf6:	6d e7       	ldi	r22, 0x7D	; 125
    5cf8:	72 e1       	ldi	r23, 0x12	; 18
    5cfa:	d9 cf       	rjmp	.-78     	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5cfc:	44 e6       	ldi	r20, 0x64	; 100
    5cfe:	53 e0       	ldi	r21, 0x03	; 3
    5d00:	28 e0       	ldi	r18, 0x08	; 8
    5d02:	30 e0       	ldi	r19, 0x00	; 0
    5d04:	05 2e       	mov	r0, r21
    5d06:	00 0c       	add	r0, r0
    5d08:	66 0b       	sbc	r22, r22
    5d0a:	77 0b       	sbc	r23, r23
    5d0c:	ce 01       	movw	r24, r28
    5d0e:	01 96       	adiw	r24, 0x01	; 1
    5d10:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5d14:	6e e7       	ldi	r22, 0x7E	; 126
    5d16:	72 e1       	ldi	r23, 0x12	; 18
    5d18:	ca cf       	rjmp	.-108    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5d1a:	4c e5       	ldi	r20, 0x5C	; 92
    5d1c:	53 e0       	ldi	r21, 0x03	; 3
    5d1e:	28 e0       	ldi	r18, 0x08	; 8
    5d20:	30 e0       	ldi	r19, 0x00	; 0
    5d22:	05 2e       	mov	r0, r21
    5d24:	00 0c       	add	r0, r0
    5d26:	66 0b       	sbc	r22, r22
    5d28:	77 0b       	sbc	r23, r23
    5d2a:	ce 01       	movw	r24, r28
    5d2c:	01 96       	adiw	r24, 0x01	; 1
    5d2e:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5d32:	6f e7       	ldi	r22, 0x7F	; 127
    5d34:	72 e1       	ldi	r23, 0x12	; 18
    5d36:	bb cf       	rjmp	.-138    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5d38:	44 e5       	ldi	r20, 0x54	; 84
    5d3a:	53 e0       	ldi	r21, 0x03	; 3
    5d3c:	28 e0       	ldi	r18, 0x08	; 8
    5d3e:	30 e0       	ldi	r19, 0x00	; 0
    5d40:	05 2e       	mov	r0, r21
    5d42:	00 0c       	add	r0, r0
    5d44:	66 0b       	sbc	r22, r22
    5d46:	77 0b       	sbc	r23, r23
    5d48:	ce 01       	movw	r24, r28
    5d4a:	01 96       	adiw	r24, 0x01	; 1
    5d4c:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5d50:	60 e8       	ldi	r22, 0x80	; 128
    5d52:	72 e1       	ldi	r23, 0x12	; 18
    5d54:	ac cf       	rjmp	.-168    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5d56:	4c e4       	ldi	r20, 0x4C	; 76
    5d58:	53 e0       	ldi	r21, 0x03	; 3
    5d5a:	28 e0       	ldi	r18, 0x08	; 8
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	05 2e       	mov	r0, r21
    5d60:	00 0c       	add	r0, r0
    5d62:	66 0b       	sbc	r22, r22
    5d64:	77 0b       	sbc	r23, r23
    5d66:	ce 01       	movw	r24, r28
    5d68:	01 96       	adiw	r24, 0x01	; 1
    5d6a:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5d6e:	61 e8       	ldi	r22, 0x81	; 129
    5d70:	72 e1       	ldi	r23, 0x12	; 18
    5d72:	9d cf       	rjmp	.-198    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5d74:	44 e4       	ldi	r20, 0x44	; 68
    5d76:	53 e0       	ldi	r21, 0x03	; 3
    5d78:	28 e0       	ldi	r18, 0x08	; 8
    5d7a:	30 e0       	ldi	r19, 0x00	; 0
    5d7c:	05 2e       	mov	r0, r21
    5d7e:	00 0c       	add	r0, r0
    5d80:	66 0b       	sbc	r22, r22
    5d82:	77 0b       	sbc	r23, r23
    5d84:	ce 01       	movw	r24, r28
    5d86:	01 96       	adiw	r24, 0x01	; 1
    5d88:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5d8c:	62 e8       	ldi	r22, 0x82	; 130
    5d8e:	72 e1       	ldi	r23, 0x12	; 18
    5d90:	8e cf       	rjmp	.-228    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5d92:	4c e3       	ldi	r20, 0x3C	; 60
    5d94:	53 e0       	ldi	r21, 0x03	; 3
    5d96:	28 e0       	ldi	r18, 0x08	; 8
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	05 2e       	mov	r0, r21
    5d9c:	00 0c       	add	r0, r0
    5d9e:	66 0b       	sbc	r22, r22
    5da0:	77 0b       	sbc	r23, r23
    5da2:	ce 01       	movw	r24, r28
    5da4:	01 96       	adiw	r24, 0x01	; 1
    5da6:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5daa:	63 e8       	ldi	r22, 0x83	; 131
    5dac:	72 e1       	ldi	r23, 0x12	; 18
    5dae:	7f cf       	rjmp	.-258    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5db0:	44 e3       	ldi	r20, 0x34	; 52
    5db2:	53 e0       	ldi	r21, 0x03	; 3
    5db4:	28 e0       	ldi	r18, 0x08	; 8
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	05 2e       	mov	r0, r21
    5dba:	00 0c       	add	r0, r0
    5dbc:	66 0b       	sbc	r22, r22
    5dbe:	77 0b       	sbc	r23, r23
    5dc0:	ce 01       	movw	r24, r28
    5dc2:	01 96       	adiw	r24, 0x01	; 1
    5dc4:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5dc8:	64 e8       	ldi	r22, 0x84	; 132
    5dca:	72 e1       	ldi	r23, 0x12	; 18
    5dcc:	70 cf       	rjmp	.-288    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5dce:	4c e2       	ldi	r20, 0x2C	; 44
    5dd0:	53 e0       	ldi	r21, 0x03	; 3
    5dd2:	28 e0       	ldi	r18, 0x08	; 8
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	05 2e       	mov	r0, r21
    5dd8:	00 0c       	add	r0, r0
    5dda:	66 0b       	sbc	r22, r22
    5ddc:	77 0b       	sbc	r23, r23
    5dde:	ce 01       	movw	r24, r28
    5de0:	01 96       	adiw	r24, 0x01	; 1
    5de2:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5de6:	65 e8       	ldi	r22, 0x85	; 133
    5de8:	72 e1       	ldi	r23, 0x12	; 18
    5dea:	61 cf       	rjmp	.-318    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5dec:	44 e2       	ldi	r20, 0x24	; 36
    5dee:	53 e0       	ldi	r21, 0x03	; 3
    5df0:	28 e0       	ldi	r18, 0x08	; 8
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	05 2e       	mov	r0, r21
    5df6:	00 0c       	add	r0, r0
    5df8:	66 0b       	sbc	r22, r22
    5dfa:	77 0b       	sbc	r23, r23
    5dfc:	ce 01       	movw	r24, r28
    5dfe:	01 96       	adiw	r24, 0x01	; 1
    5e00:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5e04:	66 e8       	ldi	r22, 0x86	; 134
    5e06:	72 e1       	ldi	r23, 0x12	; 18
    5e08:	52 cf       	rjmp	.-348    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5e0a:	4c e1       	ldi	r20, 0x1C	; 28
    5e0c:	53 e0       	ldi	r21, 0x03	; 3
    5e0e:	28 e0       	ldi	r18, 0x08	; 8
    5e10:	30 e0       	ldi	r19, 0x00	; 0
    5e12:	05 2e       	mov	r0, r21
    5e14:	00 0c       	add	r0, r0
    5e16:	66 0b       	sbc	r22, r22
    5e18:	77 0b       	sbc	r23, r23
    5e1a:	ce 01       	movw	r24, r28
    5e1c:	01 96       	adiw	r24, 0x01	; 1
    5e1e:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5e22:	67 e8       	ldi	r22, 0x87	; 135
    5e24:	72 e1       	ldi	r23, 0x12	; 18
    5e26:	43 cf       	rjmp	.-378    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5e28:	44 e1       	ldi	r20, 0x14	; 20
    5e2a:	53 e0       	ldi	r21, 0x03	; 3
    5e2c:	28 e0       	ldi	r18, 0x08	; 8
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	05 2e       	mov	r0, r21
    5e32:	00 0c       	add	r0, r0
    5e34:	66 0b       	sbc	r22, r22
    5e36:	77 0b       	sbc	r23, r23
    5e38:	ce 01       	movw	r24, r28
    5e3a:	01 96       	adiw	r24, 0x01	; 1
    5e3c:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5e40:	68 e8       	ldi	r22, 0x88	; 136
    5e42:	72 e1       	ldi	r23, 0x12	; 18
    5e44:	34 cf       	rjmp	.-408    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5e46:	4c e0       	ldi	r20, 0x0C	; 12
    5e48:	53 e0       	ldi	r21, 0x03	; 3
    5e4a:	28 e0       	ldi	r18, 0x08	; 8
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	05 2e       	mov	r0, r21
    5e50:	00 0c       	add	r0, r0
    5e52:	66 0b       	sbc	r22, r22
    5e54:	77 0b       	sbc	r23, r23
    5e56:	ce 01       	movw	r24, r28
    5e58:	01 96       	adiw	r24, 0x01	; 1
    5e5a:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5e5e:	69 e8       	ldi	r22, 0x89	; 137
    5e60:	72 e1       	ldi	r23, 0x12	; 18
    5e62:	25 cf       	rjmp	.-438    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5e64:	44 e0       	ldi	r20, 0x04	; 4
    5e66:	53 e0       	ldi	r21, 0x03	; 3
    5e68:	28 e0       	ldi	r18, 0x08	; 8
    5e6a:	30 e0       	ldi	r19, 0x00	; 0
    5e6c:	05 2e       	mov	r0, r21
    5e6e:	00 0c       	add	r0, r0
    5e70:	66 0b       	sbc	r22, r22
    5e72:	77 0b       	sbc	r23, r23
    5e74:	ce 01       	movw	r24, r28
    5e76:	01 96       	adiw	r24, 0x01	; 1
    5e78:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5e7c:	6a e8       	ldi	r22, 0x8A	; 138
    5e7e:	72 e1       	ldi	r23, 0x12	; 18
    5e80:	16 cf       	rjmp	.-468    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5e82:	4c ef       	ldi	r20, 0xFC	; 252
    5e84:	52 e0       	ldi	r21, 0x02	; 2
    5e86:	28 e0       	ldi	r18, 0x08	; 8
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	05 2e       	mov	r0, r21
    5e8c:	00 0c       	add	r0, r0
    5e8e:	66 0b       	sbc	r22, r22
    5e90:	77 0b       	sbc	r23, r23
    5e92:	ce 01       	movw	r24, r28
    5e94:	01 96       	adiw	r24, 0x01	; 1
    5e96:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5e9a:	6b e8       	ldi	r22, 0x8B	; 139
    5e9c:	72 e1       	ldi	r23, 0x12	; 18
    5e9e:	07 cf       	rjmp	.-498    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5ea0:	44 ef       	ldi	r20, 0xF4	; 244
    5ea2:	52 e0       	ldi	r21, 0x02	; 2
    5ea4:	28 e0       	ldi	r18, 0x08	; 8
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	05 2e       	mov	r0, r21
    5eaa:	00 0c       	add	r0, r0
    5eac:	66 0b       	sbc	r22, r22
    5eae:	77 0b       	sbc	r23, r23
    5eb0:	ce 01       	movw	r24, r28
    5eb2:	01 96       	adiw	r24, 0x01	; 1
    5eb4:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5eb8:	6c e8       	ldi	r22, 0x8C	; 140
    5eba:	72 e1       	ldi	r23, 0x12	; 18
    5ebc:	f8 ce       	rjmp	.-528    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5ebe:	4c ee       	ldi	r20, 0xEC	; 236
    5ec0:	52 e0       	ldi	r21, 0x02	; 2
    5ec2:	28 e0       	ldi	r18, 0x08	; 8
    5ec4:	30 e0       	ldi	r19, 0x00	; 0
    5ec6:	05 2e       	mov	r0, r21
    5ec8:	00 0c       	add	r0, r0
    5eca:	66 0b       	sbc	r22, r22
    5ecc:	77 0b       	sbc	r23, r23
    5ece:	ce 01       	movw	r24, r28
    5ed0:	01 96       	adiw	r24, 0x01	; 1
    5ed2:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5ed6:	6d e8       	ldi	r22, 0x8D	; 141
    5ed8:	72 e1       	ldi	r23, 0x12	; 18
    5eda:	e9 ce       	rjmp	.-558    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5edc:	44 ee       	ldi	r20, 0xE4	; 228
    5ede:	52 e0       	ldi	r21, 0x02	; 2
    5ee0:	28 e0       	ldi	r18, 0x08	; 8
    5ee2:	30 e0       	ldi	r19, 0x00	; 0
    5ee4:	05 2e       	mov	r0, r21
    5ee6:	00 0c       	add	r0, r0
    5ee8:	66 0b       	sbc	r22, r22
    5eea:	77 0b       	sbc	r23, r23
    5eec:	ce 01       	movw	r24, r28
    5eee:	01 96       	adiw	r24, 0x01	; 1
    5ef0:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5ef4:	6e e8       	ldi	r22, 0x8E	; 142
    5ef6:	72 e1       	ldi	r23, 0x12	; 18
    5ef8:	da ce       	rjmp	.-588    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5efa:	4c ed       	ldi	r20, 0xDC	; 220
    5efc:	52 e0       	ldi	r21, 0x02	; 2
    5efe:	28 e0       	ldi	r18, 0x08	; 8
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	05 2e       	mov	r0, r21
    5f04:	00 0c       	add	r0, r0
    5f06:	66 0b       	sbc	r22, r22
    5f08:	77 0b       	sbc	r23, r23
    5f0a:	ce 01       	movw	r24, r28
    5f0c:	01 96       	adiw	r24, 0x01	; 1
    5f0e:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5f12:	6f e8       	ldi	r22, 0x8F	; 143
    5f14:	72 e1       	ldi	r23, 0x12	; 18
    5f16:	cb ce       	rjmp	.-618    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5f18:	44 ed       	ldi	r20, 0xD4	; 212
    5f1a:	52 e0       	ldi	r21, 0x02	; 2
    5f1c:	28 e0       	ldi	r18, 0x08	; 8
    5f1e:	30 e0       	ldi	r19, 0x00	; 0
    5f20:	05 2e       	mov	r0, r21
    5f22:	00 0c       	add	r0, r0
    5f24:	66 0b       	sbc	r22, r22
    5f26:	77 0b       	sbc	r23, r23
    5f28:	ce 01       	movw	r24, r28
    5f2a:	01 96       	adiw	r24, 0x01	; 1
    5f2c:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5f30:	60 e9       	ldi	r22, 0x90	; 144
    5f32:	72 e1       	ldi	r23, 0x12	; 18
    5f34:	bc ce       	rjmp	.-648    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5f36:	4c ec       	ldi	r20, 0xCC	; 204
    5f38:	52 e0       	ldi	r21, 0x02	; 2
    5f3a:	28 e0       	ldi	r18, 0x08	; 8
    5f3c:	30 e0       	ldi	r19, 0x00	; 0
    5f3e:	05 2e       	mov	r0, r21
    5f40:	00 0c       	add	r0, r0
    5f42:	66 0b       	sbc	r22, r22
    5f44:	77 0b       	sbc	r23, r23
    5f46:	ce 01       	movw	r24, r28
    5f48:	01 96       	adiw	r24, 0x01	; 1
    5f4a:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5f4e:	61 e9       	ldi	r22, 0x91	; 145
    5f50:	72 e1       	ldi	r23, 0x12	; 18
    5f52:	ad ce       	rjmp	.-678    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5f54:	44 ec       	ldi	r20, 0xC4	; 196
    5f56:	52 e0       	ldi	r21, 0x02	; 2
    5f58:	28 e0       	ldi	r18, 0x08	; 8
    5f5a:	30 e0       	ldi	r19, 0x00	; 0
    5f5c:	05 2e       	mov	r0, r21
    5f5e:	00 0c       	add	r0, r0
    5f60:	66 0b       	sbc	r22, r22
    5f62:	77 0b       	sbc	r23, r23
    5f64:	ce 01       	movw	r24, r28
    5f66:	01 96       	adiw	r24, 0x01	; 1
    5f68:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5f6c:	62 e9       	ldi	r22, 0x92	; 146
    5f6e:	72 e1       	ldi	r23, 0x12	; 18
    5f70:	9e ce       	rjmp	.-708    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5f72:	4c eb       	ldi	r20, 0xBC	; 188
    5f74:	52 e0       	ldi	r21, 0x02	; 2
    5f76:	28 e0       	ldi	r18, 0x08	; 8
    5f78:	30 e0       	ldi	r19, 0x00	; 0
    5f7a:	05 2e       	mov	r0, r21
    5f7c:	00 0c       	add	r0, r0
    5f7e:	66 0b       	sbc	r22, r22
    5f80:	77 0b       	sbc	r23, r23
    5f82:	ce 01       	movw	r24, r28
    5f84:	01 96       	adiw	r24, 0x01	; 1
    5f86:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5f8a:	63 e9       	ldi	r22, 0x93	; 147
    5f8c:	72 e1       	ldi	r23, 0x12	; 18
    5f8e:	8f ce       	rjmp	.-738    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5f90:	44 eb       	ldi	r20, 0xB4	; 180
    5f92:	52 e0       	ldi	r21, 0x02	; 2
    5f94:	28 e0       	ldi	r18, 0x08	; 8
    5f96:	30 e0       	ldi	r19, 0x00	; 0
    5f98:	05 2e       	mov	r0, r21
    5f9a:	00 0c       	add	r0, r0
    5f9c:	66 0b       	sbc	r22, r22
    5f9e:	77 0b       	sbc	r23, r23
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	01 96       	adiw	r24, 0x01	; 1
    5fa4:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5fa8:	64 e9       	ldi	r22, 0x94	; 148
    5faa:	72 e1       	ldi	r23, 0x12	; 18
    5fac:	80 ce       	rjmp	.-768    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5fae:	4c ea       	ldi	r20, 0xAC	; 172
    5fb0:	52 e0       	ldi	r21, 0x02	; 2
    5fb2:	28 e0       	ldi	r18, 0x08	; 8
    5fb4:	30 e0       	ldi	r19, 0x00	; 0
    5fb6:	05 2e       	mov	r0, r21
    5fb8:	00 0c       	add	r0, r0
    5fba:	66 0b       	sbc	r22, r22
    5fbc:	77 0b       	sbc	r23, r23
    5fbe:	ce 01       	movw	r24, r28
    5fc0:	01 96       	adiw	r24, 0x01	; 1
    5fc2:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5fc6:	65 e9       	ldi	r22, 0x95	; 149
    5fc8:	72 e1       	ldi	r23, 0x12	; 18
    5fca:	71 ce       	rjmp	.-798    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5fcc:	44 ea       	ldi	r20, 0xA4	; 164
    5fce:	52 e0       	ldi	r21, 0x02	; 2
    5fd0:	28 e0       	ldi	r18, 0x08	; 8
    5fd2:	30 e0       	ldi	r19, 0x00	; 0
    5fd4:	05 2e       	mov	r0, r21
    5fd6:	00 0c       	add	r0, r0
    5fd8:	66 0b       	sbc	r22, r22
    5fda:	77 0b       	sbc	r23, r23
    5fdc:	ce 01       	movw	r24, r28
    5fde:	01 96       	adiw	r24, 0x01	; 1
    5fe0:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5fe4:	66 e9       	ldi	r22, 0x96	; 150
    5fe6:	72 e1       	ldi	r23, 0x12	; 18
    5fe8:	62 ce       	rjmp	.-828    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    5fea:	28 e0       	ldi	r18, 0x08	; 8
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	b3 01       	movw	r22, r6
    5ff0:	a2 01       	movw	r20, r4
    5ff2:	ce 01       	movw	r24, r28
    5ff4:	01 96       	adiw	r24, 0x01	; 1
    5ff6:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    5ffa:	67 e9       	ldi	r22, 0x97	; 151
    5ffc:	72 e1       	ldi	r23, 0x12	; 18
    5ffe:	57 ce       	rjmp	.-850    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    6000:	28 e0       	ldi	r18, 0x08	; 8
    6002:	30 e0       	ldi	r19, 0x00	; 0
    6004:	b5 01       	movw	r22, r10
    6006:	a4 01       	movw	r20, r8
    6008:	ce 01       	movw	r24, r28
    600a:	01 96       	adiw	r24, 0x01	; 1
    600c:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    6010:	68 e9       	ldi	r22, 0x98	; 152
    6012:	72 e1       	ldi	r23, 0x12	; 18
    6014:	4c ce       	rjmp	.-872    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    6016:	28 e0       	ldi	r18, 0x08	; 8
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	4d 89       	ldd	r20, Y+21	; 0x15
    601c:	5e 89       	ldd	r21, Y+22	; 0x16
    601e:	6f 89       	ldd	r22, Y+23	; 0x17
    6020:	78 8d       	ldd	r23, Y+24	; 0x18
    6022:	ce 01       	movw	r24, r28
    6024:	01 96       	adiw	r24, 0x01	; 1
    6026:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    602a:	69 e9       	ldi	r22, 0x99	; 153
    602c:	72 e1       	ldi	r23, 0x12	; 18
    602e:	3f ce       	rjmp	.-898    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    6030:	28 e0       	ldi	r18, 0x08	; 8
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	49 89       	ldd	r20, Y+17	; 0x11
    6036:	5a 89       	ldd	r21, Y+18	; 0x12
    6038:	6b 89       	ldd	r22, Y+19	; 0x13
    603a:	7c 89       	ldd	r23, Y+20	; 0x14
    603c:	ce 01       	movw	r24, r28
    603e:	01 96       	adiw	r24, 0x01	; 1
    6040:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    6044:	6a e9       	ldi	r22, 0x9A	; 154
    6046:	72 e1       	ldi	r23, 0x12	; 18
    6048:	32 ce       	rjmp	.-924    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    604a:	28 e0       	ldi	r18, 0x08	; 8
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	4d 85       	ldd	r20, Y+13	; 0x0d
    6050:	5e 85       	ldd	r21, Y+14	; 0x0e
    6052:	6f 85       	ldd	r22, Y+15	; 0x0f
    6054:	78 89       	ldd	r23, Y+16	; 0x10
    6056:	ce 01       	movw	r24, r28
    6058:	01 96       	adiw	r24, 0x01	; 1
    605a:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    605e:	6b e9       	ldi	r22, 0x9B	; 155
    6060:	72 e1       	ldi	r23, 0x12	; 18
    6062:	25 ce       	rjmp	.-950    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    6064:	28 e0       	ldi	r18, 0x08	; 8
    6066:	30 e0       	ldi	r19, 0x00	; 0
    6068:	49 85       	ldd	r20, Y+9	; 0x09
    606a:	5a 85       	ldd	r21, Y+10	; 0x0a
    606c:	6b 85       	ldd	r22, Y+11	; 0x0b
    606e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6070:	ce 01       	movw	r24, r28
    6072:	01 96       	adiw	r24, 0x01	; 1
    6074:	0e 94 54 81 	call	0x102a8	; 0x102a8 <memcpy_PF>
    6078:	6c e9       	ldi	r22, 0x9C	; 156
    607a:	72 e1       	ldi	r23, 0x12	; 18
    607c:	18 ce       	rjmp	.-976    	; 0x5cae <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1a8>
    607e:	41 e0       	ldi	r20, 0x01	; 1
    6080:	8e e5       	ldi	r24, 0x5E	; 94
    6082:	92 e1       	ldi	r25, 0x12	; 18
    6084:	de db       	rcall	.-2116   	; 0x5842 <_ZN13LiquidCrystal4sendEhh>
    6086:	16 ce       	rjmp	.-980    	; 0x5cb4 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13+0x1ae>
    6088:	68 96       	adiw	r28, 0x18	; 24
    608a:	0f b6       	in	r0, 0x3f	; 63
    608c:	f8 94       	cli
    608e:	de bf       	out	0x3e, r29	; 62
    6090:	0f be       	out	0x3f, r0	; 63
    6092:	cd bf       	out	0x3d, r28	; 61
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	1f 91       	pop	r17
    609a:	0f 91       	pop	r16
    609c:	ff 90       	pop	r15
    609e:	ef 90       	pop	r14
    60a0:	df 90       	pop	r13
    60a2:	cf 90       	pop	r12
    60a4:	bf 90       	pop	r11
    60a6:	af 90       	pop	r10
    60a8:	9f 90       	pop	r9
    60aa:	8f 90       	pop	r8
    60ac:	7f 90       	pop	r7
    60ae:	6f 90       	pop	r6
    60b0:	5f 90       	pop	r5
    60b2:	4f 90       	pop	r4
    60b4:	08 95       	ret

000060b6 <_Z19Setup_Print_LCD_MSGPKcS0_>:
    60b6:	0f 93       	push	r16
    60b8:	1f 93       	push	r17
    60ba:	cf 93       	push	r28
    60bc:	df 93       	push	r29
    60be:	8c 01       	movw	r16, r24
    60c0:	eb 01       	movw	r28, r22
    60c2:	60 e0       	ldi	r22, 0x00	; 0
    60c4:	80 e0       	ldi	r24, 0x00	; 0
    60c6:	a1 dc       	rcall	.-1726   	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    60c8:	c8 01       	movw	r24, r16
    60ca:	1d dd       	rcall	.-1478   	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    60cc:	61 e0       	ldi	r22, 0x01	; 1
    60ce:	80 e0       	ldi	r24, 0x00	; 0
    60d0:	9c dc       	rcall	.-1736   	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    60d2:	ce 01       	movw	r24, r28
    60d4:	18 dd       	rcall	.-1488   	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    60d6:	2f ef       	ldi	r18, 0xFF	; 255
    60d8:	83 ed       	ldi	r24, 0xD3	; 211
    60da:	90 e3       	ldi	r25, 0x30	; 48
    60dc:	21 50       	subi	r18, 0x01	; 1
    60de:	80 40       	sbci	r24, 0x00	; 0
    60e0:	90 40       	sbci	r25, 0x00	; 0
    60e2:	e1 f7       	brne	.-8      	; 0x60dc <_Z19Setup_Print_LCD_MSGPKcS0_+0x26>
    60e4:	00 c0       	rjmp	.+0      	; 0x60e6 <_Z19Setup_Print_LCD_MSGPKcS0_+0x30>
    60e6:	00 00       	nop
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	08 95       	ret

000060f2 <_Z10Sphere_ExtRbS_.constprop.8>:
    60f2:	2f 92       	push	r2
    60f4:	3f 92       	push	r3
    60f6:	4f 92       	push	r4
    60f8:	5f 92       	push	r5
    60fa:	6f 92       	push	r6
    60fc:	7f 92       	push	r7
    60fe:	8f 92       	push	r8
    6100:	9f 92       	push	r9
    6102:	af 92       	push	r10
    6104:	bf 92       	push	r11
    6106:	cf 92       	push	r12
    6108:	df 92       	push	r13
    610a:	ef 92       	push	r14
    610c:	ff 92       	push	r15
    610e:	0f 93       	push	r16
    6110:	1f 93       	push	r17
    6112:	cf 93       	push	r28
    6114:	df 93       	push	r29
    6116:	cd b7       	in	r28, 0x3d	; 61
    6118:	de b7       	in	r29, 0x3e	; 62
    611a:	64 97       	sbiw	r28, 0x14	; 20
    611c:	0f b6       	in	r0, 0x3f	; 63
    611e:	f8 94       	cli
    6120:	de bf       	out	0x3e, r29	; 62
    6122:	0f be       	out	0x3f, r0	; 63
    6124:	cd bf       	out	0x3d, r28	; 61
    6126:	80 90 23 02 	lds	r8, 0x0223	; 0x800223 <Sph_R_mm>
    612a:	90 90 24 02 	lds	r9, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    612e:	a0 90 25 02 	lds	r10, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    6132:	b0 90 26 02 	lds	r11, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    6136:	00 91 27 12 	lds	r16, 0x1227	; 0x801227 <Cutting_Width>
    613a:	10 91 28 12 	lds	r17, 0x1228	; 0x801228 <Cutting_Width+0x1>
    613e:	c5 01       	movw	r24, r10
    6140:	b4 01       	movw	r22, r8
    6142:	66 0f       	add	r22, r22
    6144:	77 1f       	adc	r23, r23
    6146:	88 1f       	adc	r24, r24
    6148:	99 1f       	adc	r25, r25
    614a:	98 01       	movw	r18, r16
    614c:	01 2e       	mov	r0, r17
    614e:	00 0c       	add	r0, r0
    6150:	44 0b       	sbc	r20, r20
    6152:	55 0b       	sbc	r21, r21
    6154:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    6158:	29 83       	std	Y+1, r18	; 0x01
    615a:	3a 83       	std	Y+2, r19	; 0x02
    615c:	4b 83       	std	Y+3, r20	; 0x03
    615e:	5c 83       	std	Y+4, r21	; 0x04
    6160:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    6164:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    6168:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    616c:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    6170:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <Pass_Nr>
    6174:	2d 83       	std	Y+5, r18	; 0x05
    6176:	29 80       	ldd	r2, Y+1	; 0x01
    6178:	3a 80       	ldd	r3, Y+2	; 0x02
    617a:	3f ef       	ldi	r19, 0xFF	; 255
    617c:	23 1a       	sub	r2, r19
    617e:	33 0a       	sbc	r3, r19
    6180:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    6184:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    6188:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    618c:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    6190:	48 17       	cp	r20, r24
    6192:	59 07       	cpc	r21, r25
    6194:	6a 07       	cpc	r22, r26
    6196:	7b 07       	cpc	r23, r27
    6198:	09 f0       	breq	.+2      	; 0x619c <_Z10Sphere_ExtRbS_.constprop.8+0xaa>
    619a:	02 c1       	rjmp	.+516    	; 0x63a0 <_Z10Sphere_ExtRbS_.constprop.8+0x2ae>
    619c:	40 90 5a 12 	lds	r4, 0x125A	; 0x80125a <Motor_Z_Pos>
    61a0:	50 90 5b 12 	lds	r5, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    61a4:	60 90 5c 12 	lds	r6, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    61a8:	70 90 5d 12 	lds	r7, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    61ac:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    61b0:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    61b4:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    61b8:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    61bc:	48 16       	cp	r4, r24
    61be:	59 06       	cpc	r5, r25
    61c0:	6a 06       	cpc	r6, r26
    61c2:	7b 06       	cpc	r7, r27
    61c4:	09 f0       	breq	.+2      	; 0x61c8 <_Z10Sphere_ExtRbS_.constprop.8+0xd6>
    61c6:	dd c0       	rjmp	.+442    	; 0x6382 <_Z10Sphere_ExtRbS_.constprop.8+0x290>
    61c8:	f6 99       	sbic	0x1e, 6	; 30
    61ca:	db c0       	rjmp	.+438    	; 0x6382 <_Z10Sphere_ExtRbS_.constprop.8+0x290>
    61cc:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    61d0:	81 11       	cpse	r24, r1
    61d2:	7a c0       	rjmp	.+244    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    61d4:	42 2f       	mov	r20, r18
    61d6:	50 e0       	ldi	r21, 0x00	; 0
    61d8:	5e 83       	std	Y+6, r21	; 0x06
    61da:	4d 83       	std	Y+5, r20	; 0x05
    61dc:	24 16       	cp	r2, r20
    61de:	35 06       	cpc	r3, r21
    61e0:	0c f4       	brge	.+2      	; 0x61e4 <_Z10Sphere_ExtRbS_.constprop.8+0xf2>
    61e2:	72 c0       	rjmp	.+228    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    61e4:	81 e0       	ldi	r24, 0x01	; 1
    61e6:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    61ea:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    61ee:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    61f2:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    61f6:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    61fa:	07 2e       	mov	r0, r23
    61fc:	00 0c       	add	r0, r0
    61fe:	88 0b       	sbc	r24, r24
    6200:	99 0b       	sbc	r25, r25
    6202:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6206:	2b 01       	movw	r4, r22
    6208:	3c 01       	movw	r6, r24
    620a:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    620e:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    6212:	07 2e       	mov	r0, r23
    6214:	00 0c       	add	r0, r0
    6216:	88 0b       	sbc	r24, r24
    6218:	99 0b       	sbc	r25, r25
    621a:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    621e:	4b 01       	movw	r8, r22
    6220:	5c 01       	movw	r10, r24
    6222:	c0 90 03 0a 	lds	r12, 0x0A03	; 0x800a03 <McSTEP_Z>
    6226:	d0 90 04 0a 	lds	r13, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    622a:	0d 2c       	mov	r0, r13
    622c:	00 0c       	add	r0, r0
    622e:	ee 08       	sbc	r14, r14
    6230:	ff 08       	sbc	r15, r15
    6232:	89 81       	ldd	r24, Y+1	; 0x01
    6234:	9a 81       	ldd	r25, Y+2	; 0x02
    6236:	97 fd       	sbrc	r25, 7
    6238:	c1 01       	movw	r24, r2
    623a:	95 95       	asr	r25
    623c:	87 95       	ror	r24
    623e:	ad 81       	ldd	r26, Y+5	; 0x05
    6240:	be 81       	ldd	r27, Y+6	; 0x06
    6242:	8a 17       	cp	r24, r26
    6244:	9b 07       	cpc	r25, r27
    6246:	0c f4       	brge	.+2      	; 0x624a <_Z10Sphere_ExtRbS_.constprop.8+0x158>
    6248:	8a c0       	rjmp	.+276    	; 0x635e <_Z10Sphere_ExtRbS_.constprop.8+0x26c>
    624a:	0a 9f       	mul	r16, r26
    624c:	b0 01       	movw	r22, r0
    624e:	0b 9f       	mul	r16, r27
    6250:	70 0d       	add	r23, r0
    6252:	1a 9f       	mul	r17, r26
    6254:	70 0d       	add	r23, r0
    6256:	11 24       	eor	r1, r1
    6258:	07 2e       	mov	r0, r23
    625a:	00 0c       	add	r0, r0
    625c:	88 0b       	sbc	r24, r24
    625e:	99 0b       	sbc	r25, r25
    6260:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6264:	a3 01       	movw	r20, r6
    6266:	92 01       	movw	r18, r4
    6268:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    626c:	a5 01       	movw	r20, r10
    626e:	94 01       	movw	r18, r8
    6270:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6274:	20 e0       	ldi	r18, 0x00	; 0
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	40 e0       	ldi	r20, 0x00	; 0
    627a:	5f e3       	ldi	r21, 0x3F	; 63
    627c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    6280:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    6284:	9b 01       	movw	r18, r22
    6286:	ac 01       	movw	r20, r24
    6288:	c7 01       	movw	r24, r14
    628a:	b6 01       	movw	r22, r12
    628c:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    6290:	00 91 20 12 	lds	r16, 0x1220	; 0x801220 <Null_Z_Pos>
    6294:	10 91 21 12 	lds	r17, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    6298:	20 91 22 12 	lds	r18, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    629c:	30 91 23 12 	lds	r19, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    62a0:	dc 01       	movw	r26, r24
    62a2:	cb 01       	movw	r24, r22
    62a4:	80 0f       	add	r24, r16
    62a6:	91 1f       	adc	r25, r17
    62a8:	a2 1f       	adc	r26, r18
    62aa:	b3 1f       	adc	r27, r19
    62ac:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    62b0:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    62b4:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    62b8:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    62bc:	17 98       	cbi	0x02, 7	; 2
    62be:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    62c8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    62cc:	82 15       	cp	r24, r2
    62ce:	13 04       	cpc	r1, r3
    62d0:	69 f1       	breq	.+90     	; 0x632c <_Z10Sphere_ExtRbS_.constprop.8+0x23a>
    62d2:	64 f1       	brlt	.+88     	; 0x632c <_Z10Sphere_ExtRbS_.constprop.8+0x23a>
    62d4:	40 e0       	ldi	r20, 0x00	; 0
    62d6:	50 e0       	ldi	r21, 0x00	; 0
    62d8:	60 e0       	ldi	r22, 0x00	; 0
    62da:	70 e4       	ldi	r23, 0x40	; 64
    62dc:	40 93 f6 09 	sts	0x09F6, r20	; 0x8009f6 <Limit_Pos_Left>
    62e0:	50 93 f7 09 	sts	0x09F7, r21	; 0x8009f7 <Limit_Pos_Left+0x1>
    62e4:	60 93 f8 09 	sts	0x09F8, r22	; 0x8009f8 <Limit_Pos_Left+0x2>
    62e8:	70 93 f9 09 	sts	0x09F9, r23	; 0x8009f9 <Limit_Pos_Left+0x3>
    62ec:	17 9a       	sbi	0x02, 7	; 2
    62ee:	80 e0       	ldi	r24, 0x00	; 0
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	a0 e0       	ldi	r26, 0x00	; 0
    62f4:	b0 ec       	ldi	r27, 0xC0	; 192
    62f6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    62fa:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    62fe:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    6302:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    6306:	15 9a       	sbi	0x02, 5	; 2
    6308:	40 93 bf 04 	sts	0x04BF, r20	; 0x8004bf <Limit_Pos_Front>
    630c:	50 93 c0 04 	sts	0x04C0, r21	; 0x8004c0 <Limit_Pos_Front+0x1>
    6310:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <Limit_Pos_Front+0x2>
    6314:	70 93 c2 04 	sts	0x04C2, r23	; 0x8004c2 <Limit_Pos_Front+0x3>
    6318:	13 9a       	sbi	0x02, 3	; 2
    631a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    631e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    6322:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    6326:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    632a:	11 9a       	sbi	0x02, 1	; 2
    632c:	64 96       	adiw	r28, 0x14	; 20
    632e:	0f b6       	in	r0, 0x3f	; 63
    6330:	f8 94       	cli
    6332:	de bf       	out	0x3e, r29	; 62
    6334:	0f be       	out	0x3f, r0	; 63
    6336:	cd bf       	out	0x3d, r28	; 61
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	1f 91       	pop	r17
    633e:	0f 91       	pop	r16
    6340:	ff 90       	pop	r15
    6342:	ef 90       	pop	r14
    6344:	df 90       	pop	r13
    6346:	cf 90       	pop	r12
    6348:	bf 90       	pop	r11
    634a:	af 90       	pop	r10
    634c:	9f 90       	pop	r9
    634e:	8f 90       	pop	r8
    6350:	7f 90       	pop	r7
    6352:	6f 90       	pop	r6
    6354:	5f 90       	pop	r5
    6356:	4f 90       	pop	r4
    6358:	3f 90       	pop	r3
    635a:	2f 90       	pop	r2
    635c:	08 95       	ret
    635e:	2d 81       	ldd	r18, Y+5	; 0x05
    6360:	3e 81       	ldd	r19, Y+6	; 0x06
    6362:	21 50       	subi	r18, 0x01	; 1
    6364:	31 09       	sbc	r19, r1
    6366:	20 9f       	mul	r18, r16
    6368:	b0 01       	movw	r22, r0
    636a:	21 9f       	mul	r18, r17
    636c:	70 0d       	add	r23, r0
    636e:	30 9f       	mul	r19, r16
    6370:	70 0d       	add	r23, r0
    6372:	11 24       	eor	r1, r1
    6374:	80 91 24 12 	lds	r24, 0x1224	; 0x801224 <Cutter_Width>
    6378:	90 91 25 12 	lds	r25, 0x1225	; 0x801225 <Cutter_Width+0x1>
    637c:	68 0f       	add	r22, r24
    637e:	79 1f       	adc	r23, r25
    6380:	6b cf       	rjmp	.-298    	; 0x6258 <_Z10Sphere_ExtRbS_.constprop.8+0x166>
    6382:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    6386:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    638a:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    638e:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    6392:	48 16       	cp	r4, r24
    6394:	59 06       	cpc	r5, r25
    6396:	6a 06       	cpc	r6, r26
    6398:	7b 06       	cpc	r7, r27
    639a:	11 f4       	brne	.+4      	; 0x63a0 <_Z10Sphere_ExtRbS_.constprop.8+0x2ae>
    639c:	f3 9b       	sbis	0x1e, 3	; 30
    639e:	75 c0       	rjmp	.+234    	; 0x648a <_Z10Sphere_ExtRbS_.constprop.8+0x398>
    63a0:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    63a4:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    63a8:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    63ac:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    63b0:	48 17       	cp	r20, r24
    63b2:	59 07       	cpc	r21, r25
    63b4:	6a 07       	cpc	r22, r26
    63b6:	7b 07       	cpc	r23, r27
    63b8:	09 f0       	breq	.+2      	; 0x63bc <_Z10Sphere_ExtRbS_.constprop.8+0x2ca>
    63ba:	86 cf       	rjmp	.-244    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    63bc:	00 91 5a 12 	lds	r16, 0x125A	; 0x80125a <Motor_Z_Pos>
    63c0:	10 91 5b 12 	lds	r17, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    63c4:	20 91 5c 12 	lds	r18, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    63c8:	30 91 5d 12 	lds	r19, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    63cc:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    63d0:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    63d4:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    63d8:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    63dc:	08 17       	cp	r16, r24
    63de:	19 07       	cpc	r17, r25
    63e0:	2a 07       	cpc	r18, r26
    63e2:	3b 07       	cpc	r19, r27
    63e4:	09 f0       	breq	.+2      	; 0x63e8 <_Z10Sphere_ExtRbS_.constprop.8+0x2f6>
    63e6:	70 cf       	rjmp	.-288    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    63e8:	f3 99       	sbic	0x1e, 3	; 30
    63ea:	6e cf       	rjmp	.-292    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    63ec:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    63f0:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    63f4:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    63f8:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <REBOUND_X>
    63fc:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <REBOUND_X+0x1>
    6400:	01 2e       	mov	r0, r17
    6402:	00 0c       	add	r0, r0
    6404:	22 0b       	sbc	r18, r18
    6406:	33 0b       	sbc	r19, r19
    6408:	c0 90 10 12 	lds	r12, 0x1210	; 0x801210 <Null_X_Pos>
    640c:	d0 90 11 12 	lds	r13, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6410:	e0 90 12 12 	lds	r14, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6414:	f0 90 13 12 	lds	r15, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6418:	c0 1a       	sub	r12, r16
    641a:	d1 0a       	sbc	r13, r17
    641c:	e2 0a       	sbc	r14, r18
    641e:	f3 0a       	sbc	r15, r19
    6420:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    6424:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    6428:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    642c:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    6430:	3d 81       	ldd	r19, Y+5	; 0x05
    6432:	3f 5f       	subi	r19, 0xFF	; 255
    6434:	30 93 22 02 	sts	0x0222, r19	; 0x800222 <Pass_Nr>
    6438:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    643c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    6440:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    6444:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    6448:	82 1b       	sub	r24, r18
    644a:	93 0b       	sbc	r25, r19
    644c:	e0 91 fa 09 	lds	r30, 0x09FA	; 0x8009fa <REPEAt>
    6450:	f0 91 fb 09 	lds	r31, 0x09FB	; 0x8009fb <REPEAt+0x1>
    6454:	8e 9f       	mul	r24, r30
    6456:	90 01       	movw	r18, r0
    6458:	8f 9f       	mul	r24, r31
    645a:	30 0d       	add	r19, r0
    645c:	9e 9f       	mul	r25, r30
    645e:	30 0d       	add	r19, r0
    6460:	11 24       	eor	r1, r1
    6462:	22 0f       	add	r18, r18
    6464:	33 1f       	adc	r19, r19
    6466:	c9 01       	movw	r24, r18
    6468:	33 0f       	add	r19, r19
    646a:	aa 0b       	sbc	r26, r26
    646c:	bb 0b       	sbc	r27, r27
    646e:	8c 0d       	add	r24, r12
    6470:	9d 1d       	adc	r25, r13
    6472:	ae 1d       	adc	r26, r14
    6474:	bf 1d       	adc	r27, r15
    6476:	48 17       	cp	r20, r24
    6478:	59 07       	cpc	r21, r25
    647a:	6a 07       	cpc	r22, r26
    647c:	7b 07       	cpc	r23, r27
    647e:	0c f4       	brge	.+2      	; 0x6482 <_Z10Sphere_ExtRbS_.constprop.8+0x390>
    6480:	0f c1       	rjmp	.+542    	; 0x66a0 <_Z10Sphere_ExtRbS_.constprop.8+0x5ae>
    6482:	81 e0       	ldi	r24, 0x01	; 1
    6484:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    6488:	1f cf       	rjmp	.-450    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    648a:	5d 81       	ldd	r21, Y+5	; 0x05
    648c:	45 2f       	mov	r20, r21
    648e:	50 e0       	ldi	r21, 0x00	; 0
    6490:	5c 8b       	std	Y+20, r21	; 0x14
    6492:	4b 8b       	std	Y+19, r20	; 0x13
    6494:	24 16       	cp	r2, r20
    6496:	35 06       	cpc	r3, r21
    6498:	0c f4       	brge	.+2      	; 0x649c <_Z10Sphere_ExtRbS_.constprop.8+0x3aa>
    649a:	16 cf       	rjmp	.-468    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    649c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    64a0:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    64a4:	89 81       	ldd	r24, Y+1	; 0x01
    64a6:	9a 81       	ldd	r25, Y+2	; 0x02
    64a8:	97 fd       	sbrc	r25, 7
    64aa:	c1 01       	movw	r24, r2
    64ac:	dc 01       	movw	r26, r24
    64ae:	b5 95       	asr	r27
    64b0:	a7 95       	ror	r26
    64b2:	ba 8b       	std	Y+18, r27	; 0x12
    64b4:	a9 8b       	std	Y+17, r26	; 0x11
    64b6:	20 91 1c 12 	lds	r18, 0x121C	; 0x80121c <R_Quad>
    64ba:	30 91 1d 12 	lds	r19, 0x121D	; 0x80121d <R_Quad+0x1>
    64be:	40 91 1e 12 	lds	r20, 0x121E	; 0x80121e <R_Quad+0x2>
    64c2:	50 91 1f 12 	lds	r21, 0x121F	; 0x80121f <R_Quad+0x3>
    64c6:	2d 87       	std	Y+13, r18	; 0x0d
    64c8:	3e 87       	std	Y+14, r19	; 0x0e
    64ca:	4f 87       	std	Y+15, r20	; 0x0f
    64cc:	58 8b       	std	Y+16, r21	; 0x10
    64ce:	c5 01       	movw	r24, r10
    64d0:	b4 01       	movw	r22, r8
    64d2:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    64d6:	69 87       	std	Y+9, r22	; 0x09
    64d8:	7a 87       	std	Y+10, r23	; 0x0a
    64da:	8b 87       	std	Y+11, r24	; 0x0b
    64dc:	9c 87       	std	Y+12, r25	; 0x0c
    64de:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    64e2:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    64e6:	07 2e       	mov	r0, r23
    64e8:	00 0c       	add	r0, r0
    64ea:	88 0b       	sbc	r24, r24
    64ec:	99 0b       	sbc	r25, r25
    64ee:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    64f2:	69 83       	std	Y+1, r22	; 0x01
    64f4:	7a 83       	std	Y+2, r23	; 0x02
    64f6:	8b 83       	std	Y+3, r24	; 0x03
    64f8:	9c 83       	std	Y+4, r25	; 0x04
    64fa:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    64fe:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    6502:	07 2e       	mov	r0, r23
    6504:	00 0c       	add	r0, r0
    6506:	88 0b       	sbc	r24, r24
    6508:	99 0b       	sbc	r25, r25
    650a:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    650e:	6d 83       	std	Y+5, r22	; 0x05
    6510:	7e 83       	std	Y+6, r23	; 0x06
    6512:	8f 83       	std	Y+7, r24	; 0x07
    6514:	98 87       	std	Y+8, r25	; 0x08
    6516:	c0 90 fd 09 	lds	r12, 0x09FD	; 0x8009fd <McSTEP_X>
    651a:	d0 90 fe 09 	lds	r13, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    651e:	0d 2c       	mov	r0, r13
    6520:	00 0c       	add	r0, r0
    6522:	ee 08       	sbc	r14, r14
    6524:	ff 08       	sbc	r15, r15
    6526:	4b 89       	ldd	r20, Y+19	; 0x13
    6528:	5c 89       	ldd	r21, Y+20	; 0x14
    652a:	89 89       	ldd	r24, Y+17	; 0x11
    652c:	9a 89       	ldd	r25, Y+18	; 0x12
    652e:	84 17       	cp	r24, r20
    6530:	95 07       	cpc	r25, r21
    6532:	0c f0       	brlt	.+2      	; 0x6536 <_Z10Sphere_ExtRbS_.constprop.8+0x444>
    6534:	73 c0       	rjmp	.+230    	; 0x661c <_Z10Sphere_ExtRbS_.constprop.8+0x52a>
    6536:	01 96       	adiw	r24, 0x01	; 1
    6538:	48 1b       	sub	r20, r24
    653a:	59 0b       	sbc	r21, r25
    653c:	40 9f       	mul	r20, r16
    653e:	d0 01       	movw	r26, r0
    6540:	41 9f       	mul	r20, r17
    6542:	b0 0d       	add	r27, r0
    6544:	50 9f       	mul	r21, r16
    6546:	b0 0d       	add	r27, r0
    6548:	11 24       	eor	r1, r1
    654a:	9d 01       	movw	r18, r26
    654c:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    6550:	2d 85       	ldd	r18, Y+13	; 0x0d
    6552:	3e 85       	ldd	r19, Y+14	; 0x0e
    6554:	4f 85       	ldd	r20, Y+15	; 0x0f
    6556:	58 89       	ldd	r21, Y+16	; 0x10
    6558:	26 1b       	sub	r18, r22
    655a:	37 0b       	sbc	r19, r23
    655c:	48 0b       	sbc	r20, r24
    655e:	59 0b       	sbc	r21, r25
    6560:	ca 01       	movw	r24, r20
    6562:	b9 01       	movw	r22, r18
    6564:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6568:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    656c:	9b 01       	movw	r18, r22
    656e:	ac 01       	movw	r20, r24
    6570:	69 85       	ldd	r22, Y+9	; 0x09
    6572:	7a 85       	ldd	r23, Y+10	; 0x0a
    6574:	8b 85       	ldd	r24, Y+11	; 0x0b
    6576:	9c 85       	ldd	r25, Y+12	; 0x0c
    6578:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    657c:	29 81       	ldd	r18, Y+1	; 0x01
    657e:	3a 81       	ldd	r19, Y+2	; 0x02
    6580:	4b 81       	ldd	r20, Y+3	; 0x03
    6582:	5c 81       	ldd	r21, Y+4	; 0x04
    6584:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6588:	2d 81       	ldd	r18, Y+5	; 0x05
    658a:	3e 81       	ldd	r19, Y+6	; 0x06
    658c:	4f 81       	ldd	r20, Y+7	; 0x07
    658e:	58 85       	ldd	r21, Y+8	; 0x08
    6590:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6594:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    6598:	9b 01       	movw	r18, r22
    659a:	ac 01       	movw	r20, r24
    659c:	80 90 18 12 	lds	r8, 0x1218	; 0x801218 <Sph_R>
    65a0:	90 90 19 12 	lds	r9, 0x1219	; 0x801219 <Sph_R+0x1>
    65a4:	a0 90 1a 12 	lds	r10, 0x121A	; 0x80121a <Sph_R+0x2>
    65a8:	b0 90 1b 12 	lds	r11, 0x121B	; 0x80121b <Sph_R+0x3>
    65ac:	80 91 14 12 	lds	r24, 0x1214	; 0x801214 <Bar_R>
    65b0:	90 91 15 12 	lds	r25, 0x1215	; 0x801215 <Bar_R+0x1>
    65b4:	a0 91 16 12 	lds	r26, 0x1216	; 0x801216 <Bar_R+0x2>
    65b8:	b0 91 17 12 	lds	r27, 0x1217	; 0x801217 <Bar_R+0x3>
    65bc:	88 1a       	sub	r8, r24
    65be:	99 0a       	sbc	r9, r25
    65c0:	aa 0a       	sbc	r10, r26
    65c2:	bb 0a       	sbc	r11, r27
    65c4:	c7 01       	movw	r24, r14
    65c6:	b6 01       	movw	r22, r12
    65c8:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    65cc:	86 16       	cp	r8, r22
    65ce:	97 06       	cpc	r9, r23
    65d0:	a8 06       	cpc	r10, r24
    65d2:	b9 06       	cpc	r11, r25
    65d4:	14 f4       	brge	.+4      	; 0x65da <_Z10Sphere_ExtRbS_.constprop.8+0x4e8>
    65d6:	c5 01       	movw	r24, r10
    65d8:	b4 01       	movw	r22, r8
    65da:	00 91 10 12 	lds	r16, 0x1210	; 0x801210 <Null_X_Pos>
    65de:	10 91 11 12 	lds	r17, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    65e2:	20 91 12 12 	lds	r18, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    65e6:	30 91 13 12 	lds	r19, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    65ea:	06 0f       	add	r16, r22
    65ec:	17 1f       	adc	r17, r23
    65ee:	28 1f       	adc	r18, r24
    65f0:	39 1f       	adc	r19, r25
    65f2:	00 93 bf 04 	sts	0x04BF, r16	; 0x8004bf <Limit_Pos_Front>
    65f6:	10 93 c0 04 	sts	0x04C0, r17	; 0x8004c0 <Limit_Pos_Front+0x1>
    65fa:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <Limit_Pos_Front+0x2>
    65fe:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <Limit_Pos_Front+0x3>
    6602:	40 92 c3 04 	sts	0x04C3, r4	; 0x8004c3 <Limit_Pos_Right>
    6606:	50 92 c4 04 	sts	0x04C4, r5	; 0x8004c4 <Limit_Pos_Right+0x1>
    660a:	60 92 c5 04 	sts	0x04C5, r6	; 0x8004c5 <Limit_Pos_Right+0x2>
    660e:	70 92 c6 04 	sts	0x04C6, r7	; 0x8004c6 <Limit_Pos_Right+0x3>
    6612:	13 98       	cbi	0x02, 3	; 2
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    661a:	56 ce       	rjmp	.-852    	; 0x62c8 <_Z10Sphere_ExtRbS_.constprop.8+0x1d6>
    661c:	4b 89       	ldd	r20, Y+19	; 0x13
    661e:	5c 89       	ldd	r21, Y+20	; 0x14
    6620:	04 9f       	mul	r16, r20
    6622:	c0 01       	movw	r24, r0
    6624:	05 9f       	mul	r16, r21
    6626:	90 0d       	add	r25, r0
    6628:	14 9f       	mul	r17, r20
    662a:	90 0d       	add	r25, r0
    662c:	11 24       	eor	r1, r1
    662e:	09 2e       	mov	r0, r25
    6630:	00 0c       	add	r0, r0
    6632:	aa 0b       	sbc	r26, r26
    6634:	bb 0b       	sbc	r27, r27
    6636:	a5 01       	movw	r20, r10
    6638:	94 01       	movw	r18, r8
    663a:	28 1b       	sub	r18, r24
    663c:	39 0b       	sbc	r19, r25
    663e:	4a 0b       	sbc	r20, r26
    6640:	5b 0b       	sbc	r21, r27
    6642:	ca 01       	movw	r24, r20
    6644:	b9 01       	movw	r22, r18
    6646:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    664a:	2d 85       	ldd	r18, Y+13	; 0x0d
    664c:	3e 85       	ldd	r19, Y+14	; 0x0e
    664e:	4f 85       	ldd	r20, Y+15	; 0x0f
    6650:	58 89       	ldd	r21, Y+16	; 0x10
    6652:	26 1b       	sub	r18, r22
    6654:	37 0b       	sbc	r19, r23
    6656:	48 0b       	sbc	r20, r24
    6658:	59 0b       	sbc	r21, r25
    665a:	ca 01       	movw	r24, r20
    665c:	b9 01       	movw	r22, r18
    665e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6662:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    6666:	9b 01       	movw	r18, r22
    6668:	ac 01       	movw	r20, r24
    666a:	69 85       	ldd	r22, Y+9	; 0x09
    666c:	7a 85       	ldd	r23, Y+10	; 0x0a
    666e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6670:	9c 85       	ldd	r25, Y+12	; 0x0c
    6672:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    6676:	29 81       	ldd	r18, Y+1	; 0x01
    6678:	3a 81       	ldd	r19, Y+2	; 0x02
    667a:	4b 81       	ldd	r20, Y+3	; 0x03
    667c:	5c 81       	ldd	r21, Y+4	; 0x04
    667e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6682:	2d 81       	ldd	r18, Y+5	; 0x05
    6684:	3e 81       	ldd	r19, Y+6	; 0x06
    6686:	4f 81       	ldd	r20, Y+7	; 0x07
    6688:	58 85       	ldd	r21, Y+8	; 0x08
    668a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    668e:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    6692:	9b 01       	movw	r18, r22
    6694:	ac 01       	movw	r20, r24
    6696:	c7 01       	movw	r24, r14
    6698:	b6 01       	movw	r22, r12
    669a:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    669e:	9d cf       	rjmp	.-198    	; 0x65da <_Z10Sphere_ExtRbS_.constprop.8+0x4e8>
    66a0:	80 e0       	ldi	r24, 0x00	; 0
    66a2:	f0 ce       	rjmp	.-544    	; 0x6484 <_Z10Sphere_ExtRbS_.constprop.8+0x392>

000066a4 <_Z16Thread_Int_Rightv>:
    66a4:	8f 92       	push	r8
    66a6:	9f 92       	push	r9
    66a8:	af 92       	push	r10
    66aa:	bf 92       	push	r11
    66ac:	cf 92       	push	r12
    66ae:	df 92       	push	r13
    66b0:	ef 92       	push	r14
    66b2:	ff 92       	push	r15
    66b4:	0f 93       	push	r16
    66b6:	1f 93       	push	r17
    66b8:	cf 93       	push	r28
    66ba:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    66be:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    66c2:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    66c6:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    66ca:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    66ce:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    66d2:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    66d6:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    66da:	84 17       	cp	r24, r20
    66dc:	95 07       	cpc	r25, r21
    66de:	a6 07       	cpc	r26, r22
    66e0:	b7 07       	cpc	r27, r23
    66e2:	09 f0       	breq	.+2      	; 0x66e6 <_Z16Thread_Int_Rightv+0x42>
    66e4:	49 c1       	rjmp	.+658    	; 0x6978 <_Z16Thread_Int_Rightv+0x2d4>
    66e6:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    66ea:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    66ee:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    66f2:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    66f6:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    66fa:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    66fe:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    6702:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    6706:	84 17       	cp	r24, r20
    6708:	95 07       	cpc	r25, r21
    670a:	a6 07       	cpc	r26, r22
    670c:	b7 07       	cpc	r27, r23
    670e:	71 f0       	breq	.+28     	; 0x672c <_Z16Thread_Int_Rightv+0x88>
    6710:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    6714:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6718:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    671c:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6720:	84 17       	cp	r24, r20
    6722:	95 07       	cpc	r25, r21
    6724:	a6 07       	cpc	r26, r22
    6726:	b7 07       	cpc	r27, r23
    6728:	09 f0       	breq	.+2      	; 0x672c <_Z16Thread_Int_Rightv+0x88>
    672a:	08 c1       	rjmp	.+528    	; 0x693c <_Z16Thread_Int_Rightv+0x298>
    672c:	00 91 f5 09 	lds	r16, 0x09F5	; 0x8009f5 <Thread_Step>
    6730:	8a e1       	ldi	r24, 0x1A	; 26
    6732:	08 9f       	mul	r16, r24
    6734:	80 01       	movw	r16, r0
    6736:	11 24       	eor	r1, r1
    6738:	09 53       	subi	r16, 0x39	; 57
    673a:	1b 4f       	sbci	r17, 0xFB	; 251
    673c:	f8 01       	movw	r30, r16
    673e:	21 89       	ldd	r18, Z+17	; 0x11
    6740:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <Pass_Total>
    6744:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    6748:	81 11       	cpse	r24, r1
    674a:	ec c0       	rjmp	.+472    	; 0x6924 <_Z16Thread_Int_Rightv+0x280>
    674c:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    6750:	82 2f       	mov	r24, r18
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	2c 17       	cp	r18, r28
    6756:	08 f4       	brcc	.+2      	; 0x675a <_Z16Thread_Int_Rightv+0xb6>
    6758:	a4 c0       	rjmp	.+328    	; 0x68a2 <_Z16Thread_Int_Rightv+0x1fe>
    675a:	21 e0       	ldi	r18, 0x01	; 1
    675c:	20 93 26 12 	sts	0x1226, r18	; 0x801226 <cycle_flag>
    6760:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6764:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6768:	01 97       	sbiw	r24, 0x01	; 1
    676a:	bc 01       	movw	r22, r24
    676c:	99 0f       	add	r25, r25
    676e:	88 0b       	sbc	r24, r24
    6770:	99 0b       	sbc	r25, r25
    6772:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6776:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    677a:	6b 01       	movw	r12, r22
    677c:	7c 01       	movw	r14, r24
    677e:	27 ec       	ldi	r18, 0xC7	; 199
    6780:	35 ef       	ldi	r19, 0xF5	; 245
    6782:	49 e1       	ldi	r20, 0x19	; 25
    6784:	5f e3       	ldi	r21, 0x3F	; 63
    6786:	f8 01       	movw	r30, r16
    6788:	65 85       	ldd	r22, Z+13	; 0x0d
    678a:	76 85       	ldd	r23, Z+14	; 0x0e
    678c:	87 85       	ldd	r24, Z+15	; 0x0f
    678e:	90 89       	ldd	r25, Z+16	; 0x10
    6790:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6794:	a7 01       	movw	r20, r14
    6796:	96 01       	movw	r18, r12
    6798:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    679c:	6b 01       	movw	r12, r22
    679e:	7c 01       	movw	r14, r24
    67a0:	2c e8       	ldi	r18, 0x8C	; 140
    67a2:	37 e3       	ldi	r19, 0x37	; 55
    67a4:	4c e0       	ldi	r20, 0x0C	; 12
    67a6:	5f e3       	ldi	r21, 0x3F	; 63
    67a8:	c1 30       	cpi	r28, 0x01	; 1
    67aa:	71 f0       	breq	.+28     	; 0x67c8 <_Z16Thread_Int_Rightv+0x124>
    67ac:	8c 2f       	mov	r24, r28
    67ae:	81 50       	subi	r24, 0x01	; 1
    67b0:	99 0b       	sbc	r25, r25
    67b2:	bc 01       	movw	r22, r24
    67b4:	07 2e       	mov	r0, r23
    67b6:	00 0c       	add	r0, r0
    67b8:	88 0b       	sbc	r24, r24
    67ba:	99 0b       	sbc	r25, r25
    67bc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    67c0:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    67c4:	a7 01       	movw	r20, r14
    67c6:	96 01       	movw	r18, r12
    67c8:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    67cc:	6b 01       	movw	r12, r22
    67ce:	7c 01       	movw	r14, r24
    67d0:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    67d4:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    67d8:	07 2e       	mov	r0, r23
    67da:	00 0c       	add	r0, r0
    67dc:	88 0b       	sbc	r24, r24
    67de:	99 0b       	sbc	r25, r25
    67e0:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    67e4:	20 e0       	ldi	r18, 0x00	; 0
    67e6:	30 e0       	ldi	r19, 0x00	; 0
    67e8:	48 ec       	ldi	r20, 0xC8	; 200
    67ea:	52 e4       	ldi	r21, 0x42	; 66
    67ec:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    67f0:	4b 01       	movw	r8, r22
    67f2:	5c 01       	movw	r10, r24
    67f4:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    67f8:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    67fc:	07 2e       	mov	r0, r23
    67fe:	00 0c       	add	r0, r0
    6800:	88 0b       	sbc	r24, r24
    6802:	99 0b       	sbc	r25, r25
    6804:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6808:	9b 01       	movw	r18, r22
    680a:	ac 01       	movw	r20, r24
    680c:	c5 01       	movw	r24, r10
    680e:	b4 01       	movw	r22, r8
    6810:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6814:	9b 01       	movw	r18, r22
    6816:	ac 01       	movw	r20, r24
    6818:	c7 01       	movw	r24, r14
    681a:	b6 01       	movw	r22, r12
    681c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	30 e0       	ldi	r19, 0x00	; 0
    6824:	40 e0       	ldi	r20, 0x00	; 0
    6826:	5f e3       	ldi	r21, 0x3F	; 63
    6828:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    682c:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    6830:	9b 01       	movw	r18, r22
    6832:	ac 01       	movw	r20, r24
    6834:	2f 5f       	subi	r18, 0xFF	; 255
    6836:	3f 4f       	sbci	r19, 0xFF	; 255
    6838:	4f 4f       	sbci	r20, 0xFF	; 255
    683a:	5f 4f       	sbci	r21, 0xFF	; 255
    683c:	a0 91 fd 09 	lds	r26, 0x09FD	; 0x8009fd <McSTEP_X>
    6840:	b0 91 fe 09 	lds	r27, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    6844:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    6848:	00 91 10 12 	lds	r16, 0x1210	; 0x801210 <Null_X_Pos>
    684c:	10 91 11 12 	lds	r17, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6850:	20 91 12 12 	lds	r18, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6854:	30 91 13 12 	lds	r19, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6858:	68 01       	movw	r12, r16
    685a:	79 01       	movw	r14, r18
    685c:	c6 1a       	sub	r12, r22
    685e:	d7 0a       	sbc	r13, r23
    6860:	e8 0a       	sbc	r14, r24
    6862:	f9 0a       	sbc	r15, r25
    6864:	d7 01       	movw	r26, r14
    6866:	c6 01       	movw	r24, r12
    6868:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    686c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    6870:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    6874:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    6878:	11 98       	cbi	0x02, 1	; 2
    687a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    687e:	8f 5f       	subi	r24, 0xFF	; 255
    6880:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    6884:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    6888:	cf 91       	pop	r28
    688a:	1f 91       	pop	r17
    688c:	0f 91       	pop	r16
    688e:	ff 90       	pop	r15
    6890:	ef 90       	pop	r14
    6892:	df 90       	pop	r13
    6894:	cf 90       	pop	r12
    6896:	bf 90       	pop	r11
    6898:	af 90       	pop	r10
    689a:	9f 90       	pop	r9
    689c:	8f 90       	pop	r8
    689e:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_Z11Thread_RearRbS_.constprop.4>
    68a2:	03 96       	adiw	r24, 0x03	; 3
    68a4:	c8 17       	cp	r28, r24
    68a6:	19 06       	cpc	r1, r25
    68a8:	09 f0       	breq	.+2      	; 0x68ac <_Z16Thread_Int_Rightv+0x208>
    68aa:	64 f4       	brge	.+24     	; 0x68c4 <_Z16Thread_Int_Rightv+0x220>
    68ac:	81 e0       	ldi	r24, 0x01	; 1
    68ae:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    68b2:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    68b6:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    68ba:	61 e0       	ldi	r22, 0x01	; 1
    68bc:	6c 0f       	add	r22, r28
    68be:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <Pass_Nr>
    68c2:	e0 cf       	rjmp	.-64     	; 0x6884 <_Z16Thread_Int_Rightv+0x1e0>
    68c4:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    68c8:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    68cc:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    68d0:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    68d4:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    68d8:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    68dc:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    68e0:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    68e4:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    68e8:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    68ec:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z11Thread_RearRbS_.part.21.constprop.27>
    68f0:	13 9a       	sbi	0x02, 3	; 2
    68f2:	11 9a       	sbi	0x02, 1	; 2
    68f4:	80 e0       	ldi	r24, 0x00	; 0
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	a0 e0       	ldi	r26, 0x00	; 0
    68fa:	b0 e4       	ldi	r27, 0x40	; 64
    68fc:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    6900:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    6904:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    6908:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    690c:	80 e0       	ldi	r24, 0x00	; 0
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	a0 e0       	ldi	r26, 0x00	; 0
    6912:	b0 ec       	ldi	r27, 0xC0	; 192
    6914:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    6918:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    691c:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    6920:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    6924:	cf 91       	pop	r28
    6926:	1f 91       	pop	r17
    6928:	0f 91       	pop	r16
    692a:	ff 90       	pop	r15
    692c:	ef 90       	pop	r14
    692e:	df 90       	pop	r13
    6930:	cf 90       	pop	r12
    6932:	bf 90       	pop	r11
    6934:	af 90       	pop	r10
    6936:	9f 90       	pop	r9
    6938:	8f 90       	pop	r8
    693a:	08 95       	ret
    693c:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    6940:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    6944:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    6948:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    694c:	84 17       	cp	r24, r20
    694e:	95 07       	cpc	r25, r21
    6950:	a6 07       	cpc	r26, r22
    6952:	b7 07       	cpc	r27, r23
    6954:	39 f7       	brne	.-50     	; 0x6924 <_Z16Thread_Int_Rightv+0x280>
    6956:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    695a:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    695e:	cf 91       	pop	r28
    6960:	1f 91       	pop	r17
    6962:	0f 91       	pop	r16
    6964:	ff 90       	pop	r15
    6966:	ef 90       	pop	r14
    6968:	df 90       	pop	r13
    696a:	cf 90       	pop	r12
    696c:	bf 90       	pop	r11
    696e:	af 90       	pop	r10
    6970:	9f 90       	pop	r9
    6972:	8f 90       	pop	r8
    6974:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_Z12Thread_RightRbS_.part.19.constprop.29>
    6978:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    697c:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    6980:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    6984:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    6988:	84 17       	cp	r24, r20
    698a:	95 07       	cpc	r25, r21
    698c:	a6 07       	cpc	r26, r22
    698e:	b7 07       	cpc	r27, r23
    6990:	49 f6       	brne	.-110    	; 0x6924 <_Z16Thread_Int_Rightv+0x280>
    6992:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    6996:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    699a:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    699e:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    69a2:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    69a6:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    69aa:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    69ae:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    69b2:	84 17       	cp	r24, r20
    69b4:	95 07       	cpc	r25, r21
    69b6:	a6 07       	cpc	r26, r22
    69b8:	b7 07       	cpc	r27, r23
    69ba:	81 f5       	brne	.+96     	; 0x6a1c <_Z16Thread_Int_Rightv+0x378>
    69bc:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    69c0:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    69c4:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    69c8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    69cc:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    69d0:	09 2e       	mov	r0, r25
    69d2:	00 0c       	add	r0, r0
    69d4:	aa 0b       	sbc	r26, r26
    69d6:	bb 0b       	sbc	r27, r27
    69d8:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    69dc:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    69e0:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    69e4:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    69e8:	84 0f       	add	r24, r20
    69ea:	95 1f       	adc	r25, r21
    69ec:	a6 1f       	adc	r26, r22
    69ee:	b7 1f       	adc	r27, r23
    69f0:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    69f4:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    69f8:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    69fc:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    6a00:	13 98       	cbi	0x02, 3	; 2
    6a02:	cf 91       	pop	r28
    6a04:	1f 91       	pop	r17
    6a06:	0f 91       	pop	r16
    6a08:	ff 90       	pop	r15
    6a0a:	ef 90       	pop	r14
    6a0c:	df 90       	pop	r13
    6a0e:	cf 90       	pop	r12
    6a10:	bf 90       	pop	r11
    6a12:	af 90       	pop	r10
    6a14:	9f 90       	pop	r9
    6a16:	8f 90       	pop	r8
    6a18:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_Z12Thread_FrontRbS_.constprop.5>
    6a1c:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    6a20:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    6a24:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    6a28:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    6a2c:	84 17       	cp	r24, r20
    6a2e:	95 07       	cpc	r25, r21
    6a30:	a6 07       	cpc	r26, r22
    6a32:	b7 07       	cpc	r27, r23
    6a34:	09 f0       	breq	.+2      	; 0x6a38 <_Z16Thread_Int_Rightv+0x394>
    6a36:	76 cf       	rjmp	.-276    	; 0x6924 <_Z16Thread_Int_Rightv+0x280>
    6a38:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6a3c:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6a40:	cf 91       	pop	r28
    6a42:	1f 91       	pop	r17
    6a44:	0f 91       	pop	r16
    6a46:	ff 90       	pop	r15
    6a48:	ef 90       	pop	r14
    6a4a:	df 90       	pop	r13
    6a4c:	cf 90       	pop	r12
    6a4e:	bf 90       	pop	r11
    6a50:	af 90       	pop	r10
    6a52:	9f 90       	pop	r9
    6a54:	8f 90       	pop	r8
    6a56:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_Z11Thread_LeftRbS_.part.18.constprop.30>

00006a5a <_Z15Thread_Int_Leftv>:
    6a5a:	8f 92       	push	r8
    6a5c:	9f 92       	push	r9
    6a5e:	af 92       	push	r10
    6a60:	bf 92       	push	r11
    6a62:	cf 92       	push	r12
    6a64:	df 92       	push	r13
    6a66:	ef 92       	push	r14
    6a68:	ff 92       	push	r15
    6a6a:	0f 93       	push	r16
    6a6c:	1f 93       	push	r17
    6a6e:	cf 93       	push	r28
    6a70:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    6a74:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    6a78:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    6a7c:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    6a80:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    6a84:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    6a88:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    6a8c:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    6a90:	84 17       	cp	r24, r20
    6a92:	95 07       	cpc	r25, r21
    6a94:	a6 07       	cpc	r26, r22
    6a96:	b7 07       	cpc	r27, r23
    6a98:	09 f0       	breq	.+2      	; 0x6a9c <_Z15Thread_Int_Leftv+0x42>
    6a9a:	49 c1       	rjmp	.+658    	; 0x6d2e <_Z15Thread_Int_Leftv+0x2d4>
    6a9c:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    6aa0:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    6aa4:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    6aa8:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    6aac:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    6ab0:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    6ab4:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    6ab8:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    6abc:	84 17       	cp	r24, r20
    6abe:	95 07       	cpc	r25, r21
    6ac0:	a6 07       	cpc	r26, r22
    6ac2:	b7 07       	cpc	r27, r23
    6ac4:	71 f0       	breq	.+28     	; 0x6ae2 <_Z15Thread_Int_Leftv+0x88>
    6ac6:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    6aca:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6ace:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6ad2:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6ad6:	84 17       	cp	r24, r20
    6ad8:	95 07       	cpc	r25, r21
    6ada:	a6 07       	cpc	r26, r22
    6adc:	b7 07       	cpc	r27, r23
    6ade:	09 f0       	breq	.+2      	; 0x6ae2 <_Z15Thread_Int_Leftv+0x88>
    6ae0:	08 c1       	rjmp	.+528    	; 0x6cf2 <_Z15Thread_Int_Leftv+0x298>
    6ae2:	00 91 f5 09 	lds	r16, 0x09F5	; 0x8009f5 <Thread_Step>
    6ae6:	8a e1       	ldi	r24, 0x1A	; 26
    6ae8:	08 9f       	mul	r16, r24
    6aea:	80 01       	movw	r16, r0
    6aec:	11 24       	eor	r1, r1
    6aee:	09 53       	subi	r16, 0x39	; 57
    6af0:	1b 4f       	sbci	r17, 0xFB	; 251
    6af2:	f8 01       	movw	r30, r16
    6af4:	21 89       	ldd	r18, Z+17	; 0x11
    6af6:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <Pass_Total>
    6afa:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    6afe:	81 11       	cpse	r24, r1
    6b00:	ec c0       	rjmp	.+472    	; 0x6cda <_Z15Thread_Int_Leftv+0x280>
    6b02:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    6b06:	82 2f       	mov	r24, r18
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	2c 17       	cp	r18, r28
    6b0c:	08 f4       	brcc	.+2      	; 0x6b10 <_Z15Thread_Int_Leftv+0xb6>
    6b0e:	a4 c0       	rjmp	.+328    	; 0x6c58 <_Z15Thread_Int_Leftv+0x1fe>
    6b10:	21 e0       	ldi	r18, 0x01	; 1
    6b12:	20 93 26 12 	sts	0x1226, r18	; 0x801226 <cycle_flag>
    6b16:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6b1a:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6b1e:	01 97       	sbiw	r24, 0x01	; 1
    6b20:	bc 01       	movw	r22, r24
    6b22:	99 0f       	add	r25, r25
    6b24:	88 0b       	sbc	r24, r24
    6b26:	99 0b       	sbc	r25, r25
    6b28:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6b2c:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    6b30:	6b 01       	movw	r12, r22
    6b32:	7c 01       	movw	r14, r24
    6b34:	27 ec       	ldi	r18, 0xC7	; 199
    6b36:	35 ef       	ldi	r19, 0xF5	; 245
    6b38:	49 e1       	ldi	r20, 0x19	; 25
    6b3a:	5f e3       	ldi	r21, 0x3F	; 63
    6b3c:	f8 01       	movw	r30, r16
    6b3e:	65 85       	ldd	r22, Z+13	; 0x0d
    6b40:	76 85       	ldd	r23, Z+14	; 0x0e
    6b42:	87 85       	ldd	r24, Z+15	; 0x0f
    6b44:	90 89       	ldd	r25, Z+16	; 0x10
    6b46:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6b4a:	a7 01       	movw	r20, r14
    6b4c:	96 01       	movw	r18, r12
    6b4e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6b52:	6b 01       	movw	r12, r22
    6b54:	7c 01       	movw	r14, r24
    6b56:	2c e8       	ldi	r18, 0x8C	; 140
    6b58:	37 e3       	ldi	r19, 0x37	; 55
    6b5a:	4c e0       	ldi	r20, 0x0C	; 12
    6b5c:	5f e3       	ldi	r21, 0x3F	; 63
    6b5e:	c1 30       	cpi	r28, 0x01	; 1
    6b60:	71 f0       	breq	.+28     	; 0x6b7e <_Z15Thread_Int_Leftv+0x124>
    6b62:	8c 2f       	mov	r24, r28
    6b64:	81 50       	subi	r24, 0x01	; 1
    6b66:	99 0b       	sbc	r25, r25
    6b68:	bc 01       	movw	r22, r24
    6b6a:	07 2e       	mov	r0, r23
    6b6c:	00 0c       	add	r0, r0
    6b6e:	88 0b       	sbc	r24, r24
    6b70:	99 0b       	sbc	r25, r25
    6b72:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6b76:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    6b7a:	a7 01       	movw	r20, r14
    6b7c:	96 01       	movw	r18, r12
    6b7e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6b82:	6b 01       	movw	r12, r22
    6b84:	7c 01       	movw	r14, r24
    6b86:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    6b8a:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    6b8e:	07 2e       	mov	r0, r23
    6b90:	00 0c       	add	r0, r0
    6b92:	88 0b       	sbc	r24, r24
    6b94:	99 0b       	sbc	r25, r25
    6b96:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6b9a:	20 e0       	ldi	r18, 0x00	; 0
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
    6b9e:	48 ec       	ldi	r20, 0xC8	; 200
    6ba0:	52 e4       	ldi	r21, 0x42	; 66
    6ba2:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6ba6:	4b 01       	movw	r8, r22
    6ba8:	5c 01       	movw	r10, r24
    6baa:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    6bae:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    6bb2:	07 2e       	mov	r0, r23
    6bb4:	00 0c       	add	r0, r0
    6bb6:	88 0b       	sbc	r24, r24
    6bb8:	99 0b       	sbc	r25, r25
    6bba:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6bbe:	9b 01       	movw	r18, r22
    6bc0:	ac 01       	movw	r20, r24
    6bc2:	c5 01       	movw	r24, r10
    6bc4:	b4 01       	movw	r22, r8
    6bc6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6bca:	9b 01       	movw	r18, r22
    6bcc:	ac 01       	movw	r20, r24
    6bce:	c7 01       	movw	r24, r14
    6bd0:	b6 01       	movw	r22, r12
    6bd2:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6bd6:	20 e0       	ldi	r18, 0x00	; 0
    6bd8:	30 e0       	ldi	r19, 0x00	; 0
    6bda:	40 e0       	ldi	r20, 0x00	; 0
    6bdc:	5f e3       	ldi	r21, 0x3F	; 63
    6bde:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    6be2:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    6be6:	9b 01       	movw	r18, r22
    6be8:	ac 01       	movw	r20, r24
    6bea:	2f 5f       	subi	r18, 0xFF	; 255
    6bec:	3f 4f       	sbci	r19, 0xFF	; 255
    6bee:	4f 4f       	sbci	r20, 0xFF	; 255
    6bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    6bf2:	a0 91 fd 09 	lds	r26, 0x09FD	; 0x8009fd <McSTEP_X>
    6bf6:	b0 91 fe 09 	lds	r27, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    6bfa:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    6bfe:	00 91 10 12 	lds	r16, 0x1210	; 0x801210 <Null_X_Pos>
    6c02:	10 91 11 12 	lds	r17, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6c06:	20 91 12 12 	lds	r18, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6c0a:	30 91 13 12 	lds	r19, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6c0e:	68 01       	movw	r12, r16
    6c10:	79 01       	movw	r14, r18
    6c12:	c6 1a       	sub	r12, r22
    6c14:	d7 0a       	sbc	r13, r23
    6c16:	e8 0a       	sbc	r14, r24
    6c18:	f9 0a       	sbc	r15, r25
    6c1a:	d7 01       	movw	r26, r14
    6c1c:	c6 01       	movw	r24, r12
    6c1e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    6c22:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    6c26:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    6c2a:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    6c2e:	11 98       	cbi	0x02, 1	; 2
    6c30:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    6c34:	8f 5f       	subi	r24, 0xFF	; 255
    6c36:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    6c3a:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    6c3e:	cf 91       	pop	r28
    6c40:	1f 91       	pop	r17
    6c42:	0f 91       	pop	r16
    6c44:	ff 90       	pop	r15
    6c46:	ef 90       	pop	r14
    6c48:	df 90       	pop	r13
    6c4a:	cf 90       	pop	r12
    6c4c:	bf 90       	pop	r11
    6c4e:	af 90       	pop	r10
    6c50:	9f 90       	pop	r9
    6c52:	8f 90       	pop	r8
    6c54:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_Z11Thread_RearRbS_.constprop.4>
    6c58:	03 96       	adiw	r24, 0x03	; 3
    6c5a:	c8 17       	cp	r28, r24
    6c5c:	19 06       	cpc	r1, r25
    6c5e:	09 f0       	breq	.+2      	; 0x6c62 <_Z15Thread_Int_Leftv+0x208>
    6c60:	64 f4       	brge	.+24     	; 0x6c7a <_Z15Thread_Int_Leftv+0x220>
    6c62:	81 e0       	ldi	r24, 0x01	; 1
    6c64:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    6c68:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6c6c:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6c70:	61 e0       	ldi	r22, 0x01	; 1
    6c72:	6c 0f       	add	r22, r28
    6c74:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <Pass_Nr>
    6c78:	e0 cf       	rjmp	.-64     	; 0x6c3a <_Z15Thread_Int_Leftv+0x1e0>
    6c7a:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6c7e:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6c82:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    6c86:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6c8a:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6c8e:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6c92:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    6c96:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    6c9a:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    6c9e:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    6ca2:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_Z11Thread_RearRbS_.part.21.constprop.27>
    6ca6:	13 9a       	sbi	0x02, 3	; 2
    6ca8:	11 9a       	sbi	0x02, 1	; 2
    6caa:	80 e0       	ldi	r24, 0x00	; 0
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	a0 e0       	ldi	r26, 0x00	; 0
    6cb0:	b0 e4       	ldi	r27, 0x40	; 64
    6cb2:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    6cb6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    6cba:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    6cbe:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    6cc2:	80 e0       	ldi	r24, 0x00	; 0
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	a0 e0       	ldi	r26, 0x00	; 0
    6cc8:	b0 ec       	ldi	r27, 0xC0	; 192
    6cca:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    6cce:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    6cd2:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    6cd6:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    6cda:	cf 91       	pop	r28
    6cdc:	1f 91       	pop	r17
    6cde:	0f 91       	pop	r16
    6ce0:	ff 90       	pop	r15
    6ce2:	ef 90       	pop	r14
    6ce4:	df 90       	pop	r13
    6ce6:	cf 90       	pop	r12
    6ce8:	bf 90       	pop	r11
    6cea:	af 90       	pop	r10
    6cec:	9f 90       	pop	r9
    6cee:	8f 90       	pop	r8
    6cf0:	08 95       	ret
    6cf2:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    6cf6:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    6cfa:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    6cfe:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    6d02:	84 17       	cp	r24, r20
    6d04:	95 07       	cpc	r25, r21
    6d06:	a6 07       	cpc	r26, r22
    6d08:	b7 07       	cpc	r27, r23
    6d0a:	39 f7       	brne	.-50     	; 0x6cda <_Z15Thread_Int_Leftv+0x280>
    6d0c:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6d10:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6d14:	cf 91       	pop	r28
    6d16:	1f 91       	pop	r17
    6d18:	0f 91       	pop	r16
    6d1a:	ff 90       	pop	r15
    6d1c:	ef 90       	pop	r14
    6d1e:	df 90       	pop	r13
    6d20:	cf 90       	pop	r12
    6d22:	bf 90       	pop	r11
    6d24:	af 90       	pop	r10
    6d26:	9f 90       	pop	r9
    6d28:	8f 90       	pop	r8
    6d2a:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_Z11Thread_LeftRbS_.part.18.constprop.30>
    6d2e:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    6d32:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    6d36:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    6d3a:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    6d3e:	84 17       	cp	r24, r20
    6d40:	95 07       	cpc	r25, r21
    6d42:	a6 07       	cpc	r26, r22
    6d44:	b7 07       	cpc	r27, r23
    6d46:	49 f6       	brne	.-110    	; 0x6cda <_Z15Thread_Int_Leftv+0x280>
    6d48:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    6d4c:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    6d50:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    6d54:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    6d58:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    6d5c:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    6d60:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    6d64:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    6d68:	84 17       	cp	r24, r20
    6d6a:	95 07       	cpc	r25, r21
    6d6c:	a6 07       	cpc	r26, r22
    6d6e:	b7 07       	cpc	r27, r23
    6d70:	81 f5       	brne	.+96     	; 0x6dd2 <_Z15Thread_Int_Leftv+0x378>
    6d72:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    6d76:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6d7a:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6d7e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    6d82:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    6d86:	09 2e       	mov	r0, r25
    6d88:	00 0c       	add	r0, r0
    6d8a:	aa 0b       	sbc	r26, r26
    6d8c:	bb 0b       	sbc	r27, r27
    6d8e:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    6d92:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6d96:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6d9a:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6d9e:	84 0f       	add	r24, r20
    6da0:	95 1f       	adc	r25, r21
    6da2:	a6 1f       	adc	r26, r22
    6da4:	b7 1f       	adc	r27, r23
    6da6:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    6daa:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    6dae:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    6db2:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    6db6:	13 98       	cbi	0x02, 3	; 2
    6db8:	cf 91       	pop	r28
    6dba:	1f 91       	pop	r17
    6dbc:	0f 91       	pop	r16
    6dbe:	ff 90       	pop	r15
    6dc0:	ef 90       	pop	r14
    6dc2:	df 90       	pop	r13
    6dc4:	cf 90       	pop	r12
    6dc6:	bf 90       	pop	r11
    6dc8:	af 90       	pop	r10
    6dca:	9f 90       	pop	r9
    6dcc:	8f 90       	pop	r8
    6dce:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_Z12Thread_FrontRbS_.constprop.5>
    6dd2:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    6dd6:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    6dda:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    6dde:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    6de2:	84 17       	cp	r24, r20
    6de4:	95 07       	cpc	r25, r21
    6de6:	a6 07       	cpc	r26, r22
    6de8:	b7 07       	cpc	r27, r23
    6dea:	09 f0       	breq	.+2      	; 0x6dee <_Z15Thread_Int_Leftv+0x394>
    6dec:	76 cf       	rjmp	.-276    	; 0x6cda <_Z15Thread_Int_Leftv+0x280>
    6dee:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6df2:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6df6:	cf 91       	pop	r28
    6df8:	1f 91       	pop	r17
    6dfa:	0f 91       	pop	r16
    6dfc:	ff 90       	pop	r15
    6dfe:	ef 90       	pop	r14
    6e00:	df 90       	pop	r13
    6e02:	cf 90       	pop	r12
    6e04:	bf 90       	pop	r11
    6e06:	af 90       	pop	r10
    6e08:	9f 90       	pop	r9
    6e0a:	8f 90       	pop	r8
    6e0c:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_Z12Thread_RightRbS_.part.19.constprop.29>

00006e10 <_Z16Thread_Ext_Rightv>:
    6e10:	8f 92       	push	r8
    6e12:	9f 92       	push	r9
    6e14:	af 92       	push	r10
    6e16:	bf 92       	push	r11
    6e18:	cf 92       	push	r12
    6e1a:	df 92       	push	r13
    6e1c:	ef 92       	push	r14
    6e1e:	ff 92       	push	r15
    6e20:	0f 93       	push	r16
    6e22:	1f 93       	push	r17
    6e24:	cf 93       	push	r28
    6e26:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    6e2a:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    6e2e:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    6e32:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    6e36:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    6e3a:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    6e3e:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    6e42:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    6e46:	84 17       	cp	r24, r20
    6e48:	95 07       	cpc	r25, r21
    6e4a:	a6 07       	cpc	r26, r22
    6e4c:	b7 07       	cpc	r27, r23
    6e4e:	09 f0       	breq	.+2      	; 0x6e52 <_Z16Thread_Ext_Rightv+0x42>
    6e50:	45 c1       	rjmp	.+650    	; 0x70dc <_Z16Thread_Ext_Rightv+0x2cc>
    6e52:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    6e56:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    6e5a:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    6e5e:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    6e62:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    6e66:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    6e6a:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    6e6e:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    6e72:	84 17       	cp	r24, r20
    6e74:	95 07       	cpc	r25, r21
    6e76:	a6 07       	cpc	r26, r22
    6e78:	b7 07       	cpc	r27, r23
    6e7a:	71 f0       	breq	.+28     	; 0x6e98 <_Z16Thread_Ext_Rightv+0x88>
    6e7c:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    6e80:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6e84:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6e88:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6e8c:	84 17       	cp	r24, r20
    6e8e:	95 07       	cpc	r25, r21
    6e90:	a6 07       	cpc	r26, r22
    6e92:	b7 07       	cpc	r27, r23
    6e94:	09 f0       	breq	.+2      	; 0x6e98 <_Z16Thread_Ext_Rightv+0x88>
    6e96:	04 c1       	rjmp	.+520    	; 0x70a0 <_Z16Thread_Ext_Rightv+0x290>
    6e98:	00 91 f5 09 	lds	r16, 0x09F5	; 0x8009f5 <Thread_Step>
    6e9c:	8a e1       	ldi	r24, 0x1A	; 26
    6e9e:	08 9f       	mul	r16, r24
    6ea0:	80 01       	movw	r16, r0
    6ea2:	11 24       	eor	r1, r1
    6ea4:	09 53       	subi	r16, 0x39	; 57
    6ea6:	1b 4f       	sbci	r17, 0xFB	; 251
    6ea8:	f8 01       	movw	r30, r16
    6eaa:	21 89       	ldd	r18, Z+17	; 0x11
    6eac:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <Pass_Total>
    6eb0:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    6eb4:	81 11       	cpse	r24, r1
    6eb6:	e8 c0       	rjmp	.+464    	; 0x7088 <_Z16Thread_Ext_Rightv+0x278>
    6eb8:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    6ebc:	82 2f       	mov	r24, r18
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	2c 17       	cp	r18, r28
    6ec2:	08 f4       	brcc	.+2      	; 0x6ec6 <_Z16Thread_Ext_Rightv+0xb6>
    6ec4:	a0 c0       	rjmp	.+320    	; 0x7006 <_Z16Thread_Ext_Rightv+0x1f6>
    6ec6:	21 e0       	ldi	r18, 0x01	; 1
    6ec8:	20 93 26 12 	sts	0x1226, r18	; 0x801226 <cycle_flag>
    6ecc:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    6ed0:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    6ed4:	01 97       	sbiw	r24, 0x01	; 1
    6ed6:	bc 01       	movw	r22, r24
    6ed8:	99 0f       	add	r25, r25
    6eda:	88 0b       	sbc	r24, r24
    6edc:	99 0b       	sbc	r25, r25
    6ede:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6ee2:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    6ee6:	6b 01       	movw	r12, r22
    6ee8:	7c 01       	movw	r14, r24
    6eea:	2d e0       	ldi	r18, 0x0D	; 13
    6eec:	3a e0       	ldi	r19, 0x0A	; 10
    6eee:	4d e1       	ldi	r20, 0x1D	; 29
    6ef0:	5f e3       	ldi	r21, 0x3F	; 63
    6ef2:	f8 01       	movw	r30, r16
    6ef4:	65 85       	ldd	r22, Z+13	; 0x0d
    6ef6:	76 85       	ldd	r23, Z+14	; 0x0e
    6ef8:	87 85       	ldd	r24, Z+15	; 0x0f
    6efa:	90 89       	ldd	r25, Z+16	; 0x10
    6efc:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6f00:	a7 01       	movw	r20, r14
    6f02:	96 01       	movw	r18, r12
    6f04:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6f08:	6b 01       	movw	r12, r22
    6f0a:	7c 01       	movw	r14, r24
    6f0c:	2c e8       	ldi	r18, 0x8C	; 140
    6f0e:	37 e3       	ldi	r19, 0x37	; 55
    6f10:	4c e0       	ldi	r20, 0x0C	; 12
    6f12:	5f e3       	ldi	r21, 0x3F	; 63
    6f14:	c1 30       	cpi	r28, 0x01	; 1
    6f16:	71 f0       	breq	.+28     	; 0x6f34 <_Z16Thread_Ext_Rightv+0x124>
    6f18:	8c 2f       	mov	r24, r28
    6f1a:	81 50       	subi	r24, 0x01	; 1
    6f1c:	99 0b       	sbc	r25, r25
    6f1e:	bc 01       	movw	r22, r24
    6f20:	07 2e       	mov	r0, r23
    6f22:	00 0c       	add	r0, r0
    6f24:	88 0b       	sbc	r24, r24
    6f26:	99 0b       	sbc	r25, r25
    6f28:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6f2c:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    6f30:	a7 01       	movw	r20, r14
    6f32:	96 01       	movw	r18, r12
    6f34:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    6f38:	6b 01       	movw	r12, r22
    6f3a:	7c 01       	movw	r14, r24
    6f3c:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    6f40:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    6f44:	07 2e       	mov	r0, r23
    6f46:	00 0c       	add	r0, r0
    6f48:	88 0b       	sbc	r24, r24
    6f4a:	99 0b       	sbc	r25, r25
    6f4c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6f50:	20 e0       	ldi	r18, 0x00	; 0
    6f52:	30 e0       	ldi	r19, 0x00	; 0
    6f54:	48 ec       	ldi	r20, 0xC8	; 200
    6f56:	52 e4       	ldi	r21, 0x42	; 66
    6f58:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6f5c:	4b 01       	movw	r8, r22
    6f5e:	5c 01       	movw	r10, r24
    6f60:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    6f64:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    6f68:	07 2e       	mov	r0, r23
    6f6a:	00 0c       	add	r0, r0
    6f6c:	88 0b       	sbc	r24, r24
    6f6e:	99 0b       	sbc	r25, r25
    6f70:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    6f74:	9b 01       	movw	r18, r22
    6f76:	ac 01       	movw	r20, r24
    6f78:	c5 01       	movw	r24, r10
    6f7a:	b4 01       	movw	r22, r8
    6f7c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6f80:	9b 01       	movw	r18, r22
    6f82:	ac 01       	movw	r20, r24
    6f84:	c7 01       	movw	r24, r14
    6f86:	b6 01       	movw	r22, r12
    6f88:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    6f8c:	20 e0       	ldi	r18, 0x00	; 0
    6f8e:	30 e0       	ldi	r19, 0x00	; 0
    6f90:	40 e0       	ldi	r20, 0x00	; 0
    6f92:	5f e3       	ldi	r21, 0x3F	; 63
    6f94:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    6f98:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    6f9c:	9b 01       	movw	r18, r22
    6f9e:	ac 01       	movw	r20, r24
    6fa0:	2f 5f       	subi	r18, 0xFF	; 255
    6fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa4:	4f 4f       	sbci	r20, 0xFF	; 255
    6fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa8:	a0 91 fd 09 	lds	r26, 0x09FD	; 0x8009fd <McSTEP_X>
    6fac:	b0 91 fe 09 	lds	r27, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    6fb0:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    6fb4:	00 91 10 12 	lds	r16, 0x1210	; 0x801210 <Null_X_Pos>
    6fb8:	10 91 11 12 	lds	r17, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    6fbc:	20 91 12 12 	lds	r18, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    6fc0:	30 91 13 12 	lds	r19, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    6fc4:	06 0f       	add	r16, r22
    6fc6:	17 1f       	adc	r17, r23
    6fc8:	28 1f       	adc	r18, r24
    6fca:	39 1f       	adc	r19, r25
    6fcc:	00 93 bf 04 	sts	0x04BF, r16	; 0x8004bf <Limit_Pos_Front>
    6fd0:	10 93 c0 04 	sts	0x04C0, r17	; 0x8004c0 <Limit_Pos_Front+0x1>
    6fd4:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <Limit_Pos_Front+0x2>
    6fd8:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <Limit_Pos_Front+0x3>
    6fdc:	13 98       	cbi	0x02, 3	; 2
    6fde:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    6fe2:	8f 5f       	subi	r24, 0xFF	; 255
    6fe4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    6fe8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    6fec:	cf 91       	pop	r28
    6fee:	1f 91       	pop	r17
    6ff0:	0f 91       	pop	r16
    6ff2:	ff 90       	pop	r15
    6ff4:	ef 90       	pop	r14
    6ff6:	df 90       	pop	r13
    6ff8:	cf 90       	pop	r12
    6ffa:	bf 90       	pop	r11
    6ffc:	af 90       	pop	r10
    6ffe:	9f 90       	pop	r9
    7000:	8f 90       	pop	r8
    7002:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_Z12Thread_FrontRbS_.constprop.5>
    7006:	03 96       	adiw	r24, 0x03	; 3
    7008:	c8 17       	cp	r28, r24
    700a:	19 06       	cpc	r1, r25
    700c:	09 f0       	breq	.+2      	; 0x7010 <_Z16Thread_Ext_Rightv+0x200>
    700e:	64 f4       	brge	.+24     	; 0x7028 <_Z16Thread_Ext_Rightv+0x218>
    7010:	81 e0       	ldi	r24, 0x01	; 1
    7012:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    7016:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    701a:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    701e:	61 e0       	ldi	r22, 0x01	; 1
    7020:	6c 0f       	add	r22, r28
    7022:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <Pass_Nr>
    7026:	e0 cf       	rjmp	.-64     	; 0x6fe8 <_Z16Thread_Ext_Rightv+0x1d8>
    7028:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    702c:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    7030:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    7034:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    7038:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    703c:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    7040:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    7044:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    7048:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    704c:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    7050:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_Z12Thread_FrontRbS_.part.20.constprop.28>
    7054:	13 9a       	sbi	0x02, 3	; 2
    7056:	11 9a       	sbi	0x02, 1	; 2
    7058:	80 e0       	ldi	r24, 0x00	; 0
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	a0 e0       	ldi	r26, 0x00	; 0
    705e:	b0 e4       	ldi	r27, 0x40	; 64
    7060:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    7064:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    7068:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    706c:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    7070:	80 e0       	ldi	r24, 0x00	; 0
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	a0 e0       	ldi	r26, 0x00	; 0
    7076:	b0 ec       	ldi	r27, 0xC0	; 192
    7078:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    707c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    7080:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    7084:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    7088:	cf 91       	pop	r28
    708a:	1f 91       	pop	r17
    708c:	0f 91       	pop	r16
    708e:	ff 90       	pop	r15
    7090:	ef 90       	pop	r14
    7092:	df 90       	pop	r13
    7094:	cf 90       	pop	r12
    7096:	bf 90       	pop	r11
    7098:	af 90       	pop	r10
    709a:	9f 90       	pop	r9
    709c:	8f 90       	pop	r8
    709e:	08 95       	ret
    70a0:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    70a4:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    70a8:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    70ac:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    70b0:	84 17       	cp	r24, r20
    70b2:	95 07       	cpc	r25, r21
    70b4:	a6 07       	cpc	r26, r22
    70b6:	b7 07       	cpc	r27, r23
    70b8:	39 f7       	brne	.-50     	; 0x7088 <_Z16Thread_Ext_Rightv+0x278>
    70ba:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    70be:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    70c2:	cf 91       	pop	r28
    70c4:	1f 91       	pop	r17
    70c6:	0f 91       	pop	r16
    70c8:	ff 90       	pop	r15
    70ca:	ef 90       	pop	r14
    70cc:	df 90       	pop	r13
    70ce:	cf 90       	pop	r12
    70d0:	bf 90       	pop	r11
    70d2:	af 90       	pop	r10
    70d4:	9f 90       	pop	r9
    70d6:	8f 90       	pop	r8
    70d8:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_Z12Thread_RightRbS_.part.19.constprop.29>
    70dc:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    70e0:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    70e4:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    70e8:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    70ec:	84 17       	cp	r24, r20
    70ee:	95 07       	cpc	r25, r21
    70f0:	a6 07       	cpc	r26, r22
    70f2:	b7 07       	cpc	r27, r23
    70f4:	49 f6       	brne	.-110    	; 0x7088 <_Z16Thread_Ext_Rightv+0x278>
    70f6:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    70fa:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    70fe:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    7102:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    7106:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    710a:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    710e:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    7112:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    7116:	84 17       	cp	r24, r20
    7118:	95 07       	cpc	r25, r21
    711a:	a6 07       	cpc	r26, r22
    711c:	b7 07       	cpc	r27, r23
    711e:	81 f5       	brne	.+96     	; 0x7180 <_Z16Thread_Ext_Rightv+0x370>
    7120:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    7124:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    7128:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    712c:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    7130:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    7134:	05 2e       	mov	r0, r21
    7136:	00 0c       	add	r0, r0
    7138:	66 0b       	sbc	r22, r22
    713a:	77 0b       	sbc	r23, r23
    713c:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    7140:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    7144:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    7148:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    714c:	84 1b       	sub	r24, r20
    714e:	95 0b       	sbc	r25, r21
    7150:	a6 0b       	sbc	r26, r22
    7152:	b7 0b       	sbc	r27, r23
    7154:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    7158:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    715c:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    7160:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    7164:	11 98       	cbi	0x02, 1	; 2
    7166:	cf 91       	pop	r28
    7168:	1f 91       	pop	r17
    716a:	0f 91       	pop	r16
    716c:	ff 90       	pop	r15
    716e:	ef 90       	pop	r14
    7170:	df 90       	pop	r13
    7172:	cf 90       	pop	r12
    7174:	bf 90       	pop	r11
    7176:	af 90       	pop	r10
    7178:	9f 90       	pop	r9
    717a:	8f 90       	pop	r8
    717c:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_Z11Thread_RearRbS_.constprop.4>
    7180:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    7184:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    7188:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    718c:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    7190:	84 17       	cp	r24, r20
    7192:	95 07       	cpc	r25, r21
    7194:	a6 07       	cpc	r26, r22
    7196:	b7 07       	cpc	r27, r23
    7198:	09 f0       	breq	.+2      	; 0x719c <_Z16Thread_Ext_Rightv+0x38c>
    719a:	76 cf       	rjmp	.-276    	; 0x7088 <_Z16Thread_Ext_Rightv+0x278>
    719c:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    71a0:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    71a4:	cf 91       	pop	r28
    71a6:	1f 91       	pop	r17
    71a8:	0f 91       	pop	r16
    71aa:	ff 90       	pop	r15
    71ac:	ef 90       	pop	r14
    71ae:	df 90       	pop	r13
    71b0:	cf 90       	pop	r12
    71b2:	bf 90       	pop	r11
    71b4:	af 90       	pop	r10
    71b6:	9f 90       	pop	r9
    71b8:	8f 90       	pop	r8
    71ba:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_Z11Thread_LeftRbS_.part.18.constprop.30>

000071be <_Z15Thread_Ext_Leftv>:
    71be:	8f 92       	push	r8
    71c0:	9f 92       	push	r9
    71c2:	af 92       	push	r10
    71c4:	bf 92       	push	r11
    71c6:	cf 92       	push	r12
    71c8:	df 92       	push	r13
    71ca:	ef 92       	push	r14
    71cc:	ff 92       	push	r15
    71ce:	0f 93       	push	r16
    71d0:	1f 93       	push	r17
    71d2:	cf 93       	push	r28
    71d4:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    71d8:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    71dc:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    71e0:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    71e4:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    71e8:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    71ec:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    71f0:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    71f4:	84 17       	cp	r24, r20
    71f6:	95 07       	cpc	r25, r21
    71f8:	a6 07       	cpc	r26, r22
    71fa:	b7 07       	cpc	r27, r23
    71fc:	09 f0       	breq	.+2      	; 0x7200 <_Z15Thread_Ext_Leftv+0x42>
    71fe:	45 c1       	rjmp	.+650    	; 0x748a <_Z15Thread_Ext_Leftv+0x2cc>
    7200:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    7204:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    7208:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    720c:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    7210:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    7214:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    7218:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    721c:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    7220:	84 17       	cp	r24, r20
    7222:	95 07       	cpc	r25, r21
    7224:	a6 07       	cpc	r26, r22
    7226:	b7 07       	cpc	r27, r23
    7228:	71 f0       	breq	.+28     	; 0x7246 <_Z15Thread_Ext_Leftv+0x88>
    722a:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    722e:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    7232:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    7236:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    723a:	84 17       	cp	r24, r20
    723c:	95 07       	cpc	r25, r21
    723e:	a6 07       	cpc	r26, r22
    7240:	b7 07       	cpc	r27, r23
    7242:	09 f0       	breq	.+2      	; 0x7246 <_Z15Thread_Ext_Leftv+0x88>
    7244:	04 c1       	rjmp	.+520    	; 0x744e <_Z15Thread_Ext_Leftv+0x290>
    7246:	00 91 f5 09 	lds	r16, 0x09F5	; 0x8009f5 <Thread_Step>
    724a:	8a e1       	ldi	r24, 0x1A	; 26
    724c:	08 9f       	mul	r16, r24
    724e:	80 01       	movw	r16, r0
    7250:	11 24       	eor	r1, r1
    7252:	09 53       	subi	r16, 0x39	; 57
    7254:	1b 4f       	sbci	r17, 0xFB	; 251
    7256:	f8 01       	movw	r30, r16
    7258:	21 89       	ldd	r18, Z+17	; 0x11
    725a:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <Pass_Total>
    725e:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    7262:	81 11       	cpse	r24, r1
    7264:	e8 c0       	rjmp	.+464    	; 0x7436 <_Z15Thread_Ext_Leftv+0x278>
    7266:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    726a:	82 2f       	mov	r24, r18
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	2c 17       	cp	r18, r28
    7270:	08 f4       	brcc	.+2      	; 0x7274 <_Z15Thread_Ext_Leftv+0xb6>
    7272:	a0 c0       	rjmp	.+320    	; 0x73b4 <_Z15Thread_Ext_Leftv+0x1f6>
    7274:	21 e0       	ldi	r18, 0x01	; 1
    7276:	20 93 26 12 	sts	0x1226, r18	; 0x801226 <cycle_flag>
    727a:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    727e:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    7282:	01 97       	sbiw	r24, 0x01	; 1
    7284:	bc 01       	movw	r22, r24
    7286:	99 0f       	add	r25, r25
    7288:	88 0b       	sbc	r24, r24
    728a:	99 0b       	sbc	r25, r25
    728c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    7290:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    7294:	6b 01       	movw	r12, r22
    7296:	7c 01       	movw	r14, r24
    7298:	2d e0       	ldi	r18, 0x0D	; 13
    729a:	3a e0       	ldi	r19, 0x0A	; 10
    729c:	4d e1       	ldi	r20, 0x1D	; 29
    729e:	5f e3       	ldi	r21, 0x3F	; 63
    72a0:	f8 01       	movw	r30, r16
    72a2:	65 85       	ldd	r22, Z+13	; 0x0d
    72a4:	76 85       	ldd	r23, Z+14	; 0x0e
    72a6:	87 85       	ldd	r24, Z+15	; 0x0f
    72a8:	90 89       	ldd	r25, Z+16	; 0x10
    72aa:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    72ae:	a7 01       	movw	r20, r14
    72b0:	96 01       	movw	r18, r12
    72b2:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    72b6:	6b 01       	movw	r12, r22
    72b8:	7c 01       	movw	r14, r24
    72ba:	2c e8       	ldi	r18, 0x8C	; 140
    72bc:	37 e3       	ldi	r19, 0x37	; 55
    72be:	4c e0       	ldi	r20, 0x0C	; 12
    72c0:	5f e3       	ldi	r21, 0x3F	; 63
    72c2:	c1 30       	cpi	r28, 0x01	; 1
    72c4:	71 f0       	breq	.+28     	; 0x72e2 <_Z15Thread_Ext_Leftv+0x124>
    72c6:	8c 2f       	mov	r24, r28
    72c8:	81 50       	subi	r24, 0x01	; 1
    72ca:	99 0b       	sbc	r25, r25
    72cc:	bc 01       	movw	r22, r24
    72ce:	07 2e       	mov	r0, r23
    72d0:	00 0c       	add	r0, r0
    72d2:	88 0b       	sbc	r24, r24
    72d4:	99 0b       	sbc	r25, r25
    72d6:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    72da:	0e 94 a8 97 	call	0x12f50	; 0x12f50 <sqrt>
    72de:	a7 01       	movw	r20, r14
    72e0:	96 01       	movw	r18, r12
    72e2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    72e6:	6b 01       	movw	r12, r22
    72e8:	7c 01       	movw	r14, r24
    72ea:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    72ee:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    72f2:	07 2e       	mov	r0, r23
    72f4:	00 0c       	add	r0, r0
    72f6:	88 0b       	sbc	r24, r24
    72f8:	99 0b       	sbc	r25, r25
    72fa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    72fe:	20 e0       	ldi	r18, 0x00	; 0
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	48 ec       	ldi	r20, 0xC8	; 200
    7304:	52 e4       	ldi	r21, 0x42	; 66
    7306:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    730a:	4b 01       	movw	r8, r22
    730c:	5c 01       	movw	r10, r24
    730e:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    7312:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    7316:	07 2e       	mov	r0, r23
    7318:	00 0c       	add	r0, r0
    731a:	88 0b       	sbc	r24, r24
    731c:	99 0b       	sbc	r25, r25
    731e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    7322:	9b 01       	movw	r18, r22
    7324:	ac 01       	movw	r20, r24
    7326:	c5 01       	movw	r24, r10
    7328:	b4 01       	movw	r22, r8
    732a:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    732e:	9b 01       	movw	r18, r22
    7330:	ac 01       	movw	r20, r24
    7332:	c7 01       	movw	r24, r14
    7334:	b6 01       	movw	r22, r12
    7336:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    733a:	20 e0       	ldi	r18, 0x00	; 0
    733c:	30 e0       	ldi	r19, 0x00	; 0
    733e:	40 e0       	ldi	r20, 0x00	; 0
    7340:	5f e3       	ldi	r21, 0x3F	; 63
    7342:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    7346:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    734a:	9b 01       	movw	r18, r22
    734c:	ac 01       	movw	r20, r24
    734e:	2f 5f       	subi	r18, 0xFF	; 255
    7350:	3f 4f       	sbci	r19, 0xFF	; 255
    7352:	4f 4f       	sbci	r20, 0xFF	; 255
    7354:	5f 4f       	sbci	r21, 0xFF	; 255
    7356:	a0 91 fd 09 	lds	r26, 0x09FD	; 0x8009fd <McSTEP_X>
    735a:	b0 91 fe 09 	lds	r27, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    735e:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    7362:	00 91 10 12 	lds	r16, 0x1210	; 0x801210 <Null_X_Pos>
    7366:	10 91 11 12 	lds	r17, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    736a:	20 91 12 12 	lds	r18, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    736e:	30 91 13 12 	lds	r19, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    7372:	06 0f       	add	r16, r22
    7374:	17 1f       	adc	r17, r23
    7376:	28 1f       	adc	r18, r24
    7378:	39 1f       	adc	r19, r25
    737a:	00 93 bf 04 	sts	0x04BF, r16	; 0x8004bf <Limit_Pos_Front>
    737e:	10 93 c0 04 	sts	0x04C0, r17	; 0x8004c0 <Limit_Pos_Front+0x1>
    7382:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <Limit_Pos_Front+0x2>
    7386:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <Limit_Pos_Front+0x3>
    738a:	13 98       	cbi	0x02, 3	; 2
    738c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    7390:	8f 5f       	subi	r24, 0xFF	; 255
    7392:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    7396:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    739a:	cf 91       	pop	r28
    739c:	1f 91       	pop	r17
    739e:	0f 91       	pop	r16
    73a0:	ff 90       	pop	r15
    73a2:	ef 90       	pop	r14
    73a4:	df 90       	pop	r13
    73a6:	cf 90       	pop	r12
    73a8:	bf 90       	pop	r11
    73aa:	af 90       	pop	r10
    73ac:	9f 90       	pop	r9
    73ae:	8f 90       	pop	r8
    73b0:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_Z12Thread_FrontRbS_.constprop.5>
    73b4:	03 96       	adiw	r24, 0x03	; 3
    73b6:	c8 17       	cp	r28, r24
    73b8:	19 06       	cpc	r1, r25
    73ba:	09 f0       	breq	.+2      	; 0x73be <_Z15Thread_Ext_Leftv+0x200>
    73bc:	64 f4       	brge	.+24     	; 0x73d6 <_Z15Thread_Ext_Leftv+0x218>
    73be:	81 e0       	ldi	r24, 0x01	; 1
    73c0:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    73c4:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    73c8:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    73cc:	61 e0       	ldi	r22, 0x01	; 1
    73ce:	6c 0f       	add	r22, r28
    73d0:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <Pass_Nr>
    73d4:	e0 cf       	rjmp	.-64     	; 0x7396 <_Z15Thread_Ext_Leftv+0x1d8>
    73d6:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    73da:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    73de:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    73e2:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    73e6:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    73ea:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    73ee:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    73f2:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    73f6:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    73fa:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    73fe:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_Z12Thread_FrontRbS_.part.20.constprop.28>
    7402:	13 9a       	sbi	0x02, 3	; 2
    7404:	11 9a       	sbi	0x02, 1	; 2
    7406:	80 e0       	ldi	r24, 0x00	; 0
    7408:	90 e0       	ldi	r25, 0x00	; 0
    740a:	a0 e0       	ldi	r26, 0x00	; 0
    740c:	b0 e4       	ldi	r27, 0x40	; 64
    740e:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    7412:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    7416:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    741a:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    741e:	80 e0       	ldi	r24, 0x00	; 0
    7420:	90 e0       	ldi	r25, 0x00	; 0
    7422:	a0 e0       	ldi	r26, 0x00	; 0
    7424:	b0 ec       	ldi	r27, 0xC0	; 192
    7426:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    742a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    742e:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    7432:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    7436:	cf 91       	pop	r28
    7438:	1f 91       	pop	r17
    743a:	0f 91       	pop	r16
    743c:	ff 90       	pop	r15
    743e:	ef 90       	pop	r14
    7440:	df 90       	pop	r13
    7442:	cf 90       	pop	r12
    7444:	bf 90       	pop	r11
    7446:	af 90       	pop	r10
    7448:	9f 90       	pop	r9
    744a:	8f 90       	pop	r8
    744c:	08 95       	ret
    744e:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    7452:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    7456:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    745a:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    745e:	84 17       	cp	r24, r20
    7460:	95 07       	cpc	r25, r21
    7462:	a6 07       	cpc	r26, r22
    7464:	b7 07       	cpc	r27, r23
    7466:	39 f7       	brne	.-50     	; 0x7436 <_Z15Thread_Ext_Leftv+0x278>
    7468:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    746c:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    7470:	cf 91       	pop	r28
    7472:	1f 91       	pop	r17
    7474:	0f 91       	pop	r16
    7476:	ff 90       	pop	r15
    7478:	ef 90       	pop	r14
    747a:	df 90       	pop	r13
    747c:	cf 90       	pop	r12
    747e:	bf 90       	pop	r11
    7480:	af 90       	pop	r10
    7482:	9f 90       	pop	r9
    7484:	8f 90       	pop	r8
    7486:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_Z11Thread_LeftRbS_.part.18.constprop.30>
    748a:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    748e:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    7492:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    7496:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    749a:	84 17       	cp	r24, r20
    749c:	95 07       	cpc	r25, r21
    749e:	a6 07       	cpc	r26, r22
    74a0:	b7 07       	cpc	r27, r23
    74a2:	49 f6       	brne	.-110    	; 0x7436 <_Z15Thread_Ext_Leftv+0x278>
    74a4:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    74a8:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    74ac:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    74b0:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    74b4:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    74b8:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    74bc:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    74c0:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    74c4:	84 17       	cp	r24, r20
    74c6:	95 07       	cpc	r25, r21
    74c8:	a6 07       	cpc	r26, r22
    74ca:	b7 07       	cpc	r27, r23
    74cc:	81 f5       	brne	.+96     	; 0x752e <_Z15Thread_Ext_Leftv+0x370>
    74ce:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    74d2:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    74d6:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    74da:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    74de:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    74e2:	05 2e       	mov	r0, r21
    74e4:	00 0c       	add	r0, r0
    74e6:	66 0b       	sbc	r22, r22
    74e8:	77 0b       	sbc	r23, r23
    74ea:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    74ee:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    74f2:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    74f6:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    74fa:	84 1b       	sub	r24, r20
    74fc:	95 0b       	sbc	r25, r21
    74fe:	a6 0b       	sbc	r26, r22
    7500:	b7 0b       	sbc	r27, r23
    7502:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    7506:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    750a:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    750e:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    7512:	11 98       	cbi	0x02, 1	; 2
    7514:	cf 91       	pop	r28
    7516:	1f 91       	pop	r17
    7518:	0f 91       	pop	r16
    751a:	ff 90       	pop	r15
    751c:	ef 90       	pop	r14
    751e:	df 90       	pop	r13
    7520:	cf 90       	pop	r12
    7522:	bf 90       	pop	r11
    7524:	af 90       	pop	r10
    7526:	9f 90       	pop	r9
    7528:	8f 90       	pop	r8
    752a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_Z11Thread_RearRbS_.constprop.4>
    752e:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    7532:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    7536:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    753a:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    753e:	84 17       	cp	r24, r20
    7540:	95 07       	cpc	r25, r21
    7542:	a6 07       	cpc	r26, r22
    7544:	b7 07       	cpc	r27, r23
    7546:	09 f0       	breq	.+2      	; 0x754a <_Z15Thread_Ext_Leftv+0x38c>
    7548:	76 cf       	rjmp	.-276    	; 0x7436 <_Z15Thread_Ext_Leftv+0x278>
    754a:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
    754e:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
    7552:	cf 91       	pop	r28
    7554:	1f 91       	pop	r17
    7556:	0f 91       	pop	r16
    7558:	ff 90       	pop	r15
    755a:	ef 90       	pop	r14
    755c:	df 90       	pop	r13
    755e:	cf 90       	pop	r12
    7560:	bf 90       	pop	r11
    7562:	af 90       	pop	r10
    7564:	9f 90       	pop	r9
    7566:	8f 90       	pop	r8
    7568:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_Z12Thread_RightRbS_.part.19.constprop.29>

0000756c <_Z5Printv>:
    756c:	4f 92       	push	r4
    756e:	5f 92       	push	r5
    7570:	6f 92       	push	r6
    7572:	7f 92       	push	r7
    7574:	8f 92       	push	r8
    7576:	9f 92       	push	r9
    7578:	af 92       	push	r10
    757a:	bf 92       	push	r11
    757c:	cf 92       	push	r12
    757e:	df 92       	push	r13
    7580:	ef 92       	push	r14
    7582:	ff 92       	push	r15
    7584:	0f 93       	push	r16
    7586:	1f 93       	push	r17
    7588:	cf 93       	push	r28
    758a:	df 93       	push	r29
    758c:	cd b7       	in	r28, 0x3d	; 61
    758e:	de b7       	in	r29, 0x3e	; 62
    7590:	a2 97       	sbiw	r28, 0x22	; 34
    7592:	0f b6       	in	r0, 0x3f	; 63
    7594:	f8 94       	cli
    7596:	de bf       	out	0x3e, r29	; 62
    7598:	0f be       	out	0x3f, r0	; 63
    759a:	cd bf       	out	0x3d, r28	; 61
    759c:	60 e0       	ldi	r22, 0x00	; 0
    759e:	80 e0       	ldi	r24, 0x00	; 0
    75a0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    75a4:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
    75a8:	88 23       	and	r24, r24
    75aa:	69 f0       	breq	.+26     	; 0x75c6 <_Z5Printv+0x5a>
    75ac:	8c ee       	ldi	r24, 0xEC	; 236
    75ae:	9b e0       	ldi	r25, 0x0B	; 11
    75b0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    75b4:	61 e0       	ldi	r22, 0x01	; 1
    75b6:	80 e0       	ldi	r24, 0x00	; 0
    75b8:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    75bc:	85 ed       	ldi	r24, 0xD5	; 213
    75be:	9b e0       	ldi	r25, 0x0B	; 11
    75c0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    75c4:	2b c2       	rjmp	.+1110   	; 0x7a1c <_Z5Printv+0x4b0>
    75c6:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
    75ca:	88 23       	and	r24, r24
    75cc:	59 f0       	breq	.+22     	; 0x75e4 <_Z5Printv+0x78>
    75ce:	81 ec       	ldi	r24, 0xC1	; 193
    75d0:	9b e0       	ldi	r25, 0x0B	; 11
    75d2:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    75d6:	61 e0       	ldi	r22, 0x01	; 1
    75d8:	80 e0       	ldi	r24, 0x00	; 0
    75da:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    75de:	8a ea       	ldi	r24, 0xAA	; 170
    75e0:	9b e0       	ldi	r25, 0x0B	; 11
    75e2:	ee cf       	rjmp	.-36     	; 0x75c0 <_Z5Printv+0x54>
    75e4:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <err_3_flag>
    75e8:	88 23       	and	r24, r24
    75ea:	59 f0       	breq	.+22     	; 0x7602 <_Z5Printv+0x96>
    75ec:	82 e9       	ldi	r24, 0x92	; 146
    75ee:	9b e0       	ldi	r25, 0x0B	; 11
    75f0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    75f4:	61 e0       	ldi	r22, 0x01	; 1
    75f6:	80 e0       	ldi	r24, 0x00	; 0
    75f8:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    75fc:	8f e7       	ldi	r24, 0x7F	; 127
    75fe:	9b e0       	ldi	r25, 0x0B	; 11
    7600:	df cf       	rjmp	.-66     	; 0x75c0 <_Z5Printv+0x54>
    7602:	80 91 dc 11 	lds	r24, 0x11DC	; 0x8011dc <Complete_flag>
    7606:	88 23       	and	r24, r24
    7608:	69 f0       	breq	.+26     	; 0x7624 <_Z5Printv+0xb8>
    760a:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37>
    760e:	8a e6       	ldi	r24, 0x6A	; 106
    7610:	9b e0       	ldi	r25, 0x0B	; 11
    7612:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7616:	61 e0       	ldi	r22, 0x01	; 1
    7618:	80 e0       	ldi	r24, 0x00	; 0
    761a:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    761e:	87 e5       	ldi	r24, 0x57	; 87
    7620:	9b e0       	ldi	r25, 0x0B	; 11
    7622:	ce cf       	rjmp	.-100    	; 0x75c0 <_Z5Printv+0x54>
    7624:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    7628:	81 30       	cpi	r24, 0x01	; 1
    762a:	09 f0       	breq	.+2      	; 0x762e <_Z5Printv+0xc2>
    762c:	90 c0       	rjmp	.+288    	; 0x774e <_Z5Printv+0x1e2>
    762e:	89 e4       	ldi	r24, 0x49	; 73
    7630:	9b e0       	ldi	r25, 0x0B	; 11
    7632:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7636:	e0 91 f5 09 	lds	r30, 0x09F5	; 0x8009f5 <Thread_Step>
    763a:	2a e1       	ldi	r18, 0x1A	; 26
    763c:	e2 9f       	mul	r30, r18
    763e:	f0 01       	movw	r30, r0
    7640:	11 24       	eor	r1, r1
    7642:	e3 53       	subi	r30, 0x33	; 51
    7644:	fb 4f       	sbci	r31, 0xFB	; 251
    7646:	df 01       	movw	r26, r30
    7648:	0d 90       	ld	r0, X+
    764a:	00 20       	and	r0, r0
    764c:	e9 f7       	brne	.-6      	; 0x7648 <_Z5Printv+0xdc>
    764e:	11 97       	sbiw	r26, 0x01	; 1
    7650:	ae 1b       	sub	r26, r30
    7652:	bf 0b       	sbc	r27, r31
    7654:	8e 01       	movw	r16, r28
    7656:	0f 5f       	subi	r16, 0xFF	; 255
    7658:	1f 4f       	sbci	r17, 0xFF	; 255
    765a:	a4 30       	cpi	r26, 0x04	; 4
    765c:	b1 05       	cpc	r27, r1
    765e:	09 f0       	breq	.+2      	; 0x7662 <_Z5Printv+0xf6>
    7660:	55 c0       	rjmp	.+170    	; 0x770c <_Z5Printv+0x1a0>
    7662:	ff 93       	push	r31
    7664:	ef 93       	push	r30
    7666:	81 e7       	ldi	r24, 0x71	; 113
    7668:	9e e0       	ldi	r25, 0x0E	; 14
    766a:	9f 93       	push	r25
    766c:	8f 93       	push	r24
    766e:	1f 92       	push	r1
    7670:	85 e0       	ldi	r24, 0x05	; 5
    7672:	8f 93       	push	r24
    7674:	1f 93       	push	r17
    7676:	0f 93       	push	r16
    7678:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    767c:	c8 01       	movw	r24, r16
    767e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7682:	8b e9       	ldi	r24, 0x9B	; 155
    7684:	9d e0       	ldi	r25, 0x0D	; 13
    7686:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    768a:	0f b6       	in	r0, 0x3f	; 63
    768c:	f8 94       	cli
    768e:	de bf       	out	0x3e, r29	; 62
    7690:	0f be       	out	0x3f, r0	; 63
    7692:	cd bf       	out	0x3d, r28	; 61
    7694:	61 e0       	ldi	r22, 0x01	; 1
    7696:	80 e0       	ldi	r24, 0x00	; 0
    7698:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    769c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Sub_Mode_Thread>
    76a0:	82 30       	cpi	r24, 0x02	; 2
    76a2:	09 f4       	brne	.+2      	; 0x76a6 <_Z5Printv+0x13a>
    76a4:	49 c0       	rjmp	.+146    	; 0x7738 <_Z5Printv+0x1cc>
    76a6:	83 30       	cpi	r24, 0x03	; 3
    76a8:	09 f4       	brne	.+2      	; 0x76ac <_Z5Printv+0x140>
    76aa:	49 c0       	rjmp	.+146    	; 0x773e <_Z5Printv+0x1d2>
    76ac:	81 30       	cpi	r24, 0x01	; 1
    76ae:	21 f4       	brne	.+8      	; 0x76b8 <_Z5Printv+0x14c>
    76b0:	83 e4       	ldi	r24, 0x43	; 67
    76b2:	9b e0       	ldi	r25, 0x0B	; 11
    76b4:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    76b8:	8b e2       	ldi	r24, 0x2B	; 43
    76ba:	9b e0       	ldi	r25, 0x0B	; 11
    76bc:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    76c0:	e0 91 f5 09 	lds	r30, 0x09F5	; 0x8009f5 <Thread_Step>
    76c4:	3a e1       	ldi	r19, 0x1A	; 26
    76c6:	e3 9f       	mul	r30, r19
    76c8:	f0 01       	movw	r30, r0
    76ca:	11 24       	eor	r1, r1
    76cc:	e7 52       	subi	r30, 0x27	; 39
    76ce:	fb 4f       	sbci	r31, 0xFB	; 251
    76d0:	df 01       	movw	r26, r30
    76d2:	0d 90       	ld	r0, X+
    76d4:	00 20       	and	r0, r0
    76d6:	e9 f7       	brne	.-6      	; 0x76d2 <_Z5Printv+0x166>
    76d8:	cd 01       	movw	r24, r26
    76da:	05 97       	sbiw	r24, 0x05	; 5
    76dc:	8e 17       	cp	r24, r30
    76de:	9f 07       	cpc	r25, r31
    76e0:	89 f5       	brne	.+98     	; 0x7744 <_Z5Printv+0x1d8>
    76e2:	ff 93       	push	r31
    76e4:	ef 93       	push	r30
    76e6:	81 e7       	ldi	r24, 0x71	; 113
    76e8:	9e e0       	ldi	r25, 0x0E	; 14
    76ea:	9f 93       	push	r25
    76ec:	8f 93       	push	r24
    76ee:	1f 92       	push	r1
    76f0:	85 e0       	ldi	r24, 0x05	; 5
    76f2:	8f 93       	push	r24
    76f4:	1f 93       	push	r17
    76f6:	0f 93       	push	r16
    76f8:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    76fc:	0f b6       	in	r0, 0x3f	; 63
    76fe:	f8 94       	cli
    7700:	de bf       	out	0x3e, r29	; 62
    7702:	0f be       	out	0x3f, r0	; 63
    7704:	cd bf       	out	0x3d, r28	; 61
    7706:	ce 01       	movw	r24, r28
    7708:	01 96       	adiw	r24, 0x01	; 1
    770a:	5a cf       	rjmp	.-332    	; 0x75c0 <_Z5Printv+0x54>
    770c:	13 97       	sbiw	r26, 0x03	; 3
    770e:	79 f4       	brne	.+30     	; 0x772e <_Z5Printv+0x1c2>
    7710:	ff 93       	push	r31
    7712:	ef 93       	push	r30
    7714:	8a e6       	ldi	r24, 0x6A	; 106
    7716:	9e e0       	ldi	r25, 0x0E	; 14
    7718:	9f 93       	push	r25
    771a:	8f 93       	push	r24
    771c:	1f 92       	push	r1
    771e:	87 e0       	ldi	r24, 0x07	; 7
    7720:	8f 93       	push	r24
    7722:	1f 93       	push	r17
    7724:	0f 93       	push	r16
    7726:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    772a:	c8 01       	movw	r24, r16
    772c:	ac cf       	rjmp	.-168    	; 0x7686 <_Z5Printv+0x11a>
    772e:	ff 93       	push	r31
    7730:	ef 93       	push	r30
    7732:	81 e7       	ldi	r24, 0x71	; 113
    7734:	9e e0       	ldi	r25, 0x0E	; 14
    7736:	f0 cf       	rjmp	.-32     	; 0x7718 <_Z5Printv+0x1ac>
    7738:	8d e3       	ldi	r24, 0x3D	; 61
    773a:	9b e0       	ldi	r25, 0x0B	; 11
    773c:	bb cf       	rjmp	.-138    	; 0x76b4 <_Z5Printv+0x148>
    773e:	88 e3       	ldi	r24, 0x38	; 56
    7740:	9b e0       	ldi	r25, 0x0B	; 11
    7742:	b8 cf       	rjmp	.-144    	; 0x76b4 <_Z5Printv+0x148>
    7744:	ff 93       	push	r31
    7746:	ef 93       	push	r30
    7748:	80 e7       	ldi	r24, 0x70	; 112
    774a:	9e e0       	ldi	r25, 0x0E	; 14
    774c:	ce cf       	rjmp	.-100    	; 0x76ea <_Z5Printv+0x17e>
    774e:	82 30       	cpi	r24, 0x02	; 2
    7750:	09 f0       	breq	.+2      	; 0x7754 <_Z5Printv+0x1e8>
    7752:	9c c0       	rjmp	.+312    	; 0x788c <_Z5Printv+0x320>
    7754:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    7758:	81 11       	cpse	r24, r1
    775a:	05 c0       	rjmp	.+10     	; 0x7766 <_Z5Printv+0x1fa>
    775c:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    7760:	88 23       	and	r24, r24
    7762:	09 f4       	brne	.+2      	; 0x7766 <_Z5Printv+0x1fa>
    7764:	50 c0       	rjmp	.+160    	; 0x7806 <_Z5Printv+0x29a>
    7766:	86 e1       	ldi	r24, 0x16	; 22
    7768:	9b e0       	ldi	r25, 0x0B	; 11
    776a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    776e:	61 e0       	ldi	r22, 0x01	; 1
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    7776:	f0 90 1f 02 	lds	r15, 0x021F	; 0x80021f <Sub_Mode_Feed>
    777a:	8e 01       	movw	r16, r28
    777c:	0e 5e       	subi	r16, 0xEE	; 238
    777e:	1f 4f       	sbci	r17, 0xFF	; 255
    7780:	b2 e0       	ldi	r27, 0x02	; 2
    7782:	fb 16       	cp	r15, r27
    7784:	09 f4       	brne	.+2      	; 0x7788 <_Z5Printv+0x21c>
    7786:	66 c0       	rjmp	.+204    	; 0x7854 <_Z5Printv+0x2e8>
    7788:	23 e0       	ldi	r18, 0x03	; 3
    778a:	f2 16       	cp	r15, r18
    778c:	09 f4       	brne	.+2      	; 0x7790 <_Z5Printv+0x224>
    778e:	6a c0       	rjmp	.+212    	; 0x7864 <_Z5Printv+0x2f8>
    7790:	31 e0       	ldi	r19, 0x01	; 1
    7792:	f3 12       	cpse	r15, r19
    7794:	20 c0       	rjmp	.+64     	; 0x77d6 <_Z5Printv+0x26a>
    7796:	8b ef       	ldi	r24, 0xFB	; 251
    7798:	9a e0       	ldi	r25, 0x0A	; 10
    779a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    779e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    77a2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    77a6:	89 1b       	sub	r24, r25
    77a8:	99 0b       	sbc	r25, r25
    77aa:	01 96       	adiw	r24, 0x01	; 1
    77ac:	9f 93       	push	r25
    77ae:	8f 93       	push	r24
    77b0:	88 e7       	ldi	r24, 0x78	; 120
    77b2:	9e e0       	ldi	r25, 0x0E	; 14
    77b4:	9f 93       	push	r25
    77b6:	8f 93       	push	r24
    77b8:	1f 92       	push	r1
    77ba:	83 e0       	ldi	r24, 0x03	; 3
    77bc:	8f 93       	push	r24
    77be:	1f 93       	push	r17
    77c0:	0f 93       	push	r16
    77c2:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    77c6:	c8 01       	movw	r24, r16
    77c8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    77cc:	0f b6       	in	r0, 0x3f	; 63
    77ce:	f8 94       	cli
    77d0:	de bf       	out	0x3e, r29	; 62
    77d2:	0f be       	out	0x3f, r0	; 63
    77d4:	cd bf       	out	0x3d, r28	; 61
    77d6:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    77da:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    77de:	64 e6       	ldi	r22, 0x64	; 100
    77e0:	70 e0       	ldi	r23, 0x00	; 0
    77e2:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    77e6:	9f 93       	push	r25
    77e8:	8f 93       	push	r24
    77ea:	7f 93       	push	r23
    77ec:	6f 93       	push	r22
    77ee:	86 e8       	ldi	r24, 0x86	; 134
    77f0:	9e e0       	ldi	r25, 0x0E	; 14
    77f2:	9f 93       	push	r25
    77f4:	8f 93       	push	r24
    77f6:	1f 92       	push	r1
    77f8:	88 e0       	ldi	r24, 0x08	; 8
    77fa:	8f 93       	push	r24
    77fc:	1f 93       	push	r17
    77fe:	0f 93       	push	r16
    7800:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7804:	03 c1       	rjmp	.+518    	; 0x7a0c <_Z5Printv+0x4a0>
    7806:	85 e0       	ldi	r24, 0x05	; 5
    7808:	9b e0       	ldi	r25, 0x0B	; 11
    780a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    780e:	80 91 2c 12 	lds	r24, 0x122C	; 0x80122c <Feed_mm>
    7812:	90 91 2d 12 	lds	r25, 0x122D	; 0x80122d <Feed_mm+0x1>
    7816:	64 e6       	ldi	r22, 0x64	; 100
    7818:	70 e0       	ldi	r23, 0x00	; 0
    781a:	0e 94 66 98 	call	0x130cc	; 0x130cc <__udivmodhi4>
    781e:	9f 93       	push	r25
    7820:	8f 93       	push	r24
    7822:	7f 93       	push	r23
    7824:	6f 93       	push	r22
    7826:	84 e7       	ldi	r24, 0x74	; 116
    7828:	9e e0       	ldi	r25, 0x0E	; 14
    782a:	9f 93       	push	r25
    782c:	8f 93       	push	r24
    782e:	1f 92       	push	r1
    7830:	85 e0       	ldi	r24, 0x05	; 5
    7832:	8f 93       	push	r24
    7834:	8e 01       	movw	r16, r28
    7836:	0f 5f       	subi	r16, 0xFF	; 255
    7838:	1f 4f       	sbci	r17, 0xFF	; 255
    783a:	1f 93       	push	r17
    783c:	0f 93       	push	r16
    783e:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7842:	c8 01       	movw	r24, r16
    7844:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7848:	0f b6       	in	r0, 0x3f	; 63
    784a:	f8 94       	cli
    784c:	de bf       	out	0x3e, r29	; 62
    784e:	0f be       	out	0x3f, r0	; 63
    7850:	cd bf       	out	0x3d, r28	; 61
    7852:	8d cf       	rjmp	.-230    	; 0x776e <_Z5Printv+0x202>
    7854:	81 ef       	ldi	r24, 0xF1	; 241
    7856:	9a e0       	ldi	r25, 0x0A	; 10
    7858:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    785c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7860:	1f 92       	push	r1
    7862:	a5 cf       	rjmp	.-182    	; 0x77ae <_Z5Printv+0x242>
    7864:	88 ee       	ldi	r24, 0xE8	; 232
    7866:	9a e0       	ldi	r25, 0x0A	; 10
    7868:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    786c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7870:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    7874:	89 1b       	sub	r24, r25
    7876:	99 0b       	sbc	r25, r25
    7878:	01 96       	adiw	r24, 0x01	; 1
    787a:	9f 93       	push	r25
    787c:	8f 93       	push	r24
    787e:	88 e7       	ldi	r24, 0x78	; 120
    7880:	9e e0       	ldi	r25, 0x0E	; 14
    7882:	9f 93       	push	r25
    7884:	8f 93       	push	r24
    7886:	1f 92       	push	r1
    7888:	ff 92       	push	r15
    788a:	99 cf       	rjmp	.-206    	; 0x77be <_Z5Printv+0x252>
    788c:	83 30       	cpi	r24, 0x03	; 3
    788e:	09 f0       	breq	.+2      	; 0x7892 <_Z5Printv+0x326>
    7890:	7d c0       	rjmp	.+250    	; 0x798c <_Z5Printv+0x420>
    7892:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    7896:	8e 01       	movw	r16, r28
    7898:	0f 5f       	subi	r16, 0xFF	; 255
    789a:	1f 4f       	sbci	r17, 0xFF	; 255
    789c:	81 11       	cpse	r24, r1
    789e:	04 c0       	rjmp	.+8      	; 0x78a8 <_Z5Printv+0x33c>
    78a0:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    78a4:	88 23       	and	r24, r24
    78a6:	59 f1       	breq	.+86     	; 0x78fe <_Z5Printv+0x392>
    78a8:	83 ed       	ldi	r24, 0xD3	; 211
    78aa:	9a e0       	ldi	r25, 0x0A	; 10
    78ac:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    78b0:	61 e0       	ldi	r22, 0x01	; 1
    78b2:	80 e0       	ldi	r24, 0x00	; 0
    78b4:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    78b8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Sub_Mode_aFeed>
    78bc:	82 30       	cpi	r24, 0x02	; 2
    78be:	e9 f1       	breq	.+122    	; 0x793a <_Z5Printv+0x3ce>
    78c0:	83 30       	cpi	r24, 0x03	; 3
    78c2:	09 f4       	brne	.+2      	; 0x78c6 <_Z5Printv+0x35a>
    78c4:	60 c0       	rjmp	.+192    	; 0x7986 <_Z5Printv+0x41a>
    78c6:	81 30       	cpi	r24, 0x01	; 1
    78c8:	09 f0       	breq	.+2      	; 0x78cc <_Z5Printv+0x360>
    78ca:	5b c0       	rjmp	.+182    	; 0x7982 <_Z5Printv+0x416>
    78cc:	8b ef       	ldi	r24, 0xFB	; 251
    78ce:	9a e0       	ldi	r25, 0x0A	; 10
    78d0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    78d4:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    78d8:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    78dc:	64 e6       	ldi	r22, 0x64	; 100
    78de:	70 e0       	ldi	r23, 0x00	; 0
    78e0:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    78e4:	9f 93       	push	r25
    78e6:	8f 93       	push	r24
    78e8:	7f 93       	push	r23
    78ea:	6f 93       	push	r22
    78ec:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    78f0:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    78f4:	89 1b       	sub	r24, r25
    78f6:	99 0b       	sbc	r25, r25
    78f8:	01 96       	adiw	r24, 0x01	; 1
    78fa:	9f 93       	push	r25
    78fc:	31 c0       	rjmp	.+98     	; 0x7960 <_Z5Printv+0x3f4>
    78fe:	8f eb       	ldi	r24, 0xBF	; 191
    7900:	9a e0       	ldi	r25, 0x0A	; 10
    7902:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7906:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <aFeed_mm+0x1>
    790a:	8f 93       	push	r24
    790c:	80 91 39 12 	lds	r24, 0x1239	; 0x801239 <aFeed_mm>
    7910:	8f 93       	push	r24
    7912:	8d e7       	ldi	r24, 0x7D	; 125
    7914:	9e e0       	ldi	r25, 0x0E	; 14
    7916:	9f 93       	push	r25
    7918:	8f 93       	push	r24
    791a:	1f 92       	push	r1
    791c:	84 e0       	ldi	r24, 0x04	; 4
    791e:	8f 93       	push	r24
    7920:	1f 93       	push	r17
    7922:	0f 93       	push	r16
    7924:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7928:	c8 01       	movw	r24, r16
    792a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    792e:	0f b6       	in	r0, 0x3f	; 63
    7930:	f8 94       	cli
    7932:	de bf       	out	0x3e, r29	; 62
    7934:	0f be       	out	0x3f, r0	; 63
    7936:	cd bf       	out	0x3d, r28	; 61
    7938:	bb cf       	rjmp	.-138    	; 0x78b0 <_Z5Printv+0x344>
    793a:	81 ef       	ldi	r24, 0xF1	; 241
    793c:	9a e0       	ldi	r25, 0x0A	; 10
    793e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7942:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    7946:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    794a:	64 e6       	ldi	r22, 0x64	; 100
    794c:	70 e0       	ldi	r23, 0x00	; 0
    794e:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    7952:	9f 93       	push	r25
    7954:	8f 93       	push	r24
    7956:	7f 93       	push	r23
    7958:	6f 93       	push	r22
    795a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    795e:	1f 92       	push	r1
    7960:	8f 93       	push	r24
    7962:	82 e8       	ldi	r24, 0x82	; 130
    7964:	9e e0       	ldi	r25, 0x0E	; 14
    7966:	9f 93       	push	r25
    7968:	8f 93       	push	r24
    796a:	1f 92       	push	r1
    796c:	8a e0       	ldi	r24, 0x0A	; 10
    796e:	8f 93       	push	r24
    7970:	1f 93       	push	r17
    7972:	0f 93       	push	r16
    7974:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7978:	0f b6       	in	r0, 0x3f	; 63
    797a:	f8 94       	cli
    797c:	de bf       	out	0x3e, r29	; 62
    797e:	0f be       	out	0x3f, r0	; 63
    7980:	cd bf       	out	0x3d, r28	; 61
    7982:	c8 01       	movw	r24, r16
    7984:	1d ce       	rjmp	.-966    	; 0x75c0 <_Z5Printv+0x54>
    7986:	88 ee       	ldi	r24, 0xE8	; 232
    7988:	9a e0       	ldi	r25, 0x0A	; 10
    798a:	a2 cf       	rjmp	.-188    	; 0x78d0 <_Z5Printv+0x364>
    798c:	84 30       	cpi	r24, 0x04	; 4
    798e:	09 f0       	breq	.+2      	; 0x7992 <_Z5Printv+0x426>
    7990:	87 c0       	rjmp	.+270    	; 0x7aa0 <_Z5Printv+0x534>
    7992:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    7996:	81 11       	cpse	r24, r1
    7998:	05 c0       	rjmp	.+10     	; 0x79a4 <_Z5Printv+0x438>
    799a:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    799e:	88 23       	and	r24, r24
    79a0:	09 f4       	brne	.+2      	; 0x79a4 <_Z5Printv+0x438>
    79a2:	53 c0       	rjmp	.+166    	; 0x7a4a <_Z5Printv+0x4de>
    79a4:	8a ea       	ldi	r24, 0xAA	; 170
    79a6:	9a e0       	ldi	r25, 0x0A	; 10
    79a8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    79ac:	61 e0       	ldi	r22, 0x01	; 1
    79ae:	80 e0       	ldi	r24, 0x00	; 0
    79b0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    79b4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Sub_Mode_Cone>
    79b8:	81 30       	cpi	r24, 0x01	; 1
    79ba:	09 f0       	breq	.+2      	; 0x79be <_Z5Printv+0x452>
    79bc:	8f c0       	rjmp	.+286    	; 0x7adc <_Z5Printv+0x570>
    79be:	8b ef       	ldi	r24, 0xFB	; 251
    79c0:	9a e0       	ldi	r25, 0x0A	; 10
    79c2:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    79c6:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    79ca:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    79ce:	64 e6       	ldi	r22, 0x64	; 100
    79d0:	70 e0       	ldi	r23, 0x00	; 0
    79d2:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    79d6:	9f 93       	push	r25
    79d8:	8f 93       	push	r24
    79da:	7f 93       	push	r23
    79dc:	6f 93       	push	r22
    79de:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    79e2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    79e6:	89 1b       	sub	r24, r25
    79e8:	99 0b       	sbc	r25, r25
    79ea:	01 96       	adiw	r24, 0x01	; 1
    79ec:	9f 93       	push	r25
    79ee:	8f 93       	push	r24
    79f0:	82 e8       	ldi	r24, 0x82	; 130
    79f2:	9e e0       	ldi	r25, 0x0E	; 14
    79f4:	9f 93       	push	r25
    79f6:	8f 93       	push	r24
    79f8:	1f 92       	push	r1
    79fa:	8a e0       	ldi	r24, 0x0A	; 10
    79fc:	8f 93       	push	r24
    79fe:	8e 01       	movw	r16, r28
    7a00:	0e 5e       	subi	r16, 0xEE	; 238
    7a02:	1f 4f       	sbci	r17, 0xFF	; 255
    7a04:	1f 93       	push	r17
    7a06:	0f 93       	push	r16
    7a08:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7a0c:	c8 01       	movw	r24, r16
    7a0e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7a12:	0f b6       	in	r0, 0x3f	; 63
    7a14:	f8 94       	cli
    7a16:	de bf       	out	0x3e, r29	; 62
    7a18:	0f be       	out	0x3f, r0	; 63
    7a1a:	cd bf       	out	0x3d, r28	; 61
    7a1c:	a2 96       	adiw	r28, 0x22	; 34
    7a1e:	0f b6       	in	r0, 0x3f	; 63
    7a20:	f8 94       	cli
    7a22:	de bf       	out	0x3e, r29	; 62
    7a24:	0f be       	out	0x3f, r0	; 63
    7a26:	cd bf       	out	0x3d, r28	; 61
    7a28:	df 91       	pop	r29
    7a2a:	cf 91       	pop	r28
    7a2c:	1f 91       	pop	r17
    7a2e:	0f 91       	pop	r16
    7a30:	ff 90       	pop	r15
    7a32:	ef 90       	pop	r14
    7a34:	df 90       	pop	r13
    7a36:	cf 90       	pop	r12
    7a38:	bf 90       	pop	r11
    7a3a:	af 90       	pop	r10
    7a3c:	9f 90       	pop	r9
    7a3e:	8f 90       	pop	r8
    7a40:	7f 90       	pop	r7
    7a42:	6f 90       	pop	r6
    7a44:	5f 90       	pop	r5
    7a46:	4f 90       	pop	r4
    7a48:	08 95       	ret
    7a4a:	81 ea       	ldi	r24, 0xA1	; 161
    7a4c:	9a e0       	ldi	r25, 0x0A	; 10
    7a4e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7a52:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <aFeed_mm+0x1>
    7a56:	8f 93       	push	r24
    7a58:	80 91 39 12 	lds	r24, 0x1239	; 0x801239 <aFeed_mm>
    7a5c:	8f 93       	push	r24
    7a5e:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <Cone_Step>
    7a62:	b3 e1       	ldi	r27, 0x13	; 19
    7a64:	8b 9f       	mul	r24, r27
    7a66:	c0 01       	movw	r24, r0
    7a68:	11 24       	eor	r1, r1
    7a6a:	8d 5c       	subi	r24, 0xCD	; 205
    7a6c:	9d 4f       	sbci	r25, 0xFD	; 253
    7a6e:	9f 93       	push	r25
    7a70:	8f 93       	push	r24
    7a72:	83 e9       	ldi	r24, 0x93	; 147
    7a74:	9e e0       	ldi	r25, 0x0E	; 14
    7a76:	9f 93       	push	r25
    7a78:	8f 93       	push	r24
    7a7a:	1f 92       	push	r1
    7a7c:	8a e0       	ldi	r24, 0x0A	; 10
    7a7e:	8f 93       	push	r24
    7a80:	8e 01       	movw	r16, r28
    7a82:	0f 5f       	subi	r16, 0xFF	; 255
    7a84:	1f 4f       	sbci	r17, 0xFF	; 255
    7a86:	1f 93       	push	r17
    7a88:	0f 93       	push	r16
    7a8a:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7a8e:	c8 01       	movw	r24, r16
    7a90:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7a94:	0f b6       	in	r0, 0x3f	; 63
    7a96:	f8 94       	cli
    7a98:	de bf       	out	0x3e, r29	; 62
    7a9a:	0f be       	out	0x3f, r0	; 63
    7a9c:	cd bf       	out	0x3d, r28	; 61
    7a9e:	86 cf       	rjmp	.-244    	; 0x79ac <_Z5Printv+0x440>
    7aa0:	85 30       	cpi	r24, 0x05	; 5
    7aa2:	c1 f5       	brne	.+112    	; 0x7b14 <_Z5Printv+0x5a8>
    7aa4:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
    7aa8:	81 11       	cpse	r24, r1
    7aaa:	04 c0       	rjmp	.+8      	; 0x7ab4 <_Z5Printv+0x548>
    7aac:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
    7ab0:	88 23       	and	r24, r24
    7ab2:	19 f0       	breq	.+6      	; 0x7aba <_Z5Printv+0x54e>
    7ab4:	8c e8       	ldi	r24, 0x8C	; 140
    7ab6:	9a e0       	ldi	r25, 0x0A	; 10
    7ab8:	77 cf       	rjmp	.-274    	; 0x79a8 <_Z5Printv+0x43c>
    7aba:	83 e8       	ldi	r24, 0x83	; 131
    7abc:	9a e0       	ldi	r25, 0x0A	; 10
    7abe:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7ac2:	80 91 3a 12 	lds	r24, 0x123A	; 0x80123a <aFeed_mm+0x1>
    7ac6:	8f 93       	push	r24
    7ac8:	80 91 39 12 	lds	r24, 0x1239	; 0x801239 <aFeed_mm>
    7acc:	8f 93       	push	r24
    7ace:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <Cone_Step>
    7ad2:	33 e1       	ldi	r19, 0x13	; 19
    7ad4:	83 9f       	mul	r24, r19
    7ad6:	c0 01       	movw	r24, r0
    7ad8:	11 24       	eor	r1, r1
    7ada:	c7 cf       	rjmp	.-114    	; 0x7a6a <_Z5Printv+0x4fe>
    7adc:	82 30       	cpi	r24, 0x02	; 2
    7ade:	a1 f4       	brne	.+40     	; 0x7b08 <_Z5Printv+0x59c>
    7ae0:	81 ef       	ldi	r24, 0xF1	; 241
    7ae2:	9a e0       	ldi	r25, 0x0A	; 10
    7ae4:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7ae8:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    7aec:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    7af0:	64 e6       	ldi	r22, 0x64	; 100
    7af2:	70 e0       	ldi	r23, 0x00	; 0
    7af4:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    7af8:	9f 93       	push	r25
    7afa:	8f 93       	push	r24
    7afc:	7f 93       	push	r23
    7afe:	6f 93       	push	r22
    7b00:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7b04:	1f 92       	push	r1
    7b06:	73 cf       	rjmp	.-282    	; 0x79ee <_Z5Printv+0x482>
    7b08:	83 30       	cpi	r24, 0x03	; 3
    7b0a:	09 f0       	breq	.+2      	; 0x7b0e <_Z5Printv+0x5a2>
    7b0c:	87 cf       	rjmp	.-242    	; 0x7a1c <_Z5Printv+0x4b0>
    7b0e:	88 ee       	ldi	r24, 0xE8	; 232
    7b10:	9a e0       	ldi	r25, 0x0A	; 10
    7b12:	57 cf       	rjmp	.-338    	; 0x79c2 <_Z5Printv+0x456>
    7b14:	86 30       	cpi	r24, 0x06	; 6
    7b16:	91 f5       	brne	.+100    	; 0x7b7c <_Z5Printv+0x610>
    7b18:	80 e7       	ldi	r24, 0x70	; 112
    7b1a:	9a e0       	ldi	r25, 0x0A	; 10
    7b1c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7b20:	61 e0       	ldi	r22, 0x01	; 1
    7b22:	80 e0       	ldi	r24, 0x00	; 0
    7b24:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    7b28:	8b e6       	ldi	r24, 0x6B	; 107
    7b2a:	9a e0       	ldi	r25, 0x0A	; 10
    7b2c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7b30:	8e e5       	ldi	r24, 0x5E	; 94
    7b32:	9a e0       	ldi	r25, 0x0A	; 10
    7b34:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7b38:	20 91 ac 11 	lds	r18, 0x11AC	; 0x8011ac <CurrentRPM>
    7b3c:	30 91 ad 11 	lds	r19, 0x11AD	; 0x8011ad <CurrentRPM+0x1>
    7b40:	ce 01       	movw	r24, r28
    7b42:	01 96       	adiw	r24, 0x01	; 1
    7b44:	28 3e       	cpi	r18, 0xE8	; 232
    7b46:	33 40       	sbci	r19, 0x03	; 3
    7b48:	80 f0       	brcs	.+32     	; 0x7b6a <_Z5Printv+0x5fe>
    7b4a:	20 91 ac 11 	lds	r18, 0x11AC	; 0x8011ac <CurrentRPM>
    7b4e:	30 91 ad 11 	lds	r19, 0x11AD	; 0x8011ad <CurrentRPM+0x1>
    7b52:	3f 93       	push	r19
    7b54:	2f 93       	push	r18
    7b56:	2b e9       	ldi	r18, 0x9B	; 155
    7b58:	3e e0       	ldi	r19, 0x0E	; 14
    7b5a:	3f 93       	push	r19
    7b5c:	2f 93       	push	r18
    7b5e:	1f 92       	push	r1
    7b60:	25 e0       	ldi	r18, 0x05	; 5
    7b62:	2f 93       	push	r18
    7b64:	9f 93       	push	r25
    7b66:	8f 93       	push	r24
    7b68:	c7 cd       	rjmp	.-1138   	; 0x76f8 <_Z5Printv+0x18c>
    7b6a:	20 91 ac 11 	lds	r18, 0x11AC	; 0x8011ac <CurrentRPM>
    7b6e:	30 91 ad 11 	lds	r19, 0x11AD	; 0x8011ad <CurrentRPM+0x1>
    7b72:	3f 93       	push	r19
    7b74:	2f 93       	push	r18
    7b76:	26 e9       	ldi	r18, 0x96	; 150
    7b78:	3e e0       	ldi	r19, 0x0E	; 14
    7b7a:	ef cf       	rjmp	.-34     	; 0x7b5a <_Z5Printv+0x5ee>
    7b7c:	87 30       	cpi	r24, 0x07	; 7
    7b7e:	09 f0       	breq	.+2      	; 0x7b82 <_Z5Printv+0x616>
    7b80:	df c0       	rjmp	.+446    	; 0x7d40 <_Z5Printv+0x7d4>
    7b82:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    7b86:	8e 01       	movw	r16, r28
    7b88:	0f 5f       	subi	r16, 0xFF	; 255
    7b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    7b8c:	81 11       	cpse	r24, r1
    7b8e:	99 c0       	rjmp	.+306    	; 0x7cc2 <_Z5Printv+0x756>
    7b90:	86 e5       	ldi	r24, 0x56	; 86
    7b92:	9a e0       	ldi	r25, 0x0A	; 10
    7b94:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7b98:	80 91 2c 12 	lds	r24, 0x122C	; 0x80122c <Feed_mm>
    7b9c:	90 91 2d 12 	lds	r25, 0x122D	; 0x80122d <Feed_mm+0x1>
    7ba0:	80 90 23 02 	lds	r8, 0x0223	; 0x800223 <Sph_R_mm>
    7ba4:	90 90 24 02 	lds	r9, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    7ba8:	a0 90 25 02 	lds	r10, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    7bac:	b0 90 26 02 	lds	r11, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    7bb0:	64 e6       	ldi	r22, 0x64	; 100
    7bb2:	70 e0       	ldi	r23, 0x00	; 0
    7bb4:	0e 94 66 98 	call	0x130cc	; 0x130cc <__udivmodhi4>
    7bb8:	9f 93       	push	r25
    7bba:	8f 93       	push	r24
    7bbc:	7f 93       	push	r23
    7bbe:	6f 93       	push	r22
    7bc0:	c5 01       	movw	r24, r10
    7bc2:	b4 01       	movw	r22, r8
    7bc4:	25 e0       	ldi	r18, 0x05	; 5
    7bc6:	30 e0       	ldi	r19, 0x00	; 0
    7bc8:	40 e0       	ldi	r20, 0x00	; 0
    7bca:	50 e0       	ldi	r21, 0x00	; 0
    7bcc:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7bd0:	ca 01       	movw	r24, r20
    7bd2:	b9 01       	movw	r22, r18
    7bd4:	2a e0       	ldi	r18, 0x0A	; 10
    7bd6:	30 e0       	ldi	r19, 0x00	; 0
    7bd8:	40 e0       	ldi	r20, 0x00	; 0
    7bda:	50 e0       	ldi	r21, 0x00	; 0
    7bdc:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7be0:	9f 93       	push	r25
    7be2:	8f 93       	push	r24
    7be4:	7f 93       	push	r23
    7be6:	6f 93       	push	r22
    7be8:	c5 01       	movw	r24, r10
    7bea:	b4 01       	movw	r22, r8
    7bec:	22 e3       	ldi	r18, 0x32	; 50
    7bee:	30 e0       	ldi	r19, 0x00	; 0
    7bf0:	40 e0       	ldi	r20, 0x00	; 0
    7bf2:	50 e0       	ldi	r21, 0x00	; 0
    7bf4:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7bf8:	5f 93       	push	r21
    7bfa:	4f 93       	push	r20
    7bfc:	3f 93       	push	r19
    7bfe:	2f 93       	push	r18
    7c00:	8f e9       	ldi	r24, 0x9F	; 159
    7c02:	9e e0       	ldi	r25, 0x0E	; 14
    7c04:	9f 93       	push	r25
    7c06:	8f 93       	push	r24
    7c08:	1f 92       	push	r1
    7c0a:	8b e0       	ldi	r24, 0x0B	; 11
    7c0c:	8f 93       	push	r24
    7c0e:	1f 93       	push	r17
    7c10:	0f 93       	push	r16
    7c12:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7c16:	c8 01       	movw	r24, r16
    7c18:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7c1c:	61 e0       	ldi	r22, 0x01	; 1
    7c1e:	80 e0       	ldi	r24, 0x00	; 0
    7c20:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    7c24:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Sub_Mode_Sphere>
    7c28:	0f b6       	in	r0, 0x3f	; 63
    7c2a:	f8 94       	cli
    7c2c:	de bf       	out	0x3e, r29	; 62
    7c2e:	0f be       	out	0x3f, r0	; 63
    7c30:	cd bf       	out	0x3d, r28	; 61
    7c32:	81 30       	cpi	r24, 0x01	; 1
    7c34:	19 f4       	brne	.+6      	; 0x7c3c <_Z5Printv+0x6d0>
    7c36:	81 e4       	ldi	r24, 0x41	; 65
    7c38:	9a e0       	ldi	r25, 0x0A	; 10
    7c3a:	c2 cc       	rjmp	.-1660   	; 0x75c0 <_Z5Printv+0x54>
    7c3c:	82 30       	cpi	r24, 0x02	; 2
    7c3e:	e1 f5       	brne	.+120    	; 0x7cb8 <_Z5Printv+0x74c>
    7c40:	8d e3       	ldi	r24, 0x3D	; 61
    7c42:	9b e0       	ldi	r25, 0x0B	; 11
    7c44:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7c48:	86 e3       	ldi	r24, 0x36	; 54
    7c4a:	9a e0       	ldi	r25, 0x0A	; 10
    7c4c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7c50:	80 90 b7 11 	lds	r8, 0x11B7	; 0x8011b7 <Bar_R_mm>
    7c54:	90 90 b8 11 	lds	r9, 0x11B8	; 0x8011b8 <Bar_R_mm+0x1>
    7c58:	a0 90 b9 11 	lds	r10, 0x11B9	; 0x8011b9 <Bar_R_mm+0x2>
    7c5c:	b0 90 ba 11 	lds	r11, 0x11BA	; 0x8011ba <Bar_R_mm+0x3>
    7c60:	86 eb       	ldi	r24, 0xB6	; 182
    7c62:	9e e0       	ldi	r25, 0x0E	; 14
    7c64:	9f 93       	push	r25
    7c66:	8f 93       	push	r24
    7c68:	c5 01       	movw	r24, r10
    7c6a:	b4 01       	movw	r22, r8
    7c6c:	66 0f       	add	r22, r22
    7c6e:	77 1f       	adc	r23, r23
    7c70:	88 1f       	adc	r24, r24
    7c72:	99 1f       	adc	r25, r25
    7c74:	24 e6       	ldi	r18, 0x64	; 100
    7c76:	30 e0       	ldi	r19, 0x00	; 0
    7c78:	40 e0       	ldi	r20, 0x00	; 0
    7c7a:	50 e0       	ldi	r21, 0x00	; 0
    7c7c:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7c80:	9f 93       	push	r25
    7c82:	8f 93       	push	r24
    7c84:	7f 93       	push	r23
    7c86:	6f 93       	push	r22
    7c88:	c5 01       	movw	r24, r10
    7c8a:	b4 01       	movw	r22, r8
    7c8c:	22 e3       	ldi	r18, 0x32	; 50
    7c8e:	30 e0       	ldi	r19, 0x00	; 0
    7c90:	40 e0       	ldi	r20, 0x00	; 0
    7c92:	50 e0       	ldi	r21, 0x00	; 0
    7c94:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7c98:	5f 93       	push	r21
    7c9a:	4f 93       	push	r20
    7c9c:	3f 93       	push	r19
    7c9e:	2f 93       	push	r18
    7ca0:	89 eb       	ldi	r24, 0xB9	; 185
    7ca2:	9e e0       	ldi	r25, 0x0E	; 14
    7ca4:	9f 93       	push	r25
    7ca6:	8f 93       	push	r24
    7ca8:	1f 92       	push	r1
    7caa:	85 e0       	ldi	r24, 0x05	; 5
    7cac:	8f 93       	push	r24
    7cae:	1f 93       	push	r17
    7cb0:	0f 93       	push	r16
    7cb2:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7cb6:	aa ce       	rjmp	.-684    	; 0x7a0c <_Z5Printv+0x4a0>
    7cb8:	83 30       	cpi	r24, 0x03	; 3
    7cba:	31 f6       	brne	.-116    	; 0x7c48 <_Z5Printv+0x6dc>
    7cbc:	88 e3       	ldi	r24, 0x38	; 56
    7cbe:	9b e0       	ldi	r25, 0x0B	; 11
    7cc0:	c1 cf       	rjmp	.-126    	; 0x7c44 <_Z5Printv+0x6d8>
    7cc2:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37>
    7cc6:	85 e2       	ldi	r24, 0x25	; 37
    7cc8:	9a e0       	ldi	r25, 0x0A	; 10
    7cca:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7cce:	80 91 24 12 	lds	r24, 0x1224	; 0x801224 <Cutter_Width>
    7cd2:	90 91 25 12 	lds	r25, 0x1225	; 0x801225 <Cutter_Width+0x1>
    7cd6:	74 e6       	ldi	r23, 0x64	; 100
    7cd8:	87 2e       	mov	r8, r23
    7cda:	91 2c       	mov	r9, r1
    7cdc:	b4 01       	movw	r22, r8
    7cde:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    7ce2:	9f 93       	push	r25
    7ce4:	8f 93       	push	r24
    7ce6:	7f 93       	push	r23
    7ce8:	6f 93       	push	r22
    7cea:	eb ea       	ldi	r30, 0xAB	; 171
    7cec:	ee 2e       	mov	r14, r30
    7cee:	ee e0       	ldi	r30, 0x0E	; 14
    7cf0:	fe 2e       	mov	r15, r30
    7cf2:	ff 92       	push	r15
    7cf4:	ef 92       	push	r14
    7cf6:	1f 92       	push	r1
    7cf8:	f5 e0       	ldi	r31, 0x05	; 5
    7cfa:	bf 2e       	mov	r11, r31
    7cfc:	bf 92       	push	r11
    7cfe:	1f 93       	push	r17
    7d00:	0f 93       	push	r16
    7d02:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7d06:	c8 01       	movw	r24, r16
    7d08:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7d0c:	61 e0       	ldi	r22, 0x01	; 1
    7d0e:	80 e0       	ldi	r24, 0x00	; 0
    7d10:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    7d14:	84 e1       	ldi	r24, 0x14	; 20
    7d16:	9a e0       	ldi	r25, 0x0A	; 10
    7d18:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7d1c:	80 91 27 12 	lds	r24, 0x1227	; 0x801227 <Cutting_Width>
    7d20:	90 91 28 12 	lds	r25, 0x1228	; 0x801228 <Cutting_Width+0x1>
    7d24:	b4 01       	movw	r22, r8
    7d26:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
    7d2a:	9f 93       	push	r25
    7d2c:	8f 93       	push	r24
    7d2e:	7f 93       	push	r23
    7d30:	6f 93       	push	r22
    7d32:	ff 92       	push	r15
    7d34:	ef 92       	push	r14
    7d36:	1f 92       	push	r1
    7d38:	bf 92       	push	r11
    7d3a:	1f 93       	push	r17
    7d3c:	0f 93       	push	r16
    7d3e:	60 cd       	rjmp	.-1344   	; 0x7800 <_Z5Printv+0x294>
    7d40:	88 30       	cpi	r24, 0x08	; 8
    7d42:	09 f0       	breq	.+2      	; 0x7d46 <_Z5Printv+0x7da>
    7d44:	6b ce       	rjmp	.-810    	; 0x7a1c <_Z5Printv+0x4b0>
    7d46:	a0 91 e3 11 	lds	r26, 0x11E3	; 0x8011e3 <Enc_Pos>
    7d4a:	b0 91 e4 11 	lds	r27, 0x11E4	; 0x8011e4 <Enc_Pos+0x1>
    7d4e:	80 91 aa 11 	lds	r24, 0x11AA	; 0x8011aa <Enc_Pos_Divider>
    7d52:	90 91 ab 11 	lds	r25, 0x11AB	; 0x8011ab <Enc_Pos_Divider+0x1>
    7d56:	aa 0f       	add	r26, r26
    7d58:	bb 1f       	adc	r27, r27
    7d5a:	a8 0f       	add	r26, r24
    7d5c:	b9 1f       	adc	r27, r25
    7d5e:	20 ea       	ldi	r18, 0xA0	; 160
    7d60:	3c e8       	ldi	r19, 0x8C	; 140
    7d62:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    7d66:	20 91 b1 11 	lds	r18, 0x11B1	; 0x8011b1 <ENC_TICK>
    7d6a:	30 91 b2 11 	lds	r19, 0x11B2	; 0x8011b2 <ENC_TICK+0x1>
    7d6e:	22 0f       	add	r18, r18
    7d70:	33 1f       	adc	r19, r19
    7d72:	03 2e       	mov	r0, r19
    7d74:	00 0c       	add	r0, r0
    7d76:	44 0b       	sbc	r20, r20
    7d78:	55 0b       	sbc	r21, r21
    7d7a:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7d7e:	49 01       	movw	r8, r18
    7d80:	5a 01       	movw	r10, r20
    7d82:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <Current_Tooth>
    7d86:	a1 50       	subi	r26, 0x01	; 1
    7d88:	bb 0b       	sbc	r27, r27
    7d8a:	20 ea       	ldi	r18, 0xA0	; 160
    7d8c:	3c e8       	ldi	r19, 0x8C	; 140
    7d8e:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    7d92:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <Total_Tooth>
    7d96:	30 e0       	ldi	r19, 0x00	; 0
    7d98:	50 e0       	ldi	r21, 0x00	; 0
    7d9a:	40 e0       	ldi	r20, 0x00	; 0
    7d9c:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7da0:	69 01       	movw	r12, r18
    7da2:	7a 01       	movw	r14, r20
    7da4:	8e e0       	ldi	r24, 0x0E	; 14
    7da6:	9a e0       	ldi	r25, 0x0A	; 10
    7da8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7dac:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Total_Tooth>
    7db0:	1f 92       	push	r1
    7db2:	8f 93       	push	r24
    7db4:	54 e6       	ldi	r21, 0x64	; 100
    7db6:	45 2e       	mov	r4, r21
    7db8:	51 2c       	mov	r5, r1
    7dba:	61 2c       	mov	r6, r1
    7dbc:	71 2c       	mov	r7, r1
    7dbe:	c7 01       	movw	r24, r14
    7dc0:	b6 01       	movw	r22, r12
    7dc2:	a3 01       	movw	r20, r6
    7dc4:	92 01       	movw	r18, r4
    7dc6:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7dca:	9f 93       	push	r25
    7dcc:	8f 93       	push	r24
    7dce:	7f 93       	push	r23
    7dd0:	6f 93       	push	r22
    7dd2:	5f 93       	push	r21
    7dd4:	4f 93       	push	r20
    7dd6:	3f 93       	push	r19
    7dd8:	2f 93       	push	r18
    7dda:	84 ec       	ldi	r24, 0xC4	; 196
    7ddc:	9e e0       	ldi	r25, 0x0E	; 14
    7dde:	9f 93       	push	r25
    7de0:	8f 93       	push	r24
    7de2:	1f 92       	push	r1
    7de4:	6e e0       	ldi	r22, 0x0E	; 14
    7de6:	f6 2e       	mov	r15, r22
    7de8:	ff 92       	push	r15
    7dea:	8e 01       	movw	r16, r28
    7dec:	0f 5f       	subi	r16, 0xFF	; 255
    7dee:	1f 4f       	sbci	r17, 0xFF	; 255
    7df0:	1f 93       	push	r17
    7df2:	0f 93       	push	r16
    7df4:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7df8:	c8 01       	movw	r24, r16
    7dfa:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7dfe:	61 e0       	ldi	r22, 0x01	; 1
    7e00:	80 e0       	ldi	r24, 0x00	; 0
    7e02:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    7e06:	89 e0       	ldi	r24, 0x09	; 9
    7e08:	9a e0       	ldi	r25, 0x0A	; 10
    7e0a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    7e0e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Current_Tooth>
    7e12:	1f 92       	push	r1
    7e14:	8f 93       	push	r24
    7e16:	c5 01       	movw	r24, r10
    7e18:	b4 01       	movw	r22, r8
    7e1a:	a3 01       	movw	r20, r6
    7e1c:	92 01       	movw	r18, r4
    7e1e:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7e22:	9f 93       	push	r25
    7e24:	8f 93       	push	r24
    7e26:	7f 93       	push	r23
    7e28:	6f 93       	push	r22
    7e2a:	5f 93       	push	r21
    7e2c:	4f 93       	push	r20
    7e2e:	3f 93       	push	r19
    7e30:	2f 93       	push	r18
    7e32:	86 ed       	ldi	r24, 0xD6	; 214
    7e34:	9e e0       	ldi	r25, 0x0E	; 14
    7e36:	9f 93       	push	r25
    7e38:	8f 93       	push	r24
    7e3a:	1f 92       	push	r1
    7e3c:	ff 92       	push	r15
    7e3e:	1f 93       	push	r17
    7e40:	0f 93       	push	r16
    7e42:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    7e46:	98 cd       	rjmp	.-1232   	; 0x7978 <_Z5Printv+0x40c>

00007e48 <_Z17Key_Right_Pressedv.part.10>:
    7e48:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    7e4c:	86 30       	cpi	r24, 0x06	; 6
    7e4e:	50 f4       	brcc	.+20     	; 0x7e64 <_Z17Key_Right_Pressedv.part.10+0x1c>
    7e50:	84 30       	cpi	r24, 0x04	; 4
    7e52:	60 f5       	brcc	.+88     	; 0x7eac <_Z17Key_Right_Pressedv.part.10+0x64>
    7e54:	82 30       	cpi	r24, 0x02	; 2
    7e56:	b1 f0       	breq	.+44     	; 0x7e84 <_Z17Key_Right_Pressedv.part.10+0x3c>
    7e58:	83 30       	cpi	r24, 0x03	; 3
    7e5a:	19 f1       	breq	.+70     	; 0x7ea2 <_Z17Key_Right_Pressedv.part.10+0x5a>
    7e5c:	81 e0       	ldi	r24, 0x01	; 1
    7e5e:	80 93 09 12 	sts	0x1209, r24	; 0x801209 <button_flag>
    7e62:	08 95       	ret
    7e64:	87 30       	cpi	r24, 0x07	; 7
    7e66:	09 f4       	brne	.+2      	; 0x7e6a <_Z17Key_Right_Pressedv.part.10+0x22>
    7e68:	44 c0       	rjmp	.+136    	; 0x7ef2 <_Z17Key_Right_Pressedv.part.10+0xaa>
    7e6a:	88 30       	cpi	r24, 0x08	; 8
    7e6c:	b9 f7       	brne	.-18     	; 0x7e5c <_Z17Key_Right_Pressedv.part.10+0x14>
    7e6e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Current_Tooth>
    7e72:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Total_Tooth>
    7e76:	89 17       	cp	r24, r25
    7e78:	08 f0       	brcs	.+2      	; 0x7e7c <_Z17Key_Right_Pressedv.part.10+0x34>
    7e7a:	9f c0       	rjmp	.+318    	; 0x7fba <_Z17Key_Right_Pressedv.part.10+0x172>
    7e7c:	8f 5f       	subi	r24, 0xFF	; 255
    7e7e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Current_Tooth>
    7e82:	0b c0       	rjmp	.+22     	; 0x7e9a <_Z17Key_Right_Pressedv.part.10+0x52>
    7e84:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7e88:	89 30       	cpi	r24, 0x09	; 9
    7e8a:	48 f4       	brcc	.+18     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7e8c:	f2 99       	sbic	0x1e, 2	; 30
    7e8e:	07 c0       	rjmp	.+14     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7e90:	f5 99       	sbic	0x1e, 5	; 30
    7e92:	05 c0       	rjmp	.+10     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7e94:	8f 5f       	subi	r24, 0xFF	; 255
    7e96:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    7e9a:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    7e9e:	66 db       	rcall	.-2356   	; 0x756c <_Z5Printv>
    7ea0:	dd cf       	rjmp	.-70     	; 0x7e5c <_Z17Key_Right_Pressedv.part.10+0x14>
    7ea2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7ea6:	83 36       	cpi	r24, 0x63	; 99
    7ea8:	d0 f7       	brcc	.-12     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7eaa:	f0 cf       	rjmp	.-32     	; 0x7e8c <_Z17Key_Right_Pressedv.part.10+0x44>
    7eac:	f2 99       	sbic	0x1e, 2	; 30
    7eae:	f7 cf       	rjmp	.-18     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7eb0:	f5 99       	sbic	0x1e, 5	; 30
    7eb2:	f5 cf       	rjmp	.-22     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7eb4:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    7eb8:	88 23       	and	r24, r24
    7eba:	29 f0       	breq	.+10     	; 0x7ec6 <_Z17Key_Right_Pressedv.part.10+0x7e>
    7ebc:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7ec0:	83 36       	cpi	r24, 0x63	; 99
    7ec2:	68 f7       	brcc	.-38     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7ec4:	e7 cf       	rjmp	.-50     	; 0x7e94 <_Z17Key_Right_Pressedv.part.10+0x4c>
    7ec6:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <Cone_Step>
    7eca:	81 32       	cpi	r24, 0x21	; 33
    7ecc:	40 f7       	brcc	.-48     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7ece:	8f 5f       	subi	r24, 0xFF	; 255
    7ed0:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <Cone_Step>
    7ed4:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
    7ed8:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    7edc:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
    7ee0:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    7ee4:	f3 98       	cbi	0x1e, 3	; 30
    7ee6:	f6 98       	cbi	0x1e, 6	; 30
    7ee8:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    7eec:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
    7ef0:	d4 cf       	rjmp	.-88     	; 0x7e9a <_Z17Key_Right_Pressedv.part.10+0x52>
    7ef2:	f2 99       	sbic	0x1e, 2	; 30
    7ef4:	d4 cf       	rjmp	.-88     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7ef6:	f5 99       	sbic	0x1e, 5	; 30
    7ef8:	d2 cf       	rjmp	.-92     	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7efa:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    7efe:	81 11       	cpse	r24, r1
    7f00:	48 c0       	rjmp	.+144    	; 0x7f92 <_Z17Key_Right_Pressedv.part.10+0x14a>
    7f02:	40 91 b7 11 	lds	r20, 0x11B7	; 0x8011b7 <Bar_R_mm>
    7f06:	50 91 b8 11 	lds	r21, 0x11B8	; 0x8011b8 <Bar_R_mm+0x1>
    7f0a:	60 91 b9 11 	lds	r22, 0x11B9	; 0x8011b9 <Bar_R_mm+0x2>
    7f0e:	70 91 ba 11 	lds	r23, 0x11BA	; 0x8011ba <Bar_R_mm+0x3>
    7f12:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Sph_R_mm>
    7f16:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    7f1a:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    7f1e:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    7f22:	48 17       	cp	r20, r24
    7f24:	59 07       	cpc	r21, r25
    7f26:	6a 07       	cpc	r22, r26
    7f28:	7b 07       	cpc	r23, r27
    7f2a:	0c f0       	brlt	.+2      	; 0x7f2e <_Z17Key_Right_Pressedv.part.10+0xe6>
    7f2c:	b8 cf       	rjmp	.-144    	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7f2e:	9a 01       	movw	r18, r20
    7f30:	ab 01       	movw	r20, r22
    7f32:	27 5e       	subi	r18, 0xE7	; 231
    7f34:	3f 4f       	sbci	r19, 0xFF	; 255
    7f36:	4f 4f       	sbci	r20, 0xFF	; 255
    7f38:	5f 4f       	sbci	r21, 0xFF	; 255
    7f3a:	20 93 b7 11 	sts	0x11B7, r18	; 0x8011b7 <Bar_R_mm>
    7f3e:	30 93 b8 11 	sts	0x11B8, r19	; 0x8011b8 <Bar_R_mm+0x1>
    7f42:	40 93 b9 11 	sts	0x11B9, r20	; 0x8011b9 <Bar_R_mm+0x2>
    7f46:	50 93 ba 11 	sts	0x11BA, r21	; 0x8011ba <Bar_R_mm+0x3>
    7f4a:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    7f4e:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    7f52:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    7f56:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    7f5a:	68 9f       	mul	r22, r24
    7f5c:	d0 01       	movw	r26, r0
    7f5e:	69 9f       	mul	r22, r25
    7f60:	b0 0d       	add	r27, r0
    7f62:	78 9f       	mul	r23, r24
    7f64:	b0 0d       	add	r27, r0
    7f66:	11 24       	eor	r1, r1
    7f68:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    7f6c:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <SCREW_X>
    7f70:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    7f74:	03 2e       	mov	r0, r19
    7f76:	00 0c       	add	r0, r0
    7f78:	44 0b       	sbc	r20, r20
    7f7a:	55 0b       	sbc	r21, r21
    7f7c:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    7f80:	20 93 14 12 	sts	0x1214, r18	; 0x801214 <Bar_R>
    7f84:	30 93 15 12 	sts	0x1215, r19	; 0x801215 <Bar_R+0x1>
    7f88:	40 93 16 12 	sts	0x1216, r20	; 0x801216 <Bar_R+0x2>
    7f8c:	50 93 17 12 	sts	0x1217, r21	; 0x801217 <Bar_R+0x3>
    7f90:	84 cf       	rjmp	.-248    	; 0x7e9a <_Z17Key_Right_Pressedv.part.10+0x52>
    7f92:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <Cutting_Step>
    7f96:	e3 30       	cpi	r30, 0x03	; 3
    7f98:	08 f0       	brcs	.+2      	; 0x7f9c <_Z17Key_Right_Pressedv.part.10+0x154>
    7f9a:	81 cf       	rjmp	.-254    	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7f9c:	ef 5f       	subi	r30, 0xFF	; 255
    7f9e:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <Cutting_Step>
    7fa2:	f0 e0       	ldi	r31, 0x00	; 0
    7fa4:	ee 0f       	add	r30, r30
    7fa6:	ff 1f       	adc	r31, r31
    7fa8:	e3 5c       	subi	r30, 0xC3	; 195
    7faa:	f1 4f       	sbci	r31, 0xF1	; 241
    7fac:	80 81       	ld	r24, Z
    7fae:	91 81       	ldd	r25, Z+1	; 0x01
    7fb0:	90 93 28 12 	sts	0x1228, r25	; 0x801228 <Cutting_Width+0x1>
    7fb4:	80 93 27 12 	sts	0x1227, r24	; 0x801227 <Cutting_Width>
    7fb8:	70 cf       	rjmp	.-288    	; 0x7e9a <_Z17Key_Right_Pressedv.part.10+0x52>
    7fba:	89 13       	cpse	r24, r25
    7fbc:	70 cf       	rjmp	.-288    	; 0x7e9e <_Z17Key_Right_Pressedv.part.10+0x56>
    7fbe:	81 e0       	ldi	r24, 0x01	; 1
    7fc0:	5e cf       	rjmp	.-324    	; 0x7e7e <_Z17Key_Right_Pressedv.part.10+0x36>

00007fc2 <_Z16Key_Left_Pressedv.part.9>:
    7fc2:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    7fc6:	86 30       	cpi	r24, 0x06	; 6
    7fc8:	50 f4       	brcc	.+20     	; 0x7fde <_Z16Key_Left_Pressedv.part.9+0x1c>
    7fca:	84 30       	cpi	r24, 0x04	; 4
    7fcc:	20 f5       	brcc	.+72     	; 0x8016 <_Z16Key_Left_Pressedv.part.9+0x54>
    7fce:	82 30       	cpi	r24, 0x02	; 2
    7fd0:	99 f0       	breq	.+38     	; 0x7ff8 <_Z16Key_Left_Pressedv.part.9+0x36>
    7fd2:	83 30       	cpi	r24, 0x03	; 3
    7fd4:	89 f0       	breq	.+34     	; 0x7ff8 <_Z16Key_Left_Pressedv.part.9+0x36>
    7fd6:	81 e0       	ldi	r24, 0x01	; 1
    7fd8:	80 93 09 12 	sts	0x1209, r24	; 0x801209 <button_flag>
    7fdc:	08 95       	ret
    7fde:	87 30       	cpi	r24, 0x07	; 7
    7fe0:	e9 f1       	breq	.+122    	; 0x805c <_Z16Key_Left_Pressedv.part.9+0x9a>
    7fe2:	88 30       	cpi	r24, 0x08	; 8
    7fe4:	c1 f7       	brne	.-16     	; 0x7fd6 <_Z16Key_Left_Pressedv.part.9+0x14>
    7fe6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Current_Tooth>
    7fea:	82 30       	cpi	r24, 0x02	; 2
    7fec:	08 f4       	brcc	.+2      	; 0x7ff0 <_Z16Key_Left_Pressedv.part.9+0x2e>
    7fee:	91 c0       	rjmp	.+290    	; 0x8112 <_Z16Key_Left_Pressedv.part.9+0x150>
    7ff0:	81 50       	subi	r24, 0x01	; 1
    7ff2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Current_Tooth>
    7ff6:	0b c0       	rjmp	.+22     	; 0x800e <_Z16Key_Left_Pressedv.part.9+0x4c>
    7ff8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    7ffc:	82 30       	cpi	r24, 0x02	; 2
    7ffe:	48 f0       	brcs	.+18     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8000:	f2 99       	sbic	0x1e, 2	; 30
    8002:	07 c0       	rjmp	.+14     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8004:	f5 99       	sbic	0x1e, 5	; 30
    8006:	05 c0       	rjmp	.+10     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8008:	81 50       	subi	r24, 0x01	; 1
    800a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    800e:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    8012:	ac da       	rcall	.-2728   	; 0x756c <_Z5Printv>
    8014:	e0 cf       	rjmp	.-64     	; 0x7fd6 <_Z16Key_Left_Pressedv.part.9+0x14>
    8016:	f2 99       	sbic	0x1e, 2	; 30
    8018:	fc cf       	rjmp	.-8      	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    801a:	f5 99       	sbic	0x1e, 5	; 30
    801c:	fa cf       	rjmp	.-12     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    801e:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    8022:	88 23       	and	r24, r24
    8024:	29 f0       	breq	.+10     	; 0x8030 <_Z16Key_Left_Pressedv.part.9+0x6e>
    8026:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    802a:	82 30       	cpi	r24, 0x02	; 2
    802c:	90 f3       	brcs	.-28     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    802e:	ec cf       	rjmp	.-40     	; 0x8008 <_Z16Key_Left_Pressedv.part.9+0x46>
    8030:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <Cone_Step>
    8034:	88 23       	and	r24, r24
    8036:	69 f3       	breq	.-38     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8038:	81 50       	subi	r24, 0x01	; 1
    803a:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <Cone_Step>
    803e:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
    8042:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    8046:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
    804a:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    804e:	f3 98       	cbi	0x1e, 3	; 30
    8050:	f6 98       	cbi	0x1e, 6	; 30
    8052:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    8056:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
    805a:	d9 cf       	rjmp	.-78     	; 0x800e <_Z16Key_Left_Pressedv.part.9+0x4c>
    805c:	f2 99       	sbic	0x1e, 2	; 30
    805e:	d9 cf       	rjmp	.-78     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8060:	f5 99       	sbic	0x1e, 5	; 30
    8062:	d7 cf       	rjmp	.-82     	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8064:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    8068:	81 11       	cpse	r24, r1
    806a:	3f c0       	rjmp	.+126    	; 0x80ea <_Z16Key_Left_Pressedv.part.9+0x128>
    806c:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <Bar_R_mm>
    8070:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <Bar_R_mm+0x1>
    8074:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <Bar_R_mm+0x2>
    8078:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <Bar_R_mm+0x3>
    807c:	18 16       	cp	r1, r24
    807e:	19 06       	cpc	r1, r25
    8080:	1a 06       	cpc	r1, r26
    8082:	1b 06       	cpc	r1, r27
    8084:	34 f6       	brge	.-116    	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8086:	9c 01       	movw	r18, r24
    8088:	ad 01       	movw	r20, r26
    808a:	29 51       	subi	r18, 0x19	; 25
    808c:	31 09       	sbc	r19, r1
    808e:	41 09       	sbc	r20, r1
    8090:	51 09       	sbc	r21, r1
    8092:	20 93 b7 11 	sts	0x11B7, r18	; 0x8011b7 <Bar_R_mm>
    8096:	30 93 b8 11 	sts	0x11B8, r19	; 0x8011b8 <Bar_R_mm+0x1>
    809a:	40 93 b9 11 	sts	0x11B9, r20	; 0x8011b9 <Bar_R_mm+0x2>
    809e:	50 93 ba 11 	sts	0x11BA, r21	; 0x8011ba <Bar_R_mm+0x3>
    80a2:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    80a6:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    80aa:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    80ae:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    80b2:	68 9f       	mul	r22, r24
    80b4:	d0 01       	movw	r26, r0
    80b6:	69 9f       	mul	r22, r25
    80b8:	b0 0d       	add	r27, r0
    80ba:	78 9f       	mul	r23, r24
    80bc:	b0 0d       	add	r27, r0
    80be:	11 24       	eor	r1, r1
    80c0:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    80c4:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <SCREW_X>
    80c8:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    80cc:	03 2e       	mov	r0, r19
    80ce:	00 0c       	add	r0, r0
    80d0:	44 0b       	sbc	r20, r20
    80d2:	55 0b       	sbc	r21, r21
    80d4:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    80d8:	20 93 14 12 	sts	0x1214, r18	; 0x801214 <Bar_R>
    80dc:	30 93 15 12 	sts	0x1215, r19	; 0x801215 <Bar_R+0x1>
    80e0:	40 93 16 12 	sts	0x1216, r20	; 0x801216 <Bar_R+0x2>
    80e4:	50 93 17 12 	sts	0x1217, r21	; 0x801217 <Bar_R+0x3>
    80e8:	92 cf       	rjmp	.-220    	; 0x800e <_Z16Key_Left_Pressedv.part.9+0x4c>
    80ea:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <Cutting_Step>
    80ee:	ee 23       	and	r30, r30
    80f0:	09 f4       	brne	.+2      	; 0x80f4 <_Z16Key_Left_Pressedv.part.9+0x132>
    80f2:	8f cf       	rjmp	.-226    	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    80f4:	e1 50       	subi	r30, 0x01	; 1
    80f6:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <Cutting_Step>
    80fa:	f0 e0       	ldi	r31, 0x00	; 0
    80fc:	ee 0f       	add	r30, r30
    80fe:	ff 1f       	adc	r31, r31
    8100:	e3 5c       	subi	r30, 0xC3	; 195
    8102:	f1 4f       	sbci	r31, 0xF1	; 241
    8104:	80 81       	ld	r24, Z
    8106:	91 81       	ldd	r25, Z+1	; 0x01
    8108:	90 93 28 12 	sts	0x1228, r25	; 0x801228 <Cutting_Width+0x1>
    810c:	80 93 27 12 	sts	0x1227, r24	; 0x801227 <Cutting_Width>
    8110:	7e cf       	rjmp	.-260    	; 0x800e <_Z16Key_Left_Pressedv.part.9+0x4c>
    8112:	81 30       	cpi	r24, 0x01	; 1
    8114:	09 f0       	breq	.+2      	; 0x8118 <_Z16Key_Left_Pressedv.part.9+0x156>
    8116:	7d cf       	rjmp	.-262    	; 0x8012 <_Z16Key_Left_Pressedv.part.9+0x50>
    8118:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Total_Tooth>
    811c:	6a cf       	rjmp	.-300    	; 0x7ff2 <_Z16Key_Left_Pressedv.part.9+0x30>

0000811e <_Z16Key_Down_Pressedv.part.8>:
    811e:	cf 92       	push	r12
    8120:	df 92       	push	r13
    8122:	ef 92       	push	r14
    8124:	ff 92       	push	r15
    8126:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <Mode>
    812a:	e1 50       	subi	r30, 0x01	; 1
    812c:	e8 30       	cpi	r30, 0x08	; 8
    812e:	20 f5       	brcc	.+72     	; 0x8178 <_Z16Key_Down_Pressedv.part.8+0x5a>
    8130:	f0 e0       	ldi	r31, 0x00	; 0
    8132:	88 27       	eor	r24, r24
    8134:	e1 56       	subi	r30, 0x61	; 97
    8136:	ff 4b       	sbci	r31, 0xBF	; 191
    8138:	8f 4f       	sbci	r24, 0xFF	; 255
    813a:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
    813e:	e2 40       	sbci	r30, 0x02	; 2
    8140:	a7 40       	sbci	r26, 0x07	; 7
    8142:	ce 40       	sbci	r28, 0x0E	; 14
    8144:	fc 40       	sbci	r31, 0x0C	; 12
    8146:	fc 40       	sbci	r31, 0x0C	; 12
    8148:	bc 40       	sbci	r27, 0x0C	; 12
    814a:	0f 41       	sbci	r16, 0x1F	; 31
    814c:	ac 41       	sbci	r26, 0x1C	; 28
    814e:	f2 99       	sbic	0x1e, 2	; 30
    8150:	12 c0       	rjmp	.+36     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8152:	f5 99       	sbic	0x1e, 5	; 30
    8154:	10 c0       	rjmp	.+32     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8156:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    815a:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    815e:	85 3f       	cpi	r24, 0xF5	; 245
    8160:	21 e0       	ldi	r18, 0x01	; 1
    8162:	92 07       	cpc	r25, r18
    8164:	8c f0       	brlt	.+34     	; 0x8188 <_Z16Key_Down_Pressedv.part.8+0x6a>
    8166:	84 56       	subi	r24, 0x64	; 100
    8168:	91 09       	sbc	r25, r1
    816a:	90 93 de 11 	sts	0x11DE, r25	; 0x8011de <Ap+0x1>
    816e:	80 93 dd 11 	sts	0x11DD, r24	; 0x8011dd <Ap>
    8172:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    8176:	fa d9       	rcall	.-3084   	; 0x756c <_Z5Printv>
    8178:	81 e0       	ldi	r24, 0x01	; 1
    817a:	80 93 09 12 	sts	0x1209, r24	; 0x801209 <button_flag>
    817e:	ff 90       	pop	r15
    8180:	ef 90       	pop	r14
    8182:	df 90       	pop	r13
    8184:	cf 90       	pop	r12
    8186:	08 95       	ret
    8188:	89 3c       	cpi	r24, 0xC9	; 201
    818a:	91 05       	cpc	r25, r1
    818c:	14 f0       	brlt	.+4      	; 0x8192 <_Z16Key_Down_Pressedv.part.8+0x74>
    818e:	c2 97       	sbiw	r24, 0x32	; 50
    8190:	ec cf       	rjmp	.-40     	; 0x816a <_Z16Key_Down_Pressedv.part.8+0x4c>
    8192:	85 36       	cpi	r24, 0x65	; 101
    8194:	91 05       	cpc	r25, r1
    8196:	ec f1       	brlt	.+122    	; 0x8212 <_Z16Key_Down_Pressedv.part.8+0xf4>
    8198:	44 97       	sbiw	r24, 0x14	; 20
    819a:	e7 cf       	rjmp	.-50     	; 0x816a <_Z16Key_Down_Pressedv.part.8+0x4c>
    819c:	f2 99       	sbic	0x1e, 2	; 30
    819e:	eb cf       	rjmp	.-42     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81a0:	f5 99       	sbic	0x1e, 5	; 30
    81a2:	e9 cf       	rjmp	.-46     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81a4:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    81a8:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    81ac:	85 3f       	cpi	r24, 0xF5	; 245
    81ae:	21 e0       	ldi	r18, 0x01	; 1
    81b0:	92 07       	cpc	r25, r18
    81b2:	6c f7       	brge	.-38     	; 0x818e <_Z16Key_Down_Pressedv.part.8+0x70>
    81b4:	8b 30       	cpi	r24, 0x0B	; 11
    81b6:	91 05       	cpc	r25, r1
    81b8:	84 f5       	brge	.+96     	; 0x821a <_Z16Key_Down_Pressedv.part.8+0xfc>
    81ba:	18 16       	cp	r1, r24
    81bc:	19 06       	cpc	r1, r25
    81be:	dc f6       	brge	.-74     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81c0:	05 97       	sbiw	r24, 0x05	; 5
    81c2:	d3 cf       	rjmp	.-90     	; 0x816a <_Z16Key_Down_Pressedv.part.8+0x4c>
    81c4:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Thread_Step>
    81c8:	88 23       	and	r24, r24
    81ca:	a9 f2       	breq	.-86     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81cc:	f2 99       	sbic	0x1e, 2	; 30
    81ce:	d3 cf       	rjmp	.-90     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81d0:	f5 99       	sbic	0x1e, 5	; 30
    81d2:	d1 cf       	rjmp	.-94     	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81d4:	81 50       	subi	r24, 0x01	; 1
    81d6:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <Thread_Step>
    81da:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
    81de:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    81e2:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
    81e6:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    81ea:	f3 98       	cbi	0x1e, 3	; 30
    81ec:	f6 98       	cbi	0x1e, 6	; 30
    81ee:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    81f2:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
    81f6:	bd cf       	rjmp	.-134    	; 0x8172 <_Z16Key_Down_Pressedv.part.8+0x54>
    81f8:	f2 99       	sbic	0x1e, 2	; 30
    81fa:	bd cf       	rjmp	.-134    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    81fc:	f5 99       	sbic	0x1e, 5	; 30
    81fe:	bb cf       	rjmp	.-138    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8200:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    8204:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    8208:	85 3f       	cpi	r24, 0xF5	; 245
    820a:	21 e0       	ldi	r18, 0x01	; 1
    820c:	92 07       	cpc	r25, r18
    820e:	0c f0       	brlt	.+2      	; 0x8212 <_Z16Key_Down_Pressedv.part.8+0xf4>
    8210:	be cf       	rjmp	.-132    	; 0x818e <_Z16Key_Down_Pressedv.part.8+0x70>
    8212:	18 16       	cp	r1, r24
    8214:	19 06       	cpc	r1, r25
    8216:	0c f0       	brlt	.+2      	; 0x821a <_Z16Key_Down_Pressedv.part.8+0xfc>
    8218:	ae cf       	rjmp	.-164    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    821a:	0a 97       	sbiw	r24, 0x0a	; 10
    821c:	a6 cf       	rjmp	.-180    	; 0x816a <_Z16Key_Down_Pressedv.part.8+0x4c>
    821e:	f2 99       	sbic	0x1e, 2	; 30
    8220:	aa cf       	rjmp	.-172    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8222:	f5 99       	sbic	0x1e, 5	; 30
    8224:	a8 cf       	rjmp	.-176    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8226:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    822a:	81 11       	cpse	r24, r1
    822c:	81 c0       	rjmp	.+258    	; 0x8330 <_Z16Key_Down_Pressedv.part.8+0x212>
    822e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Sph_R_mm>
    8232:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    8236:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    823a:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    823e:	85 3c       	cpi	r24, 0xC5	; 197
    8240:	29 e0       	ldi	r18, 0x09	; 9
    8242:	92 07       	cpc	r25, r18
    8244:	a1 05       	cpc	r26, r1
    8246:	b1 05       	cpc	r27, r1
    8248:	0c f4       	brge	.+2      	; 0x824c <_Z16Key_Down_Pressedv.part.8+0x12e>
    824a:	5e c0       	rjmp	.+188    	; 0x8308 <_Z16Key_Down_Pressedv.part.8+0x1ea>
    824c:	8a 5f       	subi	r24, 0xFA	; 250
    824e:	91 09       	sbc	r25, r1
    8250:	a1 09       	sbc	r26, r1
    8252:	b1 09       	sbc	r27, r1
    8254:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Sph_R_mm>
    8258:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <Sph_R_mm+0x1>
    825c:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <Sph_R_mm+0x2>
    8260:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <Sph_R_mm+0x3>
    8264:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    8268:	c0 90 23 02 	lds	r12, 0x0223	; 0x800223 <Sph_R_mm>
    826c:	d0 90 24 02 	lds	r13, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    8270:	e0 90 25 02 	lds	r14, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    8274:	f0 90 26 02 	lds	r15, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    8278:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <Bar_R_mm>
    827c:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <Bar_R_mm+0x1>
    8280:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <Bar_R_mm+0x2>
    8284:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <Bar_R_mm+0x3>
    8288:	c8 16       	cp	r12, r24
    828a:	d9 06       	cpc	r13, r25
    828c:	ea 06       	cpc	r14, r26
    828e:	fb 06       	cpc	r15, r27
    8290:	44 f4       	brge	.+16     	; 0x82a2 <_Z16Key_Down_Pressedv.part.8+0x184>
    8292:	c0 92 b7 11 	sts	0x11B7, r12	; 0x8011b7 <Bar_R_mm>
    8296:	d0 92 b8 11 	sts	0x11B8, r13	; 0x8011b8 <Bar_R_mm+0x1>
    829a:	e0 92 b9 11 	sts	0x11B9, r14	; 0x8011b9 <Bar_R_mm+0x2>
    829e:	f0 92 ba 11 	sts	0x11BA, r15	; 0x8011ba <Bar_R_mm+0x3>
    82a2:	a7 01       	movw	r20, r14
    82a4:	96 01       	movw	r18, r12
    82a6:	c7 01       	movw	r24, r14
    82a8:	b6 01       	movw	r22, r12
    82aa:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    82ae:	60 93 1c 12 	sts	0x121C, r22	; 0x80121c <R_Quad>
    82b2:	70 93 1d 12 	sts	0x121D, r23	; 0x80121d <R_Quad+0x1>
    82b6:	80 93 1e 12 	sts	0x121E, r24	; 0x80121e <R_Quad+0x2>
    82ba:	90 93 1f 12 	sts	0x121F, r25	; 0x80121f <R_Quad+0x3>
    82be:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    82c2:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    82c6:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    82ca:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    82ce:	28 9f       	mul	r18, r24
    82d0:	d0 01       	movw	r26, r0
    82d2:	29 9f       	mul	r18, r25
    82d4:	b0 0d       	add	r27, r0
    82d6:	38 9f       	mul	r19, r24
    82d8:	b0 0d       	add	r27, r0
    82da:	11 24       	eor	r1, r1
    82dc:	96 01       	movw	r18, r12
    82de:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    82e2:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <SCREW_X>
    82e6:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    82ea:	03 2e       	mov	r0, r19
    82ec:	00 0c       	add	r0, r0
    82ee:	44 0b       	sbc	r20, r20
    82f0:	55 0b       	sbc	r21, r21
    82f2:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    82f6:	20 93 18 12 	sts	0x1218, r18	; 0x801218 <Sph_R>
    82fa:	30 93 19 12 	sts	0x1219, r19	; 0x801219 <Sph_R+0x1>
    82fe:	40 93 1a 12 	sts	0x121A, r20	; 0x80121a <Sph_R+0x2>
    8302:	50 93 1b 12 	sts	0x121B, r21	; 0x80121b <Sph_R+0x3>
    8306:	37 cf       	rjmp	.-402    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8308:	83 3e       	cpi	r24, 0xE3	; 227
    830a:	24 e0       	ldi	r18, 0x04	; 4
    830c:	92 07       	cpc	r25, r18
    830e:	a1 05       	cpc	r26, r1
    8310:	b1 05       	cpc	r27, r1
    8312:	24 f0       	brlt	.+8      	; 0x831c <_Z16Key_Down_Pressedv.part.8+0x1fe>
    8314:	c2 97       	sbiw	r24, 0x32	; 50
    8316:	a1 09       	sbc	r26, r1
    8318:	b1 09       	sbc	r27, r1
    831a:	9c cf       	rjmp	.-200    	; 0x8254 <_Z16Key_Down_Pressedv.part.8+0x136>
    831c:	83 33       	cpi	r24, 0x33	; 51
    831e:	91 05       	cpc	r25, r1
    8320:	a1 05       	cpc	r26, r1
    8322:	b1 05       	cpc	r27, r1
    8324:	0c f4       	brge	.+2      	; 0x8328 <_Z16Key_Down_Pressedv.part.8+0x20a>
    8326:	a0 cf       	rjmp	.-192    	; 0x8268 <_Z16Key_Down_Pressedv.part.8+0x14a>
    8328:	49 97       	sbiw	r24, 0x19	; 25
    832a:	a1 09       	sbc	r26, r1
    832c:	b1 09       	sbc	r27, r1
    832e:	92 cf       	rjmp	.-220    	; 0x8254 <_Z16Key_Down_Pressedv.part.8+0x136>
    8330:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cutter_Step>
    8334:	ee 23       	and	r30, r30
    8336:	09 f4       	brne	.+2      	; 0x833a <_Z16Key_Down_Pressedv.part.8+0x21c>
    8338:	1e cf       	rjmp	.-452    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    833a:	e1 50       	subi	r30, 0x01	; 1
    833c:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <Cutter_Step>
    8340:	f0 e0       	ldi	r31, 0x00	; 0
    8342:	ee 0f       	add	r30, r30
    8344:	ff 1f       	adc	r31, r31
    8346:	ed 5c       	subi	r30, 0xCD	; 205
    8348:	f1 4f       	sbci	r31, 0xF1	; 241
    834a:	80 81       	ld	r24, Z
    834c:	91 81       	ldd	r25, Z+1	; 0x01
    834e:	90 93 25 12 	sts	0x1225, r25	; 0x801225 <Cutter_Width+0x1>
    8352:	80 93 24 12 	sts	0x1224, r24	; 0x801224 <Cutter_Width>
    8356:	0d cf       	rjmp	.-486    	; 0x8172 <_Z16Key_Down_Pressedv.part.8+0x54>
    8358:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Total_Tooth>
    835c:	82 30       	cpi	r24, 0x02	; 2
    835e:	08 f4       	brcc	.+2      	; 0x8362 <_Z16Key_Down_Pressedv.part.8+0x244>
    8360:	0a cf       	rjmp	.-492    	; 0x8176 <_Z16Key_Down_Pressedv.part.8+0x58>
    8362:	81 50       	subi	r24, 0x01	; 1
    8364:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Total_Tooth>
    8368:	81 e0       	ldi	r24, 0x01	; 1
    836a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Current_Tooth>
    836e:	01 cf       	rjmp	.-510    	; 0x8172 <_Z16Key_Down_Pressedv.part.8+0x54>

00008370 <_Z14Key_Up_Pressedv.part.7>:
    8370:	cf 92       	push	r12
    8372:	df 92       	push	r13
    8374:	ef 92       	push	r14
    8376:	ff 92       	push	r15
    8378:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <Mode>
    837c:	e1 50       	subi	r30, 0x01	; 1
    837e:	e8 30       	cpi	r30, 0x08	; 8
    8380:	38 f5       	brcc	.+78     	; 0x83d0 <_Z14Key_Up_Pressedv.part.7+0x60>
    8382:	f0 e0       	ldi	r31, 0x00	; 0
    8384:	88 27       	eor	r24, r24
    8386:	e8 53       	subi	r30, 0x38	; 56
    8388:	fe 4b       	sbci	r31, 0xBE	; 190
    838a:	8f 4f       	sbci	r24, 0xFF	; 255
    838c:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
    8390:	0a 42       	sbci	r16, 0x2A	; 42
    8392:	d0 41       	sbci	r29, 0x10	; 16
    8394:	fd 41       	sbci	r31, 0x1D	; 29
    8396:	24 42       	sbci	r18, 0x24	; 36
    8398:	24 42       	sbci	r18, 0x24	; 36
    839a:	e8 41       	sbci	r30, 0x18	; 24
    839c:	37 42       	sbci	r19, 0x27	; 39
    839e:	c0 42       	sbci	r28, 0x20	; 32
    83a0:	f2 99       	sbic	0x1e, 2	; 30
    83a2:	15 c0       	rjmp	.+42     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    83a4:	f5 99       	sbic	0x1e, 5	; 30
    83a6:	13 c0       	rjmp	.+38     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    83a8:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    83ac:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    83b0:	84 36       	cpi	r24, 0x64	; 100
    83b2:	91 05       	cpc	r25, r1
    83b4:	14 f4       	brge	.+4      	; 0x83ba <_Z14Key_Up_Pressedv.part.7+0x4a>
    83b6:	0a 96       	adiw	r24, 0x0a	; 10
    83b8:	04 c0       	rjmp	.+8      	; 0x83c2 <_Z14Key_Up_Pressedv.part.7+0x52>
    83ba:	88 3c       	cpi	r24, 0xC8	; 200
    83bc:	91 05       	cpc	r25, r1
    83be:	84 f4       	brge	.+32     	; 0x83e0 <_Z14Key_Up_Pressedv.part.7+0x70>
    83c0:	44 96       	adiw	r24, 0x14	; 20
    83c2:	90 93 de 11 	sts	0x11DE, r25	; 0x8011de <Ap+0x1>
    83c6:	80 93 dd 11 	sts	0x11DD, r24	; 0x8011dd <Ap>
    83ca:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    83ce:	ce d8       	rcall	.-3684   	; 0x756c <_Z5Printv>
    83d0:	81 e0       	ldi	r24, 0x01	; 1
    83d2:	80 93 09 12 	sts	0x1209, r24	; 0x801209 <button_flag>
    83d6:	ff 90       	pop	r15
    83d8:	ef 90       	pop	r14
    83da:	df 90       	pop	r13
    83dc:	cf 90       	pop	r12
    83de:	08 95       	ret
    83e0:	84 3f       	cpi	r24, 0xF4	; 244
    83e2:	21 e0       	ldi	r18, 0x01	; 1
    83e4:	92 07       	cpc	r25, r18
    83e6:	14 f4       	brge	.+4      	; 0x83ec <_Z14Key_Up_Pressedv.part.7+0x7c>
    83e8:	c2 96       	adiw	r24, 0x32	; 50
    83ea:	eb cf       	rjmp	.-42     	; 0x83c2 <_Z14Key_Up_Pressedv.part.7+0x52>
    83ec:	84 38       	cpi	r24, 0x84	; 132
    83ee:	23 e0       	ldi	r18, 0x03	; 3
    83f0:	92 07       	cpc	r25, r18
    83f2:	6c f7       	brge	.-38     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    83f4:	8c 59       	subi	r24, 0x9C	; 156
    83f6:	9f 4f       	sbci	r25, 0xFF	; 255
    83f8:	e4 cf       	rjmp	.-56     	; 0x83c2 <_Z14Key_Up_Pressedv.part.7+0x52>
    83fa:	f2 99       	sbic	0x1e, 2	; 30
    83fc:	e8 cf       	rjmp	.-48     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    83fe:	f5 99       	sbic	0x1e, 5	; 30
    8400:	e6 cf       	rjmp	.-52     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8402:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    8406:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    840a:	8a 30       	cpi	r24, 0x0A	; 10
    840c:	91 05       	cpc	r25, r1
    840e:	24 f5       	brge	.+72     	; 0x8458 <_Z14Key_Up_Pressedv.part.7+0xe8>
    8410:	05 96       	adiw	r24, 0x05	; 5
    8412:	d7 cf       	rjmp	.-82     	; 0x83c2 <_Z14Key_Up_Pressedv.part.7+0x52>
    8414:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <Thread_Step>
    8418:	82 33       	cpi	r24, 0x32	; 50
    841a:	c8 f6       	brcc	.-78     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    841c:	f2 99       	sbic	0x1e, 2	; 30
    841e:	d7 cf       	rjmp	.-82     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8420:	f5 99       	sbic	0x1e, 5	; 30
    8422:	d5 cf       	rjmp	.-86     	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8424:	8f 5f       	subi	r24, 0xFF	; 255
    8426:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <Thread_Step>
    842a:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
    842e:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
    8432:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
    8436:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    843a:	f3 98       	cbi	0x1e, 3	; 30
    843c:	f6 98       	cbi	0x1e, 6	; 30
    843e:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    8442:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
    8446:	c1 cf       	rjmp	.-126    	; 0x83ca <_Z14Key_Up_Pressedv.part.7+0x5a>
    8448:	f2 99       	sbic	0x1e, 2	; 30
    844a:	c1 cf       	rjmp	.-126    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    844c:	f5 99       	sbic	0x1e, 5	; 30
    844e:	bf cf       	rjmp	.-130    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8450:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    8454:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    8458:	84 3f       	cpi	r24, 0xF4	; 244
    845a:	21 e0       	ldi	r18, 0x01	; 1
    845c:	92 07       	cpc	r25, r18
    845e:	0c f4       	brge	.+2      	; 0x8462 <_Z14Key_Up_Pressedv.part.7+0xf2>
    8460:	aa cf       	rjmp	.-172    	; 0x83b6 <_Z14Key_Up_Pressedv.part.7+0x46>
    8462:	84 38       	cpi	r24, 0x84	; 132
    8464:	23 e0       	ldi	r18, 0x03	; 3
    8466:	92 07       	cpc	r25, r18
    8468:	0c f0       	brlt	.+2      	; 0x846c <_Z14Key_Up_Pressedv.part.7+0xfc>
    846a:	b1 cf       	rjmp	.-158    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    846c:	bd cf       	rjmp	.-134    	; 0x83e8 <_Z14Key_Up_Pressedv.part.7+0x78>
    846e:	f2 99       	sbic	0x1e, 2	; 30
    8470:	ae cf       	rjmp	.-164    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8472:	f5 99       	sbic	0x1e, 5	; 30
    8474:	ac cf       	rjmp	.-168    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8476:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    847a:	81 11       	cpse	r24, r1
    847c:	6d c0       	rjmp	.+218    	; 0x8558 <_Z14Key_Up_Pressedv.part.7+0x1e8>
    847e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Sph_R_mm>
    8482:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    8486:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    848a:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    848e:	82 3e       	cpi	r24, 0xE2	; 226
    8490:	24 e0       	ldi	r18, 0x04	; 4
    8492:	92 07       	cpc	r25, r18
    8494:	a1 05       	cpc	r26, r1
    8496:	b1 05       	cpc	r27, r1
    8498:	0c f0       	brlt	.+2      	; 0x849c <_Z14Key_Up_Pressedv.part.7+0x12c>
    849a:	48 c0       	rjmp	.+144    	; 0x852c <_Z14Key_Up_Pressedv.part.7+0x1bc>
    849c:	49 96       	adiw	r24, 0x19	; 25
    849e:	a1 1d       	adc	r26, r1
    84a0:	b1 1d       	adc	r27, r1
    84a2:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Sph_R_mm>
    84a6:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <Sph_R_mm+0x1>
    84aa:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <Sph_R_mm+0x2>
    84ae:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <Sph_R_mm+0x3>
    84b2:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    84b6:	c0 90 23 02 	lds	r12, 0x0223	; 0x800223 <Sph_R_mm>
    84ba:	d0 90 24 02 	lds	r13, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    84be:	e0 90 25 02 	lds	r14, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    84c2:	f0 90 26 02 	lds	r15, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    84c6:	a7 01       	movw	r20, r14
    84c8:	96 01       	movw	r18, r12
    84ca:	c7 01       	movw	r24, r14
    84cc:	b6 01       	movw	r22, r12
    84ce:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    84d2:	60 93 1c 12 	sts	0x121C, r22	; 0x80121c <R_Quad>
    84d6:	70 93 1d 12 	sts	0x121D, r23	; 0x80121d <R_Quad+0x1>
    84da:	80 93 1e 12 	sts	0x121E, r24	; 0x80121e <R_Quad+0x2>
    84de:	90 93 1f 12 	sts	0x121F, r25	; 0x80121f <R_Quad+0x3>
    84e2:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    84e6:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    84ea:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    84ee:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    84f2:	28 9f       	mul	r18, r24
    84f4:	d0 01       	movw	r26, r0
    84f6:	29 9f       	mul	r18, r25
    84f8:	b0 0d       	add	r27, r0
    84fa:	38 9f       	mul	r19, r24
    84fc:	b0 0d       	add	r27, r0
    84fe:	11 24       	eor	r1, r1
    8500:	96 01       	movw	r18, r12
    8502:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    8506:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <SCREW_X>
    850a:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    850e:	03 2e       	mov	r0, r19
    8510:	00 0c       	add	r0, r0
    8512:	44 0b       	sbc	r20, r20
    8514:	55 0b       	sbc	r21, r21
    8516:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
    851a:	20 93 18 12 	sts	0x1218, r18	; 0x801218 <Sph_R>
    851e:	30 93 19 12 	sts	0x1219, r19	; 0x801219 <Sph_R+0x1>
    8522:	40 93 1a 12 	sts	0x121A, r20	; 0x80121a <Sph_R+0x2>
    8526:	50 93 1b 12 	sts	0x121B, r21	; 0x80121b <Sph_R+0x3>
    852a:	51 cf       	rjmp	.-350    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    852c:	84 3c       	cpi	r24, 0xC4	; 196
    852e:	29 e0       	ldi	r18, 0x09	; 9
    8530:	92 07       	cpc	r25, r18
    8532:	a1 05       	cpc	r26, r1
    8534:	b1 05       	cpc	r27, r1
    8536:	24 f4       	brge	.+8      	; 0x8540 <_Z14Key_Up_Pressedv.part.7+0x1d0>
    8538:	c2 96       	adiw	r24, 0x32	; 50
    853a:	a1 1d       	adc	r26, r1
    853c:	b1 1d       	adc	r27, r1
    853e:	b1 cf       	rjmp	.-158    	; 0x84a2 <_Z14Key_Up_Pressedv.part.7+0x132>
    8540:	8e 38       	cpi	r24, 0x8E	; 142
    8542:	22 e1       	ldi	r18, 0x12	; 18
    8544:	92 07       	cpc	r25, r18
    8546:	a1 05       	cpc	r26, r1
    8548:	b1 05       	cpc	r27, r1
    854a:	0c f0       	brlt	.+2      	; 0x854e <_Z14Key_Up_Pressedv.part.7+0x1de>
    854c:	b4 cf       	rjmp	.-152    	; 0x84b6 <_Z14Key_Up_Pressedv.part.7+0x146>
    854e:	86 50       	subi	r24, 0x06	; 6
    8550:	9f 4f       	sbci	r25, 0xFF	; 255
    8552:	af 4f       	sbci	r26, 0xFF	; 255
    8554:	bf 4f       	sbci	r27, 0xFF	; 255
    8556:	a5 cf       	rjmp	.-182    	; 0x84a2 <_Z14Key_Up_Pressedv.part.7+0x132>
    8558:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cutter_Step>
    855c:	e4 30       	cpi	r30, 0x04	; 4
    855e:	08 f0       	brcs	.+2      	; 0x8562 <_Z14Key_Up_Pressedv.part.7+0x1f2>
    8560:	36 cf       	rjmp	.-404    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    8562:	ef 5f       	subi	r30, 0xFF	; 255
    8564:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <Cutter_Step>
    8568:	f0 e0       	ldi	r31, 0x00	; 0
    856a:	ee 0f       	add	r30, r30
    856c:	ff 1f       	adc	r31, r31
    856e:	ed 5c       	subi	r30, 0xCD	; 205
    8570:	f1 4f       	sbci	r31, 0xF1	; 241
    8572:	80 81       	ld	r24, Z
    8574:	91 81       	ldd	r25, Z+1	; 0x01
    8576:	90 93 25 12 	sts	0x1225, r25	; 0x801225 <Cutter_Width+0x1>
    857a:	80 93 24 12 	sts	0x1224, r24	; 0x801224 <Cutter_Width>
    857e:	25 cf       	rjmp	.-438    	; 0x83ca <_Z14Key_Up_Pressedv.part.7+0x5a>
    8580:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Total_Tooth>
    8584:	8f 3f       	cpi	r24, 0xFF	; 255
    8586:	09 f4       	brne	.+2      	; 0x858a <_Z14Key_Up_Pressedv.part.7+0x21a>
    8588:	22 cf       	rjmp	.-444    	; 0x83ce <_Z14Key_Up_Pressedv.part.7+0x5e>
    858a:	8f 5f       	subi	r24, 0xFF	; 255
    858c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Total_Tooth>
    8590:	81 e0       	ldi	r24, 0x01	; 1
    8592:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Current_Tooth>
    8596:	19 cf       	rjmp	.-462    	; 0x83ca <_Z14Key_Up_Pressedv.part.7+0x5a>

00008598 <_Z13Feed_Ext_Rearv>:
    8598:	8f 92       	push	r8
    859a:	9f 92       	push	r9
    859c:	af 92       	push	r10
    859e:	bf 92       	push	r11
    85a0:	cf 92       	push	r12
    85a2:	df 92       	push	r13
    85a4:	ef 92       	push	r14
    85a6:	ff 92       	push	r15
    85a8:	cf 93       	push	r28
    85aa:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    85ae:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    85b2:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    85b6:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    85ba:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    85be:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    85c2:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    85c6:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    85ca:	48 17       	cp	r20, r24
    85cc:	59 07       	cpc	r21, r25
    85ce:	6a 07       	cpc	r22, r26
    85d0:	7b 07       	cpc	r23, r27
    85d2:	09 f0       	breq	.+2      	; 0x85d6 <_Z13Feed_Ext_Rearv+0x3e>
    85d4:	1b c1       	rjmp	.+566    	; 0x880c <_Z13Feed_Ext_Rearv+0x274>
    85d6:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    85da:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    85de:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    85e2:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    85e6:	c0 90 c3 04 	lds	r12, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    85ea:	d0 90 c4 04 	lds	r13, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    85ee:	e0 90 c5 04 	lds	r14, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    85f2:	f0 90 c6 04 	lds	r15, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    85f6:	8c 15       	cp	r24, r12
    85f8:	9d 05       	cpc	r25, r13
    85fa:	ae 05       	cpc	r26, r14
    85fc:	bf 05       	cpc	r27, r15
    85fe:	11 f4       	brne	.+4      	; 0x8604 <_Z13Feed_Ext_Rearv+0x6c>
    8600:	f6 9b       	sbis	0x1e, 6	; 30
    8602:	10 c0       	rjmp	.+32     	; 0x8624 <_Z13Feed_Ext_Rearv+0x8c>
    8604:	80 90 20 12 	lds	r8, 0x1220	; 0x801220 <Null_Z_Pos>
    8608:	90 90 21 12 	lds	r9, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    860c:	a0 90 22 12 	lds	r10, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    8610:	b0 90 23 12 	lds	r11, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    8614:	88 15       	cp	r24, r8
    8616:	99 05       	cpc	r25, r9
    8618:	aa 05       	cpc	r26, r10
    861a:	bb 05       	cpc	r27, r11
    861c:	09 f0       	breq	.+2      	; 0x8620 <_Z13Feed_Ext_Rearv+0x88>
    861e:	e7 c0       	rjmp	.+462    	; 0x87ee <_Z13Feed_Ext_Rearv+0x256>
    8620:	f6 99       	sbic	0x1e, 6	; 30
    8622:	e5 c0       	rjmp	.+458    	; 0x87ee <_Z13Feed_Ext_Rearv+0x256>
    8624:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    8628:	81 11       	cpse	r24, r1
    862a:	79 c1       	rjmp	.+754    	; 0x891e <_Z13Feed_Ext_Rearv+0x386>
    862c:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    8630:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    8634:	8c 17       	cp	r24, r28
    8636:	08 f0       	brcs	.+2      	; 0x863a <_Z13Feed_Ext_Rearv+0xa2>
    8638:	45 c0       	rjmp	.+138    	; 0x86c4 <_Z13Feed_Ext_Rearv+0x12c>
    863a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    863e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8642:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    8646:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    864a:	09 2e       	mov	r0, r25
    864c:	00 0c       	add	r0, r0
    864e:	aa 0b       	sbc	r26, r26
    8650:	bb 0b       	sbc	r27, r27
    8652:	8c 0d       	add	r24, r12
    8654:	9d 1d       	adc	r25, r13
    8656:	ae 1d       	adc	r26, r14
    8658:	bf 1d       	adc	r27, r15
    865a:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    865e:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    8662:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    8666:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    866a:	80 e0       	ldi	r24, 0x00	; 0
    866c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    8670:	17 9a       	sbi	0x02, 7	; 2
    8672:	15 9a       	sbi	0x02, 5	; 2
    8674:	80 e0       	ldi	r24, 0x00	; 0
    8676:	90 e0       	ldi	r25, 0x00	; 0
    8678:	a0 e0       	ldi	r26, 0x00	; 0
    867a:	b0 e4       	ldi	r27, 0x40	; 64
    867c:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    8680:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    8684:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    8688:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    868c:	80 e0       	ldi	r24, 0x00	; 0
    868e:	90 e0       	ldi	r25, 0x00	; 0
    8690:	a0 e0       	ldi	r26, 0x00	; 0
    8692:	b0 ec       	ldi	r27, 0xC0	; 192
    8694:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    8698:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    869c:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    86a0:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    86a4:	81 e0       	ldi	r24, 0x01	; 1
    86a6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    86aa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    86ae:	cf 91       	pop	r28
    86b0:	ff 90       	pop	r15
    86b2:	ef 90       	pop	r14
    86b4:	df 90       	pop	r13
    86b6:	cf 90       	pop	r12
    86b8:	bf 90       	pop	r11
    86ba:	af 90       	pop	r10
    86bc:	9f 90       	pop	r9
    86be:	8f 90       	pop	r8
    86c0:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z5Printv>
    86c4:	81 e0       	ldi	r24, 0x01	; 1
    86c6:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    86ca:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    86ce:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    86d2:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    86d6:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    86da:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    86de:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    86e2:	28 9f       	mul	r18, r24
    86e4:	b0 01       	movw	r22, r0
    86e6:	29 9f       	mul	r18, r25
    86e8:	70 0d       	add	r23, r0
    86ea:	38 9f       	mul	r19, r24
    86ec:	70 0d       	add	r23, r0
    86ee:	11 24       	eor	r1, r1
    86f0:	07 2e       	mov	r0, r23
    86f2:	00 0c       	add	r0, r0
    86f4:	88 0b       	sbc	r24, r24
    86f6:	99 0b       	sbc	r25, r25
    86f8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    86fc:	4b 01       	movw	r8, r22
    86fe:	5c 01       	movw	r10, r24
    8700:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    8704:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    8708:	07 2e       	mov	r0, r23
    870a:	00 0c       	add	r0, r0
    870c:	88 0b       	sbc	r24, r24
    870e:	99 0b       	sbc	r25, r25
    8710:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    8714:	9b 01       	movw	r18, r22
    8716:	ac 01       	movw	r20, r24
    8718:	c5 01       	movw	r24, r10
    871a:	b4 01       	movw	r22, r8
    871c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    8720:	20 e0       	ldi	r18, 0x00	; 0
    8722:	30 e0       	ldi	r19, 0x00	; 0
    8724:	40 e0       	ldi	r20, 0x00	; 0
    8726:	5f e3       	ldi	r21, 0x3F	; 63
    8728:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    872c:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    8730:	61 15       	cp	r22, r1
    8732:	71 05       	cpc	r23, r1
    8734:	89 f5       	brne	.+98     	; 0x8798 <_Z13Feed_Ext_Rearv+0x200>
    8736:	c1 30       	cpi	r28, 0x01	; 1
    8738:	11 f5       	brne	.+68     	; 0x877e <_Z13Feed_Ext_Rearv+0x1e6>
    873a:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    873e:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    8742:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    8746:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    874a:	01 96       	adiw	r24, 0x01	; 1
    874c:	a1 1d       	adc	r26, r1
    874e:	b1 1d       	adc	r27, r1
    8750:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    8754:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    8758:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    875c:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    8760:	17 98       	cbi	0x02, 7	; 2
    8762:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    8766:	81 e0       	ldi	r24, 0x01	; 1
    8768:	cf 91       	pop	r28
    876a:	ff 90       	pop	r15
    876c:	ef 90       	pop	r14
    876e:	df 90       	pop	r13
    8770:	cf 90       	pop	r12
    8772:	bf 90       	pop	r11
    8774:	af 90       	pop	r10
    8776:	9f 90       	pop	r9
    8778:	8f 90       	pop	r8
    877a:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    877e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    8782:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    8786:	09 2e       	mov	r0, r25
    8788:	00 0c       	add	r0, r0
    878a:	aa 0b       	sbc	r26, r26
    878c:	bb 0b       	sbc	r27, r27
    878e:	8c 0d       	add	r24, r12
    8790:	9d 1d       	adc	r25, r13
    8792:	ae 1d       	adc	r26, r14
    8794:	bf 1d       	adc	r27, r15
    8796:	dc cf       	rjmp	.-72     	; 0x8750 <_Z13Feed_Ext_Rearv+0x1b8>
    8798:	20 91 03 0a 	lds	r18, 0x0A03	; 0x800a03 <McSTEP_Z>
    879c:	30 91 04 0a 	lds	r19, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    87a0:	26 9f       	mul	r18, r22
    87a2:	a0 01       	movw	r20, r0
    87a4:	27 9f       	mul	r18, r23
    87a6:	50 0d       	add	r21, r0
    87a8:	36 9f       	mul	r19, r22
    87aa:	50 0d       	add	r21, r0
    87ac:	11 24       	eor	r1, r1
    87ae:	05 2e       	mov	r0, r21
    87b0:	00 0c       	add	r0, r0
    87b2:	66 0b       	sbc	r22, r22
    87b4:	77 0b       	sbc	r23, r23
    87b6:	c1 30       	cpi	r28, 0x01	; 1
    87b8:	69 f4       	brne	.+26     	; 0x87d4 <_Z13Feed_Ext_Rearv+0x23c>
    87ba:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    87be:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    87c2:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    87c6:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    87ca:	84 0f       	add	r24, r20
    87cc:	95 1f       	adc	r25, r21
    87ce:	a6 1f       	adc	r26, r22
    87d0:	b7 1f       	adc	r27, r23
    87d2:	be cf       	rjmp	.-132    	; 0x8750 <_Z13Feed_Ext_Rearv+0x1b8>
    87d4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    87d8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    87dc:	09 2e       	mov	r0, r25
    87de:	00 0c       	add	r0, r0
    87e0:	aa 0b       	sbc	r26, r26
    87e2:	bb 0b       	sbc	r27, r27
    87e4:	8c 0d       	add	r24, r12
    87e6:	9d 1d       	adc	r25, r13
    87e8:	ae 1d       	adc	r26, r14
    87ea:	bf 1d       	adc	r27, r15
    87ec:	ee cf       	rjmp	.-36     	; 0x87ca <_Z13Feed_Ext_Rearv+0x232>
    87ee:	c0 90 f6 09 	lds	r12, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    87f2:	d0 90 f7 09 	lds	r13, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    87f6:	e0 90 f8 09 	lds	r14, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    87fa:	f0 90 f9 09 	lds	r15, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    87fe:	8c 15       	cp	r24, r12
    8800:	9d 05       	cpc	r25, r13
    8802:	ae 05       	cpc	r26, r14
    8804:	bf 05       	cpc	r27, r15
    8806:	11 f4       	brne	.+4      	; 0x880c <_Z13Feed_Ext_Rearv+0x274>
    8808:	f3 9b       	sbis	0x1e, 3	; 30
    880a:	4d c0       	rjmp	.+154    	; 0x88a6 <_Z13Feed_Ext_Rearv+0x30e>
    880c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    8810:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    8814:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    8818:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    881c:	48 17       	cp	r20, r24
    881e:	59 07       	cpc	r21, r25
    8820:	6a 07       	cpc	r22, r26
    8822:	7b 07       	cpc	r23, r27
    8824:	09 f0       	breq	.+2      	; 0x8828 <_Z13Feed_Ext_Rearv+0x290>
    8826:	7b c0       	rjmp	.+246    	; 0x891e <_Z13Feed_Ext_Rearv+0x386>
    8828:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    882c:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    8830:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    8834:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    8838:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    883c:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    8840:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    8844:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    8848:	84 17       	cp	r24, r20
    884a:	95 07       	cpc	r25, r21
    884c:	a6 07       	cpc	r26, r22
    884e:	b7 07       	cpc	r27, r23
    8850:	09 f0       	breq	.+2      	; 0x8854 <_Z13Feed_Ext_Rearv+0x2bc>
    8852:	3f c0       	rjmp	.+126    	; 0x88d2 <_Z13Feed_Ext_Rearv+0x33a>
    8854:	f6 99       	sbic	0x1e, 6	; 30
    8856:	63 c0       	rjmp	.+198    	; 0x891e <_Z13Feed_Ext_Rearv+0x386>
    8858:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    885c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8860:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8864:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <REBOUND_Z>
    8868:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    886c:	05 2e       	mov	r0, r21
    886e:	00 0c       	add	r0, r0
    8870:	66 0b       	sbc	r22, r22
    8872:	77 0b       	sbc	r23, r23
    8874:	84 1b       	sub	r24, r20
    8876:	95 0b       	sbc	r25, r21
    8878:	a6 0b       	sbc	r26, r22
    887a:	b7 0b       	sbc	r27, r23
    887c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    8880:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    8884:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    8888:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    888c:	15 98       	cbi	0x02, 5	; 2
    888e:	81 e0       	ldi	r24, 0x01	; 1
    8890:	cf 91       	pop	r28
    8892:	ff 90       	pop	r15
    8894:	ef 90       	pop	r14
    8896:	df 90       	pop	r13
    8898:	cf 90       	pop	r12
    889a:	bf 90       	pop	r11
    889c:	af 90       	pop	r10
    889e:	9f 90       	pop	r9
    88a0:	8f 90       	pop	r8
    88a2:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
    88a6:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Pass_Total>
    88aa:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    88ae:	89 17       	cp	r24, r25
    88b0:	b0 f5       	brcc	.+108    	; 0x891e <_Z13Feed_Ext_Rearv+0x386>
    88b2:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    88b6:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    88ba:	81 e0       	ldi	r24, 0x01	; 1
    88bc:	cf 91       	pop	r28
    88be:	ff 90       	pop	r15
    88c0:	ef 90       	pop	r14
    88c2:	df 90       	pop	r13
    88c4:	cf 90       	pop	r12
    88c6:	bf 90       	pop	r11
    88c8:	af 90       	pop	r10
    88ca:	9f 90       	pop	r9
    88cc:	8f 90       	pop	r8
    88ce:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    88d2:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    88d6:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    88da:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    88de:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    88e2:	84 17       	cp	r24, r20
    88e4:	95 07       	cpc	r25, r21
    88e6:	a6 07       	cpc	r26, r22
    88e8:	b7 07       	cpc	r27, r23
    88ea:	c9 f4       	brne	.+50     	; 0x891e <_Z13Feed_Ext_Rearv+0x386>
    88ec:	f3 99       	sbic	0x1e, 3	; 30
    88ee:	17 c0       	rjmp	.+46     	; 0x891e <_Z13Feed_Ext_Rearv+0x386>
    88f0:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    88f4:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    88f8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    88fc:	8f 5f       	subi	r24, 0xFF	; 255
    88fe:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    8902:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    8906:	82 e0       	ldi	r24, 0x02	; 2
    8908:	cf 91       	pop	r28
    890a:	ff 90       	pop	r15
    890c:	ef 90       	pop	r14
    890e:	df 90       	pop	r13
    8910:	cf 90       	pop	r12
    8912:	bf 90       	pop	r11
    8914:	af 90       	pop	r10
    8916:	9f 90       	pop	r9
    8918:	8f 90       	pop	r8
    891a:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    891e:	cf 91       	pop	r28
    8920:	ff 90       	pop	r15
    8922:	ef 90       	pop	r14
    8924:	df 90       	pop	r13
    8926:	cf 90       	pop	r12
    8928:	bf 90       	pop	r11
    892a:	af 90       	pop	r10
    892c:	9f 90       	pop	r9
    892e:	8f 90       	pop	r8
    8930:	08 95       	ret

00008932 <_Z14Feed_Ext_Frontv>:
    8932:	8f 92       	push	r8
    8934:	9f 92       	push	r9
    8936:	af 92       	push	r10
    8938:	bf 92       	push	r11
    893a:	cf 92       	push	r12
    893c:	df 92       	push	r13
    893e:	ef 92       	push	r14
    8940:	ff 92       	push	r15
    8942:	cf 93       	push	r28
    8944:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    8948:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    894c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    8950:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    8954:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    8958:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    895c:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    8960:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    8964:	48 17       	cp	r20, r24
    8966:	59 07       	cpc	r21, r25
    8968:	6a 07       	cpc	r22, r26
    896a:	7b 07       	cpc	r23, r27
    896c:	09 f0       	breq	.+2      	; 0x8970 <_Z14Feed_Ext_Frontv+0x3e>
    896e:	1b c1       	rjmp	.+566    	; 0x8ba6 <_Z14Feed_Ext_Frontv+0x274>
    8970:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    8974:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    8978:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    897c:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    8980:	c0 90 c3 04 	lds	r12, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    8984:	d0 90 c4 04 	lds	r13, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    8988:	e0 90 c5 04 	lds	r14, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    898c:	f0 90 c6 04 	lds	r15, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    8990:	8c 15       	cp	r24, r12
    8992:	9d 05       	cpc	r25, r13
    8994:	ae 05       	cpc	r26, r14
    8996:	bf 05       	cpc	r27, r15
    8998:	11 f4       	brne	.+4      	; 0x899e <_Z14Feed_Ext_Frontv+0x6c>
    899a:	f6 9b       	sbis	0x1e, 6	; 30
    899c:	10 c0       	rjmp	.+32     	; 0x89be <_Z14Feed_Ext_Frontv+0x8c>
    899e:	80 90 20 12 	lds	r8, 0x1220	; 0x801220 <Null_Z_Pos>
    89a2:	90 90 21 12 	lds	r9, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    89a6:	a0 90 22 12 	lds	r10, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    89aa:	b0 90 23 12 	lds	r11, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    89ae:	88 15       	cp	r24, r8
    89b0:	99 05       	cpc	r25, r9
    89b2:	aa 05       	cpc	r26, r10
    89b4:	bb 05       	cpc	r27, r11
    89b6:	09 f0       	breq	.+2      	; 0x89ba <_Z14Feed_Ext_Frontv+0x88>
    89b8:	e7 c0       	rjmp	.+462    	; 0x8b88 <_Z14Feed_Ext_Frontv+0x256>
    89ba:	f6 99       	sbic	0x1e, 6	; 30
    89bc:	e5 c0       	rjmp	.+458    	; 0x8b88 <_Z14Feed_Ext_Frontv+0x256>
    89be:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    89c2:	81 11       	cpse	r24, r1
    89c4:	79 c1       	rjmp	.+754    	; 0x8cb8 <_Z14Feed_Ext_Frontv+0x386>
    89c6:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    89ca:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    89ce:	8c 17       	cp	r24, r28
    89d0:	08 f0       	brcs	.+2      	; 0x89d4 <_Z14Feed_Ext_Frontv+0xa2>
    89d2:	45 c0       	rjmp	.+138    	; 0x8a5e <_Z14Feed_Ext_Frontv+0x12c>
    89d4:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    89d8:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    89dc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    89e0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    89e4:	09 2e       	mov	r0, r25
    89e6:	00 0c       	add	r0, r0
    89e8:	aa 0b       	sbc	r26, r26
    89ea:	bb 0b       	sbc	r27, r27
    89ec:	8c 0d       	add	r24, r12
    89ee:	9d 1d       	adc	r25, r13
    89f0:	ae 1d       	adc	r26, r14
    89f2:	bf 1d       	adc	r27, r15
    89f4:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    89f8:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    89fc:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    8a00:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    8a04:	80 e0       	ldi	r24, 0x00	; 0
    8a06:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    8a0a:	17 9a       	sbi	0x02, 7	; 2
    8a0c:	15 9a       	sbi	0x02, 5	; 2
    8a0e:	80 e0       	ldi	r24, 0x00	; 0
    8a10:	90 e0       	ldi	r25, 0x00	; 0
    8a12:	a0 e0       	ldi	r26, 0x00	; 0
    8a14:	b0 e4       	ldi	r27, 0x40	; 64
    8a16:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    8a1a:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    8a1e:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    8a22:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    8a26:	80 e0       	ldi	r24, 0x00	; 0
    8a28:	90 e0       	ldi	r25, 0x00	; 0
    8a2a:	a0 e0       	ldi	r26, 0x00	; 0
    8a2c:	b0 ec       	ldi	r27, 0xC0	; 192
    8a2e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    8a32:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    8a36:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    8a3a:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    8a3e:	81 e0       	ldi	r24, 0x01	; 1
    8a40:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    8a44:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    8a48:	cf 91       	pop	r28
    8a4a:	ff 90       	pop	r15
    8a4c:	ef 90       	pop	r14
    8a4e:	df 90       	pop	r13
    8a50:	cf 90       	pop	r12
    8a52:	bf 90       	pop	r11
    8a54:	af 90       	pop	r10
    8a56:	9f 90       	pop	r9
    8a58:	8f 90       	pop	r8
    8a5a:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z5Printv>
    8a5e:	81 e0       	ldi	r24, 0x01	; 1
    8a60:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    8a64:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8a68:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8a6c:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    8a70:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    8a74:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    8a78:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    8a7c:	28 9f       	mul	r18, r24
    8a7e:	b0 01       	movw	r22, r0
    8a80:	29 9f       	mul	r18, r25
    8a82:	70 0d       	add	r23, r0
    8a84:	38 9f       	mul	r19, r24
    8a86:	70 0d       	add	r23, r0
    8a88:	11 24       	eor	r1, r1
    8a8a:	07 2e       	mov	r0, r23
    8a8c:	00 0c       	add	r0, r0
    8a8e:	88 0b       	sbc	r24, r24
    8a90:	99 0b       	sbc	r25, r25
    8a92:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    8a96:	4b 01       	movw	r8, r22
    8a98:	5c 01       	movw	r10, r24
    8a9a:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    8a9e:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    8aa2:	07 2e       	mov	r0, r23
    8aa4:	00 0c       	add	r0, r0
    8aa6:	88 0b       	sbc	r24, r24
    8aa8:	99 0b       	sbc	r25, r25
    8aaa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    8aae:	9b 01       	movw	r18, r22
    8ab0:	ac 01       	movw	r20, r24
    8ab2:	c5 01       	movw	r24, r10
    8ab4:	b4 01       	movw	r22, r8
    8ab6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    8aba:	20 e0       	ldi	r18, 0x00	; 0
    8abc:	30 e0       	ldi	r19, 0x00	; 0
    8abe:	40 e0       	ldi	r20, 0x00	; 0
    8ac0:	5f e3       	ldi	r21, 0x3F	; 63
    8ac2:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    8ac6:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    8aca:	61 15       	cp	r22, r1
    8acc:	71 05       	cpc	r23, r1
    8ace:	89 f5       	brne	.+98     	; 0x8b32 <_Z14Feed_Ext_Frontv+0x200>
    8ad0:	c1 30       	cpi	r28, 0x01	; 1
    8ad2:	11 f5       	brne	.+68     	; 0x8b18 <_Z14Feed_Ext_Frontv+0x1e6>
    8ad4:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    8ad8:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    8adc:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    8ae0:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    8ae4:	01 96       	adiw	r24, 0x01	; 1
    8ae6:	a1 1d       	adc	r26, r1
    8ae8:	b1 1d       	adc	r27, r1
    8aea:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    8aee:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    8af2:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    8af6:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    8afa:	17 98       	cbi	0x02, 7	; 2
    8afc:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    8b00:	81 e0       	ldi	r24, 0x01	; 1
    8b02:	cf 91       	pop	r28
    8b04:	ff 90       	pop	r15
    8b06:	ef 90       	pop	r14
    8b08:	df 90       	pop	r13
    8b0a:	cf 90       	pop	r12
    8b0c:	bf 90       	pop	r11
    8b0e:	af 90       	pop	r10
    8b10:	9f 90       	pop	r9
    8b12:	8f 90       	pop	r8
    8b14:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    8b18:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    8b1c:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    8b20:	09 2e       	mov	r0, r25
    8b22:	00 0c       	add	r0, r0
    8b24:	aa 0b       	sbc	r26, r26
    8b26:	bb 0b       	sbc	r27, r27
    8b28:	8c 0d       	add	r24, r12
    8b2a:	9d 1d       	adc	r25, r13
    8b2c:	ae 1d       	adc	r26, r14
    8b2e:	bf 1d       	adc	r27, r15
    8b30:	dc cf       	rjmp	.-72     	; 0x8aea <_Z14Feed_Ext_Frontv+0x1b8>
    8b32:	20 91 03 0a 	lds	r18, 0x0A03	; 0x800a03 <McSTEP_Z>
    8b36:	30 91 04 0a 	lds	r19, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    8b3a:	26 9f       	mul	r18, r22
    8b3c:	a0 01       	movw	r20, r0
    8b3e:	27 9f       	mul	r18, r23
    8b40:	50 0d       	add	r21, r0
    8b42:	36 9f       	mul	r19, r22
    8b44:	50 0d       	add	r21, r0
    8b46:	11 24       	eor	r1, r1
    8b48:	05 2e       	mov	r0, r21
    8b4a:	00 0c       	add	r0, r0
    8b4c:	66 0b       	sbc	r22, r22
    8b4e:	77 0b       	sbc	r23, r23
    8b50:	c1 30       	cpi	r28, 0x01	; 1
    8b52:	69 f4       	brne	.+26     	; 0x8b6e <_Z14Feed_Ext_Frontv+0x23c>
    8b54:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    8b58:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    8b5c:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    8b60:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    8b64:	84 0f       	add	r24, r20
    8b66:	95 1f       	adc	r25, r21
    8b68:	a6 1f       	adc	r26, r22
    8b6a:	b7 1f       	adc	r27, r23
    8b6c:	be cf       	rjmp	.-132    	; 0x8aea <_Z14Feed_Ext_Frontv+0x1b8>
    8b6e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    8b72:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    8b76:	09 2e       	mov	r0, r25
    8b78:	00 0c       	add	r0, r0
    8b7a:	aa 0b       	sbc	r26, r26
    8b7c:	bb 0b       	sbc	r27, r27
    8b7e:	8c 0d       	add	r24, r12
    8b80:	9d 1d       	adc	r25, r13
    8b82:	ae 1d       	adc	r26, r14
    8b84:	bf 1d       	adc	r27, r15
    8b86:	ee cf       	rjmp	.-36     	; 0x8b64 <_Z14Feed_Ext_Frontv+0x232>
    8b88:	c0 90 f6 09 	lds	r12, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    8b8c:	d0 90 f7 09 	lds	r13, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    8b90:	e0 90 f8 09 	lds	r14, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    8b94:	f0 90 f9 09 	lds	r15, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    8b98:	8c 15       	cp	r24, r12
    8b9a:	9d 05       	cpc	r25, r13
    8b9c:	ae 05       	cpc	r26, r14
    8b9e:	bf 05       	cpc	r27, r15
    8ba0:	11 f4       	brne	.+4      	; 0x8ba6 <_Z14Feed_Ext_Frontv+0x274>
    8ba2:	f3 9b       	sbis	0x1e, 3	; 30
    8ba4:	4d c0       	rjmp	.+154    	; 0x8c40 <_Z14Feed_Ext_Frontv+0x30e>
    8ba6:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    8baa:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    8bae:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    8bb2:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    8bb6:	48 17       	cp	r20, r24
    8bb8:	59 07       	cpc	r21, r25
    8bba:	6a 07       	cpc	r22, r26
    8bbc:	7b 07       	cpc	r23, r27
    8bbe:	09 f0       	breq	.+2      	; 0x8bc2 <_Z14Feed_Ext_Frontv+0x290>
    8bc0:	7b c0       	rjmp	.+246    	; 0x8cb8 <_Z14Feed_Ext_Frontv+0x386>
    8bc2:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    8bc6:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    8bca:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    8bce:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    8bd2:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    8bd6:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    8bda:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    8bde:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    8be2:	84 17       	cp	r24, r20
    8be4:	95 07       	cpc	r25, r21
    8be6:	a6 07       	cpc	r26, r22
    8be8:	b7 07       	cpc	r27, r23
    8bea:	09 f0       	breq	.+2      	; 0x8bee <_Z14Feed_Ext_Frontv+0x2bc>
    8bec:	3f c0       	rjmp	.+126    	; 0x8c6c <_Z14Feed_Ext_Frontv+0x33a>
    8bee:	f6 99       	sbic	0x1e, 6	; 30
    8bf0:	63 c0       	rjmp	.+198    	; 0x8cb8 <_Z14Feed_Ext_Frontv+0x386>
    8bf2:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    8bf6:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8bfa:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8bfe:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <REBOUND_Z>
    8c02:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    8c06:	05 2e       	mov	r0, r21
    8c08:	00 0c       	add	r0, r0
    8c0a:	66 0b       	sbc	r22, r22
    8c0c:	77 0b       	sbc	r23, r23
    8c0e:	84 1b       	sub	r24, r20
    8c10:	95 0b       	sbc	r25, r21
    8c12:	a6 0b       	sbc	r26, r22
    8c14:	b7 0b       	sbc	r27, r23
    8c16:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    8c1a:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    8c1e:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    8c22:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    8c26:	15 98       	cbi	0x02, 5	; 2
    8c28:	81 e0       	ldi	r24, 0x01	; 1
    8c2a:	cf 91       	pop	r28
    8c2c:	ff 90       	pop	r15
    8c2e:	ef 90       	pop	r14
    8c30:	df 90       	pop	r13
    8c32:	cf 90       	pop	r12
    8c34:	bf 90       	pop	r11
    8c36:	af 90       	pop	r10
    8c38:	9f 90       	pop	r9
    8c3a:	8f 90       	pop	r8
    8c3c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
    8c40:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Pass_Total>
    8c44:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    8c48:	89 17       	cp	r24, r25
    8c4a:	b0 f5       	brcc	.+108    	; 0x8cb8 <_Z14Feed_Ext_Frontv+0x386>
    8c4c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8c50:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8c54:	81 e0       	ldi	r24, 0x01	; 1
    8c56:	cf 91       	pop	r28
    8c58:	ff 90       	pop	r15
    8c5a:	ef 90       	pop	r14
    8c5c:	df 90       	pop	r13
    8c5e:	cf 90       	pop	r12
    8c60:	bf 90       	pop	r11
    8c62:	af 90       	pop	r10
    8c64:	9f 90       	pop	r9
    8c66:	8f 90       	pop	r8
    8c68:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    8c6c:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    8c70:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    8c74:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    8c78:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    8c7c:	84 17       	cp	r24, r20
    8c7e:	95 07       	cpc	r25, r21
    8c80:	a6 07       	cpc	r26, r22
    8c82:	b7 07       	cpc	r27, r23
    8c84:	c9 f4       	brne	.+50     	; 0x8cb8 <_Z14Feed_Ext_Frontv+0x386>
    8c86:	f3 99       	sbic	0x1e, 3	; 30
    8c88:	17 c0       	rjmp	.+46     	; 0x8cb8 <_Z14Feed_Ext_Frontv+0x386>
    8c8a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8c8e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8c92:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    8c96:	8f 5f       	subi	r24, 0xFF	; 255
    8c98:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    8c9c:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    8ca0:	82 e0       	ldi	r24, 0x02	; 2
    8ca2:	cf 91       	pop	r28
    8ca4:	ff 90       	pop	r15
    8ca6:	ef 90       	pop	r14
    8ca8:	df 90       	pop	r13
    8caa:	cf 90       	pop	r12
    8cac:	bf 90       	pop	r11
    8cae:	af 90       	pop	r10
    8cb0:	9f 90       	pop	r9
    8cb2:	8f 90       	pop	r8
    8cb4:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    8cb8:	cf 91       	pop	r28
    8cba:	ff 90       	pop	r15
    8cbc:	ef 90       	pop	r14
    8cbe:	df 90       	pop	r13
    8cc0:	cf 90       	pop	r12
    8cc2:	bf 90       	pop	r11
    8cc4:	af 90       	pop	r10
    8cc6:	9f 90       	pop	r9
    8cc8:	8f 90       	pop	r8
    8cca:	08 95       	ret

00008ccc <_Z14Feed_Int_Rightv>:
    8ccc:	8f 92       	push	r8
    8cce:	9f 92       	push	r9
    8cd0:	af 92       	push	r10
    8cd2:	bf 92       	push	r11
    8cd4:	cf 92       	push	r12
    8cd6:	df 92       	push	r13
    8cd8:	ef 92       	push	r14
    8cda:	ff 92       	push	r15
    8cdc:	cf 93       	push	r28
    8cde:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    8ce2:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    8ce6:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    8cea:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    8cee:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    8cf2:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    8cf6:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    8cfa:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    8cfe:	84 17       	cp	r24, r20
    8d00:	95 07       	cpc	r25, r21
    8d02:	a6 07       	cpc	r26, r22
    8d04:	b7 07       	cpc	r27, r23
    8d06:	09 f0       	breq	.+2      	; 0x8d0a <_Z14Feed_Int_Rightv+0x3e>
    8d08:	40 c1       	rjmp	.+640    	; 0x8f8a <_Z14Feed_Int_Rightv+0x2be>
    8d0a:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    8d0e:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    8d12:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    8d16:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    8d1a:	f3 99       	sbic	0x1e, 3	; 30
    8d1c:	1a c0       	rjmp	.+52     	; 0x8d52 <_Z14Feed_Int_Rightv+0x86>
    8d1e:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    8d22:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    8d26:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    8d2a:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    8d2e:	c8 16       	cp	r12, r24
    8d30:	d9 06       	cpc	r13, r25
    8d32:	ea 06       	cpc	r14, r26
    8d34:	fb 06       	cpc	r15, r27
    8d36:	a1 f1       	breq	.+104    	; 0x8da0 <_Z14Feed_Int_Rightv+0xd4>
    8d38:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    8d3c:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    8d40:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    8d44:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    8d48:	48 17       	cp	r20, r24
    8d4a:	59 07       	cpc	r21, r25
    8d4c:	6a 07       	cpc	r22, r26
    8d4e:	7b 07       	cpc	r23, r27
    8d50:	39 f1       	breq	.+78     	; 0x8da0 <_Z14Feed_Int_Rightv+0xd4>
    8d52:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    8d56:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    8d5a:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    8d5e:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    8d62:	48 17       	cp	r20, r24
    8d64:	59 07       	cpc	r21, r25
    8d66:	6a 07       	cpc	r22, r26
    8d68:	7b 07       	cpc	r23, r27
    8d6a:	09 f0       	breq	.+2      	; 0x8d6e <_Z14Feed_Int_Rightv+0xa2>
    8d6c:	81 c1       	rjmp	.+770    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8d6e:	f6 99       	sbic	0x1e, 6	; 30
    8d70:	7f c1       	rjmp	.+766    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8d72:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    8d76:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    8d7a:	89 17       	cp	r24, r25
    8d7c:	08 f4       	brcc	.+2      	; 0x8d80 <_Z14Feed_Int_Rightv+0xb4>
    8d7e:	78 c1       	rjmp	.+752    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8d80:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8d84:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8d88:	81 e0       	ldi	r24, 0x01	; 1
    8d8a:	cf 91       	pop	r28
    8d8c:	ff 90       	pop	r15
    8d8e:	ef 90       	pop	r14
    8d90:	df 90       	pop	r13
    8d92:	cf 90       	pop	r12
    8d94:	bf 90       	pop	r11
    8d96:	af 90       	pop	r10
    8d98:	9f 90       	pop	r9
    8d9a:	8f 90       	pop	r8
    8d9c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
    8da0:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    8da4:	81 11       	cpse	r24, r1
    8da6:	64 c1       	rjmp	.+712    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8da8:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    8dac:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    8db0:	8c 17       	cp	r24, r28
    8db2:	08 f0       	brcs	.+2      	; 0x8db6 <_Z14Feed_Int_Rightv+0xea>
    8db4:	45 c0       	rjmp	.+138    	; 0x8e40 <_Z14Feed_Int_Rightv+0x174>
    8db6:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8dba:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8dbe:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    8dc2:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    8dc6:	09 2e       	mov	r0, r25
    8dc8:	00 0c       	add	r0, r0
    8dca:	aa 0b       	sbc	r26, r26
    8dcc:	bb 0b       	sbc	r27, r27
    8dce:	c8 1a       	sub	r12, r24
    8dd0:	d9 0a       	sbc	r13, r25
    8dd2:	ea 0a       	sbc	r14, r26
    8dd4:	fb 0a       	sbc	r15, r27
    8dd6:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    8dda:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    8dde:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    8de2:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    8de6:	81 e0       	ldi	r24, 0x01	; 1
    8de8:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    8dec:	13 9a       	sbi	0x02, 3	; 2
    8dee:	11 9a       	sbi	0x02, 1	; 2
    8df0:	80 e0       	ldi	r24, 0x00	; 0
    8df2:	90 e0       	ldi	r25, 0x00	; 0
    8df4:	a0 e0       	ldi	r26, 0x00	; 0
    8df6:	b0 e4       	ldi	r27, 0x40	; 64
    8df8:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    8dfc:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    8e00:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    8e04:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    8e08:	80 e0       	ldi	r24, 0x00	; 0
    8e0a:	90 e0       	ldi	r25, 0x00	; 0
    8e0c:	a0 e0       	ldi	r26, 0x00	; 0
    8e0e:	b0 ec       	ldi	r27, 0xC0	; 192
    8e10:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    8e14:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    8e18:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    8e1c:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    8e20:	81 e0       	ldi	r24, 0x01	; 1
    8e22:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    8e26:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    8e2a:	cf 91       	pop	r28
    8e2c:	ff 90       	pop	r15
    8e2e:	ef 90       	pop	r14
    8e30:	df 90       	pop	r13
    8e32:	cf 90       	pop	r12
    8e34:	bf 90       	pop	r11
    8e36:	af 90       	pop	r10
    8e38:	9f 90       	pop	r9
    8e3a:	8f 90       	pop	r8
    8e3c:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z5Printv>
    8e40:	81 e0       	ldi	r24, 0x01	; 1
    8e42:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    8e46:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8e4a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8e4e:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    8e52:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    8e56:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    8e5a:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    8e5e:	28 9f       	mul	r18, r24
    8e60:	b0 01       	movw	r22, r0
    8e62:	29 9f       	mul	r18, r25
    8e64:	70 0d       	add	r23, r0
    8e66:	38 9f       	mul	r19, r24
    8e68:	70 0d       	add	r23, r0
    8e6a:	11 24       	eor	r1, r1
    8e6c:	07 2e       	mov	r0, r23
    8e6e:	00 0c       	add	r0, r0
    8e70:	88 0b       	sbc	r24, r24
    8e72:	99 0b       	sbc	r25, r25
    8e74:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    8e78:	4b 01       	movw	r8, r22
    8e7a:	5c 01       	movw	r10, r24
    8e7c:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    8e80:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    8e84:	07 2e       	mov	r0, r23
    8e86:	00 0c       	add	r0, r0
    8e88:	88 0b       	sbc	r24, r24
    8e8a:	99 0b       	sbc	r25, r25
    8e8c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    8e90:	9b 01       	movw	r18, r22
    8e92:	ac 01       	movw	r20, r24
    8e94:	c5 01       	movw	r24, r10
    8e96:	b4 01       	movw	r22, r8
    8e98:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    8e9c:	20 e0       	ldi	r18, 0x00	; 0
    8e9e:	30 e0       	ldi	r19, 0x00	; 0
    8ea0:	40 e0       	ldi	r20, 0x00	; 0
    8ea2:	5f e3       	ldi	r21, 0x3F	; 63
    8ea4:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    8ea8:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    8eac:	61 15       	cp	r22, r1
    8eae:	71 05       	cpc	r23, r1
    8eb0:	c9 f5       	brne	.+114    	; 0x8f24 <_Z14Feed_Int_Rightv+0x258>
    8eb2:	c1 30       	cpi	r28, 0x01	; 1
    8eb4:	11 f5       	brne	.+68     	; 0x8efa <_Z14Feed_Int_Rightv+0x22e>
    8eb6:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    8eba:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    8ebe:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    8ec2:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    8ec6:	01 97       	sbiw	r24, 0x01	; 1
    8ec8:	a1 09       	sbc	r26, r1
    8eca:	b1 09       	sbc	r27, r1
    8ecc:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    8ed0:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    8ed4:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    8ed8:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    8edc:	11 98       	cbi	0x02, 1	; 2
    8ede:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    8ee2:	81 e0       	ldi	r24, 0x01	; 1
    8ee4:	cf 91       	pop	r28
    8ee6:	ff 90       	pop	r15
    8ee8:	ef 90       	pop	r14
    8eea:	df 90       	pop	r13
    8eec:	cf 90       	pop	r12
    8eee:	bf 90       	pop	r11
    8ef0:	af 90       	pop	r10
    8ef2:	9f 90       	pop	r9
    8ef4:	8f 90       	pop	r8
    8ef6:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    8efa:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    8efe:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    8f02:	09 2e       	mov	r0, r25
    8f04:	00 0c       	add	r0, r0
    8f06:	aa 0b       	sbc	r26, r26
    8f08:	bb 0b       	sbc	r27, r27
    8f0a:	c8 1a       	sub	r12, r24
    8f0c:	d9 0a       	sbc	r13, r25
    8f0e:	ea 0a       	sbc	r14, r26
    8f10:	fb 0a       	sbc	r15, r27
    8f12:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    8f16:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    8f1a:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    8f1e:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    8f22:	dc cf       	rjmp	.-72     	; 0x8edc <_Z14Feed_Int_Rightv+0x210>
    8f24:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    8f28:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    8f2c:	26 9f       	mul	r18, r22
    8f2e:	a0 01       	movw	r20, r0
    8f30:	27 9f       	mul	r18, r23
    8f32:	50 0d       	add	r21, r0
    8f34:	36 9f       	mul	r19, r22
    8f36:	50 0d       	add	r21, r0
    8f38:	11 24       	eor	r1, r1
    8f3a:	ca 01       	movw	r24, r20
    8f3c:	55 0f       	add	r21, r21
    8f3e:	aa 0b       	sbc	r26, r26
    8f40:	bb 0b       	sbc	r27, r27
    8f42:	c1 30       	cpi	r28, 0x01	; 1
    8f44:	a9 f4       	brne	.+42     	; 0x8f70 <_Z14Feed_Int_Rightv+0x2a4>
    8f46:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    8f4a:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    8f4e:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    8f52:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    8f56:	48 1b       	sub	r20, r24
    8f58:	59 0b       	sbc	r21, r25
    8f5a:	6a 0b       	sbc	r22, r26
    8f5c:	7b 0b       	sbc	r23, r27
    8f5e:	40 93 ba 04 	sts	0x04BA, r20	; 0x8004ba <Limit_Pos_Rear>
    8f62:	50 93 bb 04 	sts	0x04BB, r21	; 0x8004bb <Limit_Pos_Rear+0x1>
    8f66:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <Limit_Pos_Rear+0x2>
    8f6a:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <Limit_Pos_Rear+0x3>
    8f6e:	b6 cf       	rjmp	.-148    	; 0x8edc <_Z14Feed_Int_Rightv+0x210>
    8f70:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    8f74:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    8f78:	05 2e       	mov	r0, r21
    8f7a:	00 0c       	add	r0, r0
    8f7c:	66 0b       	sbc	r22, r22
    8f7e:	77 0b       	sbc	r23, r23
    8f80:	c4 1a       	sub	r12, r20
    8f82:	d5 0a       	sbc	r13, r21
    8f84:	e6 0a       	sbc	r14, r22
    8f86:	f7 0a       	sbc	r15, r23
    8f88:	c0 cf       	rjmp	.-128    	; 0x8f0a <_Z14Feed_Int_Rightv+0x23e>
    8f8a:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    8f8e:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    8f92:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    8f96:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    8f9a:	84 17       	cp	r24, r20
    8f9c:	95 07       	cpc	r25, r21
    8f9e:	a6 07       	cpc	r26, r22
    8fa0:	b7 07       	cpc	r27, r23
    8fa2:	09 f0       	breq	.+2      	; 0x8fa6 <_Z14Feed_Int_Rightv+0x2da>
    8fa4:	65 c0       	rjmp	.+202    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8fa6:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    8faa:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    8fae:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    8fb2:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    8fb6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    8fba:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    8fbe:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    8fc2:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    8fc6:	48 17       	cp	r20, r24
    8fc8:	59 07       	cpc	r21, r25
    8fca:	6a 07       	cpc	r22, r26
    8fcc:	7b 07       	cpc	r23, r27
    8fce:	11 f4       	brne	.+4      	; 0x8fd4 <_Z14Feed_Int_Rightv+0x308>
    8fd0:	f3 9b       	sbis	0x1e, 3	; 30
    8fd2:	27 c0       	rjmp	.+78     	; 0x9022 <_Z14Feed_Int_Rightv+0x356>
    8fd4:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    8fd8:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    8fdc:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    8fe0:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    8fe4:	48 17       	cp	r20, r24
    8fe6:	59 07       	cpc	r21, r25
    8fe8:	6a 07       	cpc	r22, r26
    8fea:	7b 07       	cpc	r23, r27
    8fec:	09 f0       	breq	.+2      	; 0x8ff0 <_Z14Feed_Int_Rightv+0x324>
    8fee:	40 c0       	rjmp	.+128    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8ff0:	f6 99       	sbic	0x1e, 6	; 30
    8ff2:	3e c0       	rjmp	.+124    	; 0x9070 <_Z14Feed_Int_Rightv+0x3a4>
    8ff4:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    8ff8:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    8ffc:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    9000:	8f 5f       	subi	r24, 0xFF	; 255
    9002:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    9006:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    900a:	82 e0       	ldi	r24, 0x02	; 2
    900c:	cf 91       	pop	r28
    900e:	ff 90       	pop	r15
    9010:	ef 90       	pop	r14
    9012:	df 90       	pop	r13
    9014:	cf 90       	pop	r12
    9016:	bf 90       	pop	r11
    9018:	af 90       	pop	r10
    901a:	9f 90       	pop	r9
    901c:	8f 90       	pop	r8
    901e:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    9022:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    9026:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    902a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    902e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    9032:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9036:	09 2e       	mov	r0, r25
    9038:	00 0c       	add	r0, r0
    903a:	aa 0b       	sbc	r26, r26
    903c:	bb 0b       	sbc	r27, r27
    903e:	84 0f       	add	r24, r20
    9040:	95 1f       	adc	r25, r21
    9042:	a6 1f       	adc	r26, r22
    9044:	b7 1f       	adc	r27, r23
    9046:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    904a:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    904e:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    9052:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    9056:	13 98       	cbi	0x02, 3	; 2
    9058:	81 e0       	ldi	r24, 0x01	; 1
    905a:	cf 91       	pop	r28
    905c:	ff 90       	pop	r15
    905e:	ef 90       	pop	r14
    9060:	df 90       	pop	r13
    9062:	cf 90       	pop	r12
    9064:	bf 90       	pop	r11
    9066:	af 90       	pop	r10
    9068:	9f 90       	pop	r9
    906a:	8f 90       	pop	r8
    906c:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    9070:	cf 91       	pop	r28
    9072:	ff 90       	pop	r15
    9074:	ef 90       	pop	r14
    9076:	df 90       	pop	r13
    9078:	cf 90       	pop	r12
    907a:	bf 90       	pop	r11
    907c:	af 90       	pop	r10
    907e:	9f 90       	pop	r9
    9080:	8f 90       	pop	r8
    9082:	08 95       	ret

00009084 <_Z13Feed_Int_Leftv>:
    9084:	8f 92       	push	r8
    9086:	9f 92       	push	r9
    9088:	af 92       	push	r10
    908a:	bf 92       	push	r11
    908c:	cf 92       	push	r12
    908e:	df 92       	push	r13
    9090:	ef 92       	push	r14
    9092:	ff 92       	push	r15
    9094:	cf 93       	push	r28
    9096:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    909a:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    909e:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    90a2:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    90a6:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    90aa:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    90ae:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    90b2:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    90b6:	84 17       	cp	r24, r20
    90b8:	95 07       	cpc	r25, r21
    90ba:	a6 07       	cpc	r26, r22
    90bc:	b7 07       	cpc	r27, r23
    90be:	09 f0       	breq	.+2      	; 0x90c2 <_Z13Feed_Int_Leftv+0x3e>
    90c0:	40 c1       	rjmp	.+640    	; 0x9342 <_Z13Feed_Int_Leftv+0x2be>
    90c2:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    90c6:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    90ca:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    90ce:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    90d2:	f3 99       	sbic	0x1e, 3	; 30
    90d4:	1a c0       	rjmp	.+52     	; 0x910a <_Z13Feed_Int_Leftv+0x86>
    90d6:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    90da:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    90de:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    90e2:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    90e6:	c8 16       	cp	r12, r24
    90e8:	d9 06       	cpc	r13, r25
    90ea:	ea 06       	cpc	r14, r26
    90ec:	fb 06       	cpc	r15, r27
    90ee:	a1 f1       	breq	.+104    	; 0x9158 <_Z13Feed_Int_Leftv+0xd4>
    90f0:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    90f4:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    90f8:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    90fc:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    9100:	48 17       	cp	r20, r24
    9102:	59 07       	cpc	r21, r25
    9104:	6a 07       	cpc	r22, r26
    9106:	7b 07       	cpc	r23, r27
    9108:	39 f1       	breq	.+78     	; 0x9158 <_Z13Feed_Int_Leftv+0xd4>
    910a:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    910e:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    9112:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    9116:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    911a:	48 17       	cp	r20, r24
    911c:	59 07       	cpc	r21, r25
    911e:	6a 07       	cpc	r22, r26
    9120:	7b 07       	cpc	r23, r27
    9122:	09 f0       	breq	.+2      	; 0x9126 <_Z13Feed_Int_Leftv+0xa2>
    9124:	81 c1       	rjmp	.+770    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    9126:	f6 99       	sbic	0x1e, 6	; 30
    9128:	7f c1       	rjmp	.+766    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    912a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    912e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    9132:	89 17       	cp	r24, r25
    9134:	08 f4       	brcc	.+2      	; 0x9138 <_Z13Feed_Int_Leftv+0xb4>
    9136:	78 c1       	rjmp	.+752    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    9138:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    913c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9140:	81 e0       	ldi	r24, 0x01	; 1
    9142:	cf 91       	pop	r28
    9144:	ff 90       	pop	r15
    9146:	ef 90       	pop	r14
    9148:	df 90       	pop	r13
    914a:	cf 90       	pop	r12
    914c:	bf 90       	pop	r11
    914e:	af 90       	pop	r10
    9150:	9f 90       	pop	r9
    9152:	8f 90       	pop	r8
    9154:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    9158:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    915c:	81 11       	cpse	r24, r1
    915e:	64 c1       	rjmp	.+712    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    9160:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    9164:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    9168:	8c 17       	cp	r24, r28
    916a:	08 f0       	brcs	.+2      	; 0x916e <_Z13Feed_Int_Leftv+0xea>
    916c:	45 c0       	rjmp	.+138    	; 0x91f8 <_Z13Feed_Int_Leftv+0x174>
    916e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9172:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9176:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    917a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    917e:	09 2e       	mov	r0, r25
    9180:	00 0c       	add	r0, r0
    9182:	aa 0b       	sbc	r26, r26
    9184:	bb 0b       	sbc	r27, r27
    9186:	c8 1a       	sub	r12, r24
    9188:	d9 0a       	sbc	r13, r25
    918a:	ea 0a       	sbc	r14, r26
    918c:	fb 0a       	sbc	r15, r27
    918e:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    9192:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    9196:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    919a:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    919e:	81 e0       	ldi	r24, 0x01	; 1
    91a0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    91a4:	13 9a       	sbi	0x02, 3	; 2
    91a6:	11 9a       	sbi	0x02, 1	; 2
    91a8:	80 e0       	ldi	r24, 0x00	; 0
    91aa:	90 e0       	ldi	r25, 0x00	; 0
    91ac:	a0 e0       	ldi	r26, 0x00	; 0
    91ae:	b0 e4       	ldi	r27, 0x40	; 64
    91b0:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    91b4:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    91b8:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    91bc:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    91c0:	80 e0       	ldi	r24, 0x00	; 0
    91c2:	90 e0       	ldi	r25, 0x00	; 0
    91c4:	a0 e0       	ldi	r26, 0x00	; 0
    91c6:	b0 ec       	ldi	r27, 0xC0	; 192
    91c8:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    91cc:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    91d0:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    91d4:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    91d8:	81 e0       	ldi	r24, 0x01	; 1
    91da:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    91de:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    91e2:	cf 91       	pop	r28
    91e4:	ff 90       	pop	r15
    91e6:	ef 90       	pop	r14
    91e8:	df 90       	pop	r13
    91ea:	cf 90       	pop	r12
    91ec:	bf 90       	pop	r11
    91ee:	af 90       	pop	r10
    91f0:	9f 90       	pop	r9
    91f2:	8f 90       	pop	r8
    91f4:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z5Printv>
    91f8:	81 e0       	ldi	r24, 0x01	; 1
    91fa:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    91fe:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9202:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9206:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    920a:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    920e:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    9212:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    9216:	28 9f       	mul	r18, r24
    9218:	b0 01       	movw	r22, r0
    921a:	29 9f       	mul	r18, r25
    921c:	70 0d       	add	r23, r0
    921e:	38 9f       	mul	r19, r24
    9220:	70 0d       	add	r23, r0
    9222:	11 24       	eor	r1, r1
    9224:	07 2e       	mov	r0, r23
    9226:	00 0c       	add	r0, r0
    9228:	88 0b       	sbc	r24, r24
    922a:	99 0b       	sbc	r25, r25
    922c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9230:	4b 01       	movw	r8, r22
    9232:	5c 01       	movw	r10, r24
    9234:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    9238:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    923c:	07 2e       	mov	r0, r23
    923e:	00 0c       	add	r0, r0
    9240:	88 0b       	sbc	r24, r24
    9242:	99 0b       	sbc	r25, r25
    9244:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9248:	9b 01       	movw	r18, r22
    924a:	ac 01       	movw	r20, r24
    924c:	c5 01       	movw	r24, r10
    924e:	b4 01       	movw	r22, r8
    9250:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    9254:	20 e0       	ldi	r18, 0x00	; 0
    9256:	30 e0       	ldi	r19, 0x00	; 0
    9258:	40 e0       	ldi	r20, 0x00	; 0
    925a:	5f e3       	ldi	r21, 0x3F	; 63
    925c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    9260:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    9264:	61 15       	cp	r22, r1
    9266:	71 05       	cpc	r23, r1
    9268:	c9 f5       	brne	.+114    	; 0x92dc <_Z13Feed_Int_Leftv+0x258>
    926a:	c1 30       	cpi	r28, 0x01	; 1
    926c:	11 f5       	brne	.+68     	; 0x92b2 <_Z13Feed_Int_Leftv+0x22e>
    926e:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    9272:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    9276:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    927a:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    927e:	01 97       	sbiw	r24, 0x01	; 1
    9280:	a1 09       	sbc	r26, r1
    9282:	b1 09       	sbc	r27, r1
    9284:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    9288:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    928c:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    9290:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    9294:	11 98       	cbi	0x02, 1	; 2
    9296:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    929a:	81 e0       	ldi	r24, 0x01	; 1
    929c:	cf 91       	pop	r28
    929e:	ff 90       	pop	r15
    92a0:	ef 90       	pop	r14
    92a2:	df 90       	pop	r13
    92a4:	cf 90       	pop	r12
    92a6:	bf 90       	pop	r11
    92a8:	af 90       	pop	r10
    92aa:	9f 90       	pop	r9
    92ac:	8f 90       	pop	r8
    92ae:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    92b2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    92b6:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    92ba:	09 2e       	mov	r0, r25
    92bc:	00 0c       	add	r0, r0
    92be:	aa 0b       	sbc	r26, r26
    92c0:	bb 0b       	sbc	r27, r27
    92c2:	c8 1a       	sub	r12, r24
    92c4:	d9 0a       	sbc	r13, r25
    92c6:	ea 0a       	sbc	r14, r26
    92c8:	fb 0a       	sbc	r15, r27
    92ca:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    92ce:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    92d2:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    92d6:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    92da:	dc cf       	rjmp	.-72     	; 0x9294 <_Z13Feed_Int_Leftv+0x210>
    92dc:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    92e0:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    92e4:	26 9f       	mul	r18, r22
    92e6:	a0 01       	movw	r20, r0
    92e8:	27 9f       	mul	r18, r23
    92ea:	50 0d       	add	r21, r0
    92ec:	36 9f       	mul	r19, r22
    92ee:	50 0d       	add	r21, r0
    92f0:	11 24       	eor	r1, r1
    92f2:	ca 01       	movw	r24, r20
    92f4:	55 0f       	add	r21, r21
    92f6:	aa 0b       	sbc	r26, r26
    92f8:	bb 0b       	sbc	r27, r27
    92fa:	c1 30       	cpi	r28, 0x01	; 1
    92fc:	a9 f4       	brne	.+42     	; 0x9328 <_Z13Feed_Int_Leftv+0x2a4>
    92fe:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    9302:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    9306:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    930a:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    930e:	48 1b       	sub	r20, r24
    9310:	59 0b       	sbc	r21, r25
    9312:	6a 0b       	sbc	r22, r26
    9314:	7b 0b       	sbc	r23, r27
    9316:	40 93 ba 04 	sts	0x04BA, r20	; 0x8004ba <Limit_Pos_Rear>
    931a:	50 93 bb 04 	sts	0x04BB, r21	; 0x8004bb <Limit_Pos_Rear+0x1>
    931e:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <Limit_Pos_Rear+0x2>
    9322:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <Limit_Pos_Rear+0x3>
    9326:	b6 cf       	rjmp	.-148    	; 0x9294 <_Z13Feed_Int_Leftv+0x210>
    9328:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    932c:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9330:	05 2e       	mov	r0, r21
    9332:	00 0c       	add	r0, r0
    9334:	66 0b       	sbc	r22, r22
    9336:	77 0b       	sbc	r23, r23
    9338:	c4 1a       	sub	r12, r20
    933a:	d5 0a       	sbc	r13, r21
    933c:	e6 0a       	sbc	r14, r22
    933e:	f7 0a       	sbc	r15, r23
    9340:	c0 cf       	rjmp	.-128    	; 0x92c2 <_Z13Feed_Int_Leftv+0x23e>
    9342:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    9346:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    934a:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    934e:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    9352:	84 17       	cp	r24, r20
    9354:	95 07       	cpc	r25, r21
    9356:	a6 07       	cpc	r26, r22
    9358:	b7 07       	cpc	r27, r23
    935a:	09 f0       	breq	.+2      	; 0x935e <_Z13Feed_Int_Leftv+0x2da>
    935c:	65 c0       	rjmp	.+202    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    935e:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    9362:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    9366:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    936a:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    936e:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    9372:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    9376:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    937a:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    937e:	48 17       	cp	r20, r24
    9380:	59 07       	cpc	r21, r25
    9382:	6a 07       	cpc	r22, r26
    9384:	7b 07       	cpc	r23, r27
    9386:	11 f4       	brne	.+4      	; 0x938c <_Z13Feed_Int_Leftv+0x308>
    9388:	f3 9b       	sbis	0x1e, 3	; 30
    938a:	27 c0       	rjmp	.+78     	; 0x93da <_Z13Feed_Int_Leftv+0x356>
    938c:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    9390:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    9394:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    9398:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    939c:	48 17       	cp	r20, r24
    939e:	59 07       	cpc	r21, r25
    93a0:	6a 07       	cpc	r22, r26
    93a2:	7b 07       	cpc	r23, r27
    93a4:	09 f0       	breq	.+2      	; 0x93a8 <_Z13Feed_Int_Leftv+0x324>
    93a6:	40 c0       	rjmp	.+128    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    93a8:	f6 99       	sbic	0x1e, 6	; 30
    93aa:	3e c0       	rjmp	.+124    	; 0x9428 <_Z13Feed_Int_Leftv+0x3a4>
    93ac:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    93b0:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    93b4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    93b8:	8f 5f       	subi	r24, 0xFF	; 255
    93ba:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    93be:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    93c2:	82 e0       	ldi	r24, 0x02	; 2
    93c4:	cf 91       	pop	r28
    93c6:	ff 90       	pop	r15
    93c8:	ef 90       	pop	r14
    93ca:	df 90       	pop	r13
    93cc:	cf 90       	pop	r12
    93ce:	bf 90       	pop	r11
    93d0:	af 90       	pop	r10
    93d2:	9f 90       	pop	r9
    93d4:	8f 90       	pop	r8
    93d6:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
    93da:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    93de:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    93e2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    93e6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    93ea:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    93ee:	09 2e       	mov	r0, r25
    93f0:	00 0c       	add	r0, r0
    93f2:	aa 0b       	sbc	r26, r26
    93f4:	bb 0b       	sbc	r27, r27
    93f6:	84 0f       	add	r24, r20
    93f8:	95 1f       	adc	r25, r21
    93fa:	a6 1f       	adc	r26, r22
    93fc:	b7 1f       	adc	r27, r23
    93fe:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    9402:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    9406:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    940a:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    940e:	13 98       	cbi	0x02, 3	; 2
    9410:	81 e0       	ldi	r24, 0x01	; 1
    9412:	cf 91       	pop	r28
    9414:	ff 90       	pop	r15
    9416:	ef 90       	pop	r14
    9418:	df 90       	pop	r13
    941a:	cf 90       	pop	r12
    941c:	bf 90       	pop	r11
    941e:	af 90       	pop	r10
    9420:	9f 90       	pop	r9
    9422:	8f 90       	pop	r8
    9424:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    9428:	cf 91       	pop	r28
    942a:	ff 90       	pop	r15
    942c:	ef 90       	pop	r14
    942e:	df 90       	pop	r13
    9430:	cf 90       	pop	r12
    9432:	bf 90       	pop	r11
    9434:	af 90       	pop	r10
    9436:	9f 90       	pop	r9
    9438:	8f 90       	pop	r8
    943a:	08 95       	ret

0000943c <_Z14Feed_Ext_Rightv>:
    943c:	8f 92       	push	r8
    943e:	9f 92       	push	r9
    9440:	af 92       	push	r10
    9442:	bf 92       	push	r11
    9444:	cf 92       	push	r12
    9446:	df 92       	push	r13
    9448:	ef 92       	push	r14
    944a:	ff 92       	push	r15
    944c:	cf 93       	push	r28
    944e:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    9452:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    9456:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    945a:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    945e:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    9462:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    9466:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    946a:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    946e:	84 17       	cp	r24, r20
    9470:	95 07       	cpc	r25, r21
    9472:	a6 07       	cpc	r26, r22
    9474:	b7 07       	cpc	r27, r23
    9476:	09 f0       	breq	.+2      	; 0x947a <_Z14Feed_Ext_Rightv+0x3e>
    9478:	30 c1       	rjmp	.+608    	; 0x96da <_Z14Feed_Ext_Rightv+0x29e>
    947a:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    947e:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    9482:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    9486:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    948a:	f3 99       	sbic	0x1e, 3	; 30
    948c:	1a c0       	rjmp	.+52     	; 0x94c2 <_Z14Feed_Ext_Rightv+0x86>
    948e:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    9492:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    9496:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    949a:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    949e:	c8 16       	cp	r12, r24
    94a0:	d9 06       	cpc	r13, r25
    94a2:	ea 06       	cpc	r14, r26
    94a4:	fb 06       	cpc	r15, r27
    94a6:	a1 f1       	breq	.+104    	; 0x9510 <_Z14Feed_Ext_Rightv+0xd4>
    94a8:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    94ac:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    94b0:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    94b4:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    94b8:	48 17       	cp	r20, r24
    94ba:	59 07       	cpc	r21, r25
    94bc:	6a 07       	cpc	r22, r26
    94be:	7b 07       	cpc	r23, r27
    94c0:	39 f1       	breq	.+78     	; 0x9510 <_Z14Feed_Ext_Rightv+0xd4>
    94c2:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    94c6:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    94ca:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    94ce:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    94d2:	48 17       	cp	r20, r24
    94d4:	59 07       	cpc	r21, r25
    94d6:	6a 07       	cpc	r22, r26
    94d8:	7b 07       	cpc	r23, r27
    94da:	09 f0       	breq	.+2      	; 0x94de <_Z14Feed_Ext_Rightv+0xa2>
    94dc:	71 c1       	rjmp	.+738    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    94de:	f6 99       	sbic	0x1e, 6	; 30
    94e0:	6f c1       	rjmp	.+734    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    94e2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    94e6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    94ea:	89 17       	cp	r24, r25
    94ec:	08 f4       	brcc	.+2      	; 0x94f0 <_Z14Feed_Ext_Rightv+0xb4>
    94ee:	68 c1       	rjmp	.+720    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    94f0:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    94f4:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    94f8:	81 e0       	ldi	r24, 0x01	; 1
    94fa:	cf 91       	pop	r28
    94fc:	ff 90       	pop	r15
    94fe:	ef 90       	pop	r14
    9500:	df 90       	pop	r13
    9502:	cf 90       	pop	r12
    9504:	bf 90       	pop	r11
    9506:	af 90       	pop	r10
    9508:	9f 90       	pop	r9
    950a:	8f 90       	pop	r8
    950c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
    9510:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    9514:	81 11       	cpse	r24, r1
    9516:	54 c1       	rjmp	.+680    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    9518:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    951c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    9520:	8c 17       	cp	r24, r28
    9522:	08 f0       	brcs	.+2      	; 0x9526 <_Z14Feed_Ext_Rightv+0xea>
    9524:	45 c0       	rjmp	.+138    	; 0x95b0 <_Z14Feed_Ext_Rightv+0x174>
    9526:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    952a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    952e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    9532:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9536:	09 2e       	mov	r0, r25
    9538:	00 0c       	add	r0, r0
    953a:	aa 0b       	sbc	r26, r26
    953c:	bb 0b       	sbc	r27, r27
    953e:	8c 0d       	add	r24, r12
    9540:	9d 1d       	adc	r25, r13
    9542:	ae 1d       	adc	r26, r14
    9544:	bf 1d       	adc	r27, r15
    9546:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    954a:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    954e:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    9552:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    9556:	81 e0       	ldi	r24, 0x01	; 1
    9558:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    955c:	13 9a       	sbi	0x02, 3	; 2
    955e:	11 9a       	sbi	0x02, 1	; 2
    9560:	80 e0       	ldi	r24, 0x00	; 0
    9562:	90 e0       	ldi	r25, 0x00	; 0
    9564:	a0 e0       	ldi	r26, 0x00	; 0
    9566:	b0 e4       	ldi	r27, 0x40	; 64
    9568:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    956c:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    9570:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    9574:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    9578:	80 e0       	ldi	r24, 0x00	; 0
    957a:	90 e0       	ldi	r25, 0x00	; 0
    957c:	a0 e0       	ldi	r26, 0x00	; 0
    957e:	b0 ec       	ldi	r27, 0xC0	; 192
    9580:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    9584:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    9588:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    958c:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    9590:	81 e0       	ldi	r24, 0x01	; 1
    9592:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    9596:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    959a:	cf 91       	pop	r28
    959c:	ff 90       	pop	r15
    959e:	ef 90       	pop	r14
    95a0:	df 90       	pop	r13
    95a2:	cf 90       	pop	r12
    95a4:	bf 90       	pop	r11
    95a6:	af 90       	pop	r10
    95a8:	9f 90       	pop	r9
    95aa:	8f 90       	pop	r8
    95ac:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z5Printv>
    95b0:	81 e0       	ldi	r24, 0x01	; 1
    95b2:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    95b6:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    95ba:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    95be:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    95c2:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    95c6:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    95ca:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    95ce:	28 9f       	mul	r18, r24
    95d0:	b0 01       	movw	r22, r0
    95d2:	29 9f       	mul	r18, r25
    95d4:	70 0d       	add	r23, r0
    95d6:	38 9f       	mul	r19, r24
    95d8:	70 0d       	add	r23, r0
    95da:	11 24       	eor	r1, r1
    95dc:	07 2e       	mov	r0, r23
    95de:	00 0c       	add	r0, r0
    95e0:	88 0b       	sbc	r24, r24
    95e2:	99 0b       	sbc	r25, r25
    95e4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    95e8:	4b 01       	movw	r8, r22
    95ea:	5c 01       	movw	r10, r24
    95ec:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    95f0:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    95f4:	07 2e       	mov	r0, r23
    95f6:	00 0c       	add	r0, r0
    95f8:	88 0b       	sbc	r24, r24
    95fa:	99 0b       	sbc	r25, r25
    95fc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9600:	9b 01       	movw	r18, r22
    9602:	ac 01       	movw	r20, r24
    9604:	c5 01       	movw	r24, r10
    9606:	b4 01       	movw	r22, r8
    9608:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    960c:	20 e0       	ldi	r18, 0x00	; 0
    960e:	30 e0       	ldi	r19, 0x00	; 0
    9610:	40 e0       	ldi	r20, 0x00	; 0
    9612:	5f e3       	ldi	r21, 0x3F	; 63
    9614:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    9618:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    961c:	61 15       	cp	r22, r1
    961e:	71 05       	cpc	r23, r1
    9620:	89 f5       	brne	.+98     	; 0x9684 <_Z14Feed_Ext_Rightv+0x248>
    9622:	c1 30       	cpi	r28, 0x01	; 1
    9624:	11 f5       	brne	.+68     	; 0x966a <_Z14Feed_Ext_Rightv+0x22e>
    9626:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    962a:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    962e:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    9632:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    9636:	01 96       	adiw	r24, 0x01	; 1
    9638:	a1 1d       	adc	r26, r1
    963a:	b1 1d       	adc	r27, r1
    963c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    9640:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    9644:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    9648:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    964c:	13 98       	cbi	0x02, 3	; 2
    964e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    9652:	81 e0       	ldi	r24, 0x01	; 1
    9654:	cf 91       	pop	r28
    9656:	ff 90       	pop	r15
    9658:	ef 90       	pop	r14
    965a:	df 90       	pop	r13
    965c:	cf 90       	pop	r12
    965e:	bf 90       	pop	r11
    9660:	af 90       	pop	r10
    9662:	9f 90       	pop	r9
    9664:	8f 90       	pop	r8
    9666:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    966a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    966e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9672:	09 2e       	mov	r0, r25
    9674:	00 0c       	add	r0, r0
    9676:	aa 0b       	sbc	r26, r26
    9678:	bb 0b       	sbc	r27, r27
    967a:	8c 0d       	add	r24, r12
    967c:	9d 1d       	adc	r25, r13
    967e:	ae 1d       	adc	r26, r14
    9680:	bf 1d       	adc	r27, r15
    9682:	dc cf       	rjmp	.-72     	; 0x963c <_Z14Feed_Ext_Rightv+0x200>
    9684:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    9688:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    968c:	26 9f       	mul	r18, r22
    968e:	a0 01       	movw	r20, r0
    9690:	27 9f       	mul	r18, r23
    9692:	50 0d       	add	r21, r0
    9694:	36 9f       	mul	r19, r22
    9696:	50 0d       	add	r21, r0
    9698:	11 24       	eor	r1, r1
    969a:	05 2e       	mov	r0, r21
    969c:	00 0c       	add	r0, r0
    969e:	66 0b       	sbc	r22, r22
    96a0:	77 0b       	sbc	r23, r23
    96a2:	c1 30       	cpi	r28, 0x01	; 1
    96a4:	69 f4       	brne	.+26     	; 0x96c0 <_Z14Feed_Ext_Rightv+0x284>
    96a6:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    96aa:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    96ae:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    96b2:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    96b6:	84 0f       	add	r24, r20
    96b8:	95 1f       	adc	r25, r21
    96ba:	a6 1f       	adc	r26, r22
    96bc:	b7 1f       	adc	r27, r23
    96be:	be cf       	rjmp	.-132    	; 0x963c <_Z14Feed_Ext_Rightv+0x200>
    96c0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    96c4:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    96c8:	09 2e       	mov	r0, r25
    96ca:	00 0c       	add	r0, r0
    96cc:	aa 0b       	sbc	r26, r26
    96ce:	bb 0b       	sbc	r27, r27
    96d0:	8c 0d       	add	r24, r12
    96d2:	9d 1d       	adc	r25, r13
    96d4:	ae 1d       	adc	r26, r14
    96d6:	bf 1d       	adc	r27, r15
    96d8:	ee cf       	rjmp	.-36     	; 0x96b6 <_Z14Feed_Ext_Rightv+0x27a>
    96da:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    96de:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    96e2:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    96e6:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    96ea:	84 17       	cp	r24, r20
    96ec:	95 07       	cpc	r25, r21
    96ee:	a6 07       	cpc	r26, r22
    96f0:	b7 07       	cpc	r27, r23
    96f2:	09 f0       	breq	.+2      	; 0x96f6 <_Z14Feed_Ext_Rightv+0x2ba>
    96f4:	65 c0       	rjmp	.+202    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    96f6:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    96fa:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    96fe:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    9702:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    9706:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    970a:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    970e:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    9712:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    9716:	84 17       	cp	r24, r20
    9718:	95 07       	cpc	r25, r21
    971a:	a6 07       	cpc	r26, r22
    971c:	b7 07       	cpc	r27, r23
    971e:	11 f4       	brne	.+4      	; 0x9724 <_Z14Feed_Ext_Rightv+0x2e8>
    9720:	f3 9b       	sbis	0x1e, 3	; 30
    9722:	27 c0       	rjmp	.+78     	; 0x9772 <_Z14Feed_Ext_Rightv+0x336>
    9724:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    9728:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    972c:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    9730:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    9734:	84 17       	cp	r24, r20
    9736:	95 07       	cpc	r25, r21
    9738:	a6 07       	cpc	r26, r22
    973a:	b7 07       	cpc	r27, r23
    973c:	09 f0       	breq	.+2      	; 0x9740 <_Z14Feed_Ext_Rightv+0x304>
    973e:	40 c0       	rjmp	.+128    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    9740:	f6 99       	sbic	0x1e, 6	; 30
    9742:	3e c0       	rjmp	.+124    	; 0x97c0 <_Z14Feed_Ext_Rightv+0x384>
    9744:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9748:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    974c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    9750:	8f 5f       	subi	r24, 0xFF	; 255
    9752:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    9756:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    975a:	82 e0       	ldi	r24, 0x02	; 2
    975c:	cf 91       	pop	r28
    975e:	ff 90       	pop	r15
    9760:	ef 90       	pop	r14
    9762:	df 90       	pop	r13
    9764:	cf 90       	pop	r12
    9766:	bf 90       	pop	r11
    9768:	af 90       	pop	r10
    976a:	9f 90       	pop	r9
    976c:	8f 90       	pop	r8
    976e:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    9772:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    9776:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    977a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    977e:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    9782:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9786:	05 2e       	mov	r0, r21
    9788:	00 0c       	add	r0, r0
    978a:	66 0b       	sbc	r22, r22
    978c:	77 0b       	sbc	r23, r23
    978e:	84 1b       	sub	r24, r20
    9790:	95 0b       	sbc	r25, r21
    9792:	a6 0b       	sbc	r26, r22
    9794:	b7 0b       	sbc	r27, r23
    9796:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    979a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    979e:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    97a2:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    97a6:	11 98       	cbi	0x02, 1	; 2
    97a8:	81 e0       	ldi	r24, 0x01	; 1
    97aa:	cf 91       	pop	r28
    97ac:	ff 90       	pop	r15
    97ae:	ef 90       	pop	r14
    97b0:	df 90       	pop	r13
    97b2:	cf 90       	pop	r12
    97b4:	bf 90       	pop	r11
    97b6:	af 90       	pop	r10
    97b8:	9f 90       	pop	r9
    97ba:	8f 90       	pop	r8
    97bc:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    97c0:	cf 91       	pop	r28
    97c2:	ff 90       	pop	r15
    97c4:	ef 90       	pop	r14
    97c6:	df 90       	pop	r13
    97c8:	cf 90       	pop	r12
    97ca:	bf 90       	pop	r11
    97cc:	af 90       	pop	r10
    97ce:	9f 90       	pop	r9
    97d0:	8f 90       	pop	r8
    97d2:	08 95       	ret

000097d4 <_Z13Feed_Ext_Leftv>:
    97d4:	8f 92       	push	r8
    97d6:	9f 92       	push	r9
    97d8:	af 92       	push	r10
    97da:	bf 92       	push	r11
    97dc:	cf 92       	push	r12
    97de:	df 92       	push	r13
    97e0:	ef 92       	push	r14
    97e2:	ff 92       	push	r15
    97e4:	cf 93       	push	r28
    97e6:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    97ea:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    97ee:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    97f2:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    97f6:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    97fa:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    97fe:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    9802:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    9806:	84 17       	cp	r24, r20
    9808:	95 07       	cpc	r25, r21
    980a:	a6 07       	cpc	r26, r22
    980c:	b7 07       	cpc	r27, r23
    980e:	09 f0       	breq	.+2      	; 0x9812 <_Z13Feed_Ext_Leftv+0x3e>
    9810:	30 c1       	rjmp	.+608    	; 0x9a72 <_Z13Feed_Ext_Leftv+0x29e>
    9812:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    9816:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    981a:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    981e:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    9822:	f3 99       	sbic	0x1e, 3	; 30
    9824:	1a c0       	rjmp	.+52     	; 0x985a <_Z13Feed_Ext_Leftv+0x86>
    9826:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    982a:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    982e:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    9832:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    9836:	c8 16       	cp	r12, r24
    9838:	d9 06       	cpc	r13, r25
    983a:	ea 06       	cpc	r14, r26
    983c:	fb 06       	cpc	r15, r27
    983e:	a1 f1       	breq	.+104    	; 0x98a8 <_Z13Feed_Ext_Leftv+0xd4>
    9840:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    9844:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    9848:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    984c:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    9850:	48 17       	cp	r20, r24
    9852:	59 07       	cpc	r21, r25
    9854:	6a 07       	cpc	r22, r26
    9856:	7b 07       	cpc	r23, r27
    9858:	39 f1       	breq	.+78     	; 0x98a8 <_Z13Feed_Ext_Leftv+0xd4>
    985a:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    985e:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    9862:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    9866:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    986a:	48 17       	cp	r20, r24
    986c:	59 07       	cpc	r21, r25
    986e:	6a 07       	cpc	r22, r26
    9870:	7b 07       	cpc	r23, r27
    9872:	09 f0       	breq	.+2      	; 0x9876 <_Z13Feed_Ext_Leftv+0xa2>
    9874:	71 c1       	rjmp	.+738    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    9876:	f6 99       	sbic	0x1e, 6	; 30
    9878:	6f c1       	rjmp	.+734    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    987a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    987e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    9882:	89 17       	cp	r24, r25
    9884:	08 f4       	brcc	.+2      	; 0x9888 <_Z13Feed_Ext_Leftv+0xb4>
    9886:	68 c1       	rjmp	.+720    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    9888:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    988c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9890:	81 e0       	ldi	r24, 0x01	; 1
    9892:	cf 91       	pop	r28
    9894:	ff 90       	pop	r15
    9896:	ef 90       	pop	r14
    9898:	df 90       	pop	r13
    989a:	cf 90       	pop	r12
    989c:	bf 90       	pop	r11
    989e:	af 90       	pop	r10
    98a0:	9f 90       	pop	r9
    98a2:	8f 90       	pop	r8
    98a4:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
    98a8:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    98ac:	81 11       	cpse	r24, r1
    98ae:	54 c1       	rjmp	.+680    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    98b0:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    98b4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    98b8:	8c 17       	cp	r24, r28
    98ba:	08 f0       	brcs	.+2      	; 0x98be <_Z13Feed_Ext_Leftv+0xea>
    98bc:	45 c0       	rjmp	.+138    	; 0x9948 <_Z13Feed_Ext_Leftv+0x174>
    98be:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    98c2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    98c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    98ca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    98ce:	09 2e       	mov	r0, r25
    98d0:	00 0c       	add	r0, r0
    98d2:	aa 0b       	sbc	r26, r26
    98d4:	bb 0b       	sbc	r27, r27
    98d6:	8c 0d       	add	r24, r12
    98d8:	9d 1d       	adc	r25, r13
    98da:	ae 1d       	adc	r26, r14
    98dc:	bf 1d       	adc	r27, r15
    98de:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    98e2:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    98e6:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    98ea:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    98ee:	81 e0       	ldi	r24, 0x01	; 1
    98f0:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    98f4:	13 9a       	sbi	0x02, 3	; 2
    98f6:	11 9a       	sbi	0x02, 1	; 2
    98f8:	80 e0       	ldi	r24, 0x00	; 0
    98fa:	90 e0       	ldi	r25, 0x00	; 0
    98fc:	a0 e0       	ldi	r26, 0x00	; 0
    98fe:	b0 e4       	ldi	r27, 0x40	; 64
    9900:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    9904:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    9908:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    990c:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    9910:	80 e0       	ldi	r24, 0x00	; 0
    9912:	90 e0       	ldi	r25, 0x00	; 0
    9914:	a0 e0       	ldi	r26, 0x00	; 0
    9916:	b0 ec       	ldi	r27, 0xC0	; 192
    9918:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    991c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    9920:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    9924:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    9928:	81 e0       	ldi	r24, 0x01	; 1
    992a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    992e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    9932:	cf 91       	pop	r28
    9934:	ff 90       	pop	r15
    9936:	ef 90       	pop	r14
    9938:	df 90       	pop	r13
    993a:	cf 90       	pop	r12
    993c:	bf 90       	pop	r11
    993e:	af 90       	pop	r10
    9940:	9f 90       	pop	r9
    9942:	8f 90       	pop	r8
    9944:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z5Printv>
    9948:	81 e0       	ldi	r24, 0x01	; 1
    994a:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    994e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9952:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9956:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    995a:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    995e:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <Ap>
    9962:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <Ap+0x1>
    9966:	28 9f       	mul	r18, r24
    9968:	b0 01       	movw	r22, r0
    996a:	29 9f       	mul	r18, r25
    996c:	70 0d       	add	r23, r0
    996e:	38 9f       	mul	r19, r24
    9970:	70 0d       	add	r23, r0
    9972:	11 24       	eor	r1, r1
    9974:	07 2e       	mov	r0, r23
    9976:	00 0c       	add	r0, r0
    9978:	88 0b       	sbc	r24, r24
    997a:	99 0b       	sbc	r25, r25
    997c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9980:	4b 01       	movw	r8, r22
    9982:	5c 01       	movw	r10, r24
    9984:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    9988:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    998c:	07 2e       	mov	r0, r23
    998e:	00 0c       	add	r0, r0
    9990:	88 0b       	sbc	r24, r24
    9992:	99 0b       	sbc	r25, r25
    9994:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9998:	9b 01       	movw	r18, r22
    999a:	ac 01       	movw	r20, r24
    999c:	c5 01       	movw	r24, r10
    999e:	b4 01       	movw	r22, r8
    99a0:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    99a4:	20 e0       	ldi	r18, 0x00	; 0
    99a6:	30 e0       	ldi	r19, 0x00	; 0
    99a8:	40 e0       	ldi	r20, 0x00	; 0
    99aa:	5f e3       	ldi	r21, 0x3F	; 63
    99ac:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    99b0:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    99b4:	61 15       	cp	r22, r1
    99b6:	71 05       	cpc	r23, r1
    99b8:	89 f5       	brne	.+98     	; 0x9a1c <_Z13Feed_Ext_Leftv+0x248>
    99ba:	c1 30       	cpi	r28, 0x01	; 1
    99bc:	11 f5       	brne	.+68     	; 0x9a02 <_Z13Feed_Ext_Leftv+0x22e>
    99be:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    99c2:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    99c6:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    99ca:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    99ce:	01 96       	adiw	r24, 0x01	; 1
    99d0:	a1 1d       	adc	r26, r1
    99d2:	b1 1d       	adc	r27, r1
    99d4:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    99d8:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    99dc:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    99e0:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    99e4:	13 98       	cbi	0x02, 3	; 2
    99e6:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    99ea:	81 e0       	ldi	r24, 0x01	; 1
    99ec:	cf 91       	pop	r28
    99ee:	ff 90       	pop	r15
    99f0:	ef 90       	pop	r14
    99f2:	df 90       	pop	r13
    99f4:	cf 90       	pop	r12
    99f6:	bf 90       	pop	r11
    99f8:	af 90       	pop	r10
    99fa:	9f 90       	pop	r9
    99fc:	8f 90       	pop	r8
    99fe:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
    9a02:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    9a06:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9a0a:	09 2e       	mov	r0, r25
    9a0c:	00 0c       	add	r0, r0
    9a0e:	aa 0b       	sbc	r26, r26
    9a10:	bb 0b       	sbc	r27, r27
    9a12:	8c 0d       	add	r24, r12
    9a14:	9d 1d       	adc	r25, r13
    9a16:	ae 1d       	adc	r26, r14
    9a18:	bf 1d       	adc	r27, r15
    9a1a:	dc cf       	rjmp	.-72     	; 0x99d4 <_Z13Feed_Ext_Leftv+0x200>
    9a1c:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    9a20:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    9a24:	26 9f       	mul	r18, r22
    9a26:	a0 01       	movw	r20, r0
    9a28:	27 9f       	mul	r18, r23
    9a2a:	50 0d       	add	r21, r0
    9a2c:	36 9f       	mul	r19, r22
    9a2e:	50 0d       	add	r21, r0
    9a30:	11 24       	eor	r1, r1
    9a32:	05 2e       	mov	r0, r21
    9a34:	00 0c       	add	r0, r0
    9a36:	66 0b       	sbc	r22, r22
    9a38:	77 0b       	sbc	r23, r23
    9a3a:	c1 30       	cpi	r28, 0x01	; 1
    9a3c:	69 f4       	brne	.+26     	; 0x9a58 <_Z13Feed_Ext_Leftv+0x284>
    9a3e:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    9a42:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    9a46:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    9a4a:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    9a4e:	84 0f       	add	r24, r20
    9a50:	95 1f       	adc	r25, r21
    9a52:	a6 1f       	adc	r26, r22
    9a54:	b7 1f       	adc	r27, r23
    9a56:	be cf       	rjmp	.-132    	; 0x99d4 <_Z13Feed_Ext_Leftv+0x200>
    9a58:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    9a5c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9a60:	09 2e       	mov	r0, r25
    9a62:	00 0c       	add	r0, r0
    9a64:	aa 0b       	sbc	r26, r26
    9a66:	bb 0b       	sbc	r27, r27
    9a68:	8c 0d       	add	r24, r12
    9a6a:	9d 1d       	adc	r25, r13
    9a6c:	ae 1d       	adc	r26, r14
    9a6e:	bf 1d       	adc	r27, r15
    9a70:	ee cf       	rjmp	.-36     	; 0x9a4e <_Z13Feed_Ext_Leftv+0x27a>
    9a72:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    9a76:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    9a7a:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    9a7e:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    9a82:	84 17       	cp	r24, r20
    9a84:	95 07       	cpc	r25, r21
    9a86:	a6 07       	cpc	r26, r22
    9a88:	b7 07       	cpc	r27, r23
    9a8a:	09 f0       	breq	.+2      	; 0x9a8e <_Z13Feed_Ext_Leftv+0x2ba>
    9a8c:	65 c0       	rjmp	.+202    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    9a8e:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    9a92:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    9a96:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    9a9a:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    9a9e:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    9aa2:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    9aa6:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    9aaa:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    9aae:	84 17       	cp	r24, r20
    9ab0:	95 07       	cpc	r25, r21
    9ab2:	a6 07       	cpc	r26, r22
    9ab4:	b7 07       	cpc	r27, r23
    9ab6:	11 f4       	brne	.+4      	; 0x9abc <_Z13Feed_Ext_Leftv+0x2e8>
    9ab8:	f3 9b       	sbis	0x1e, 3	; 30
    9aba:	27 c0       	rjmp	.+78     	; 0x9b0a <_Z13Feed_Ext_Leftv+0x336>
    9abc:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    9ac0:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    9ac4:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    9ac8:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    9acc:	84 17       	cp	r24, r20
    9ace:	95 07       	cpc	r25, r21
    9ad0:	a6 07       	cpc	r26, r22
    9ad2:	b7 07       	cpc	r27, r23
    9ad4:	09 f0       	breq	.+2      	; 0x9ad8 <_Z13Feed_Ext_Leftv+0x304>
    9ad6:	40 c0       	rjmp	.+128    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    9ad8:	f6 99       	sbic	0x1e, 6	; 30
    9ada:	3e c0       	rjmp	.+124    	; 0x9b58 <_Z13Feed_Ext_Leftv+0x384>
    9adc:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9ae0:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9ae4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    9ae8:	8f 5f       	subi	r24, 0xFF	; 255
    9aea:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    9aee:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    9af2:	82 e0       	ldi	r24, 0x02	; 2
    9af4:	cf 91       	pop	r28
    9af6:	ff 90       	pop	r15
    9af8:	ef 90       	pop	r14
    9afa:	df 90       	pop	r13
    9afc:	cf 90       	pop	r12
    9afe:	bf 90       	pop	r11
    9b00:	af 90       	pop	r10
    9b02:	9f 90       	pop	r9
    9b04:	8f 90       	pop	r8
    9b06:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
    9b0a:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    9b0e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9b12:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9b16:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    9b1a:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    9b1e:	05 2e       	mov	r0, r21
    9b20:	00 0c       	add	r0, r0
    9b22:	66 0b       	sbc	r22, r22
    9b24:	77 0b       	sbc	r23, r23
    9b26:	84 1b       	sub	r24, r20
    9b28:	95 0b       	sbc	r25, r21
    9b2a:	a6 0b       	sbc	r26, r22
    9b2c:	b7 0b       	sbc	r27, r23
    9b2e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    9b32:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    9b36:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    9b3a:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    9b3e:	11 98       	cbi	0x02, 1	; 2
    9b40:	80 e0       	ldi	r24, 0x00	; 0
    9b42:	cf 91       	pop	r28
    9b44:	ff 90       	pop	r15
    9b46:	ef 90       	pop	r14
    9b48:	df 90       	pop	r13
    9b4a:	cf 90       	pop	r12
    9b4c:	bf 90       	pop	r11
    9b4e:	af 90       	pop	r10
    9b50:	9f 90       	pop	r9
    9b52:	8f 90       	pop	r8
    9b54:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
    9b58:	cf 91       	pop	r28
    9b5a:	ff 90       	pop	r15
    9b5c:	ef 90       	pop	r14
    9b5e:	df 90       	pop	r13
    9b60:	cf 90       	pop	r12
    9b62:	bf 90       	pop	r11
    9b64:	af 90       	pop	r10
    9b66:	9f 90       	pop	r9
    9b68:	8f 90       	pop	r8
    9b6a:	08 95       	ret

00009b6c <_Z12BeepCompletev>:
    9b6c:	81 e0       	ldi	r24, 0x01	; 1
    9b6e:	80 93 dc 11 	sts	0x11DC, r24	; 0x8011dc <Complete_flag>
    9b72:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    9b76:	e2 e0       	ldi	r30, 0x02	; 2
    9b78:	f1 e0       	ldi	r31, 0x01	; 1
    9b7a:	80 81       	ld	r24, Z
    9b7c:	8d 7f       	andi	r24, 0xFD	; 253
    9b7e:	80 83       	st	Z, r24
    9b80:	2f ef       	ldi	r18, 0xFF	; 255
    9b82:	89 e6       	ldi	r24, 0x69	; 105
    9b84:	98 e1       	ldi	r25, 0x18	; 24
    9b86:	21 50       	subi	r18, 0x01	; 1
    9b88:	80 40       	sbci	r24, 0x00	; 0
    9b8a:	90 40       	sbci	r25, 0x00	; 0
    9b8c:	e1 f7       	brne	.-8      	; 0x9b86 <_Z12BeepCompletev+0x1a>
    9b8e:	00 c0       	rjmp	.+0      	; 0x9b90 <_Z12BeepCompletev+0x24>
    9b90:	00 00       	nop
    9b92:	80 81       	ld	r24, Z
    9b94:	82 60       	ori	r24, 0x02	; 2
    9b96:	80 83       	st	Z, r24
    9b98:	2f ef       	ldi	r18, 0xFF	; 255
    9b9a:	81 ee       	ldi	r24, 0xE1	; 225
    9b9c:	94 e0       	ldi	r25, 0x04	; 4
    9b9e:	21 50       	subi	r18, 0x01	; 1
    9ba0:	80 40       	sbci	r24, 0x00	; 0
    9ba2:	90 40       	sbci	r25, 0x00	; 0
    9ba4:	e1 f7       	brne	.-8      	; 0x9b9e <_Z12BeepCompletev+0x32>
    9ba6:	00 c0       	rjmp	.+0      	; 0x9ba8 <_Z12BeepCompletev+0x3c>
    9ba8:	00 00       	nop
    9baa:	80 81       	ld	r24, Z
    9bac:	8d 7f       	andi	r24, 0xFD	; 253
    9bae:	80 83       	st	Z, r24
    9bb0:	2f ef       	ldi	r18, 0xFF	; 255
    9bb2:	89 e6       	ldi	r24, 0x69	; 105
    9bb4:	98 e1       	ldi	r25, 0x18	; 24
    9bb6:	21 50       	subi	r18, 0x01	; 1
    9bb8:	80 40       	sbci	r24, 0x00	; 0
    9bba:	90 40       	sbci	r25, 0x00	; 0
    9bbc:	e1 f7       	brne	.-8      	; 0x9bb6 <_Z12BeepCompletev+0x4a>
    9bbe:	00 c0       	rjmp	.+0      	; 0x9bc0 <_Z12BeepCompletev+0x54>
    9bc0:	00 00       	nop
    9bc2:	80 81       	ld	r24, Z
    9bc4:	82 60       	ori	r24, 0x02	; 2
    9bc6:	80 83       	st	Z, r24
    9bc8:	2f ef       	ldi	r18, 0xFF	; 255
    9bca:	81 ee       	ldi	r24, 0xE1	; 225
    9bcc:	94 e0       	ldi	r25, 0x04	; 4
    9bce:	21 50       	subi	r18, 0x01	; 1
    9bd0:	80 40       	sbci	r24, 0x00	; 0
    9bd2:	90 40       	sbci	r25, 0x00	; 0
    9bd4:	e1 f7       	brne	.-8      	; 0x9bce <_Z12BeepCompletev+0x62>
    9bd6:	00 c0       	rjmp	.+0      	; 0x9bd8 <_Z12BeepCompletev+0x6c>
    9bd8:	00 00       	nop
    9bda:	80 81       	ld	r24, Z
    9bdc:	8d 7f       	andi	r24, 0xFD	; 253
    9bde:	80 83       	st	Z, r24
    9be0:	2f ef       	ldi	r18, 0xFF	; 255
    9be2:	89 e6       	ldi	r24, 0x69	; 105
    9be4:	98 e1       	ldi	r25, 0x18	; 24
    9be6:	21 50       	subi	r18, 0x01	; 1
    9be8:	80 40       	sbci	r24, 0x00	; 0
    9bea:	90 40       	sbci	r25, 0x00	; 0
    9bec:	e1 f7       	brne	.-8      	; 0x9be6 <_Z12BeepCompletev+0x7a>
    9bee:	00 c0       	rjmp	.+0      	; 0x9bf0 <_Z12BeepCompletev+0x84>
    9bf0:	00 00       	nop
    9bf2:	80 81       	ld	r24, Z
    9bf4:	82 60       	ori	r24, 0x02	; 2
    9bf6:	80 83       	st	Z, r24
    9bf8:	08 95       	ret

00009bfa <_Z18NEW_aFeed_Ext_Rearv>:
    9bfa:	8f 92       	push	r8
    9bfc:	9f 92       	push	r9
    9bfe:	af 92       	push	r10
    9c00:	bf 92       	push	r11
    9c02:	cf 92       	push	r12
    9c04:	df 92       	push	r13
    9c06:	ef 92       	push	r14
    9c08:	ff 92       	push	r15
    9c0a:	0f 93       	push	r16
    9c0c:	1f 93       	push	r17
    9c0e:	cf 93       	push	r28
    9c10:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    9c14:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    9c18:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    9c1c:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    9c20:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    9c24:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    9c28:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    9c2c:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    9c30:	48 17       	cp	r20, r24
    9c32:	59 07       	cpc	r21, r25
    9c34:	6a 07       	cpc	r22, r26
    9c36:	7b 07       	cpc	r23, r27
    9c38:	09 f0       	breq	.+2      	; 0x9c3c <_Z18NEW_aFeed_Ext_Rearv+0x42>
    9c3a:	3e c1       	rjmp	.+636    	; 0x9eb8 <_Z18NEW_aFeed_Ext_Rearv+0x2be>
    9c3c:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    9c40:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    9c44:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    9c48:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    9c4c:	c0 90 c3 04 	lds	r12, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    9c50:	d0 90 c4 04 	lds	r13, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    9c54:	e0 90 c5 04 	lds	r14, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    9c58:	f0 90 c6 04 	lds	r15, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    9c5c:	8c 15       	cp	r24, r12
    9c5e:	9d 05       	cpc	r25, r13
    9c60:	ae 05       	cpc	r26, r14
    9c62:	bf 05       	cpc	r27, r15
    9c64:	11 f4       	brne	.+4      	; 0x9c6a <_Z18NEW_aFeed_Ext_Rearv+0x70>
    9c66:	f6 9b       	sbis	0x1e, 6	; 30
    9c68:	10 c0       	rjmp	.+32     	; 0x9c8a <_Z18NEW_aFeed_Ext_Rearv+0x90>
    9c6a:	00 91 20 12 	lds	r16, 0x1220	; 0x801220 <Null_Z_Pos>
    9c6e:	10 91 21 12 	lds	r17, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    9c72:	20 91 22 12 	lds	r18, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    9c76:	30 91 23 12 	lds	r19, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    9c7a:	80 17       	cp	r24, r16
    9c7c:	91 07       	cpc	r25, r17
    9c7e:	a2 07       	cpc	r26, r18
    9c80:	b3 07       	cpc	r27, r19
    9c82:	09 f0       	breq	.+2      	; 0x9c86 <_Z18NEW_aFeed_Ext_Rearv+0x8c>
    9c84:	0a c1       	rjmp	.+532    	; 0x9e9a <_Z18NEW_aFeed_Ext_Rearv+0x2a0>
    9c86:	f6 99       	sbic	0x1e, 6	; 30
    9c88:	08 c1       	rjmp	.+528    	; 0x9e9a <_Z18NEW_aFeed_Ext_Rearv+0x2a0>
    9c8a:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    9c8e:	81 11       	cpse	r24, r1
    9c90:	a2 c1       	rjmp	.+836    	; 0x9fd6 <_Z18NEW_aFeed_Ext_Rearv+0x3dc>
    9c92:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    9c96:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    9c9a:	8c 17       	cp	r24, r28
    9c9c:	08 f4       	brcc	.+2      	; 0x9ca0 <_Z18NEW_aFeed_Ext_Rearv+0xa6>
    9c9e:	b5 c0       	rjmp	.+362    	; 0x9e0a <_Z18NEW_aFeed_Ext_Rearv+0x210>
    9ca0:	81 e0       	ldi	r24, 0x01	; 1
    9ca2:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    9ca6:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9caa:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9cae:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    9cb2:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    9cb6:	07 2e       	mov	r0, r23
    9cb8:	00 0c       	add	r0, r0
    9cba:	88 0b       	sbc	r24, r24
    9cbc:	99 0b       	sbc	r25, r25
    9cbe:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9cc2:	4b 01       	movw	r8, r22
    9cc4:	5c 01       	movw	r10, r24
    9cc6:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    9cca:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    9cce:	07 2e       	mov	r0, r23
    9cd0:	00 0c       	add	r0, r0
    9cd2:	88 0b       	sbc	r24, r24
    9cd4:	99 0b       	sbc	r25, r25
    9cd6:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9cda:	9b 01       	movw	r18, r22
    9cdc:	ac 01       	movw	r20, r24
    9cde:	c5 01       	movw	r24, r10
    9ce0:	b4 01       	movw	r22, r8
    9ce2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    9ce6:	4b 01       	movw	r8, r22
    9ce8:	5c 01       	movw	r10, r24
    9cea:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    9cee:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    9cf2:	07 2e       	mov	r0, r23
    9cf4:	00 0c       	add	r0, r0
    9cf6:	88 0b       	sbc	r24, r24
    9cf8:	99 0b       	sbc	r25, r25
    9cfa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9cfe:	9b 01       	movw	r18, r22
    9d00:	ac 01       	movw	r20, r24
    9d02:	c5 01       	movw	r24, r10
    9d04:	b4 01       	movw	r22, r8
    9d06:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    9d0a:	4b 01       	movw	r8, r22
    9d0c:	5c 01       	movw	r10, r24
    9d0e:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    9d12:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    9d16:	07 2e       	mov	r0, r23
    9d18:	00 0c       	add	r0, r0
    9d1a:	88 0b       	sbc	r24, r24
    9d1c:	99 0b       	sbc	r25, r25
    9d1e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    9d22:	9b 01       	movw	r18, r22
    9d24:	ac 01       	movw	r20, r24
    9d26:	c5 01       	movw	r24, r10
    9d28:	b4 01       	movw	r22, r8
    9d2a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    9d2e:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    9d32:	8b 01       	movw	r16, r22
    9d34:	77 0f       	add	r23, r23
    9d36:	22 0b       	sbc	r18, r18
    9d38:	33 0b       	sbc	r19, r19
    9d3a:	01 15       	cp	r16, r1
    9d3c:	11 05       	cpc	r17, r1
    9d3e:	21 05       	cpc	r18, r1
    9d40:	31 05       	cpc	r19, r1
    9d42:	d9 f5       	brne	.+118    	; 0x9dba <_Z18NEW_aFeed_Ext_Rearv+0x1c0>
    9d44:	c1 30       	cpi	r28, 0x01	; 1
    9d46:	21 f5       	brne	.+72     	; 0x9d90 <_Z18NEW_aFeed_Ext_Rearv+0x196>
    9d48:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    9d4c:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    9d50:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    9d54:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    9d58:	01 96       	adiw	r24, 0x01	; 1
    9d5a:	a1 1d       	adc	r26, r1
    9d5c:	b1 1d       	adc	r27, r1
    9d5e:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    9d62:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    9d66:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    9d6a:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    9d6e:	17 98       	cbi	0x02, 7	; 2
    9d70:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    9d74:	81 e0       	ldi	r24, 0x01	; 1
    9d76:	cf 91       	pop	r28
    9d78:	1f 91       	pop	r17
    9d7a:	0f 91       	pop	r16
    9d7c:	ff 90       	pop	r15
    9d7e:	ef 90       	pop	r14
    9d80:	df 90       	pop	r13
    9d82:	cf 90       	pop	r12
    9d84:	bf 90       	pop	r11
    9d86:	af 90       	pop	r10
    9d88:	9f 90       	pop	r9
    9d8a:	8f 90       	pop	r8
    9d8c:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    9d90:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <REBOUND_Z>
    9d94:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    9d98:	07 2e       	mov	r0, r23
    9d9a:	00 0c       	add	r0, r0
    9d9c:	88 0b       	sbc	r24, r24
    9d9e:	99 0b       	sbc	r25, r25
    9da0:	c6 0e       	add	r12, r22
    9da2:	d7 1e       	adc	r13, r23
    9da4:	e8 1e       	adc	r14, r24
    9da6:	f9 1e       	adc	r15, r25
    9da8:	c0 92 f6 09 	sts	0x09F6, r12	; 0x8009f6 <Limit_Pos_Left>
    9dac:	d0 92 f7 09 	sts	0x09F7, r13	; 0x8009f7 <Limit_Pos_Left+0x1>
    9db0:	e0 92 f8 09 	sts	0x09F8, r14	; 0x8009f8 <Limit_Pos_Left+0x2>
    9db4:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <Limit_Pos_Left+0x3>
    9db8:	da cf       	rjmp	.-76     	; 0x9d6e <_Z18NEW_aFeed_Ext_Rearv+0x174>
    9dba:	c1 30       	cpi	r28, 0x01	; 1
    9dbc:	a9 f4       	brne	.+42     	; 0x9de8 <_Z18NEW_aFeed_Ext_Rearv+0x1ee>
    9dbe:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    9dc2:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    9dc6:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    9dca:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    9dce:	08 0f       	add	r16, r24
    9dd0:	19 1f       	adc	r17, r25
    9dd2:	2a 1f       	adc	r18, r26
    9dd4:	3b 1f       	adc	r19, r27
    9dd6:	00 93 f6 09 	sts	0x09F6, r16	; 0x8009f6 <Limit_Pos_Left>
    9dda:	10 93 f7 09 	sts	0x09F7, r17	; 0x8009f7 <Limit_Pos_Left+0x1>
    9dde:	20 93 f8 09 	sts	0x09F8, r18	; 0x8009f8 <Limit_Pos_Left+0x2>
    9de2:	30 93 f9 09 	sts	0x09F9, r19	; 0x8009f9 <Limit_Pos_Left+0x3>
    9de6:	c3 cf       	rjmp	.-122    	; 0x9d6e <_Z18NEW_aFeed_Ext_Rearv+0x174>
    9de8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    9dec:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    9df0:	09 2e       	mov	r0, r25
    9df2:	00 0c       	add	r0, r0
    9df4:	aa 0b       	sbc	r26, r26
    9df6:	bb 0b       	sbc	r27, r27
    9df8:	c8 0e       	add	r12, r24
    9dfa:	d9 1e       	adc	r13, r25
    9dfc:	ea 1e       	adc	r14, r26
    9dfe:	fb 1e       	adc	r15, r27
    9e00:	0c 0d       	add	r16, r12
    9e02:	1d 1d       	adc	r17, r13
    9e04:	2e 1d       	adc	r18, r14
    9e06:	3f 1d       	adc	r19, r15
    9e08:	e6 cf       	rjmp	.-52     	; 0x9dd6 <_Z18NEW_aFeed_Ext_Rearv+0x1dc>
    9e0a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9e0e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9e12:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <REBOUND_Z>
    9e16:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    9e1a:	07 2e       	mov	r0, r23
    9e1c:	00 0c       	add	r0, r0
    9e1e:	88 0b       	sbc	r24, r24
    9e20:	99 0b       	sbc	r25, r25
    9e22:	c6 0e       	add	r12, r22
    9e24:	d7 1e       	adc	r13, r23
    9e26:	e8 1e       	adc	r14, r24
    9e28:	f9 1e       	adc	r15, r25
    9e2a:	c0 92 f6 09 	sts	0x09F6, r12	; 0x8009f6 <Limit_Pos_Left>
    9e2e:	d0 92 f7 09 	sts	0x09F7, r13	; 0x8009f7 <Limit_Pos_Left+0x1>
    9e32:	e0 92 f8 09 	sts	0x09F8, r14	; 0x8009f8 <Limit_Pos_Left+0x2>
    9e36:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <Limit_Pos_Left+0x3>
    9e3a:	81 e0       	ldi	r24, 0x01	; 1
    9e3c:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    9e40:	17 9a       	sbi	0x02, 7	; 2
    9e42:	15 9a       	sbi	0x02, 5	; 2
    9e44:	80 e0       	ldi	r24, 0x00	; 0
    9e46:	90 e0       	ldi	r25, 0x00	; 0
    9e48:	a0 e0       	ldi	r26, 0x00	; 0
    9e4a:	b0 e4       	ldi	r27, 0x40	; 64
    9e4c:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    9e50:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    9e54:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    9e58:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    9e5c:	80 e0       	ldi	r24, 0x00	; 0
    9e5e:	90 e0       	ldi	r25, 0x00	; 0
    9e60:	a0 e0       	ldi	r26, 0x00	; 0
    9e62:	b0 ec       	ldi	r27, 0xC0	; 192
    9e64:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    9e68:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    9e6c:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    9e70:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    9e74:	81 e0       	ldi	r24, 0x01	; 1
    9e76:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    9e7a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    9e7e:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    9e82:	cf 91       	pop	r28
    9e84:	1f 91       	pop	r17
    9e86:	0f 91       	pop	r16
    9e88:	ff 90       	pop	r15
    9e8a:	ef 90       	pop	r14
    9e8c:	df 90       	pop	r13
    9e8e:	cf 90       	pop	r12
    9e90:	bf 90       	pop	r11
    9e92:	af 90       	pop	r10
    9e94:	9f 90       	pop	r9
    9e96:	8f 90       	pop	r8
    9e98:	69 ce       	rjmp	.-814    	; 0x9b6c <_Z12BeepCompletev>
    9e9a:	00 91 f6 09 	lds	r16, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    9e9e:	10 91 f7 09 	lds	r17, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    9ea2:	20 91 f8 09 	lds	r18, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    9ea6:	30 91 f9 09 	lds	r19, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    9eaa:	80 17       	cp	r24, r16
    9eac:	91 07       	cpc	r25, r17
    9eae:	a2 07       	cpc	r26, r18
    9eb0:	b3 07       	cpc	r27, r19
    9eb2:	11 f4       	brne	.+4      	; 0x9eb8 <_Z18NEW_aFeed_Ext_Rearv+0x2be>
    9eb4:	f3 9b       	sbis	0x1e, 3	; 30
    9eb6:	4f c0       	rjmp	.+158    	; 0x9f56 <_Z18NEW_aFeed_Ext_Rearv+0x35c>
    9eb8:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    9ebc:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    9ec0:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    9ec4:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    9ec8:	48 17       	cp	r20, r24
    9eca:	59 07       	cpc	r21, r25
    9ecc:	6a 07       	cpc	r22, r26
    9ece:	7b 07       	cpc	r23, r27
    9ed0:	09 f0       	breq	.+2      	; 0x9ed4 <_Z18NEW_aFeed_Ext_Rearv+0x2da>
    9ed2:	81 c0       	rjmp	.+258    	; 0x9fd6 <_Z18NEW_aFeed_Ext_Rearv+0x3dc>
    9ed4:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    9ed8:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    9edc:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    9ee0:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    9ee4:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    9ee8:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    9eec:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    9ef0:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    9ef4:	84 17       	cp	r24, r20
    9ef6:	95 07       	cpc	r25, r21
    9ef8:	a6 07       	cpc	r26, r22
    9efa:	b7 07       	cpc	r27, r23
    9efc:	09 f0       	breq	.+2      	; 0x9f00 <_Z18NEW_aFeed_Ext_Rearv+0x306>
    9efe:	43 c0       	rjmp	.+134    	; 0x9f86 <_Z18NEW_aFeed_Ext_Rearv+0x38c>
    9f00:	f6 99       	sbic	0x1e, 6	; 30
    9f02:	41 c0       	rjmp	.+130    	; 0x9f86 <_Z18NEW_aFeed_Ext_Rearv+0x38c>
    9f04:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    9f08:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9f0c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9f10:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <REBOUND_Z>
    9f14:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    9f18:	05 2e       	mov	r0, r21
    9f1a:	00 0c       	add	r0, r0
    9f1c:	66 0b       	sbc	r22, r22
    9f1e:	77 0b       	sbc	r23, r23
    9f20:	84 1b       	sub	r24, r20
    9f22:	95 0b       	sbc	r25, r21
    9f24:	a6 0b       	sbc	r26, r22
    9f26:	b7 0b       	sbc	r27, r23
    9f28:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    9f2c:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    9f30:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    9f34:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    9f38:	15 98       	cbi	0x02, 5	; 2
    9f3a:	81 e0       	ldi	r24, 0x01	; 1
    9f3c:	cf 91       	pop	r28
    9f3e:	1f 91       	pop	r17
    9f40:	0f 91       	pop	r16
    9f42:	ff 90       	pop	r15
    9f44:	ef 90       	pop	r14
    9f46:	df 90       	pop	r13
    9f48:	cf 90       	pop	r12
    9f4a:	bf 90       	pop	r11
    9f4c:	af 90       	pop	r10
    9f4e:	9f 90       	pop	r9
    9f50:	8f 90       	pop	r8
    9f52:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    9f56:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    9f5a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    9f5e:	89 17       	cp	r24, r25
    9f60:	d0 f1       	brcs	.+116    	; 0x9fd6 <_Z18NEW_aFeed_Ext_Rearv+0x3dc>
    9f62:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9f66:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9f6a:	81 e0       	ldi	r24, 0x01	; 1
    9f6c:	cf 91       	pop	r28
    9f6e:	1f 91       	pop	r17
    9f70:	0f 91       	pop	r16
    9f72:	ff 90       	pop	r15
    9f74:	ef 90       	pop	r14
    9f76:	df 90       	pop	r13
    9f78:	cf 90       	pop	r12
    9f7a:	bf 90       	pop	r11
    9f7c:	af 90       	pop	r10
    9f7e:	9f 90       	pop	r9
    9f80:	8f 90       	pop	r8
    9f82:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    9f86:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    9f8a:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    9f8e:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    9f92:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    9f96:	84 17       	cp	r24, r20
    9f98:	95 07       	cpc	r25, r21
    9f9a:	a6 07       	cpc	r26, r22
    9f9c:	b7 07       	cpc	r27, r23
    9f9e:	d9 f4       	brne	.+54     	; 0x9fd6 <_Z18NEW_aFeed_Ext_Rearv+0x3dc>
    9fa0:	f3 99       	sbic	0x1e, 3	; 30
    9fa2:	19 c0       	rjmp	.+50     	; 0x9fd6 <_Z18NEW_aFeed_Ext_Rearv+0x3dc>
    9fa4:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    9fa8:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    9fac:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    9fb0:	8f 5f       	subi	r24, 0xFF	; 255
    9fb2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    9fb6:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    9fba:	82 e0       	ldi	r24, 0x02	; 2
    9fbc:	cf 91       	pop	r28
    9fbe:	1f 91       	pop	r17
    9fc0:	0f 91       	pop	r16
    9fc2:	ff 90       	pop	r15
    9fc4:	ef 90       	pop	r14
    9fc6:	df 90       	pop	r13
    9fc8:	cf 90       	pop	r12
    9fca:	bf 90       	pop	r11
    9fcc:	af 90       	pop	r10
    9fce:	9f 90       	pop	r9
    9fd0:	8f 90       	pop	r8
    9fd2:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    9fd6:	cf 91       	pop	r28
    9fd8:	1f 91       	pop	r17
    9fda:	0f 91       	pop	r16
    9fdc:	ff 90       	pop	r15
    9fde:	ef 90       	pop	r14
    9fe0:	df 90       	pop	r13
    9fe2:	cf 90       	pop	r12
    9fe4:	bf 90       	pop	r11
    9fe6:	af 90       	pop	r10
    9fe8:	9f 90       	pop	r9
    9fea:	8f 90       	pop	r8
    9fec:	08 95       	ret

00009fee <_Z19NEW_aFeed_Ext_Frontv>:
    9fee:	8f 92       	push	r8
    9ff0:	9f 92       	push	r9
    9ff2:	af 92       	push	r10
    9ff4:	bf 92       	push	r11
    9ff6:	cf 92       	push	r12
    9ff8:	df 92       	push	r13
    9ffa:	ef 92       	push	r14
    9ffc:	ff 92       	push	r15
    9ffe:	0f 93       	push	r16
    a000:	1f 93       	push	r17
    a002:	cf 93       	push	r28
    a004:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    a008:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    a00c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    a010:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    a014:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    a018:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    a01c:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    a020:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    a024:	48 17       	cp	r20, r24
    a026:	59 07       	cpc	r21, r25
    a028:	6a 07       	cpc	r22, r26
    a02a:	7b 07       	cpc	r23, r27
    a02c:	09 f0       	breq	.+2      	; 0xa030 <_Z19NEW_aFeed_Ext_Frontv+0x42>
    a02e:	3e c1       	rjmp	.+636    	; 0xa2ac <_Z19NEW_aFeed_Ext_Frontv+0x2be>
    a030:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    a034:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    a038:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    a03c:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    a040:	c0 90 c3 04 	lds	r12, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    a044:	d0 90 c4 04 	lds	r13, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    a048:	e0 90 c5 04 	lds	r14, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    a04c:	f0 90 c6 04 	lds	r15, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    a050:	8c 15       	cp	r24, r12
    a052:	9d 05       	cpc	r25, r13
    a054:	ae 05       	cpc	r26, r14
    a056:	bf 05       	cpc	r27, r15
    a058:	11 f4       	brne	.+4      	; 0xa05e <_Z19NEW_aFeed_Ext_Frontv+0x70>
    a05a:	f6 9b       	sbis	0x1e, 6	; 30
    a05c:	10 c0       	rjmp	.+32     	; 0xa07e <_Z19NEW_aFeed_Ext_Frontv+0x90>
    a05e:	00 91 20 12 	lds	r16, 0x1220	; 0x801220 <Null_Z_Pos>
    a062:	10 91 21 12 	lds	r17, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    a066:	20 91 22 12 	lds	r18, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    a06a:	30 91 23 12 	lds	r19, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    a06e:	80 17       	cp	r24, r16
    a070:	91 07       	cpc	r25, r17
    a072:	a2 07       	cpc	r26, r18
    a074:	b3 07       	cpc	r27, r19
    a076:	09 f0       	breq	.+2      	; 0xa07a <_Z19NEW_aFeed_Ext_Frontv+0x8c>
    a078:	0a c1       	rjmp	.+532    	; 0xa28e <_Z19NEW_aFeed_Ext_Frontv+0x2a0>
    a07a:	f6 99       	sbic	0x1e, 6	; 30
    a07c:	08 c1       	rjmp	.+528    	; 0xa28e <_Z19NEW_aFeed_Ext_Frontv+0x2a0>
    a07e:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    a082:	81 11       	cpse	r24, r1
    a084:	a2 c1       	rjmp	.+836    	; 0xa3ca <_Z19NEW_aFeed_Ext_Frontv+0x3dc>
    a086:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    a08a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    a08e:	8c 17       	cp	r24, r28
    a090:	08 f4       	brcc	.+2      	; 0xa094 <_Z19NEW_aFeed_Ext_Frontv+0xa6>
    a092:	b5 c0       	rjmp	.+362    	; 0xa1fe <_Z19NEW_aFeed_Ext_Frontv+0x210>
    a094:	81 e0       	ldi	r24, 0x01	; 1
    a096:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    a09a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a09e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a0a2:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    a0a6:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    a0aa:	07 2e       	mov	r0, r23
    a0ac:	00 0c       	add	r0, r0
    a0ae:	88 0b       	sbc	r24, r24
    a0b0:	99 0b       	sbc	r25, r25
    a0b2:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a0b6:	4b 01       	movw	r8, r22
    a0b8:	5c 01       	movw	r10, r24
    a0ba:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    a0be:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    a0c2:	07 2e       	mov	r0, r23
    a0c4:	00 0c       	add	r0, r0
    a0c6:	88 0b       	sbc	r24, r24
    a0c8:	99 0b       	sbc	r25, r25
    a0ca:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a0ce:	9b 01       	movw	r18, r22
    a0d0:	ac 01       	movw	r20, r24
    a0d2:	c5 01       	movw	r24, r10
    a0d4:	b4 01       	movw	r22, r8
    a0d6:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    a0da:	4b 01       	movw	r8, r22
    a0dc:	5c 01       	movw	r10, r24
    a0de:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    a0e2:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    a0e6:	07 2e       	mov	r0, r23
    a0e8:	00 0c       	add	r0, r0
    a0ea:	88 0b       	sbc	r24, r24
    a0ec:	99 0b       	sbc	r25, r25
    a0ee:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a0f2:	9b 01       	movw	r18, r22
    a0f4:	ac 01       	movw	r20, r24
    a0f6:	c5 01       	movw	r24, r10
    a0f8:	b4 01       	movw	r22, r8
    a0fa:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    a0fe:	4b 01       	movw	r8, r22
    a100:	5c 01       	movw	r10, r24
    a102:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    a106:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    a10a:	07 2e       	mov	r0, r23
    a10c:	00 0c       	add	r0, r0
    a10e:	88 0b       	sbc	r24, r24
    a110:	99 0b       	sbc	r25, r25
    a112:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a116:	9b 01       	movw	r18, r22
    a118:	ac 01       	movw	r20, r24
    a11a:	c5 01       	movw	r24, r10
    a11c:	b4 01       	movw	r22, r8
    a11e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    a122:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    a126:	8b 01       	movw	r16, r22
    a128:	77 0f       	add	r23, r23
    a12a:	22 0b       	sbc	r18, r18
    a12c:	33 0b       	sbc	r19, r19
    a12e:	01 15       	cp	r16, r1
    a130:	11 05       	cpc	r17, r1
    a132:	21 05       	cpc	r18, r1
    a134:	31 05       	cpc	r19, r1
    a136:	d9 f5       	brne	.+118    	; 0xa1ae <_Z19NEW_aFeed_Ext_Frontv+0x1c0>
    a138:	c1 30       	cpi	r28, 0x01	; 1
    a13a:	21 f5       	brne	.+72     	; 0xa184 <_Z19NEW_aFeed_Ext_Frontv+0x196>
    a13c:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    a140:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    a144:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    a148:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    a14c:	01 96       	adiw	r24, 0x01	; 1
    a14e:	a1 1d       	adc	r26, r1
    a150:	b1 1d       	adc	r27, r1
    a152:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    a156:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    a15a:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    a15e:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    a162:	17 98       	cbi	0x02, 7	; 2
    a164:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    a168:	81 e0       	ldi	r24, 0x01	; 1
    a16a:	cf 91       	pop	r28
    a16c:	1f 91       	pop	r17
    a16e:	0f 91       	pop	r16
    a170:	ff 90       	pop	r15
    a172:	ef 90       	pop	r14
    a174:	df 90       	pop	r13
    a176:	cf 90       	pop	r12
    a178:	bf 90       	pop	r11
    a17a:	af 90       	pop	r10
    a17c:	9f 90       	pop	r9
    a17e:	8f 90       	pop	r8
    a180:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    a184:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <REBOUND_Z>
    a188:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    a18c:	07 2e       	mov	r0, r23
    a18e:	00 0c       	add	r0, r0
    a190:	88 0b       	sbc	r24, r24
    a192:	99 0b       	sbc	r25, r25
    a194:	c6 0e       	add	r12, r22
    a196:	d7 1e       	adc	r13, r23
    a198:	e8 1e       	adc	r14, r24
    a19a:	f9 1e       	adc	r15, r25
    a19c:	c0 92 f6 09 	sts	0x09F6, r12	; 0x8009f6 <Limit_Pos_Left>
    a1a0:	d0 92 f7 09 	sts	0x09F7, r13	; 0x8009f7 <Limit_Pos_Left+0x1>
    a1a4:	e0 92 f8 09 	sts	0x09F8, r14	; 0x8009f8 <Limit_Pos_Left+0x2>
    a1a8:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <Limit_Pos_Left+0x3>
    a1ac:	da cf       	rjmp	.-76     	; 0xa162 <_Z19NEW_aFeed_Ext_Frontv+0x174>
    a1ae:	c1 30       	cpi	r28, 0x01	; 1
    a1b0:	a9 f4       	brne	.+42     	; 0xa1dc <_Z19NEW_aFeed_Ext_Frontv+0x1ee>
    a1b2:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <Null_Z_Pos>
    a1b6:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    a1ba:	a0 91 22 12 	lds	r26, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    a1be:	b0 91 23 12 	lds	r27, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    a1c2:	08 0f       	add	r16, r24
    a1c4:	19 1f       	adc	r17, r25
    a1c6:	2a 1f       	adc	r18, r26
    a1c8:	3b 1f       	adc	r19, r27
    a1ca:	00 93 f6 09 	sts	0x09F6, r16	; 0x8009f6 <Limit_Pos_Left>
    a1ce:	10 93 f7 09 	sts	0x09F7, r17	; 0x8009f7 <Limit_Pos_Left+0x1>
    a1d2:	20 93 f8 09 	sts	0x09F8, r18	; 0x8009f8 <Limit_Pos_Left+0x2>
    a1d6:	30 93 f9 09 	sts	0x09F9, r19	; 0x8009f9 <Limit_Pos_Left+0x3>
    a1da:	c3 cf       	rjmp	.-122    	; 0xa162 <_Z19NEW_aFeed_Ext_Frontv+0x174>
    a1dc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    a1e0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    a1e4:	09 2e       	mov	r0, r25
    a1e6:	00 0c       	add	r0, r0
    a1e8:	aa 0b       	sbc	r26, r26
    a1ea:	bb 0b       	sbc	r27, r27
    a1ec:	c8 0e       	add	r12, r24
    a1ee:	d9 1e       	adc	r13, r25
    a1f0:	ea 1e       	adc	r14, r26
    a1f2:	fb 1e       	adc	r15, r27
    a1f4:	0c 0d       	add	r16, r12
    a1f6:	1d 1d       	adc	r17, r13
    a1f8:	2e 1d       	adc	r18, r14
    a1fa:	3f 1d       	adc	r19, r15
    a1fc:	e6 cf       	rjmp	.-52     	; 0xa1ca <_Z19NEW_aFeed_Ext_Frontv+0x1dc>
    a1fe:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a202:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a206:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <REBOUND_Z>
    a20a:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    a20e:	07 2e       	mov	r0, r23
    a210:	00 0c       	add	r0, r0
    a212:	88 0b       	sbc	r24, r24
    a214:	99 0b       	sbc	r25, r25
    a216:	c6 0e       	add	r12, r22
    a218:	d7 1e       	adc	r13, r23
    a21a:	e8 1e       	adc	r14, r24
    a21c:	f9 1e       	adc	r15, r25
    a21e:	c0 92 f6 09 	sts	0x09F6, r12	; 0x8009f6 <Limit_Pos_Left>
    a222:	d0 92 f7 09 	sts	0x09F7, r13	; 0x8009f7 <Limit_Pos_Left+0x1>
    a226:	e0 92 f8 09 	sts	0x09F8, r14	; 0x8009f8 <Limit_Pos_Left+0x2>
    a22a:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <Limit_Pos_Left+0x3>
    a22e:	81 e0       	ldi	r24, 0x01	; 1
    a230:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    a234:	17 9a       	sbi	0x02, 7	; 2
    a236:	15 9a       	sbi	0x02, 5	; 2
    a238:	80 e0       	ldi	r24, 0x00	; 0
    a23a:	90 e0       	ldi	r25, 0x00	; 0
    a23c:	a0 e0       	ldi	r26, 0x00	; 0
    a23e:	b0 e4       	ldi	r27, 0x40	; 64
    a240:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
    a244:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
    a248:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
    a24c:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
    a250:	80 e0       	ldi	r24, 0x00	; 0
    a252:	90 e0       	ldi	r25, 0x00	; 0
    a254:	a0 e0       	ldi	r26, 0x00	; 0
    a256:	b0 ec       	ldi	r27, 0xC0	; 192
    a258:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    a25c:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    a260:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    a264:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    a268:	81 e0       	ldi	r24, 0x01	; 1
    a26a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    a26e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    a272:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    a276:	cf 91       	pop	r28
    a278:	1f 91       	pop	r17
    a27a:	0f 91       	pop	r16
    a27c:	ff 90       	pop	r15
    a27e:	ef 90       	pop	r14
    a280:	df 90       	pop	r13
    a282:	cf 90       	pop	r12
    a284:	bf 90       	pop	r11
    a286:	af 90       	pop	r10
    a288:	9f 90       	pop	r9
    a28a:	8f 90       	pop	r8
    a28c:	6f cc       	rjmp	.-1826   	; 0x9b6c <_Z12BeepCompletev>
    a28e:	00 91 f6 09 	lds	r16, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    a292:	10 91 f7 09 	lds	r17, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    a296:	20 91 f8 09 	lds	r18, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    a29a:	30 91 f9 09 	lds	r19, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    a29e:	80 17       	cp	r24, r16
    a2a0:	91 07       	cpc	r25, r17
    a2a2:	a2 07       	cpc	r26, r18
    a2a4:	b3 07       	cpc	r27, r19
    a2a6:	11 f4       	brne	.+4      	; 0xa2ac <_Z19NEW_aFeed_Ext_Frontv+0x2be>
    a2a8:	f3 9b       	sbis	0x1e, 3	; 30
    a2aa:	4f c0       	rjmp	.+158    	; 0xa34a <_Z19NEW_aFeed_Ext_Frontv+0x35c>
    a2ac:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    a2b0:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    a2b4:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    a2b8:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    a2bc:	48 17       	cp	r20, r24
    a2be:	59 07       	cpc	r21, r25
    a2c0:	6a 07       	cpc	r22, r26
    a2c2:	7b 07       	cpc	r23, r27
    a2c4:	09 f0       	breq	.+2      	; 0xa2c8 <_Z19NEW_aFeed_Ext_Frontv+0x2da>
    a2c6:	81 c0       	rjmp	.+258    	; 0xa3ca <_Z19NEW_aFeed_Ext_Frontv+0x3dc>
    a2c8:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    a2cc:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    a2d0:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    a2d4:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    a2d8:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    a2dc:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    a2e0:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    a2e4:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    a2e8:	84 17       	cp	r24, r20
    a2ea:	95 07       	cpc	r25, r21
    a2ec:	a6 07       	cpc	r26, r22
    a2ee:	b7 07       	cpc	r27, r23
    a2f0:	09 f0       	breq	.+2      	; 0xa2f4 <_Z19NEW_aFeed_Ext_Frontv+0x306>
    a2f2:	43 c0       	rjmp	.+134    	; 0xa37a <_Z19NEW_aFeed_Ext_Frontv+0x38c>
    a2f4:	f6 99       	sbic	0x1e, 6	; 30
    a2f6:	41 c0       	rjmp	.+130    	; 0xa37a <_Z19NEW_aFeed_Ext_Frontv+0x38c>
    a2f8:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    a2fc:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a300:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a304:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <REBOUND_Z>
    a308:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    a30c:	05 2e       	mov	r0, r21
    a30e:	00 0c       	add	r0, r0
    a310:	66 0b       	sbc	r22, r22
    a312:	77 0b       	sbc	r23, r23
    a314:	84 1b       	sub	r24, r20
    a316:	95 0b       	sbc	r25, r21
    a318:	a6 0b       	sbc	r26, r22
    a31a:	b7 0b       	sbc	r27, r23
    a31c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
    a320:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
    a324:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
    a328:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
    a32c:	15 98       	cbi	0x02, 5	; 2
    a32e:	81 e0       	ldi	r24, 0x01	; 1
    a330:	cf 91       	pop	r28
    a332:	1f 91       	pop	r17
    a334:	0f 91       	pop	r16
    a336:	ff 90       	pop	r15
    a338:	ef 90       	pop	r14
    a33a:	df 90       	pop	r13
    a33c:	cf 90       	pop	r12
    a33e:	bf 90       	pop	r11
    a340:	af 90       	pop	r10
    a342:	9f 90       	pop	r9
    a344:	8f 90       	pop	r8
    a346:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    a34a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    a34e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    a352:	89 17       	cp	r24, r25
    a354:	d0 f1       	brcs	.+116    	; 0xa3ca <_Z19NEW_aFeed_Ext_Frontv+0x3dc>
    a356:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a35a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a35e:	81 e0       	ldi	r24, 0x01	; 1
    a360:	cf 91       	pop	r28
    a362:	1f 91       	pop	r17
    a364:	0f 91       	pop	r16
    a366:	ff 90       	pop	r15
    a368:	ef 90       	pop	r14
    a36a:	df 90       	pop	r13
    a36c:	cf 90       	pop	r12
    a36e:	bf 90       	pop	r11
    a370:	af 90       	pop	r10
    a372:	9f 90       	pop	r9
    a374:	8f 90       	pop	r8
    a376:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    a37a:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    a37e:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    a382:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    a386:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    a38a:	84 17       	cp	r24, r20
    a38c:	95 07       	cpc	r25, r21
    a38e:	a6 07       	cpc	r26, r22
    a390:	b7 07       	cpc	r27, r23
    a392:	d9 f4       	brne	.+54     	; 0xa3ca <_Z19NEW_aFeed_Ext_Frontv+0x3dc>
    a394:	f3 99       	sbic	0x1e, 3	; 30
    a396:	19 c0       	rjmp	.+50     	; 0xa3ca <_Z19NEW_aFeed_Ext_Frontv+0x3dc>
    a398:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a39c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a3a0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    a3a4:	8f 5f       	subi	r24, 0xFF	; 255
    a3a6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    a3aa:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    a3ae:	82 e0       	ldi	r24, 0x02	; 2
    a3b0:	cf 91       	pop	r28
    a3b2:	1f 91       	pop	r17
    a3b4:	0f 91       	pop	r16
    a3b6:	ff 90       	pop	r15
    a3b8:	ef 90       	pop	r14
    a3ba:	df 90       	pop	r13
    a3bc:	cf 90       	pop	r12
    a3be:	bf 90       	pop	r11
    a3c0:	af 90       	pop	r10
    a3c2:	9f 90       	pop	r9
    a3c4:	8f 90       	pop	r8
    a3c6:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    a3ca:	cf 91       	pop	r28
    a3cc:	1f 91       	pop	r17
    a3ce:	0f 91       	pop	r16
    a3d0:	ff 90       	pop	r15
    a3d2:	ef 90       	pop	r14
    a3d4:	df 90       	pop	r13
    a3d6:	cf 90       	pop	r12
    a3d8:	bf 90       	pop	r11
    a3da:	af 90       	pop	r10
    a3dc:	9f 90       	pop	r9
    a3de:	8f 90       	pop	r8
    a3e0:	08 95       	ret

0000a3e2 <_Z19NEW_aFeed_Int_Rightv>:
    a3e2:	8f 92       	push	r8
    a3e4:	9f 92       	push	r9
    a3e6:	af 92       	push	r10
    a3e8:	bf 92       	push	r11
    a3ea:	cf 92       	push	r12
    a3ec:	df 92       	push	r13
    a3ee:	ef 92       	push	r14
    a3f0:	ff 92       	push	r15
    a3f2:	1f 93       	push	r17
    a3f4:	cf 93       	push	r28
    a3f6:	df 93       	push	r29
    a3f8:	c0 91 dd 11 	lds	r28, 0x11DD	; 0x8011dd <Ap>
    a3fc:	d0 91 de 11 	lds	r29, 0x11DE	; 0x8011de <Ap+0x1>
    a400:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    a404:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    a408:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    a40c:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    a410:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    a414:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    a418:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    a41c:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    a420:	20 97       	sbiw	r28, 0x00	; 0
    a422:	09 f4       	brne	.+2      	; 0xa426 <_Z19NEW_aFeed_Int_Rightv+0x44>
    a424:	ea c1       	rjmp	.+980    	; 0xa7fa <_Z19NEW_aFeed_Int_Rightv+0x418>
    a426:	84 17       	cp	r24, r20
    a428:	95 07       	cpc	r25, r21
    a42a:	a6 07       	cpc	r26, r22
    a42c:	b7 07       	cpc	r27, r23
    a42e:	09 f0       	breq	.+2      	; 0xa432 <_Z19NEW_aFeed_Int_Rightv+0x50>
    a430:	40 c1       	rjmp	.+640    	; 0xa6b2 <_Z19NEW_aFeed_Int_Rightv+0x2d0>
    a432:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    a436:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    a43a:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    a43e:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    a442:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    a446:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    a44a:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    a44e:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    a452:	4c 15       	cp	r20, r12
    a454:	5d 05       	cpc	r21, r13
    a456:	6e 05       	cpc	r22, r14
    a458:	7f 05       	cpc	r23, r15
    a45a:	11 f4       	brne	.+4      	; 0xa460 <_Z19NEW_aFeed_Int_Rightv+0x7e>
    a45c:	f3 9b       	sbis	0x1e, 3	; 30
    a45e:	10 c0       	rjmp	.+32     	; 0xa480 <_Z19NEW_aFeed_Int_Rightv+0x9e>
    a460:	80 90 10 12 	lds	r8, 0x1210	; 0x801210 <Null_X_Pos>
    a464:	90 90 11 12 	lds	r9, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    a468:	a0 90 12 12 	lds	r10, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    a46c:	b0 90 13 12 	lds	r11, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    a470:	48 15       	cp	r20, r8
    a472:	59 05       	cpc	r21, r9
    a474:	6a 05       	cpc	r22, r10
    a476:	7b 05       	cpc	r23, r11
    a478:	09 f0       	breq	.+2      	; 0xa47c <_Z19NEW_aFeed_Int_Rightv+0x9a>
    a47a:	0c c1       	rjmp	.+536    	; 0xa694 <_Z19NEW_aFeed_Int_Rightv+0x2b2>
    a47c:	f3 99       	sbic	0x1e, 3	; 30
    a47e:	0a c1       	rjmp	.+532    	; 0xa694 <_Z19NEW_aFeed_Int_Rightv+0x2b2>
    a480:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    a484:	81 11       	cpse	r24, r1
    a486:	76 c0       	rjmp	.+236    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a488:	10 91 22 02 	lds	r17, 0x0222	; 0x800222 <Pass_Nr>
    a48c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    a490:	81 17       	cp	r24, r17
    a492:	08 f4       	brcc	.+2      	; 0xa496 <_Z19NEW_aFeed_Int_Rightv+0xb4>
    a494:	b5 c0       	rjmp	.+362    	; 0xa600 <_Z19NEW_aFeed_Int_Rightv+0x21e>
    a496:	81 e0       	ldi	r24, 0x01	; 1
    a498:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    a49c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a4a0:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a4a4:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    a4a8:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    a4ac:	07 2e       	mov	r0, r23
    a4ae:	00 0c       	add	r0, r0
    a4b0:	88 0b       	sbc	r24, r24
    a4b2:	99 0b       	sbc	r25, r25
    a4b4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a4b8:	4b 01       	movw	r8, r22
    a4ba:	5c 01       	movw	r10, r24
    a4bc:	be 01       	movw	r22, r28
    a4be:	dd 0f       	add	r29, r29
    a4c0:	88 0b       	sbc	r24, r24
    a4c2:	99 0b       	sbc	r25, r25
    a4c4:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a4c8:	9b 01       	movw	r18, r22
    a4ca:	ac 01       	movw	r20, r24
    a4cc:	c5 01       	movw	r24, r10
    a4ce:	b4 01       	movw	r22, r8
    a4d0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    a4d4:	4b 01       	movw	r8, r22
    a4d6:	5c 01       	movw	r10, r24
    a4d8:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    a4dc:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    a4e0:	07 2e       	mov	r0, r23
    a4e2:	00 0c       	add	r0, r0
    a4e4:	88 0b       	sbc	r24, r24
    a4e6:	99 0b       	sbc	r25, r25
    a4e8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a4ec:	9b 01       	movw	r18, r22
    a4ee:	ac 01       	movw	r20, r24
    a4f0:	c5 01       	movw	r24, r10
    a4f2:	b4 01       	movw	r22, r8
    a4f4:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    a4f8:	4b 01       	movw	r8, r22
    a4fa:	5c 01       	movw	r10, r24
    a4fc:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    a500:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    a504:	07 2e       	mov	r0, r23
    a506:	00 0c       	add	r0, r0
    a508:	88 0b       	sbc	r24, r24
    a50a:	99 0b       	sbc	r25, r25
    a50c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a510:	9b 01       	movw	r18, r22
    a512:	ac 01       	movw	r20, r24
    a514:	c5 01       	movw	r24, r10
    a516:	b4 01       	movw	r22, r8
    a518:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    a51c:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    a520:	4b 01       	movw	r8, r22
    a522:	ab 01       	movw	r20, r22
    a524:	77 0f       	add	r23, r23
    a526:	66 0b       	sbc	r22, r22
    a528:	77 0b       	sbc	r23, r23
    a52a:	41 15       	cp	r20, r1
    a52c:	51 05       	cpc	r21, r1
    a52e:	61 05       	cpc	r22, r1
    a530:	71 05       	cpc	r23, r1
    a532:	09 f0       	breq	.+2      	; 0xa536 <_Z19NEW_aFeed_Int_Rightv+0x154>
    a534:	40 c0       	rjmp	.+128    	; 0xa5b6 <_Z19NEW_aFeed_Int_Rightv+0x1d4>
    a536:	11 30       	cpi	r17, 0x01	; 1
    a538:	49 f5       	brne	.+82     	; 0xa58c <_Z19NEW_aFeed_Int_Rightv+0x1aa>
    a53a:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    a53e:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    a542:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    a546:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    a54a:	01 97       	sbiw	r24, 0x01	; 1
    a54c:	a1 09       	sbc	r26, r1
    a54e:	b1 09       	sbc	r27, r1
    a550:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    a554:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    a558:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    a55c:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    a560:	11 98       	cbi	0x02, 1	; 2
    a562:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    a566:	81 e0       	ldi	r24, 0x01	; 1
    a568:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    a56c:	90 92 b6 11 	sts	0x11B6, r9	; 0x8011b6 <w+0x1>
    a570:	80 92 b5 11 	sts	0x11B5, r8	; 0x8011b5 <w>
    a574:	df 91       	pop	r29
    a576:	cf 91       	pop	r28
    a578:	1f 91       	pop	r17
    a57a:	ff 90       	pop	r15
    a57c:	ef 90       	pop	r14
    a57e:	df 90       	pop	r13
    a580:	cf 90       	pop	r12
    a582:	bf 90       	pop	r11
    a584:	af 90       	pop	r10
    a586:	9f 90       	pop	r9
    a588:	8f 90       	pop	r8
    a58a:	08 95       	ret
    a58c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    a590:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    a594:	09 2e       	mov	r0, r25
    a596:	00 0c       	add	r0, r0
    a598:	aa 0b       	sbc	r26, r26
    a59a:	bb 0b       	sbc	r27, r27
    a59c:	c8 1a       	sub	r12, r24
    a59e:	d9 0a       	sbc	r13, r25
    a5a0:	ea 0a       	sbc	r14, r26
    a5a2:	fb 0a       	sbc	r15, r27
    a5a4:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    a5a8:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    a5ac:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    a5b0:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    a5b4:	d5 cf       	rjmp	.-86     	; 0xa560 <_Z19NEW_aFeed_Int_Rightv+0x17e>
    a5b6:	11 30       	cpi	r17, 0x01	; 1
    a5b8:	69 f4       	brne	.+26     	; 0xa5d4 <_Z19NEW_aFeed_Int_Rightv+0x1f2>
    a5ba:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    a5be:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    a5c2:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    a5c6:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    a5ca:	84 1b       	sub	r24, r20
    a5cc:	95 0b       	sbc	r25, r21
    a5ce:	a6 0b       	sbc	r26, r22
    a5d0:	b7 0b       	sbc	r27, r23
    a5d2:	be cf       	rjmp	.-132    	; 0xa550 <_Z19NEW_aFeed_Int_Rightv+0x16e>
    a5d4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    a5d8:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    a5dc:	09 2e       	mov	r0, r25
    a5de:	00 0c       	add	r0, r0
    a5e0:	aa 0b       	sbc	r26, r26
    a5e2:	bb 0b       	sbc	r27, r27
    a5e4:	c8 1a       	sub	r12, r24
    a5e6:	d9 0a       	sbc	r13, r25
    a5e8:	ea 0a       	sbc	r14, r26
    a5ea:	fb 0a       	sbc	r15, r27
    a5ec:	21 2f       	mov	r18, r17
    a5ee:	30 e0       	ldi	r19, 0x00	; 0
    a5f0:	d4 01       	movw	r26, r8
    a5f2:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    a5f6:	c6 1a       	sub	r12, r22
    a5f8:	d7 0a       	sbc	r13, r23
    a5fa:	e8 0a       	sbc	r14, r24
    a5fc:	f9 0a       	sbc	r15, r25
    a5fe:	d2 cf       	rjmp	.-92     	; 0xa5a4 <_Z19NEW_aFeed_Int_Rightv+0x1c2>
    a600:	c1 e0       	ldi	r28, 0x01	; 1
    a602:	c0 93 26 12 	sts	0x1226, r28	; 0x801226 <cycle_flag>
    a606:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a60a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a60e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    a612:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    a616:	09 2e       	mov	r0, r25
    a618:	00 0c       	add	r0, r0
    a61a:	aa 0b       	sbc	r26, r26
    a61c:	bb 0b       	sbc	r27, r27
    a61e:	c8 1a       	sub	r12, r24
    a620:	d9 0a       	sbc	r13, r25
    a622:	ea 0a       	sbc	r14, r26
    a624:	fb 0a       	sbc	r15, r27
    a626:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    a62a:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    a62e:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    a632:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    a636:	81 e0       	ldi	r24, 0x01	; 1
    a638:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    a63c:	13 9a       	sbi	0x02, 3	; 2
    a63e:	11 9a       	sbi	0x02, 1	; 2
    a640:	80 e0       	ldi	r24, 0x00	; 0
    a642:	90 e0       	ldi	r25, 0x00	; 0
    a644:	a0 e0       	ldi	r26, 0x00	; 0
    a646:	b0 e4       	ldi	r27, 0x40	; 64
    a648:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    a64c:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    a650:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    a654:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    a658:	80 e0       	ldi	r24, 0x00	; 0
    a65a:	90 e0       	ldi	r25, 0x00	; 0
    a65c:	a0 e0       	ldi	r26, 0x00	; 0
    a65e:	b0 ec       	ldi	r27, 0xC0	; 192
    a660:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    a664:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    a668:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    a66c:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    a670:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
    a674:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <Pass_Nr>
    a678:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    a67c:	df 91       	pop	r29
    a67e:	cf 91       	pop	r28
    a680:	1f 91       	pop	r17
    a682:	ff 90       	pop	r15
    a684:	ef 90       	pop	r14
    a686:	df 90       	pop	r13
    a688:	cf 90       	pop	r12
    a68a:	bf 90       	pop	r11
    a68c:	af 90       	pop	r10
    a68e:	9f 90       	pop	r9
    a690:	8f 90       	pop	r8
    a692:	6c ca       	rjmp	.-2856   	; 0x9b6c <_Z12BeepCompletev>
    a694:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    a698:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    a69c:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    a6a0:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    a6a4:	4c 15       	cp	r20, r12
    a6a6:	5d 05       	cpc	r21, r13
    a6a8:	6e 05       	cpc	r22, r14
    a6aa:	7f 05       	cpc	r23, r15
    a6ac:	11 f4       	brne	.+4      	; 0xa6b2 <_Z19NEW_aFeed_Int_Rightv+0x2d0>
    a6ae:	f6 9b       	sbis	0x1e, 6	; 30
    a6b0:	62 c0       	rjmp	.+196    	; 0xa776 <_Z19NEW_aFeed_Int_Rightv+0x394>
    a6b2:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    a6b6:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    a6ba:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    a6be:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    a6c2:	84 17       	cp	r24, r20
    a6c4:	95 07       	cpc	r25, r21
    a6c6:	a6 07       	cpc	r26, r22
    a6c8:	b7 07       	cpc	r27, r23
    a6ca:	09 f0       	breq	.+2      	; 0xa6ce <_Z19NEW_aFeed_Int_Rightv+0x2ec>
    a6cc:	53 cf       	rjmp	.-346    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a6ce:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    a6d2:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    a6d6:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    a6da:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    a6de:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    a6e2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    a6e6:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    a6ea:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    a6ee:	c8 16       	cp	r12, r24
    a6f0:	d9 06       	cpc	r13, r25
    a6f2:	ea 06       	cpc	r14, r26
    a6f4:	fb 06       	cpc	r15, r27
    a6f6:	09 f0       	breq	.+2      	; 0xa6fa <_Z19NEW_aFeed_Int_Rightv+0x318>
    a6f8:	57 c0       	rjmp	.+174    	; 0xa7a8 <_Z19NEW_aFeed_Int_Rightv+0x3c6>
    a6fa:	f3 99       	sbic	0x1e, 3	; 30
    a6fc:	55 c0       	rjmp	.+170    	; 0xa7a8 <_Z19NEW_aFeed_Int_Rightv+0x3c6>
    a6fe:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    a702:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a706:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a70a:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <Pass_Nr>
    a70e:	20 91 b5 11 	lds	r18, 0x11B5	; 0x8011b5 <w>
    a712:	30 91 b6 11 	lds	r19, 0x11B6	; 0x8011b6 <w+0x1>
    a716:	42 9f       	mul	r20, r18
    a718:	c0 01       	movw	r24, r0
    a71a:	43 9f       	mul	r20, r19
    a71c:	90 0d       	add	r25, r0
    a71e:	11 24       	eor	r1, r1
    a720:	09 2e       	mov	r0, r25
    a722:	00 0c       	add	r0, r0
    a724:	aa 0b       	sbc	r26, r26
    a726:	bb 0b       	sbc	r27, r27
    a728:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    a72c:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    a730:	05 2e       	mov	r0, r21
    a732:	00 0c       	add	r0, r0
    a734:	66 0b       	sbc	r22, r22
    a736:	77 0b       	sbc	r23, r23
    a738:	4c 0d       	add	r20, r12
    a73a:	5d 1d       	adc	r21, r13
    a73c:	6e 1d       	adc	r22, r14
    a73e:	7f 1d       	adc	r23, r15
    a740:	84 0f       	add	r24, r20
    a742:	95 1f       	adc	r25, r21
    a744:	a6 1f       	adc	r26, r22
    a746:	b7 1f       	adc	r27, r23
    a748:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    a74c:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    a750:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    a754:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    a758:	13 98       	cbi	0x02, 3	; 2
    a75a:	81 e0       	ldi	r24, 0x01	; 1
    a75c:	df 91       	pop	r29
    a75e:	cf 91       	pop	r28
    a760:	1f 91       	pop	r17
    a762:	ff 90       	pop	r15
    a764:	ef 90       	pop	r14
    a766:	df 90       	pop	r13
    a768:	cf 90       	pop	r12
    a76a:	bf 90       	pop	r11
    a76c:	af 90       	pop	r10
    a76e:	9f 90       	pop	r9
    a770:	8f 90       	pop	r8
    a772:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    a776:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    a77a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    a77e:	89 17       	cp	r24, r25
    a780:	08 f4       	brcc	.+2      	; 0xa784 <_Z19NEW_aFeed_Int_Rightv+0x3a2>
    a782:	f8 ce       	rjmp	.-528    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a784:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a788:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a78c:	81 e0       	ldi	r24, 0x01	; 1
    a78e:	df 91       	pop	r29
    a790:	cf 91       	pop	r28
    a792:	1f 91       	pop	r17
    a794:	ff 90       	pop	r15
    a796:	ef 90       	pop	r14
    a798:	df 90       	pop	r13
    a79a:	cf 90       	pop	r12
    a79c:	bf 90       	pop	r11
    a79e:	af 90       	pop	r10
    a7a0:	9f 90       	pop	r9
    a7a2:	8f 90       	pop	r8
    a7a4:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    a7a8:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    a7ac:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    a7b0:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    a7b4:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    a7b8:	c8 16       	cp	r12, r24
    a7ba:	d9 06       	cpc	r13, r25
    a7bc:	ea 06       	cpc	r14, r26
    a7be:	fb 06       	cpc	r15, r27
    a7c0:	09 f0       	breq	.+2      	; 0xa7c4 <_Z19NEW_aFeed_Int_Rightv+0x3e2>
    a7c2:	d8 ce       	rjmp	.-592    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a7c4:	f6 99       	sbic	0x1e, 6	; 30
    a7c6:	d6 ce       	rjmp	.-596    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a7c8:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a7cc:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a7d0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    a7d4:	8f 5f       	subi	r24, 0xFF	; 255
    a7d6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    a7da:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    a7de:	82 e0       	ldi	r24, 0x02	; 2
    a7e0:	df 91       	pop	r29
    a7e2:	cf 91       	pop	r28
    a7e4:	1f 91       	pop	r17
    a7e6:	ff 90       	pop	r15
    a7e8:	ef 90       	pop	r14
    a7ea:	df 90       	pop	r13
    a7ec:	cf 90       	pop	r12
    a7ee:	bf 90       	pop	r11
    a7f0:	af 90       	pop	r10
    a7f2:	9f 90       	pop	r9
    a7f4:	8f 90       	pop	r8
    a7f6:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    a7fa:	84 17       	cp	r24, r20
    a7fc:	95 07       	cpc	r25, r21
    a7fe:	a6 07       	cpc	r26, r22
    a800:	b7 07       	cpc	r27, r23
    a802:	11 f4       	brne	.+4      	; 0xa808 <_Z19NEW_aFeed_Int_Rightv+0x426>
    a804:	f3 9b       	sbis	0x1e, 3	; 30
    a806:	17 c0       	rjmp	.+46     	; 0xa836 <_Z19NEW_aFeed_Int_Rightv+0x454>
    a808:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    a80c:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    a810:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    a814:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    a818:	84 17       	cp	r24, r20
    a81a:	95 07       	cpc	r25, r21
    a81c:	a6 07       	cpc	r26, r22
    a81e:	b7 07       	cpc	r27, r23
    a820:	09 f0       	breq	.+2      	; 0xa824 <_Z19NEW_aFeed_Int_Rightv+0x442>
    a822:	a8 ce       	rjmp	.-688    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a824:	f6 99       	sbic	0x1e, 6	; 30
    a826:	a6 ce       	rjmp	.-692    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a828:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a82c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a830:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    a834:	cd cf       	rjmp	.-102    	; 0xa7d0 <_Z19NEW_aFeed_Int_Rightv+0x3ee>
    a836:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    a83a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Pass_Total>
    a83e:	20 91 26 12 	lds	r18, 0x1226	; 0x801226 <cycle_flag>
    a842:	21 11       	cpse	r18, r1
    a844:	1a c0       	rjmp	.+52     	; 0xa87a <_Z19NEW_aFeed_Int_Rightv+0x498>
    a846:	98 17       	cp	r25, r24
    a848:	d8 f0       	brcs	.+54     	; 0xa880 <_Z19NEW_aFeed_Int_Rightv+0x49e>
    a84a:	81 e0       	ldi	r24, 0x01	; 1
    a84c:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    a850:	13 98       	cbi	0x02, 3	; 2
    a852:	11 98       	cbi	0x02, 1	; 2
    a854:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a858:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a85c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    a860:	df 91       	pop	r29
    a862:	cf 91       	pop	r28
    a864:	1f 91       	pop	r17
    a866:	ff 90       	pop	r15
    a868:	ef 90       	pop	r14
    a86a:	df 90       	pop	r13
    a86c:	cf 90       	pop	r12
    a86e:	bf 90       	pop	r11
    a870:	af 90       	pop	r10
    a872:	9f 90       	pop	r9
    a874:	8f 90       	pop	r8
    a876:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    a87a:	98 17       	cp	r25, r24
    a87c:	08 f0       	brcs	.+2      	; 0xa880 <_Z19NEW_aFeed_Int_Rightv+0x49e>
    a87e:	7a ce       	rjmp	.-780    	; 0xa574 <_Z19NEW_aFeed_Int_Rightv+0x192>
    a880:	81 e0       	ldi	r24, 0x01	; 1
    a882:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    a886:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a88a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a88e:	13 9a       	sbi	0x02, 3	; 2
    a890:	11 9a       	sbi	0x02, 1	; 2
    a892:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    a896:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    a89a:	ee ce       	rjmp	.-548    	; 0xa678 <_Z19NEW_aFeed_Int_Rightv+0x296>

0000a89c <_Z18NEW_aFeed_Int_Leftv>:
    a89c:	8f 92       	push	r8
    a89e:	9f 92       	push	r9
    a8a0:	af 92       	push	r10
    a8a2:	bf 92       	push	r11
    a8a4:	cf 92       	push	r12
    a8a6:	df 92       	push	r13
    a8a8:	ef 92       	push	r14
    a8aa:	ff 92       	push	r15
    a8ac:	1f 93       	push	r17
    a8ae:	cf 93       	push	r28
    a8b0:	df 93       	push	r29
    a8b2:	c0 91 dd 11 	lds	r28, 0x11DD	; 0x8011dd <Ap>
    a8b6:	d0 91 de 11 	lds	r29, 0x11DE	; 0x8011de <Ap+0x1>
    a8ba:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    a8be:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    a8c2:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    a8c6:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    a8ca:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    a8ce:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    a8d2:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    a8d6:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    a8da:	20 97       	sbiw	r28, 0x00	; 0
    a8dc:	09 f4       	brne	.+2      	; 0xa8e0 <_Z18NEW_aFeed_Int_Leftv+0x44>
    a8de:	ea c1       	rjmp	.+980    	; 0xacb4 <_Z18NEW_aFeed_Int_Leftv+0x418>
    a8e0:	84 17       	cp	r24, r20
    a8e2:	95 07       	cpc	r25, r21
    a8e4:	a6 07       	cpc	r26, r22
    a8e6:	b7 07       	cpc	r27, r23
    a8e8:	09 f0       	breq	.+2      	; 0xa8ec <_Z18NEW_aFeed_Int_Leftv+0x50>
    a8ea:	40 c1       	rjmp	.+640    	; 0xab6c <_Z18NEW_aFeed_Int_Leftv+0x2d0>
    a8ec:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    a8f0:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    a8f4:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    a8f8:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    a8fc:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    a900:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    a904:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    a908:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    a90c:	4c 15       	cp	r20, r12
    a90e:	5d 05       	cpc	r21, r13
    a910:	6e 05       	cpc	r22, r14
    a912:	7f 05       	cpc	r23, r15
    a914:	11 f4       	brne	.+4      	; 0xa91a <_Z18NEW_aFeed_Int_Leftv+0x7e>
    a916:	f3 9b       	sbis	0x1e, 3	; 30
    a918:	10 c0       	rjmp	.+32     	; 0xa93a <_Z18NEW_aFeed_Int_Leftv+0x9e>
    a91a:	80 90 10 12 	lds	r8, 0x1210	; 0x801210 <Null_X_Pos>
    a91e:	90 90 11 12 	lds	r9, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    a922:	a0 90 12 12 	lds	r10, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    a926:	b0 90 13 12 	lds	r11, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    a92a:	48 15       	cp	r20, r8
    a92c:	59 05       	cpc	r21, r9
    a92e:	6a 05       	cpc	r22, r10
    a930:	7b 05       	cpc	r23, r11
    a932:	09 f0       	breq	.+2      	; 0xa936 <_Z18NEW_aFeed_Int_Leftv+0x9a>
    a934:	0c c1       	rjmp	.+536    	; 0xab4e <_Z18NEW_aFeed_Int_Leftv+0x2b2>
    a936:	f3 99       	sbic	0x1e, 3	; 30
    a938:	0a c1       	rjmp	.+532    	; 0xab4e <_Z18NEW_aFeed_Int_Leftv+0x2b2>
    a93a:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    a93e:	81 11       	cpse	r24, r1
    a940:	76 c0       	rjmp	.+236    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    a942:	10 91 22 02 	lds	r17, 0x0222	; 0x800222 <Pass_Nr>
    a946:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    a94a:	81 17       	cp	r24, r17
    a94c:	08 f4       	brcc	.+2      	; 0xa950 <_Z18NEW_aFeed_Int_Leftv+0xb4>
    a94e:	b5 c0       	rjmp	.+362    	; 0xaaba <_Z18NEW_aFeed_Int_Leftv+0x21e>
    a950:	81 e0       	ldi	r24, 0x01	; 1
    a952:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    a956:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    a95a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    a95e:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    a962:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    a966:	07 2e       	mov	r0, r23
    a968:	00 0c       	add	r0, r0
    a96a:	88 0b       	sbc	r24, r24
    a96c:	99 0b       	sbc	r25, r25
    a96e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a972:	4b 01       	movw	r8, r22
    a974:	5c 01       	movw	r10, r24
    a976:	be 01       	movw	r22, r28
    a978:	dd 0f       	add	r29, r29
    a97a:	88 0b       	sbc	r24, r24
    a97c:	99 0b       	sbc	r25, r25
    a97e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a982:	9b 01       	movw	r18, r22
    a984:	ac 01       	movw	r20, r24
    a986:	c5 01       	movw	r24, r10
    a988:	b4 01       	movw	r22, r8
    a98a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    a98e:	4b 01       	movw	r8, r22
    a990:	5c 01       	movw	r10, r24
    a992:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    a996:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    a99a:	07 2e       	mov	r0, r23
    a99c:	00 0c       	add	r0, r0
    a99e:	88 0b       	sbc	r24, r24
    a9a0:	99 0b       	sbc	r25, r25
    a9a2:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a9a6:	9b 01       	movw	r18, r22
    a9a8:	ac 01       	movw	r20, r24
    a9aa:	c5 01       	movw	r24, r10
    a9ac:	b4 01       	movw	r22, r8
    a9ae:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    a9b2:	4b 01       	movw	r8, r22
    a9b4:	5c 01       	movw	r10, r24
    a9b6:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    a9ba:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    a9be:	07 2e       	mov	r0, r23
    a9c0:	00 0c       	add	r0, r0
    a9c2:	88 0b       	sbc	r24, r24
    a9c4:	99 0b       	sbc	r25, r25
    a9c6:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    a9ca:	9b 01       	movw	r18, r22
    a9cc:	ac 01       	movw	r20, r24
    a9ce:	c5 01       	movw	r24, r10
    a9d0:	b4 01       	movw	r22, r8
    a9d2:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    a9d6:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    a9da:	4b 01       	movw	r8, r22
    a9dc:	ab 01       	movw	r20, r22
    a9de:	77 0f       	add	r23, r23
    a9e0:	66 0b       	sbc	r22, r22
    a9e2:	77 0b       	sbc	r23, r23
    a9e4:	41 15       	cp	r20, r1
    a9e6:	51 05       	cpc	r21, r1
    a9e8:	61 05       	cpc	r22, r1
    a9ea:	71 05       	cpc	r23, r1
    a9ec:	09 f0       	breq	.+2      	; 0xa9f0 <_Z18NEW_aFeed_Int_Leftv+0x154>
    a9ee:	40 c0       	rjmp	.+128    	; 0xaa70 <_Z18NEW_aFeed_Int_Leftv+0x1d4>
    a9f0:	11 30       	cpi	r17, 0x01	; 1
    a9f2:	49 f5       	brne	.+82     	; 0xaa46 <_Z18NEW_aFeed_Int_Leftv+0x1aa>
    a9f4:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    a9f8:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    a9fc:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    aa00:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    aa04:	01 97       	sbiw	r24, 0x01	; 1
    aa06:	a1 09       	sbc	r26, r1
    aa08:	b1 09       	sbc	r27, r1
    aa0a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    aa0e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    aa12:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    aa16:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    aa1a:	11 98       	cbi	0x02, 1	; 2
    aa1c:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    aa20:	81 e0       	ldi	r24, 0x01	; 1
    aa22:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    aa26:	90 92 b6 11 	sts	0x11B6, r9	; 0x8011b6 <w+0x1>
    aa2a:	80 92 b5 11 	sts	0x11B5, r8	; 0x8011b5 <w>
    aa2e:	df 91       	pop	r29
    aa30:	cf 91       	pop	r28
    aa32:	1f 91       	pop	r17
    aa34:	ff 90       	pop	r15
    aa36:	ef 90       	pop	r14
    aa38:	df 90       	pop	r13
    aa3a:	cf 90       	pop	r12
    aa3c:	bf 90       	pop	r11
    aa3e:	af 90       	pop	r10
    aa40:	9f 90       	pop	r9
    aa42:	8f 90       	pop	r8
    aa44:	08 95       	ret
    aa46:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    aa4a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    aa4e:	09 2e       	mov	r0, r25
    aa50:	00 0c       	add	r0, r0
    aa52:	aa 0b       	sbc	r26, r26
    aa54:	bb 0b       	sbc	r27, r27
    aa56:	c8 1a       	sub	r12, r24
    aa58:	d9 0a       	sbc	r13, r25
    aa5a:	ea 0a       	sbc	r14, r26
    aa5c:	fb 0a       	sbc	r15, r27
    aa5e:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    aa62:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    aa66:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    aa6a:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    aa6e:	d5 cf       	rjmp	.-86     	; 0xaa1a <_Z18NEW_aFeed_Int_Leftv+0x17e>
    aa70:	11 30       	cpi	r17, 0x01	; 1
    aa72:	69 f4       	brne	.+26     	; 0xaa8e <_Z18NEW_aFeed_Int_Leftv+0x1f2>
    aa74:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    aa78:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    aa7c:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    aa80:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    aa84:	84 1b       	sub	r24, r20
    aa86:	95 0b       	sbc	r25, r21
    aa88:	a6 0b       	sbc	r26, r22
    aa8a:	b7 0b       	sbc	r27, r23
    aa8c:	be cf       	rjmp	.-132    	; 0xaa0a <_Z18NEW_aFeed_Int_Leftv+0x16e>
    aa8e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    aa92:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    aa96:	09 2e       	mov	r0, r25
    aa98:	00 0c       	add	r0, r0
    aa9a:	aa 0b       	sbc	r26, r26
    aa9c:	bb 0b       	sbc	r27, r27
    aa9e:	c8 1a       	sub	r12, r24
    aaa0:	d9 0a       	sbc	r13, r25
    aaa2:	ea 0a       	sbc	r14, r26
    aaa4:	fb 0a       	sbc	r15, r27
    aaa6:	21 2f       	mov	r18, r17
    aaa8:	30 e0       	ldi	r19, 0x00	; 0
    aaaa:	d4 01       	movw	r26, r8
    aaac:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    aab0:	c6 1a       	sub	r12, r22
    aab2:	d7 0a       	sbc	r13, r23
    aab4:	e8 0a       	sbc	r14, r24
    aab6:	f9 0a       	sbc	r15, r25
    aab8:	d2 cf       	rjmp	.-92     	; 0xaa5e <_Z18NEW_aFeed_Int_Leftv+0x1c2>
    aaba:	c1 e0       	ldi	r28, 0x01	; 1
    aabc:	c0 93 26 12 	sts	0x1226, r28	; 0x801226 <cycle_flag>
    aac0:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    aac4:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    aac8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    aacc:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    aad0:	09 2e       	mov	r0, r25
    aad2:	00 0c       	add	r0, r0
    aad4:	aa 0b       	sbc	r26, r26
    aad6:	bb 0b       	sbc	r27, r27
    aad8:	c8 1a       	sub	r12, r24
    aada:	d9 0a       	sbc	r13, r25
    aadc:	ea 0a       	sbc	r14, r26
    aade:	fb 0a       	sbc	r15, r27
    aae0:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    aae4:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    aae8:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    aaec:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    aaf0:	81 e0       	ldi	r24, 0x01	; 1
    aaf2:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    aaf6:	13 9a       	sbi	0x02, 3	; 2
    aaf8:	11 9a       	sbi	0x02, 1	; 2
    aafa:	80 e0       	ldi	r24, 0x00	; 0
    aafc:	90 e0       	ldi	r25, 0x00	; 0
    aafe:	a0 e0       	ldi	r26, 0x00	; 0
    ab00:	b0 e4       	ldi	r27, 0x40	; 64
    ab02:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    ab06:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    ab0a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    ab0e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    ab12:	80 e0       	ldi	r24, 0x00	; 0
    ab14:	90 e0       	ldi	r25, 0x00	; 0
    ab16:	a0 e0       	ldi	r26, 0x00	; 0
    ab18:	b0 ec       	ldi	r27, 0xC0	; 192
    ab1a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    ab1e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    ab22:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    ab26:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    ab2a:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
    ab2e:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <Pass_Nr>
    ab32:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    ab36:	df 91       	pop	r29
    ab38:	cf 91       	pop	r28
    ab3a:	1f 91       	pop	r17
    ab3c:	ff 90       	pop	r15
    ab3e:	ef 90       	pop	r14
    ab40:	df 90       	pop	r13
    ab42:	cf 90       	pop	r12
    ab44:	bf 90       	pop	r11
    ab46:	af 90       	pop	r10
    ab48:	9f 90       	pop	r9
    ab4a:	8f 90       	pop	r8
    ab4c:	0f c8       	rjmp	.-4066   	; 0x9b6c <_Z12BeepCompletev>
    ab4e:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    ab52:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    ab56:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    ab5a:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    ab5e:	4c 15       	cp	r20, r12
    ab60:	5d 05       	cpc	r21, r13
    ab62:	6e 05       	cpc	r22, r14
    ab64:	7f 05       	cpc	r23, r15
    ab66:	11 f4       	brne	.+4      	; 0xab6c <_Z18NEW_aFeed_Int_Leftv+0x2d0>
    ab68:	f6 9b       	sbis	0x1e, 6	; 30
    ab6a:	62 c0       	rjmp	.+196    	; 0xac30 <_Z18NEW_aFeed_Int_Leftv+0x394>
    ab6c:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    ab70:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    ab74:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    ab78:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    ab7c:	84 17       	cp	r24, r20
    ab7e:	95 07       	cpc	r25, r21
    ab80:	a6 07       	cpc	r26, r22
    ab82:	b7 07       	cpc	r27, r23
    ab84:	09 f0       	breq	.+2      	; 0xab88 <_Z18NEW_aFeed_Int_Leftv+0x2ec>
    ab86:	53 cf       	rjmp	.-346    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    ab88:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    ab8c:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    ab90:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    ab94:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    ab98:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    ab9c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    aba0:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    aba4:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    aba8:	c8 16       	cp	r12, r24
    abaa:	d9 06       	cpc	r13, r25
    abac:	ea 06       	cpc	r14, r26
    abae:	fb 06       	cpc	r15, r27
    abb0:	09 f0       	breq	.+2      	; 0xabb4 <_Z18NEW_aFeed_Int_Leftv+0x318>
    abb2:	57 c0       	rjmp	.+174    	; 0xac62 <_Z18NEW_aFeed_Int_Leftv+0x3c6>
    abb4:	f3 99       	sbic	0x1e, 3	; 30
    abb6:	55 c0       	rjmp	.+170    	; 0xac62 <_Z18NEW_aFeed_Int_Leftv+0x3c6>
    abb8:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    abbc:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    abc0:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    abc4:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <Pass_Nr>
    abc8:	20 91 b5 11 	lds	r18, 0x11B5	; 0x8011b5 <w>
    abcc:	30 91 b6 11 	lds	r19, 0x11B6	; 0x8011b6 <w+0x1>
    abd0:	42 9f       	mul	r20, r18
    abd2:	c0 01       	movw	r24, r0
    abd4:	43 9f       	mul	r20, r19
    abd6:	90 0d       	add	r25, r0
    abd8:	11 24       	eor	r1, r1
    abda:	09 2e       	mov	r0, r25
    abdc:	00 0c       	add	r0, r0
    abde:	aa 0b       	sbc	r26, r26
    abe0:	bb 0b       	sbc	r27, r27
    abe2:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    abe6:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    abea:	05 2e       	mov	r0, r21
    abec:	00 0c       	add	r0, r0
    abee:	66 0b       	sbc	r22, r22
    abf0:	77 0b       	sbc	r23, r23
    abf2:	4c 0d       	add	r20, r12
    abf4:	5d 1d       	adc	r21, r13
    abf6:	6e 1d       	adc	r22, r14
    abf8:	7f 1d       	adc	r23, r15
    abfa:	84 0f       	add	r24, r20
    abfc:	95 1f       	adc	r25, r21
    abfe:	a6 1f       	adc	r26, r22
    ac00:	b7 1f       	adc	r27, r23
    ac02:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    ac06:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    ac0a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    ac0e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    ac12:	13 98       	cbi	0x02, 3	; 2
    ac14:	81 e0       	ldi	r24, 0x01	; 1
    ac16:	df 91       	pop	r29
    ac18:	cf 91       	pop	r28
    ac1a:	1f 91       	pop	r17
    ac1c:	ff 90       	pop	r15
    ac1e:	ef 90       	pop	r14
    ac20:	df 90       	pop	r13
    ac22:	cf 90       	pop	r12
    ac24:	bf 90       	pop	r11
    ac26:	af 90       	pop	r10
    ac28:	9f 90       	pop	r9
    ac2a:	8f 90       	pop	r8
    ac2c:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    ac30:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    ac34:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    ac38:	89 17       	cp	r24, r25
    ac3a:	08 f4       	brcc	.+2      	; 0xac3e <_Z18NEW_aFeed_Int_Leftv+0x3a2>
    ac3c:	f8 ce       	rjmp	.-528    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    ac3e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ac42:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ac46:	81 e0       	ldi	r24, 0x01	; 1
    ac48:	df 91       	pop	r29
    ac4a:	cf 91       	pop	r28
    ac4c:	1f 91       	pop	r17
    ac4e:	ff 90       	pop	r15
    ac50:	ef 90       	pop	r14
    ac52:	df 90       	pop	r13
    ac54:	cf 90       	pop	r12
    ac56:	bf 90       	pop	r11
    ac58:	af 90       	pop	r10
    ac5a:	9f 90       	pop	r9
    ac5c:	8f 90       	pop	r8
    ac5e:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    ac62:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    ac66:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    ac6a:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    ac6e:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    ac72:	c8 16       	cp	r12, r24
    ac74:	d9 06       	cpc	r13, r25
    ac76:	ea 06       	cpc	r14, r26
    ac78:	fb 06       	cpc	r15, r27
    ac7a:	09 f0       	breq	.+2      	; 0xac7e <_Z18NEW_aFeed_Int_Leftv+0x3e2>
    ac7c:	d8 ce       	rjmp	.-592    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    ac7e:	f6 99       	sbic	0x1e, 6	; 30
    ac80:	d6 ce       	rjmp	.-596    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    ac82:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ac86:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ac8a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    ac8e:	8f 5f       	subi	r24, 0xFF	; 255
    ac90:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    ac94:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    ac98:	82 e0       	ldi	r24, 0x02	; 2
    ac9a:	df 91       	pop	r29
    ac9c:	cf 91       	pop	r28
    ac9e:	1f 91       	pop	r17
    aca0:	ff 90       	pop	r15
    aca2:	ef 90       	pop	r14
    aca4:	df 90       	pop	r13
    aca6:	cf 90       	pop	r12
    aca8:	bf 90       	pop	r11
    acaa:	af 90       	pop	r10
    acac:	9f 90       	pop	r9
    acae:	8f 90       	pop	r8
    acb0:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    acb4:	84 17       	cp	r24, r20
    acb6:	95 07       	cpc	r25, r21
    acb8:	a6 07       	cpc	r26, r22
    acba:	b7 07       	cpc	r27, r23
    acbc:	11 f4       	brne	.+4      	; 0xacc2 <_Z18NEW_aFeed_Int_Leftv+0x426>
    acbe:	f3 9b       	sbis	0x1e, 3	; 30
    acc0:	17 c0       	rjmp	.+46     	; 0xacf0 <_Z18NEW_aFeed_Int_Leftv+0x454>
    acc2:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    acc6:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    acca:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    acce:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    acd2:	84 17       	cp	r24, r20
    acd4:	95 07       	cpc	r25, r21
    acd6:	a6 07       	cpc	r26, r22
    acd8:	b7 07       	cpc	r27, r23
    acda:	09 f0       	breq	.+2      	; 0xacde <_Z18NEW_aFeed_Int_Leftv+0x442>
    acdc:	a8 ce       	rjmp	.-688    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    acde:	f6 99       	sbic	0x1e, 6	; 30
    ace0:	a6 ce       	rjmp	.-692    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    ace2:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ace6:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    acea:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    acee:	cd cf       	rjmp	.-102    	; 0xac8a <_Z18NEW_aFeed_Int_Leftv+0x3ee>
    acf0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    acf4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Pass_Total>
    acf8:	20 91 26 12 	lds	r18, 0x1226	; 0x801226 <cycle_flag>
    acfc:	21 11       	cpse	r18, r1
    acfe:	1a c0       	rjmp	.+52     	; 0xad34 <_Z18NEW_aFeed_Int_Leftv+0x498>
    ad00:	98 17       	cp	r25, r24
    ad02:	d8 f0       	brcs	.+54     	; 0xad3a <_Z18NEW_aFeed_Int_Leftv+0x49e>
    ad04:	81 e0       	ldi	r24, 0x01	; 1
    ad06:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    ad0a:	13 98       	cbi	0x02, 3	; 2
    ad0c:	11 98       	cbi	0x02, 1	; 2
    ad0e:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ad12:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ad16:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    ad1a:	df 91       	pop	r29
    ad1c:	cf 91       	pop	r28
    ad1e:	1f 91       	pop	r17
    ad20:	ff 90       	pop	r15
    ad22:	ef 90       	pop	r14
    ad24:	df 90       	pop	r13
    ad26:	cf 90       	pop	r12
    ad28:	bf 90       	pop	r11
    ad2a:	af 90       	pop	r10
    ad2c:	9f 90       	pop	r9
    ad2e:	8f 90       	pop	r8
    ad30:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    ad34:	98 17       	cp	r25, r24
    ad36:	08 f0       	brcs	.+2      	; 0xad3a <_Z18NEW_aFeed_Int_Leftv+0x49e>
    ad38:	7a ce       	rjmp	.-780    	; 0xaa2e <_Z18NEW_aFeed_Int_Leftv+0x192>
    ad3a:	81 e0       	ldi	r24, 0x01	; 1
    ad3c:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    ad40:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ad44:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ad48:	13 9a       	sbi	0x02, 3	; 2
    ad4a:	11 9a       	sbi	0x02, 1	; 2
    ad4c:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    ad50:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    ad54:	ee ce       	rjmp	.-548    	; 0xab32 <_Z18NEW_aFeed_Int_Leftv+0x296>

0000ad56 <_Z19NEW_aFeed_Ext_Rightv>:
    ad56:	4f 92       	push	r4
    ad58:	5f 92       	push	r5
    ad5a:	6f 92       	push	r6
    ad5c:	7f 92       	push	r7
    ad5e:	8f 92       	push	r8
    ad60:	9f 92       	push	r9
    ad62:	af 92       	push	r10
    ad64:	bf 92       	push	r11
    ad66:	cf 92       	push	r12
    ad68:	df 92       	push	r13
    ad6a:	ef 92       	push	r14
    ad6c:	ff 92       	push	r15
    ad6e:	cf 93       	push	r28
    ad70:	e0 90 dd 11 	lds	r14, 0x11DD	; 0x8011dd <Ap>
    ad74:	f0 90 de 11 	lds	r15, 0x11DE	; 0x8011de <Ap+0x1>
    ad78:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    ad7c:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ad80:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ad84:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ad88:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    ad8c:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    ad90:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    ad94:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    ad98:	e1 14       	cp	r14, r1
    ad9a:	f1 04       	cpc	r15, r1
    ad9c:	09 f4       	brne	.+2      	; 0xada0 <_Z19NEW_aFeed_Ext_Rightv+0x4a>
    ad9e:	f5 c1       	rjmp	.+1002   	; 0xb18a <_Z19NEW_aFeed_Ext_Rightv+0x434>
    ada0:	84 17       	cp	r24, r20
    ada2:	95 07       	cpc	r25, r21
    ada4:	a6 07       	cpc	r26, r22
    ada6:	b7 07       	cpc	r27, r23
    ada8:	09 f0       	breq	.+2      	; 0xadac <_Z19NEW_aFeed_Ext_Rightv+0x56>
    adaa:	45 c1       	rjmp	.+650    	; 0xb036 <_Z19NEW_aFeed_Ext_Rightv+0x2e0>
    adac:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    adb0:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    adb4:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    adb8:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    adbc:	40 90 ba 04 	lds	r4, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    adc0:	50 90 bb 04 	lds	r5, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    adc4:	60 90 bc 04 	lds	r6, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    adc8:	70 90 bd 04 	lds	r7, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    adcc:	44 15       	cp	r20, r4
    adce:	55 05       	cpc	r21, r5
    add0:	66 05       	cpc	r22, r6
    add2:	77 05       	cpc	r23, r7
    add4:	11 f4       	brne	.+4      	; 0xadda <_Z19NEW_aFeed_Ext_Rightv+0x84>
    add6:	f3 9b       	sbis	0x1e, 3	; 30
    add8:	10 c0       	rjmp	.+32     	; 0xadfa <_Z19NEW_aFeed_Ext_Rightv+0xa4>
    adda:	80 90 10 12 	lds	r8, 0x1210	; 0x801210 <Null_X_Pos>
    adde:	90 90 11 12 	lds	r9, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    ade2:	a0 90 12 12 	lds	r10, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    ade6:	b0 90 13 12 	lds	r11, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    adea:	48 15       	cp	r20, r8
    adec:	59 05       	cpc	r21, r9
    adee:	6a 05       	cpc	r22, r10
    adf0:	7b 05       	cpc	r23, r11
    adf2:	09 f0       	breq	.+2      	; 0xadf6 <_Z19NEW_aFeed_Ext_Rightv+0xa0>
    adf4:	11 c1       	rjmp	.+546    	; 0xb018 <_Z19NEW_aFeed_Ext_Rightv+0x2c2>
    adf6:	f3 99       	sbic	0x1e, 3	; 30
    adf8:	0f c1       	rjmp	.+542    	; 0xb018 <_Z19NEW_aFeed_Ext_Rightv+0x2c2>
    adfa:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    adfe:	81 11       	cpse	r24, r1
    ae00:	76 c0       	rjmp	.+236    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    ae02:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    ae06:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    ae0a:	8c 17       	cp	r24, r28
    ae0c:	08 f4       	brcc	.+2      	; 0xae10 <_Z19NEW_aFeed_Ext_Rightv+0xba>
    ae0e:	b7 c0       	rjmp	.+366    	; 0xaf7e <_Z19NEW_aFeed_Ext_Rightv+0x228>
    ae10:	81 e0       	ldi	r24, 0x01	; 1
    ae12:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    ae16:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ae1a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ae1e:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    ae22:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    ae26:	07 2e       	mov	r0, r23
    ae28:	00 0c       	add	r0, r0
    ae2a:	88 0b       	sbc	r24, r24
    ae2c:	99 0b       	sbc	r25, r25
    ae2e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    ae32:	4b 01       	movw	r8, r22
    ae34:	5c 01       	movw	r10, r24
    ae36:	b7 01       	movw	r22, r14
    ae38:	ff 0c       	add	r15, r15
    ae3a:	88 0b       	sbc	r24, r24
    ae3c:	99 0b       	sbc	r25, r25
    ae3e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    ae42:	9b 01       	movw	r18, r22
    ae44:	ac 01       	movw	r20, r24
    ae46:	c5 01       	movw	r24, r10
    ae48:	b4 01       	movw	r22, r8
    ae4a:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    ae4e:	6b 01       	movw	r12, r22
    ae50:	7c 01       	movw	r14, r24
    ae52:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    ae56:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    ae5a:	07 2e       	mov	r0, r23
    ae5c:	00 0c       	add	r0, r0
    ae5e:	88 0b       	sbc	r24, r24
    ae60:	99 0b       	sbc	r25, r25
    ae62:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    ae66:	9b 01       	movw	r18, r22
    ae68:	ac 01       	movw	r20, r24
    ae6a:	c7 01       	movw	r24, r14
    ae6c:	b6 01       	movw	r22, r12
    ae6e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    ae72:	6b 01       	movw	r12, r22
    ae74:	7c 01       	movw	r14, r24
    ae76:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    ae7a:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    ae7e:	07 2e       	mov	r0, r23
    ae80:	00 0c       	add	r0, r0
    ae82:	88 0b       	sbc	r24, r24
    ae84:	99 0b       	sbc	r25, r25
    ae86:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    ae8a:	9b 01       	movw	r18, r22
    ae8c:	ac 01       	movw	r20, r24
    ae8e:	c7 01       	movw	r24, r14
    ae90:	b6 01       	movw	r22, r12
    ae92:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    ae96:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    ae9a:	4b 01       	movw	r8, r22
    ae9c:	ab 01       	movw	r20, r22
    ae9e:	77 0f       	add	r23, r23
    aea0:	66 0b       	sbc	r22, r22
    aea2:	77 0b       	sbc	r23, r23
    aea4:	41 15       	cp	r20, r1
    aea6:	51 05       	cpc	r21, r1
    aea8:	61 05       	cpc	r22, r1
    aeaa:	71 05       	cpc	r23, r1
    aeac:	09 f0       	breq	.+2      	; 0xaeb0 <_Z19NEW_aFeed_Ext_Rightv+0x15a>
    aeae:	42 c0       	rjmp	.+132    	; 0xaf34 <_Z19NEW_aFeed_Ext_Rightv+0x1de>
    aeb0:	c1 30       	cpi	r28, 0x01	; 1
    aeb2:	59 f5       	brne	.+86     	; 0xaf0a <_Z19NEW_aFeed_Ext_Rightv+0x1b4>
    aeb4:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    aeb8:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    aebc:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    aec0:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    aec4:	01 96       	adiw	r24, 0x01	; 1
    aec6:	a1 1d       	adc	r26, r1
    aec8:	b1 1d       	adc	r27, r1
    aeca:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    aece:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    aed2:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    aed6:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    aeda:	13 98       	cbi	0x02, 3	; 2
    aedc:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    aee0:	81 e0       	ldi	r24, 0x01	; 1
    aee2:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    aee6:	90 92 b6 11 	sts	0x11B6, r9	; 0x8011b6 <w+0x1>
    aeea:	80 92 b5 11 	sts	0x11B5, r8	; 0x8011b5 <w>
    aeee:	cf 91       	pop	r28
    aef0:	ff 90       	pop	r15
    aef2:	ef 90       	pop	r14
    aef4:	df 90       	pop	r13
    aef6:	cf 90       	pop	r12
    aef8:	bf 90       	pop	r11
    aefa:	af 90       	pop	r10
    aefc:	9f 90       	pop	r9
    aefe:	8f 90       	pop	r8
    af00:	7f 90       	pop	r7
    af02:	6f 90       	pop	r6
    af04:	5f 90       	pop	r5
    af06:	4f 90       	pop	r4
    af08:	08 95       	ret
    af0a:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    af0e:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    af12:	0d 2c       	mov	r0, r13
    af14:	00 0c       	add	r0, r0
    af16:	ee 08       	sbc	r14, r14
    af18:	ff 08       	sbc	r15, r15
    af1a:	c4 0c       	add	r12, r4
    af1c:	d5 1c       	adc	r13, r5
    af1e:	e6 1c       	adc	r14, r6
    af20:	f7 1c       	adc	r15, r7
    af22:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    af26:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    af2a:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    af2e:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    af32:	d3 cf       	rjmp	.-90     	; 0xaeda <_Z19NEW_aFeed_Ext_Rightv+0x184>
    af34:	c1 30       	cpi	r28, 0x01	; 1
    af36:	69 f4       	brne	.+26     	; 0xaf52 <_Z19NEW_aFeed_Ext_Rightv+0x1fc>
    af38:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    af3c:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    af40:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    af44:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    af48:	84 0f       	add	r24, r20
    af4a:	95 1f       	adc	r25, r21
    af4c:	a6 1f       	adc	r26, r22
    af4e:	b7 1f       	adc	r27, r23
    af50:	bc cf       	rjmp	.-136    	; 0xaeca <_Z19NEW_aFeed_Ext_Rightv+0x174>
    af52:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    af56:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    af5a:	0d 2c       	mov	r0, r13
    af5c:	00 0c       	add	r0, r0
    af5e:	ee 08       	sbc	r14, r14
    af60:	ff 08       	sbc	r15, r15
    af62:	c4 0c       	add	r12, r4
    af64:	d5 1c       	adc	r13, r5
    af66:	e6 1c       	adc	r14, r6
    af68:	f7 1c       	adc	r15, r7
    af6a:	2c 2f       	mov	r18, r28
    af6c:	30 e0       	ldi	r19, 0x00	; 0
    af6e:	d4 01       	movw	r26, r8
    af70:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    af74:	c6 0e       	add	r12, r22
    af76:	d7 1e       	adc	r13, r23
    af78:	e8 1e       	adc	r14, r24
    af7a:	f9 1e       	adc	r15, r25
    af7c:	d2 cf       	rjmp	.-92     	; 0xaf22 <_Z19NEW_aFeed_Ext_Rightv+0x1cc>
    af7e:	c1 e0       	ldi	r28, 0x01	; 1
    af80:	c0 93 26 12 	sts	0x1226, r28	; 0x801226 <cycle_flag>
    af84:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    af88:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    af8c:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    af90:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    af94:	0d 2c       	mov	r0, r13
    af96:	00 0c       	add	r0, r0
    af98:	ee 08       	sbc	r14, r14
    af9a:	ff 08       	sbc	r15, r15
    af9c:	c4 0c       	add	r12, r4
    af9e:	d5 1c       	adc	r13, r5
    afa0:	e6 1c       	adc	r14, r6
    afa2:	f7 1c       	adc	r15, r7
    afa4:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    afa8:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    afac:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    afb0:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    afb4:	81 e0       	ldi	r24, 0x01	; 1
    afb6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    afba:	13 9a       	sbi	0x02, 3	; 2
    afbc:	11 9a       	sbi	0x02, 1	; 2
    afbe:	80 e0       	ldi	r24, 0x00	; 0
    afc0:	90 e0       	ldi	r25, 0x00	; 0
    afc2:	a0 e0       	ldi	r26, 0x00	; 0
    afc4:	b0 e4       	ldi	r27, 0x40	; 64
    afc6:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    afca:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    afce:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    afd2:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    afd6:	80 e0       	ldi	r24, 0x00	; 0
    afd8:	90 e0       	ldi	r25, 0x00	; 0
    afda:	a0 e0       	ldi	r26, 0x00	; 0
    afdc:	b0 ec       	ldi	r27, 0xC0	; 192
    afde:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    afe2:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    afe6:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    afea:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    afee:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
    aff2:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <Pass_Nr>
    aff6:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    affa:	cf 91       	pop	r28
    affc:	ff 90       	pop	r15
    affe:	ef 90       	pop	r14
    b000:	df 90       	pop	r13
    b002:	cf 90       	pop	r12
    b004:	bf 90       	pop	r11
    b006:	af 90       	pop	r10
    b008:	9f 90       	pop	r9
    b00a:	8f 90       	pop	r8
    b00c:	7f 90       	pop	r7
    b00e:	6f 90       	pop	r6
    b010:	5f 90       	pop	r5
    b012:	4f 90       	pop	r4
    b014:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <_Z12BeepCompletev>
    b018:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    b01c:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    b020:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    b024:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    b028:	4c 15       	cp	r20, r12
    b02a:	5d 05       	cpc	r21, r13
    b02c:	6e 05       	cpc	r22, r14
    b02e:	7f 05       	cpc	r23, r15
    b030:	11 f4       	brne	.+4      	; 0xb036 <_Z19NEW_aFeed_Ext_Rightv+0x2e0>
    b032:	f6 9b       	sbis	0x1e, 6	; 30
    b034:	64 c0       	rjmp	.+200    	; 0xb0fe <_Z19NEW_aFeed_Ext_Rightv+0x3a8>
    b036:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    b03a:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    b03e:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    b042:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    b046:	84 17       	cp	r24, r20
    b048:	95 07       	cpc	r25, r21
    b04a:	a6 07       	cpc	r26, r22
    b04c:	b7 07       	cpc	r27, r23
    b04e:	09 f0       	breq	.+2      	; 0xb052 <_Z19NEW_aFeed_Ext_Rightv+0x2fc>
    b050:	4e cf       	rjmp	.-356    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b052:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    b056:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    b05a:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    b05e:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    b062:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    b066:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    b06a:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    b06e:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    b072:	84 17       	cp	r24, r20
    b074:	95 07       	cpc	r25, r21
    b076:	a6 07       	cpc	r26, r22
    b078:	b7 07       	cpc	r27, r23
    b07a:	09 f0       	breq	.+2      	; 0xb07e <_Z19NEW_aFeed_Ext_Rightv+0x328>
    b07c:	5b c0       	rjmp	.+182    	; 0xb134 <_Z19NEW_aFeed_Ext_Rightv+0x3de>
    b07e:	f3 99       	sbic	0x1e, 3	; 30
    b080:	59 c0       	rjmp	.+178    	; 0xb134 <_Z19NEW_aFeed_Ext_Rightv+0x3de>
    b082:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    b086:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b08a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b08e:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    b092:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b096:	05 2e       	mov	r0, r21
    b098:	00 0c       	add	r0, r0
    b09a:	66 0b       	sbc	r22, r22
    b09c:	77 0b       	sbc	r23, r23
    b09e:	84 1b       	sub	r24, r20
    b0a0:	95 0b       	sbc	r25, r21
    b0a2:	a6 0b       	sbc	r26, r22
    b0a4:	b7 0b       	sbc	r27, r23
    b0a6:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <Pass_Nr>
    b0aa:	20 91 b5 11 	lds	r18, 0x11B5	; 0x8011b5 <w>
    b0ae:	30 91 b6 11 	lds	r19, 0x11B6	; 0x8011b6 <w+0x1>
    b0b2:	62 9f       	mul	r22, r18
    b0b4:	a0 01       	movw	r20, r0
    b0b6:	63 9f       	mul	r22, r19
    b0b8:	50 0d       	add	r21, r0
    b0ba:	11 24       	eor	r1, r1
    b0bc:	05 2e       	mov	r0, r21
    b0be:	00 0c       	add	r0, r0
    b0c0:	66 0b       	sbc	r22, r22
    b0c2:	77 0b       	sbc	r23, r23
    b0c4:	84 1b       	sub	r24, r20
    b0c6:	95 0b       	sbc	r25, r21
    b0c8:	a6 0b       	sbc	r26, r22
    b0ca:	b7 0b       	sbc	r27, r23
    b0cc:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    b0d0:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    b0d4:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    b0d8:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    b0dc:	11 98       	cbi	0x02, 1	; 2
    b0de:	81 e0       	ldi	r24, 0x01	; 1
    b0e0:	cf 91       	pop	r28
    b0e2:	ff 90       	pop	r15
    b0e4:	ef 90       	pop	r14
    b0e6:	df 90       	pop	r13
    b0e8:	cf 90       	pop	r12
    b0ea:	bf 90       	pop	r11
    b0ec:	af 90       	pop	r10
    b0ee:	9f 90       	pop	r9
    b0f0:	8f 90       	pop	r8
    b0f2:	7f 90       	pop	r7
    b0f4:	6f 90       	pop	r6
    b0f6:	5f 90       	pop	r5
    b0f8:	4f 90       	pop	r4
    b0fa:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    b0fe:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    b102:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    b106:	89 17       	cp	r24, r25
    b108:	08 f4       	brcc	.+2      	; 0xb10c <_Z19NEW_aFeed_Ext_Rightv+0x3b6>
    b10a:	f1 ce       	rjmp	.-542    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b10c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b110:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b114:	81 e0       	ldi	r24, 0x01	; 1
    b116:	cf 91       	pop	r28
    b118:	ff 90       	pop	r15
    b11a:	ef 90       	pop	r14
    b11c:	df 90       	pop	r13
    b11e:	cf 90       	pop	r12
    b120:	bf 90       	pop	r11
    b122:	af 90       	pop	r10
    b124:	9f 90       	pop	r9
    b126:	8f 90       	pop	r8
    b128:	7f 90       	pop	r7
    b12a:	6f 90       	pop	r6
    b12c:	5f 90       	pop	r5
    b12e:	4f 90       	pop	r4
    b130:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    b134:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    b138:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    b13c:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    b140:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    b144:	84 17       	cp	r24, r20
    b146:	95 07       	cpc	r25, r21
    b148:	a6 07       	cpc	r26, r22
    b14a:	b7 07       	cpc	r27, r23
    b14c:	09 f0       	breq	.+2      	; 0xb150 <_Z19NEW_aFeed_Ext_Rightv+0x3fa>
    b14e:	cf ce       	rjmp	.-610    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b150:	f6 99       	sbic	0x1e, 6	; 30
    b152:	cd ce       	rjmp	.-614    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b154:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b158:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b15c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    b160:	8f 5f       	subi	r24, 0xFF	; 255
    b162:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    b166:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    b16a:	82 e0       	ldi	r24, 0x02	; 2
    b16c:	cf 91       	pop	r28
    b16e:	ff 90       	pop	r15
    b170:	ef 90       	pop	r14
    b172:	df 90       	pop	r13
    b174:	cf 90       	pop	r12
    b176:	bf 90       	pop	r11
    b178:	af 90       	pop	r10
    b17a:	9f 90       	pop	r9
    b17c:	8f 90       	pop	r8
    b17e:	7f 90       	pop	r7
    b180:	6f 90       	pop	r6
    b182:	5f 90       	pop	r5
    b184:	4f 90       	pop	r4
    b186:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    b18a:	84 17       	cp	r24, r20
    b18c:	95 07       	cpc	r25, r21
    b18e:	a6 07       	cpc	r26, r22
    b190:	b7 07       	cpc	r27, r23
    b192:	11 f4       	brne	.+4      	; 0xb198 <_Z19NEW_aFeed_Ext_Rightv+0x442>
    b194:	f3 9b       	sbis	0x1e, 3	; 30
    b196:	2d c0       	rjmp	.+90     	; 0xb1f2 <_Z19NEW_aFeed_Ext_Rightv+0x49c>
    b198:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    b19c:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    b1a0:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    b1a4:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    b1a8:	84 17       	cp	r24, r20
    b1aa:	95 07       	cpc	r25, r21
    b1ac:	a6 07       	cpc	r26, r22
    b1ae:	b7 07       	cpc	r27, r23
    b1b0:	09 f0       	breq	.+2      	; 0xb1b4 <_Z19NEW_aFeed_Ext_Rightv+0x45e>
    b1b2:	9d ce       	rjmp	.-710    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b1b4:	f6 99       	sbic	0x1e, 6	; 30
    b1b6:	9b ce       	rjmp	.-714    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b1b8:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b1bc:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b1c0:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    b1c4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    b1c8:	8f 5f       	subi	r24, 0xFF	; 255
    b1ca:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    b1ce:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    b1d2:	82 e0       	ldi	r24, 0x02	; 2
    b1d4:	cf 91       	pop	r28
    b1d6:	ff 90       	pop	r15
    b1d8:	ef 90       	pop	r14
    b1da:	df 90       	pop	r13
    b1dc:	cf 90       	pop	r12
    b1de:	bf 90       	pop	r11
    b1e0:	af 90       	pop	r10
    b1e2:	9f 90       	pop	r9
    b1e4:	8f 90       	pop	r8
    b1e6:	7f 90       	pop	r7
    b1e8:	6f 90       	pop	r6
    b1ea:	5f 90       	pop	r5
    b1ec:	4f 90       	pop	r4
    b1ee:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    b1f2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    b1f6:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Pass_Total>
    b1fa:	20 91 26 12 	lds	r18, 0x1226	; 0x801226 <cycle_flag>
    b1fe:	21 11       	cpse	r18, r1
    b200:	1c c0       	rjmp	.+56     	; 0xb23a <_Z19NEW_aFeed_Ext_Rightv+0x4e4>
    b202:	98 17       	cp	r25, r24
    b204:	e8 f0       	brcs	.+58     	; 0xb240 <_Z19NEW_aFeed_Ext_Rightv+0x4ea>
    b206:	81 e0       	ldi	r24, 0x01	; 1
    b208:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    b20c:	13 98       	cbi	0x02, 3	; 2
    b20e:	11 98       	cbi	0x02, 1	; 2
    b210:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b214:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b218:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    b21c:	cf 91       	pop	r28
    b21e:	ff 90       	pop	r15
    b220:	ef 90       	pop	r14
    b222:	df 90       	pop	r13
    b224:	cf 90       	pop	r12
    b226:	bf 90       	pop	r11
    b228:	af 90       	pop	r10
    b22a:	9f 90       	pop	r9
    b22c:	8f 90       	pop	r8
    b22e:	7f 90       	pop	r7
    b230:	6f 90       	pop	r6
    b232:	5f 90       	pop	r5
    b234:	4f 90       	pop	r4
    b236:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    b23a:	98 17       	cp	r25, r24
    b23c:	08 f0       	brcs	.+2      	; 0xb240 <_Z19NEW_aFeed_Ext_Rightv+0x4ea>
    b23e:	57 ce       	rjmp	.-850    	; 0xaeee <_Z19NEW_aFeed_Ext_Rightv+0x198>
    b240:	81 e0       	ldi	r24, 0x01	; 1
    b242:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    b246:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b24a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b24e:	13 9a       	sbi	0x02, 3	; 2
    b250:	11 9a       	sbi	0x02, 1	; 2
    b252:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    b256:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    b25a:	cd ce       	rjmp	.-614    	; 0xaff6 <_Z19NEW_aFeed_Ext_Rightv+0x2a0>

0000b25c <_Z18NEW_aFeed_Ext_Leftv>:
    b25c:	4f 92       	push	r4
    b25e:	5f 92       	push	r5
    b260:	6f 92       	push	r6
    b262:	7f 92       	push	r7
    b264:	8f 92       	push	r8
    b266:	9f 92       	push	r9
    b268:	af 92       	push	r10
    b26a:	bf 92       	push	r11
    b26c:	cf 92       	push	r12
    b26e:	df 92       	push	r13
    b270:	ef 92       	push	r14
    b272:	ff 92       	push	r15
    b274:	cf 93       	push	r28
    b276:	e0 90 dd 11 	lds	r14, 0x11DD	; 0x8011dd <Ap>
    b27a:	f0 90 de 11 	lds	r15, 0x11DE	; 0x8011de <Ap+0x1>
    b27e:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    b282:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    b286:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    b28a:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    b28e:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    b292:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    b296:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    b29a:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    b29e:	e1 14       	cp	r14, r1
    b2a0:	f1 04       	cpc	r15, r1
    b2a2:	09 f4       	brne	.+2      	; 0xb2a6 <_Z18NEW_aFeed_Ext_Leftv+0x4a>
    b2a4:	f5 c1       	rjmp	.+1002   	; 0xb690 <_Z18NEW_aFeed_Ext_Leftv+0x434>
    b2a6:	84 17       	cp	r24, r20
    b2a8:	95 07       	cpc	r25, r21
    b2aa:	a6 07       	cpc	r26, r22
    b2ac:	b7 07       	cpc	r27, r23
    b2ae:	09 f0       	breq	.+2      	; 0xb2b2 <_Z18NEW_aFeed_Ext_Leftv+0x56>
    b2b0:	45 c1       	rjmp	.+650    	; 0xb53c <_Z18NEW_aFeed_Ext_Leftv+0x2e0>
    b2b2:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    b2b6:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    b2ba:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    b2be:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    b2c2:	40 90 ba 04 	lds	r4, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    b2c6:	50 90 bb 04 	lds	r5, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    b2ca:	60 90 bc 04 	lds	r6, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    b2ce:	70 90 bd 04 	lds	r7, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    b2d2:	44 15       	cp	r20, r4
    b2d4:	55 05       	cpc	r21, r5
    b2d6:	66 05       	cpc	r22, r6
    b2d8:	77 05       	cpc	r23, r7
    b2da:	11 f4       	brne	.+4      	; 0xb2e0 <_Z18NEW_aFeed_Ext_Leftv+0x84>
    b2dc:	f3 9b       	sbis	0x1e, 3	; 30
    b2de:	10 c0       	rjmp	.+32     	; 0xb300 <_Z18NEW_aFeed_Ext_Leftv+0xa4>
    b2e0:	80 90 10 12 	lds	r8, 0x1210	; 0x801210 <Null_X_Pos>
    b2e4:	90 90 11 12 	lds	r9, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    b2e8:	a0 90 12 12 	lds	r10, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    b2ec:	b0 90 13 12 	lds	r11, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    b2f0:	48 15       	cp	r20, r8
    b2f2:	59 05       	cpc	r21, r9
    b2f4:	6a 05       	cpc	r22, r10
    b2f6:	7b 05       	cpc	r23, r11
    b2f8:	09 f0       	breq	.+2      	; 0xb2fc <_Z18NEW_aFeed_Ext_Leftv+0xa0>
    b2fa:	11 c1       	rjmp	.+546    	; 0xb51e <_Z18NEW_aFeed_Ext_Leftv+0x2c2>
    b2fc:	f3 99       	sbic	0x1e, 3	; 30
    b2fe:	0f c1       	rjmp	.+542    	; 0xb51e <_Z18NEW_aFeed_Ext_Leftv+0x2c2>
    b300:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    b304:	81 11       	cpse	r24, r1
    b306:	76 c0       	rjmp	.+236    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b308:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    b30c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    b310:	8c 17       	cp	r24, r28
    b312:	08 f4       	brcc	.+2      	; 0xb316 <_Z18NEW_aFeed_Ext_Leftv+0xba>
    b314:	b7 c0       	rjmp	.+366    	; 0xb484 <_Z18NEW_aFeed_Ext_Leftv+0x228>
    b316:	81 e0       	ldi	r24, 0x01	; 1
    b318:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    b31c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b320:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b324:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    b328:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    b32c:	07 2e       	mov	r0, r23
    b32e:	00 0c       	add	r0, r0
    b330:	88 0b       	sbc	r24, r24
    b332:	99 0b       	sbc	r25, r25
    b334:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b338:	4b 01       	movw	r8, r22
    b33a:	5c 01       	movw	r10, r24
    b33c:	b7 01       	movw	r22, r14
    b33e:	ff 0c       	add	r15, r15
    b340:	88 0b       	sbc	r24, r24
    b342:	99 0b       	sbc	r25, r25
    b344:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b348:	9b 01       	movw	r18, r22
    b34a:	ac 01       	movw	r20, r24
    b34c:	c5 01       	movw	r24, r10
    b34e:	b4 01       	movw	r22, r8
    b350:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    b354:	6b 01       	movw	r12, r22
    b356:	7c 01       	movw	r14, r24
    b358:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    b35c:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    b360:	07 2e       	mov	r0, r23
    b362:	00 0c       	add	r0, r0
    b364:	88 0b       	sbc	r24, r24
    b366:	99 0b       	sbc	r25, r25
    b368:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b36c:	9b 01       	movw	r18, r22
    b36e:	ac 01       	movw	r20, r24
    b370:	c7 01       	movw	r24, r14
    b372:	b6 01       	movw	r22, r12
    b374:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    b378:	6b 01       	movw	r12, r22
    b37a:	7c 01       	movw	r14, r24
    b37c:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    b380:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    b384:	07 2e       	mov	r0, r23
    b386:	00 0c       	add	r0, r0
    b388:	88 0b       	sbc	r24, r24
    b38a:	99 0b       	sbc	r25, r25
    b38c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b390:	9b 01       	movw	r18, r22
    b392:	ac 01       	movw	r20, r24
    b394:	c7 01       	movw	r24, r14
    b396:	b6 01       	movw	r22, r12
    b398:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    b39c:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    b3a0:	4b 01       	movw	r8, r22
    b3a2:	ab 01       	movw	r20, r22
    b3a4:	77 0f       	add	r23, r23
    b3a6:	66 0b       	sbc	r22, r22
    b3a8:	77 0b       	sbc	r23, r23
    b3aa:	41 15       	cp	r20, r1
    b3ac:	51 05       	cpc	r21, r1
    b3ae:	61 05       	cpc	r22, r1
    b3b0:	71 05       	cpc	r23, r1
    b3b2:	09 f0       	breq	.+2      	; 0xb3b6 <_Z18NEW_aFeed_Ext_Leftv+0x15a>
    b3b4:	42 c0       	rjmp	.+132    	; 0xb43a <_Z18NEW_aFeed_Ext_Leftv+0x1de>
    b3b6:	c1 30       	cpi	r28, 0x01	; 1
    b3b8:	59 f5       	brne	.+86     	; 0xb410 <_Z18NEW_aFeed_Ext_Leftv+0x1b4>
    b3ba:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    b3be:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    b3c2:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    b3c6:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    b3ca:	01 96       	adiw	r24, 0x01	; 1
    b3cc:	a1 1d       	adc	r26, r1
    b3ce:	b1 1d       	adc	r27, r1
    b3d0:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    b3d4:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    b3d8:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    b3dc:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    b3e0:	13 98       	cbi	0x02, 3	; 2
    b3e2:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    b3e6:	81 e0       	ldi	r24, 0x01	; 1
    b3e8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    b3ec:	90 92 b6 11 	sts	0x11B6, r9	; 0x8011b6 <w+0x1>
    b3f0:	80 92 b5 11 	sts	0x11B5, r8	; 0x8011b5 <w>
    b3f4:	cf 91       	pop	r28
    b3f6:	ff 90       	pop	r15
    b3f8:	ef 90       	pop	r14
    b3fa:	df 90       	pop	r13
    b3fc:	cf 90       	pop	r12
    b3fe:	bf 90       	pop	r11
    b400:	af 90       	pop	r10
    b402:	9f 90       	pop	r9
    b404:	8f 90       	pop	r8
    b406:	7f 90       	pop	r7
    b408:	6f 90       	pop	r6
    b40a:	5f 90       	pop	r5
    b40c:	4f 90       	pop	r4
    b40e:	08 95       	ret
    b410:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    b414:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b418:	0d 2c       	mov	r0, r13
    b41a:	00 0c       	add	r0, r0
    b41c:	ee 08       	sbc	r14, r14
    b41e:	ff 08       	sbc	r15, r15
    b420:	c4 0c       	add	r12, r4
    b422:	d5 1c       	adc	r13, r5
    b424:	e6 1c       	adc	r14, r6
    b426:	f7 1c       	adc	r15, r7
    b428:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    b42c:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    b430:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    b434:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    b438:	d3 cf       	rjmp	.-90     	; 0xb3e0 <_Z18NEW_aFeed_Ext_Leftv+0x184>
    b43a:	c1 30       	cpi	r28, 0x01	; 1
    b43c:	69 f4       	brne	.+26     	; 0xb458 <_Z18NEW_aFeed_Ext_Leftv+0x1fc>
    b43e:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    b442:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    b446:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    b44a:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    b44e:	84 0f       	add	r24, r20
    b450:	95 1f       	adc	r25, r21
    b452:	a6 1f       	adc	r26, r22
    b454:	b7 1f       	adc	r27, r23
    b456:	bc cf       	rjmp	.-136    	; 0xb3d0 <_Z18NEW_aFeed_Ext_Leftv+0x174>
    b458:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    b45c:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b460:	0d 2c       	mov	r0, r13
    b462:	00 0c       	add	r0, r0
    b464:	ee 08       	sbc	r14, r14
    b466:	ff 08       	sbc	r15, r15
    b468:	c4 0c       	add	r12, r4
    b46a:	d5 1c       	adc	r13, r5
    b46c:	e6 1c       	adc	r14, r6
    b46e:	f7 1c       	adc	r15, r7
    b470:	2c 2f       	mov	r18, r28
    b472:	30 e0       	ldi	r19, 0x00	; 0
    b474:	d4 01       	movw	r26, r8
    b476:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    b47a:	c6 0e       	add	r12, r22
    b47c:	d7 1e       	adc	r13, r23
    b47e:	e8 1e       	adc	r14, r24
    b480:	f9 1e       	adc	r15, r25
    b482:	d2 cf       	rjmp	.-92     	; 0xb428 <_Z18NEW_aFeed_Ext_Leftv+0x1cc>
    b484:	c1 e0       	ldi	r28, 0x01	; 1
    b486:	c0 93 26 12 	sts	0x1226, r28	; 0x801226 <cycle_flag>
    b48a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b48e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b492:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    b496:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b49a:	0d 2c       	mov	r0, r13
    b49c:	00 0c       	add	r0, r0
    b49e:	ee 08       	sbc	r14, r14
    b4a0:	ff 08       	sbc	r15, r15
    b4a2:	c4 0c       	add	r12, r4
    b4a4:	d5 1c       	adc	r13, r5
    b4a6:	e6 1c       	adc	r14, r6
    b4a8:	f7 1c       	adc	r15, r7
    b4aa:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    b4ae:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    b4b2:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    b4b6:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    b4ba:	81 e0       	ldi	r24, 0x01	; 1
    b4bc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    b4c0:	13 9a       	sbi	0x02, 3	; 2
    b4c2:	11 9a       	sbi	0x02, 1	; 2
    b4c4:	80 e0       	ldi	r24, 0x00	; 0
    b4c6:	90 e0       	ldi	r25, 0x00	; 0
    b4c8:	a0 e0       	ldi	r26, 0x00	; 0
    b4ca:	b0 e4       	ldi	r27, 0x40	; 64
    b4cc:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    b4d0:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    b4d4:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    b4d8:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    b4dc:	80 e0       	ldi	r24, 0x00	; 0
    b4de:	90 e0       	ldi	r25, 0x00	; 0
    b4e0:	a0 e0       	ldi	r26, 0x00	; 0
    b4e2:	b0 ec       	ldi	r27, 0xC0	; 192
    b4e4:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    b4e8:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    b4ec:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    b4f0:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    b4f4:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
    b4f8:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <Pass_Nr>
    b4fc:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    b500:	cf 91       	pop	r28
    b502:	ff 90       	pop	r15
    b504:	ef 90       	pop	r14
    b506:	df 90       	pop	r13
    b508:	cf 90       	pop	r12
    b50a:	bf 90       	pop	r11
    b50c:	af 90       	pop	r10
    b50e:	9f 90       	pop	r9
    b510:	8f 90       	pop	r8
    b512:	7f 90       	pop	r7
    b514:	6f 90       	pop	r6
    b516:	5f 90       	pop	r5
    b518:	4f 90       	pop	r4
    b51a:	0c 94 b6 4d 	jmp	0x9b6c	; 0x9b6c <_Z12BeepCompletev>
    b51e:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    b522:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    b526:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    b52a:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    b52e:	4c 15       	cp	r20, r12
    b530:	5d 05       	cpc	r21, r13
    b532:	6e 05       	cpc	r22, r14
    b534:	7f 05       	cpc	r23, r15
    b536:	11 f4       	brne	.+4      	; 0xb53c <_Z18NEW_aFeed_Ext_Leftv+0x2e0>
    b538:	f6 9b       	sbis	0x1e, 6	; 30
    b53a:	64 c0       	rjmp	.+200    	; 0xb604 <_Z18NEW_aFeed_Ext_Leftv+0x3a8>
    b53c:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    b540:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    b544:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    b548:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    b54c:	84 17       	cp	r24, r20
    b54e:	95 07       	cpc	r25, r21
    b550:	a6 07       	cpc	r26, r22
    b552:	b7 07       	cpc	r27, r23
    b554:	09 f0       	breq	.+2      	; 0xb558 <_Z18NEW_aFeed_Ext_Leftv+0x2fc>
    b556:	4e cf       	rjmp	.-356    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b558:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    b55c:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    b560:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    b564:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    b568:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    b56c:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    b570:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    b574:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    b578:	84 17       	cp	r24, r20
    b57a:	95 07       	cpc	r25, r21
    b57c:	a6 07       	cpc	r26, r22
    b57e:	b7 07       	cpc	r27, r23
    b580:	09 f0       	breq	.+2      	; 0xb584 <_Z18NEW_aFeed_Ext_Leftv+0x328>
    b582:	5b c0       	rjmp	.+182    	; 0xb63a <_Z18NEW_aFeed_Ext_Leftv+0x3de>
    b584:	f3 99       	sbic	0x1e, 3	; 30
    b586:	59 c0       	rjmp	.+178    	; 0xb63a <_Z18NEW_aFeed_Ext_Leftv+0x3de>
    b588:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    b58c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b590:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b594:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    b598:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b59c:	05 2e       	mov	r0, r21
    b59e:	00 0c       	add	r0, r0
    b5a0:	66 0b       	sbc	r22, r22
    b5a2:	77 0b       	sbc	r23, r23
    b5a4:	84 1b       	sub	r24, r20
    b5a6:	95 0b       	sbc	r25, r21
    b5a8:	a6 0b       	sbc	r26, r22
    b5aa:	b7 0b       	sbc	r27, r23
    b5ac:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <Pass_Nr>
    b5b0:	20 91 b5 11 	lds	r18, 0x11B5	; 0x8011b5 <w>
    b5b4:	30 91 b6 11 	lds	r19, 0x11B6	; 0x8011b6 <w+0x1>
    b5b8:	62 9f       	mul	r22, r18
    b5ba:	a0 01       	movw	r20, r0
    b5bc:	63 9f       	mul	r22, r19
    b5be:	50 0d       	add	r21, r0
    b5c0:	11 24       	eor	r1, r1
    b5c2:	05 2e       	mov	r0, r21
    b5c4:	00 0c       	add	r0, r0
    b5c6:	66 0b       	sbc	r22, r22
    b5c8:	77 0b       	sbc	r23, r23
    b5ca:	84 1b       	sub	r24, r20
    b5cc:	95 0b       	sbc	r25, r21
    b5ce:	a6 0b       	sbc	r26, r22
    b5d0:	b7 0b       	sbc	r27, r23
    b5d2:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    b5d6:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    b5da:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    b5de:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    b5e2:	11 98       	cbi	0x02, 1	; 2
    b5e4:	81 e0       	ldi	r24, 0x01	; 1
    b5e6:	cf 91       	pop	r28
    b5e8:	ff 90       	pop	r15
    b5ea:	ef 90       	pop	r14
    b5ec:	df 90       	pop	r13
    b5ee:	cf 90       	pop	r12
    b5f0:	bf 90       	pop	r11
    b5f2:	af 90       	pop	r10
    b5f4:	9f 90       	pop	r9
    b5f6:	8f 90       	pop	r8
    b5f8:	7f 90       	pop	r7
    b5fa:	6f 90       	pop	r6
    b5fc:	5f 90       	pop	r5
    b5fe:	4f 90       	pop	r4
    b600:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    b604:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    b608:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    b60c:	89 17       	cp	r24, r25
    b60e:	08 f4       	brcc	.+2      	; 0xb612 <_Z18NEW_aFeed_Ext_Leftv+0x3b6>
    b610:	f1 ce       	rjmp	.-542    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b612:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b616:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b61a:	81 e0       	ldi	r24, 0x01	; 1
    b61c:	cf 91       	pop	r28
    b61e:	ff 90       	pop	r15
    b620:	ef 90       	pop	r14
    b622:	df 90       	pop	r13
    b624:	cf 90       	pop	r12
    b626:	bf 90       	pop	r11
    b628:	af 90       	pop	r10
    b62a:	9f 90       	pop	r9
    b62c:	8f 90       	pop	r8
    b62e:	7f 90       	pop	r7
    b630:	6f 90       	pop	r6
    b632:	5f 90       	pop	r5
    b634:	4f 90       	pop	r4
    b636:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    b63a:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    b63e:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    b642:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    b646:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    b64a:	84 17       	cp	r24, r20
    b64c:	95 07       	cpc	r25, r21
    b64e:	a6 07       	cpc	r26, r22
    b650:	b7 07       	cpc	r27, r23
    b652:	09 f0       	breq	.+2      	; 0xb656 <_Z18NEW_aFeed_Ext_Leftv+0x3fa>
    b654:	cf ce       	rjmp	.-610    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b656:	f6 99       	sbic	0x1e, 6	; 30
    b658:	cd ce       	rjmp	.-614    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b65a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b65e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b662:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    b666:	8f 5f       	subi	r24, 0xFF	; 255
    b668:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    b66c:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    b670:	82 e0       	ldi	r24, 0x02	; 2
    b672:	cf 91       	pop	r28
    b674:	ff 90       	pop	r15
    b676:	ef 90       	pop	r14
    b678:	df 90       	pop	r13
    b67a:	cf 90       	pop	r12
    b67c:	bf 90       	pop	r11
    b67e:	af 90       	pop	r10
    b680:	9f 90       	pop	r9
    b682:	8f 90       	pop	r8
    b684:	7f 90       	pop	r7
    b686:	6f 90       	pop	r6
    b688:	5f 90       	pop	r5
    b68a:	4f 90       	pop	r4
    b68c:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
    b690:	84 17       	cp	r24, r20
    b692:	95 07       	cpc	r25, r21
    b694:	a6 07       	cpc	r26, r22
    b696:	b7 07       	cpc	r27, r23
    b698:	11 f4       	brne	.+4      	; 0xb69e <_Z18NEW_aFeed_Ext_Leftv+0x442>
    b69a:	f3 9b       	sbis	0x1e, 3	; 30
    b69c:	2d c0       	rjmp	.+90     	; 0xb6f8 <_Z18NEW_aFeed_Ext_Leftv+0x49c>
    b69e:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    b6a2:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    b6a6:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    b6aa:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    b6ae:	84 17       	cp	r24, r20
    b6b0:	95 07       	cpc	r25, r21
    b6b2:	a6 07       	cpc	r26, r22
    b6b4:	b7 07       	cpc	r27, r23
    b6b6:	09 f0       	breq	.+2      	; 0xb6ba <_Z18NEW_aFeed_Ext_Leftv+0x45e>
    b6b8:	9d ce       	rjmp	.-710    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b6ba:	f6 99       	sbic	0x1e, 6	; 30
    b6bc:	9b ce       	rjmp	.-714    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b6be:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b6c2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b6c6:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    b6ca:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    b6ce:	8f 5f       	subi	r24, 0xFF	; 255
    b6d0:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    b6d4:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    b6d8:	82 e0       	ldi	r24, 0x02	; 2
    b6da:	cf 91       	pop	r28
    b6dc:	ff 90       	pop	r15
    b6de:	ef 90       	pop	r14
    b6e0:	df 90       	pop	r13
    b6e2:	cf 90       	pop	r12
    b6e4:	bf 90       	pop	r11
    b6e6:	af 90       	pop	r10
    b6e8:	9f 90       	pop	r9
    b6ea:	8f 90       	pop	r8
    b6ec:	7f 90       	pop	r7
    b6ee:	6f 90       	pop	r6
    b6f0:	5f 90       	pop	r5
    b6f2:	4f 90       	pop	r4
    b6f4:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    b6f8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    b6fc:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Pass_Total>
    b700:	20 91 26 12 	lds	r18, 0x1226	; 0x801226 <cycle_flag>
    b704:	21 11       	cpse	r18, r1
    b706:	1c c0       	rjmp	.+56     	; 0xb740 <_Z18NEW_aFeed_Ext_Leftv+0x4e4>
    b708:	98 17       	cp	r25, r24
    b70a:	e8 f0       	brcs	.+58     	; 0xb746 <_Z18NEW_aFeed_Ext_Leftv+0x4ea>
    b70c:	81 e0       	ldi	r24, 0x01	; 1
    b70e:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    b712:	13 98       	cbi	0x02, 3	; 2
    b714:	11 98       	cbi	0x02, 1	; 2
    b716:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b71a:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b71e:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
    b722:	cf 91       	pop	r28
    b724:	ff 90       	pop	r15
    b726:	ef 90       	pop	r14
    b728:	df 90       	pop	r13
    b72a:	cf 90       	pop	r12
    b72c:	bf 90       	pop	r11
    b72e:	af 90       	pop	r10
    b730:	9f 90       	pop	r9
    b732:	8f 90       	pop	r8
    b734:	7f 90       	pop	r7
    b736:	6f 90       	pop	r6
    b738:	5f 90       	pop	r5
    b73a:	4f 90       	pop	r4
    b73c:	0c 94 f3 21 	jmp	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    b740:	98 17       	cp	r25, r24
    b742:	08 f0       	brcs	.+2      	; 0xb746 <_Z18NEW_aFeed_Ext_Leftv+0x4ea>
    b744:	57 ce       	rjmp	.-850    	; 0xb3f4 <_Z18NEW_aFeed_Ext_Leftv+0x198>
    b746:	81 e0       	ldi	r24, 0x01	; 1
    b748:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    b74c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b750:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b754:	13 9a       	sbi	0x02, 3	; 2
    b756:	11 9a       	sbi	0x02, 1	; 2
    b758:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    b75c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    b760:	cd ce       	rjmp	.-614    	; 0xb4fc <_Z18NEW_aFeed_Ext_Leftv+0x2a0>

0000b762 <_Z18NEW_Cone_Int_Rightv>:
    b762:	8f 92       	push	r8
    b764:	9f 92       	push	r9
    b766:	af 92       	push	r10
    b768:	bf 92       	push	r11
    b76a:	cf 92       	push	r12
    b76c:	df 92       	push	r13
    b76e:	ef 92       	push	r14
    b770:	ff 92       	push	r15
    b772:	0f 93       	push	r16
    b774:	1f 93       	push	r17
    b776:	cf 93       	push	r28
    b778:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    b77c:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    b780:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    b784:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    b788:	00 91 f6 09 	lds	r16, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    b78c:	10 91 f7 09 	lds	r17, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    b790:	20 91 f8 09 	lds	r18, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    b794:	30 91 f9 09 	lds	r19, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    b798:	40 17       	cp	r20, r16
    b79a:	51 07       	cpc	r21, r17
    b79c:	62 07       	cpc	r22, r18
    b79e:	73 07       	cpc	r23, r19
    b7a0:	09 f0       	breq	.+2      	; 0xb7a4 <_Z18NEW_Cone_Int_Rightv+0x42>
    b7a2:	eb c0       	rjmp	.+470    	; 0xb97a <_Z18NEW_Cone_Int_Rightv+0x218>
    b7a4:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    b7a8:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    b7ac:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    b7b0:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    b7b4:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    b7b8:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    b7bc:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    b7c0:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    b7c4:	c8 16       	cp	r12, r24
    b7c6:	d9 06       	cpc	r13, r25
    b7c8:	ea 06       	cpc	r14, r26
    b7ca:	fb 06       	cpc	r15, r27
    b7cc:	09 f0       	breq	.+2      	; 0xb7d0 <_Z18NEW_Cone_Int_Rightv+0x6e>
    b7ce:	c2 c0       	rjmp	.+388    	; 0xb954 <_Z18NEW_Cone_Int_Rightv+0x1f2>
    b7d0:	f3 99       	sbic	0x1e, 3	; 30
    b7d2:	c0 c0       	rjmp	.+384    	; 0xb954 <_Z18NEW_Cone_Int_Rightv+0x1f2>
    b7d4:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <Cone_qStep>
    b7d8:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    b7dc:	81 11       	cpse	r24, r1
    b7de:	01 c1       	rjmp	.+514    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    b7e0:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    b7e4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    b7e8:	8c 17       	cp	r24, r28
    b7ea:	08 f4       	brcc	.+2      	; 0xb7ee <_Z18NEW_Cone_Int_Rightv+0x8c>
    b7ec:	fa c0       	rjmp	.+500    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    b7ee:	81 e0       	ldi	r24, 0x01	; 1
    b7f0:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    b7f4:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b7f8:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b7fc:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    b800:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    b804:	77 ff       	sbrs	r23, 7
    b806:	02 c0       	rjmp	.+4      	; 0xb80c <_Z18NEW_Cone_Int_Rightv+0xaa>
    b808:	6f 5f       	subi	r22, 0xFF	; 255
    b80a:	7f 4f       	sbci	r23, 0xFF	; 255
    b80c:	75 95       	asr	r23
    b80e:	67 95       	ror	r22
    b810:	07 2e       	mov	r0, r23
    b812:	00 0c       	add	r0, r0
    b814:	88 0b       	sbc	r24, r24
    b816:	99 0b       	sbc	r25, r25
    b818:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b81c:	4b 01       	movw	r8, r22
    b81e:	5c 01       	movw	r10, r24
    b820:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    b824:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    b828:	07 2e       	mov	r0, r23
    b82a:	00 0c       	add	r0, r0
    b82c:	88 0b       	sbc	r24, r24
    b82e:	99 0b       	sbc	r25, r25
    b830:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b834:	9b 01       	movw	r18, r22
    b836:	ac 01       	movw	r20, r24
    b838:	c5 01       	movw	r24, r10
    b83a:	b4 01       	movw	r22, r8
    b83c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    b840:	4b 01       	movw	r8, r22
    b842:	5c 01       	movw	r10, r24
    b844:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    b848:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    b84c:	07 2e       	mov	r0, r23
    b84e:	00 0c       	add	r0, r0
    b850:	88 0b       	sbc	r24, r24
    b852:	99 0b       	sbc	r25, r25
    b854:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    b858:	9b 01       	movw	r18, r22
    b85a:	ac 01       	movw	r20, r24
    b85c:	c5 01       	movw	r24, r10
    b85e:	b4 01       	movw	r22, r8
    b860:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    b864:	20 e0       	ldi	r18, 0x00	; 0
    b866:	30 e0       	ldi	r19, 0x00	; 0
    b868:	40 e0       	ldi	r20, 0x00	; 0
    b86a:	5f e3       	ldi	r21, 0x3F	; 63
    b86c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    b870:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    b874:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    b878:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    b87c:	26 9f       	mul	r18, r22
    b87e:	a0 01       	movw	r20, r0
    b880:	27 9f       	mul	r18, r23
    b882:	50 0d       	add	r21, r0
    b884:	36 9f       	mul	r19, r22
    b886:	50 0d       	add	r21, r0
    b888:	11 24       	eor	r1, r1
    b88a:	05 2e       	mov	r0, r21
    b88c:	00 0c       	add	r0, r0
    b88e:	66 0b       	sbc	r22, r22
    b890:	77 0b       	sbc	r23, r23
    b892:	41 15       	cp	r20, r1
    b894:	51 05       	cpc	r21, r1
    b896:	61 05       	cpc	r22, r1
    b898:	71 05       	cpc	r23, r1
    b89a:	21 f5       	brne	.+72     	; 0xb8e4 <_Z18NEW_Cone_Int_Rightv+0x182>
    b89c:	8f ef       	ldi	r24, 0xFF	; 255
    b89e:	c8 1a       	sub	r12, r24
    b8a0:	d8 0a       	sbc	r13, r24
    b8a2:	e8 0a       	sbc	r14, r24
    b8a4:	f8 0a       	sbc	r15, r24
    b8a6:	c1 30       	cpi	r28, 0x01	; 1
    b8a8:	19 f1       	breq	.+70     	; 0xb8f0 <_Z18NEW_Cone_Int_Rightv+0x18e>
    b8aa:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    b8ae:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b8b2:	09 2e       	mov	r0, r25
    b8b4:	00 0c       	add	r0, r0
    b8b6:	aa 0b       	sbc	r26, r26
    b8b8:	bb 0b       	sbc	r27, r27
    b8ba:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    b8be:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    b8c2:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    b8c6:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    b8ca:	84 0f       	add	r24, r20
    b8cc:	95 1f       	adc	r25, r21
    b8ce:	a6 1f       	adc	r26, r22
    b8d0:	b7 1f       	adc	r27, r23
    b8d2:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    b8d6:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    b8da:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    b8de:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    b8e2:	0e c0       	rjmp	.+28     	; 0xb900 <_Z18NEW_Cone_Int_Rightv+0x19e>
    b8e4:	c1 30       	cpi	r28, 0x01	; 1
    b8e6:	e9 f4       	brne	.+58     	; 0xb922 <_Z18NEW_Cone_Int_Rightv+0x1c0>
    b8e8:	c4 1a       	sub	r12, r20
    b8ea:	d5 0a       	sbc	r13, r21
    b8ec:	e6 0a       	sbc	r14, r22
    b8ee:	f7 0a       	sbc	r15, r23
    b8f0:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    b8f4:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    b8f8:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    b8fc:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    b900:	11 98       	cbi	0x02, 1	; 2
    b902:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    b906:	81 e0       	ldi	r24, 0x01	; 1
    b908:	cf 91       	pop	r28
    b90a:	1f 91       	pop	r17
    b90c:	0f 91       	pop	r16
    b90e:	ff 90       	pop	r15
    b910:	ef 90       	pop	r14
    b912:	df 90       	pop	r13
    b914:	cf 90       	pop	r12
    b916:	bf 90       	pop	r11
    b918:	af 90       	pop	r10
    b91a:	9f 90       	pop	r9
    b91c:	8f 90       	pop	r8
    b91e:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    b922:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    b926:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    b92a:	0d 2c       	mov	r0, r13
    b92c:	00 0c       	add	r0, r0
    b92e:	ee 08       	sbc	r14, r14
    b930:	ff 08       	sbc	r15, r15
    b932:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    b936:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    b93a:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    b93e:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    b942:	8c 19       	sub	r24, r12
    b944:	9d 09       	sbc	r25, r13
    b946:	ae 09       	sbc	r26, r14
    b948:	bf 09       	sbc	r27, r15
    b94a:	84 1b       	sub	r24, r20
    b94c:	95 0b       	sbc	r25, r21
    b94e:	a6 0b       	sbc	r26, r22
    b950:	b7 0b       	sbc	r27, r23
    b952:	bf cf       	rjmp	.-130    	; 0xb8d2 <_Z18NEW_Cone_Int_Rightv+0x170>
    b954:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    b958:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    b95c:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    b960:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    b964:	c8 16       	cp	r12, r24
    b966:	d9 06       	cpc	r13, r25
    b968:	ea 06       	cpc	r14, r26
    b96a:	fb 06       	cpc	r15, r27
    b96c:	31 f4       	brne	.+12     	; 0xb97a <_Z18NEW_Cone_Int_Rightv+0x218>
    b96e:	f6 99       	sbic	0x1e, 6	; 30
    b970:	04 c0       	rjmp	.+8      	; 0xb97a <_Z18NEW_Cone_Int_Rightv+0x218>
    b972:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    b976:	86 30       	cpi	r24, 0x06	; 6
    b978:	21 f5       	brne	.+72     	; 0xb9c2 <_Z18NEW_Cone_Int_Rightv+0x260>
    b97a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    b97e:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    b982:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    b986:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    b98a:	48 17       	cp	r20, r24
    b98c:	59 07       	cpc	r21, r25
    b98e:	6a 07       	cpc	r22, r26
    b990:	7b 07       	cpc	r23, r27
    b992:	09 f0       	breq	.+2      	; 0xb996 <_Z18NEW_Cone_Int_Rightv+0x234>
    b994:	83 c0       	rjmp	.+262    	; 0xba9c <_Z18NEW_Cone_Int_Rightv+0x33a>
    b996:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    b99a:	80 90 ba 04 	lds	r8, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    b99e:	90 90 bb 04 	lds	r9, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    b9a2:	a0 90 bc 04 	lds	r10, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    b9a6:	b0 90 bd 04 	lds	r11, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    b9aa:	81 30       	cpi	r24, 0x01	; 1
    b9ac:	31 f5       	brne	.+76     	; 0xb9fa <_Z18NEW_Cone_Int_Rightv+0x298>
    b9ae:	80 92 46 12 	sts	0x1246, r8	; 0x801246 <Motor_X_Pos>
    b9b2:	90 92 47 12 	sts	0x1247, r9	; 0x801247 <Motor_X_Pos+0x1>
    b9b6:	a0 92 48 12 	sts	0x1248, r10	; 0x801248 <Motor_X_Pos+0x2>
    b9ba:	b0 92 49 12 	sts	0x1249, r11	; 0x801249 <Motor_X_Pos+0x3>
    b9be:	82 e0       	ldi	r24, 0x02	; 2
    b9c0:	0e c0       	rjmp	.+28     	; 0xb9de <_Z18NEW_Cone_Int_Rightv+0x27c>
    b9c2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    b9c6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    b9ca:	89 17       	cp	r24, r25
    b9cc:	50 f0       	brcs	.+20     	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    b9ce:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    b9d2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    b9d6:	81 e0       	ldi	r24, 0x01	; 1
    b9d8:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
    b9dc:	81 e0       	ldi	r24, 0x01	; 1
    b9de:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    b9e2:	cf 91       	pop	r28
    b9e4:	1f 91       	pop	r17
    b9e6:	0f 91       	pop	r16
    b9e8:	ff 90       	pop	r15
    b9ea:	ef 90       	pop	r14
    b9ec:	df 90       	pop	r13
    b9ee:	cf 90       	pop	r12
    b9f0:	bf 90       	pop	r11
    b9f2:	af 90       	pop	r10
    b9f4:	9f 90       	pop	r9
    b9f6:	8f 90       	pop	r8
    b9f8:	08 95       	ret
    b9fa:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    b9fe:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    ba02:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    ba06:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    ba0a:	c8 14       	cp	r12, r8
    ba0c:	d9 04       	cpc	r13, r9
    ba0e:	ea 04       	cpc	r14, r10
    ba10:	fb 04       	cpc	r15, r11
    ba12:	11 f5       	brne	.+68     	; 0xba58 <_Z18NEW_Cone_Int_Rightv+0x2f6>
    ba14:	82 30       	cpi	r24, 0x02	; 2
    ba16:	01 f5       	brne	.+64     	; 0xba58 <_Z18NEW_Cone_Int_Rightv+0x2f6>
    ba18:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    ba1c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ba20:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ba24:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    ba28:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    ba2c:	09 2e       	mov	r0, r25
    ba2e:	00 0c       	add	r0, r0
    ba30:	aa 0b       	sbc	r26, r26
    ba32:	bb 0b       	sbc	r27, r27
    ba34:	8c 0d       	add	r24, r12
    ba36:	9d 1d       	adc	r25, r13
    ba38:	ae 1d       	adc	r26, r14
    ba3a:	bf 1d       	adc	r27, r15
    ba3c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    ba40:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    ba44:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    ba48:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    ba4c:	13 98       	cbi	0x02, 3	; 2
    ba4e:	81 e0       	ldi	r24, 0x01	; 1
    ba50:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    ba54:	83 e0       	ldi	r24, 0x03	; 3
    ba56:	c3 cf       	rjmp	.-122    	; 0xb9de <_Z18NEW_Cone_Int_Rightv+0x27c>
    ba58:	83 30       	cpi	r24, 0x03	; 3
    ba5a:	01 f5       	brne	.+64     	; 0xba9c <_Z18NEW_Cone_Int_Rightv+0x33a>
    ba5c:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    ba60:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    ba64:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    ba68:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    ba6c:	c8 16       	cp	r12, r24
    ba6e:	d9 06       	cpc	r13, r25
    ba70:	ea 06       	cpc	r14, r26
    ba72:	fb 06       	cpc	r15, r27
    ba74:	09 f0       	breq	.+2      	; 0xba78 <_Z18NEW_Cone_Int_Rightv+0x316>
    ba76:	b5 cf       	rjmp	.-150    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    ba78:	f6 99       	sbic	0x1e, 6	; 30
    ba7a:	b3 cf       	rjmp	.-154    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    ba7c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ba80:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ba84:	82 e0       	ldi	r24, 0x02	; 2
    ba86:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
    ba8a:	84 e0       	ldi	r24, 0x04	; 4
    ba8c:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    ba90:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    ba94:	8f 5f       	subi	r24, 0xFF	; 255
    ba96:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    ba9a:	a3 cf       	rjmp	.-186    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    ba9c:	40 17       	cp	r20, r16
    ba9e:	51 07       	cpc	r21, r17
    baa0:	62 07       	cpc	r22, r18
    baa2:	73 07       	cpc	r23, r19
    baa4:	09 f0       	breq	.+2      	; 0xbaa8 <_Z18NEW_Cone_Int_Rightv+0x346>
    baa6:	9d cf       	rjmp	.-198    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    baa8:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    baac:	84 30       	cpi	r24, 0x04	; 4
    baae:	a1 f4       	brne	.+40     	; 0xbad8 <_Z18NEW_Cone_Int_Rightv+0x376>
    bab0:	f3 99       	sbic	0x1e, 3	; 30
    bab2:	97 cf       	rjmp	.-210    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    bab4:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    bab8:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    babc:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    bac0:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    bac4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    bac8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    bacc:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    bad0:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    bad4:	85 e0       	ldi	r24, 0x05	; 5
    bad6:	83 cf       	rjmp	.-250    	; 0xb9de <_Z18NEW_Cone_Int_Rightv+0x27c>
    bad8:	85 30       	cpi	r24, 0x05	; 5
    bada:	09 f0       	breq	.+2      	; 0xbade <_Z18NEW_Cone_Int_Rightv+0x37c>
    badc:	82 cf       	rjmp	.-252    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    bade:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    bae2:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    bae6:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    baea:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    baee:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    baf2:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    baf6:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    bafa:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    bafe:	c8 16       	cp	r12, r24
    bb00:	d9 06       	cpc	r13, r25
    bb02:	ea 06       	cpc	r14, r26
    bb04:	fb 06       	cpc	r15, r27
    bb06:	09 f0       	breq	.+2      	; 0xbb0a <_Z18NEW_Cone_Int_Rightv+0x3a8>
    bb08:	6c cf       	rjmp	.-296    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    bb0a:	f3 99       	sbic	0x1e, 3	; 30
    bb0c:	6a cf       	rjmp	.-300    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    bb0e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    bb12:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    bb16:	09 2e       	mov	r0, r25
    bb18:	00 0c       	add	r0, r0
    bb1a:	aa 0b       	sbc	r26, r26
    bb1c:	bb 0b       	sbc	r27, r27
    bb1e:	c8 1a       	sub	r12, r24
    bb20:	d9 0a       	sbc	r13, r25
    bb22:	ea 0a       	sbc	r14, r26
    bb24:	fb 0a       	sbc	r15, r27
    bb26:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    bb2a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    bb2e:	89 1b       	sub	r24, r25
    bb30:	99 0b       	sbc	r25, r25
    bb32:	97 fd       	sbrc	r25, 7
    bb34:	83 c0       	rjmp	.+262    	; 0xbc3c <_Z18NEW_Cone_Int_Rightv+0x4da>
    bb36:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    bb3a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    bb3e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    bb42:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    bb46:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    bb4a:	77 ff       	sbrs	r23, 7
    bb4c:	02 c0       	rjmp	.+4      	; 0xbb52 <_Z18NEW_Cone_Int_Rightv+0x3f0>
    bb4e:	6f 5f       	subi	r22, 0xFF	; 255
    bb50:	7f 4f       	sbci	r23, 0xFF	; 255
    bb52:	75 95       	asr	r23
    bb54:	67 95       	ror	r22
    bb56:	07 2e       	mov	r0, r23
    bb58:	00 0c       	add	r0, r0
    bb5a:	88 0b       	sbc	r24, r24
    bb5c:	99 0b       	sbc	r25, r25
    bb5e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    bb62:	4b 01       	movw	r8, r22
    bb64:	5c 01       	movw	r10, r24
    bb66:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    bb6a:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    bb6e:	07 2e       	mov	r0, r23
    bb70:	00 0c       	add	r0, r0
    bb72:	88 0b       	sbc	r24, r24
    bb74:	99 0b       	sbc	r25, r25
    bb76:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    bb7a:	9b 01       	movw	r18, r22
    bb7c:	ac 01       	movw	r20, r24
    bb7e:	c5 01       	movw	r24, r10
    bb80:	b4 01       	movw	r22, r8
    bb82:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    bb86:	4b 01       	movw	r8, r22
    bb88:	5c 01       	movw	r10, r24
    bb8a:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    bb8e:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    bb92:	07 2e       	mov	r0, r23
    bb94:	00 0c       	add	r0, r0
    bb96:	88 0b       	sbc	r24, r24
    bb98:	99 0b       	sbc	r25, r25
    bb9a:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    bb9e:	9b 01       	movw	r18, r22
    bba0:	ac 01       	movw	r20, r24
    bba2:	c5 01       	movw	r24, r10
    bba4:	b4 01       	movw	r22, r8
    bba6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    bbaa:	20 e0       	ldi	r18, 0x00	; 0
    bbac:	30 e0       	ldi	r19, 0x00	; 0
    bbae:	40 e0       	ldi	r20, 0x00	; 0
    bbb0:	5f e3       	ldi	r21, 0x3F	; 63
    bbb2:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    bbb6:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    bbba:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    bbbe:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    bbc2:	26 9f       	mul	r18, r22
    bbc4:	a0 01       	movw	r20, r0
    bbc6:	27 9f       	mul	r18, r23
    bbc8:	50 0d       	add	r21, r0
    bbca:	36 9f       	mul	r19, r22
    bbcc:	50 0d       	add	r21, r0
    bbce:	11 24       	eor	r1, r1
    bbd0:	ca 01       	movw	r24, r20
    bbd2:	55 0f       	add	r21, r21
    bbd4:	aa 0b       	sbc	r26, r26
    bbd6:	bb 0b       	sbc	r27, r27
    bbd8:	c8 1a       	sub	r12, r24
    bbda:	d9 0a       	sbc	r13, r25
    bbdc:	ea 0a       	sbc	r14, r26
    bbde:	fb 0a       	sbc	r15, r27
    bbe0:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    bbe4:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    bbe8:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    bbec:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    bbf0:	11 98       	cbi	0x02, 1	; 2
    bbf2:	81 e0       	ldi	r24, 0x01	; 1
    bbf4:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    bbf8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    bbfc:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    bc00:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    bc04:	86 30       	cpi	r24, 0x06	; 6
    bc06:	09 f0       	breq	.+2      	; 0xbc0a <_Z18NEW_Cone_Int_Rightv+0x4a8>
    bc08:	ec ce       	rjmp	.-552    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    bc0a:	80 e0       	ldi	r24, 0x00	; 0
    bc0c:	90 e0       	ldi	r25, 0x00	; 0
    bc0e:	a0 e0       	ldi	r26, 0x00	; 0
    bc10:	b0 e4       	ldi	r27, 0x40	; 64
    bc12:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    bc16:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    bc1a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    bc1e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    bc22:	80 e0       	ldi	r24, 0x00	; 0
    bc24:	90 e0       	ldi	r25, 0x00	; 0
    bc26:	a0 e0       	ldi	r26, 0x00	; 0
    bc28:	b0 ec       	ldi	r27, 0xC0	; 192
    bc2a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    bc2e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    bc32:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    bc36:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    bc3a:	d3 ce       	rjmp	.-602    	; 0xb9e2 <_Z18NEW_Cone_Int_Rightv+0x280>
    bc3c:	86 e0       	ldi	r24, 0x06	; 6
    bc3e:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    bc42:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    bc46:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    bc4a:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    bc4e:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    bc52:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    bc56:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    bc5a:	13 9a       	sbi	0x02, 3	; 2
    bc5c:	11 9a       	sbi	0x02, 1	; 2
    bc5e:	81 e0       	ldi	r24, 0x01	; 1
    bc60:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    bc64:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    bc68:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    bc6c:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <_Z12BeepCompletev>
    bc70:	c5 cf       	rjmp	.-118    	; 0xbbfc <_Z18NEW_Cone_Int_Rightv+0x49a>

0000bc72 <_Z17NEW_Cone_Int_Leftv>:
    bc72:	8f 92       	push	r8
    bc74:	9f 92       	push	r9
    bc76:	af 92       	push	r10
    bc78:	bf 92       	push	r11
    bc7a:	cf 92       	push	r12
    bc7c:	df 92       	push	r13
    bc7e:	ef 92       	push	r14
    bc80:	ff 92       	push	r15
    bc82:	0f 93       	push	r16
    bc84:	1f 93       	push	r17
    bc86:	cf 93       	push	r28
    bc88:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    bc8c:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    bc90:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    bc94:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    bc98:	00 91 c3 04 	lds	r16, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    bc9c:	10 91 c4 04 	lds	r17, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    bca0:	20 91 c5 04 	lds	r18, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    bca4:	30 91 c6 04 	lds	r19, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    bca8:	40 17       	cp	r20, r16
    bcaa:	51 07       	cpc	r21, r17
    bcac:	62 07       	cpc	r22, r18
    bcae:	73 07       	cpc	r23, r19
    bcb0:	09 f0       	breq	.+2      	; 0xbcb4 <_Z17NEW_Cone_Int_Leftv+0x42>
    bcb2:	eb c0       	rjmp	.+470    	; 0xbe8a <_Z17NEW_Cone_Int_Leftv+0x218>
    bcb4:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    bcb8:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    bcbc:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    bcc0:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    bcc4:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    bcc8:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    bccc:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    bcd0:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    bcd4:	c8 16       	cp	r12, r24
    bcd6:	d9 06       	cpc	r13, r25
    bcd8:	ea 06       	cpc	r14, r26
    bcda:	fb 06       	cpc	r15, r27
    bcdc:	09 f0       	breq	.+2      	; 0xbce0 <_Z17NEW_Cone_Int_Leftv+0x6e>
    bcde:	c2 c0       	rjmp	.+388    	; 0xbe64 <_Z17NEW_Cone_Int_Leftv+0x1f2>
    bce0:	f3 99       	sbic	0x1e, 3	; 30
    bce2:	c0 c0       	rjmp	.+384    	; 0xbe64 <_Z17NEW_Cone_Int_Leftv+0x1f2>
    bce4:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <Cone_qStep>
    bce8:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    bcec:	81 11       	cpse	r24, r1
    bcee:	01 c1       	rjmp	.+514    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bcf0:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    bcf4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    bcf8:	8c 17       	cp	r24, r28
    bcfa:	08 f4       	brcc	.+2      	; 0xbcfe <_Z17NEW_Cone_Int_Leftv+0x8c>
    bcfc:	fa c0       	rjmp	.+500    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bcfe:	81 e0       	ldi	r24, 0x01	; 1
    bd00:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    bd04:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    bd08:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    bd0c:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    bd10:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    bd14:	77 ff       	sbrs	r23, 7
    bd16:	02 c0       	rjmp	.+4      	; 0xbd1c <_Z17NEW_Cone_Int_Leftv+0xaa>
    bd18:	6f 5f       	subi	r22, 0xFF	; 255
    bd1a:	7f 4f       	sbci	r23, 0xFF	; 255
    bd1c:	75 95       	asr	r23
    bd1e:	67 95       	ror	r22
    bd20:	07 2e       	mov	r0, r23
    bd22:	00 0c       	add	r0, r0
    bd24:	88 0b       	sbc	r24, r24
    bd26:	99 0b       	sbc	r25, r25
    bd28:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    bd2c:	4b 01       	movw	r8, r22
    bd2e:	5c 01       	movw	r10, r24
    bd30:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    bd34:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    bd38:	07 2e       	mov	r0, r23
    bd3a:	00 0c       	add	r0, r0
    bd3c:	88 0b       	sbc	r24, r24
    bd3e:	99 0b       	sbc	r25, r25
    bd40:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    bd44:	9b 01       	movw	r18, r22
    bd46:	ac 01       	movw	r20, r24
    bd48:	c5 01       	movw	r24, r10
    bd4a:	b4 01       	movw	r22, r8
    bd4c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    bd50:	4b 01       	movw	r8, r22
    bd52:	5c 01       	movw	r10, r24
    bd54:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    bd58:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    bd5c:	07 2e       	mov	r0, r23
    bd5e:	00 0c       	add	r0, r0
    bd60:	88 0b       	sbc	r24, r24
    bd62:	99 0b       	sbc	r25, r25
    bd64:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    bd68:	9b 01       	movw	r18, r22
    bd6a:	ac 01       	movw	r20, r24
    bd6c:	c5 01       	movw	r24, r10
    bd6e:	b4 01       	movw	r22, r8
    bd70:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    bd74:	20 e0       	ldi	r18, 0x00	; 0
    bd76:	30 e0       	ldi	r19, 0x00	; 0
    bd78:	40 e0       	ldi	r20, 0x00	; 0
    bd7a:	5f e3       	ldi	r21, 0x3F	; 63
    bd7c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    bd80:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    bd84:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    bd88:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    bd8c:	26 9f       	mul	r18, r22
    bd8e:	a0 01       	movw	r20, r0
    bd90:	27 9f       	mul	r18, r23
    bd92:	50 0d       	add	r21, r0
    bd94:	36 9f       	mul	r19, r22
    bd96:	50 0d       	add	r21, r0
    bd98:	11 24       	eor	r1, r1
    bd9a:	05 2e       	mov	r0, r21
    bd9c:	00 0c       	add	r0, r0
    bd9e:	66 0b       	sbc	r22, r22
    bda0:	77 0b       	sbc	r23, r23
    bda2:	41 15       	cp	r20, r1
    bda4:	51 05       	cpc	r21, r1
    bda6:	61 05       	cpc	r22, r1
    bda8:	71 05       	cpc	r23, r1
    bdaa:	21 f5       	brne	.+72     	; 0xbdf4 <_Z17NEW_Cone_Int_Leftv+0x182>
    bdac:	8f ef       	ldi	r24, 0xFF	; 255
    bdae:	c8 1a       	sub	r12, r24
    bdb0:	d8 0a       	sbc	r13, r24
    bdb2:	e8 0a       	sbc	r14, r24
    bdb4:	f8 0a       	sbc	r15, r24
    bdb6:	c1 30       	cpi	r28, 0x01	; 1
    bdb8:	19 f1       	breq	.+70     	; 0xbe00 <_Z17NEW_Cone_Int_Leftv+0x18e>
    bdba:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    bdbe:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    bdc2:	09 2e       	mov	r0, r25
    bdc4:	00 0c       	add	r0, r0
    bdc6:	aa 0b       	sbc	r26, r26
    bdc8:	bb 0b       	sbc	r27, r27
    bdca:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    bdce:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    bdd2:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    bdd6:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    bdda:	84 0f       	add	r24, r20
    bddc:	95 1f       	adc	r25, r21
    bdde:	a6 1f       	adc	r26, r22
    bde0:	b7 1f       	adc	r27, r23
    bde2:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    bde6:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    bdea:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    bdee:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    bdf2:	0e c0       	rjmp	.+28     	; 0xbe10 <_Z17NEW_Cone_Int_Leftv+0x19e>
    bdf4:	c1 30       	cpi	r28, 0x01	; 1
    bdf6:	e9 f4       	brne	.+58     	; 0xbe32 <_Z17NEW_Cone_Int_Leftv+0x1c0>
    bdf8:	c4 1a       	sub	r12, r20
    bdfa:	d5 0a       	sbc	r13, r21
    bdfc:	e6 0a       	sbc	r14, r22
    bdfe:	f7 0a       	sbc	r15, r23
    be00:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    be04:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    be08:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    be0c:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    be10:	11 98       	cbi	0x02, 1	; 2
    be12:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    be16:	81 e0       	ldi	r24, 0x01	; 1
    be18:	cf 91       	pop	r28
    be1a:	1f 91       	pop	r17
    be1c:	0f 91       	pop	r16
    be1e:	ff 90       	pop	r15
    be20:	ef 90       	pop	r14
    be22:	df 90       	pop	r13
    be24:	cf 90       	pop	r12
    be26:	bf 90       	pop	r11
    be28:	af 90       	pop	r10
    be2a:	9f 90       	pop	r9
    be2c:	8f 90       	pop	r8
    be2e:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    be32:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <REBOUND_X>
    be36:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <REBOUND_X+0x1>
    be3a:	0d 2c       	mov	r0, r13
    be3c:	00 0c       	add	r0, r0
    be3e:	ee 08       	sbc	r14, r14
    be40:	ff 08       	sbc	r15, r15
    be42:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    be46:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    be4a:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    be4e:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    be52:	8c 19       	sub	r24, r12
    be54:	9d 09       	sbc	r25, r13
    be56:	ae 09       	sbc	r26, r14
    be58:	bf 09       	sbc	r27, r15
    be5a:	84 1b       	sub	r24, r20
    be5c:	95 0b       	sbc	r25, r21
    be5e:	a6 0b       	sbc	r26, r22
    be60:	b7 0b       	sbc	r27, r23
    be62:	bf cf       	rjmp	.-130    	; 0xbde2 <_Z17NEW_Cone_Int_Leftv+0x170>
    be64:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    be68:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    be6c:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    be70:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    be74:	c8 16       	cp	r12, r24
    be76:	d9 06       	cpc	r13, r25
    be78:	ea 06       	cpc	r14, r26
    be7a:	fb 06       	cpc	r15, r27
    be7c:	31 f4       	brne	.+12     	; 0xbe8a <_Z17NEW_Cone_Int_Leftv+0x218>
    be7e:	f6 99       	sbic	0x1e, 6	; 30
    be80:	04 c0       	rjmp	.+8      	; 0xbe8a <_Z17NEW_Cone_Int_Leftv+0x218>
    be82:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    be86:	86 30       	cpi	r24, 0x06	; 6
    be88:	21 f5       	brne	.+72     	; 0xbed2 <_Z17NEW_Cone_Int_Leftv+0x260>
    be8a:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    be8e:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    be92:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    be96:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    be9a:	48 17       	cp	r20, r24
    be9c:	59 07       	cpc	r21, r25
    be9e:	6a 07       	cpc	r22, r26
    bea0:	7b 07       	cpc	r23, r27
    bea2:	09 f0       	breq	.+2      	; 0xbea6 <_Z17NEW_Cone_Int_Leftv+0x234>
    bea4:	83 c0       	rjmp	.+262    	; 0xbfac <_Z17NEW_Cone_Int_Leftv+0x33a>
    bea6:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    beaa:	80 90 ba 04 	lds	r8, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    beae:	90 90 bb 04 	lds	r9, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    beb2:	a0 90 bc 04 	lds	r10, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    beb6:	b0 90 bd 04 	lds	r11, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    beba:	81 30       	cpi	r24, 0x01	; 1
    bebc:	31 f5       	brne	.+76     	; 0xbf0a <_Z17NEW_Cone_Int_Leftv+0x298>
    bebe:	80 92 46 12 	sts	0x1246, r8	; 0x801246 <Motor_X_Pos>
    bec2:	90 92 47 12 	sts	0x1247, r9	; 0x801247 <Motor_X_Pos+0x1>
    bec6:	a0 92 48 12 	sts	0x1248, r10	; 0x801248 <Motor_X_Pos+0x2>
    beca:	b0 92 49 12 	sts	0x1249, r11	; 0x801249 <Motor_X_Pos+0x3>
    bece:	82 e0       	ldi	r24, 0x02	; 2
    bed0:	0e c0       	rjmp	.+28     	; 0xbeee <_Z17NEW_Cone_Int_Leftv+0x27c>
    bed2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    bed6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    beda:	89 17       	cp	r24, r25
    bedc:	50 f0       	brcs	.+20     	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bede:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    bee2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    bee6:	81 e0       	ldi	r24, 0x01	; 1
    bee8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
    beec:	81 e0       	ldi	r24, 0x01	; 1
    beee:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    bef2:	cf 91       	pop	r28
    bef4:	1f 91       	pop	r17
    bef6:	0f 91       	pop	r16
    bef8:	ff 90       	pop	r15
    befa:	ef 90       	pop	r14
    befc:	df 90       	pop	r13
    befe:	cf 90       	pop	r12
    bf00:	bf 90       	pop	r11
    bf02:	af 90       	pop	r10
    bf04:	9f 90       	pop	r9
    bf06:	8f 90       	pop	r8
    bf08:	08 95       	ret
    bf0a:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    bf0e:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    bf12:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    bf16:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    bf1a:	c8 14       	cp	r12, r8
    bf1c:	d9 04       	cpc	r13, r9
    bf1e:	ea 04       	cpc	r14, r10
    bf20:	fb 04       	cpc	r15, r11
    bf22:	11 f5       	brne	.+68     	; 0xbf68 <_Z17NEW_Cone_Int_Leftv+0x2f6>
    bf24:	82 30       	cpi	r24, 0x02	; 2
    bf26:	01 f5       	brne	.+64     	; 0xbf68 <_Z17NEW_Cone_Int_Leftv+0x2f6>
    bf28:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    bf2c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    bf30:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    bf34:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    bf38:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    bf3c:	09 2e       	mov	r0, r25
    bf3e:	00 0c       	add	r0, r0
    bf40:	aa 0b       	sbc	r26, r26
    bf42:	bb 0b       	sbc	r27, r27
    bf44:	8c 0d       	add	r24, r12
    bf46:	9d 1d       	adc	r25, r13
    bf48:	ae 1d       	adc	r26, r14
    bf4a:	bf 1d       	adc	r27, r15
    bf4c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    bf50:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    bf54:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    bf58:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    bf5c:	13 98       	cbi	0x02, 3	; 2
    bf5e:	81 e0       	ldi	r24, 0x01	; 1
    bf60:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    bf64:	83 e0       	ldi	r24, 0x03	; 3
    bf66:	c3 cf       	rjmp	.-122    	; 0xbeee <_Z17NEW_Cone_Int_Leftv+0x27c>
    bf68:	83 30       	cpi	r24, 0x03	; 3
    bf6a:	01 f5       	brne	.+64     	; 0xbfac <_Z17NEW_Cone_Int_Leftv+0x33a>
    bf6c:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    bf70:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    bf74:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    bf78:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    bf7c:	c8 16       	cp	r12, r24
    bf7e:	d9 06       	cpc	r13, r25
    bf80:	ea 06       	cpc	r14, r26
    bf82:	fb 06       	cpc	r15, r27
    bf84:	09 f0       	breq	.+2      	; 0xbf88 <_Z17NEW_Cone_Int_Leftv+0x316>
    bf86:	b5 cf       	rjmp	.-150    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bf88:	f6 99       	sbic	0x1e, 6	; 30
    bf8a:	b3 cf       	rjmp	.-154    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bf8c:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    bf90:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    bf94:	82 e0       	ldi	r24, 0x02	; 2
    bf96:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
    bf9a:	84 e0       	ldi	r24, 0x04	; 4
    bf9c:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    bfa0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    bfa4:	8f 5f       	subi	r24, 0xFF	; 255
    bfa6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    bfaa:	a3 cf       	rjmp	.-186    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bfac:	40 17       	cp	r20, r16
    bfae:	51 07       	cpc	r21, r17
    bfb0:	62 07       	cpc	r22, r18
    bfb2:	73 07       	cpc	r23, r19
    bfb4:	09 f0       	breq	.+2      	; 0xbfb8 <_Z17NEW_Cone_Int_Leftv+0x346>
    bfb6:	9d cf       	rjmp	.-198    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bfb8:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    bfbc:	84 30       	cpi	r24, 0x04	; 4
    bfbe:	a1 f4       	brne	.+40     	; 0xbfe8 <_Z17NEW_Cone_Int_Leftv+0x376>
    bfc0:	f3 99       	sbic	0x1e, 3	; 30
    bfc2:	97 cf       	rjmp	.-210    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bfc4:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    bfc8:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    bfcc:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    bfd0:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    bfd4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    bfd8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    bfdc:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    bfe0:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    bfe4:	85 e0       	ldi	r24, 0x05	; 5
    bfe6:	83 cf       	rjmp	.-250    	; 0xbeee <_Z17NEW_Cone_Int_Leftv+0x27c>
    bfe8:	85 30       	cpi	r24, 0x05	; 5
    bfea:	09 f0       	breq	.+2      	; 0xbfee <_Z17NEW_Cone_Int_Leftv+0x37c>
    bfec:	82 cf       	rjmp	.-252    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    bfee:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    bff2:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    bff6:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    bffa:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    bffe:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    c002:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    c006:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    c00a:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    c00e:	c8 16       	cp	r12, r24
    c010:	d9 06       	cpc	r13, r25
    c012:	ea 06       	cpc	r14, r26
    c014:	fb 06       	cpc	r15, r27
    c016:	09 f0       	breq	.+2      	; 0xc01a <_Z17NEW_Cone_Int_Leftv+0x3a8>
    c018:	6c cf       	rjmp	.-296    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    c01a:	f3 99       	sbic	0x1e, 3	; 30
    c01c:	6a cf       	rjmp	.-300    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    c01e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    c022:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c026:	09 2e       	mov	r0, r25
    c028:	00 0c       	add	r0, r0
    c02a:	aa 0b       	sbc	r26, r26
    c02c:	bb 0b       	sbc	r27, r27
    c02e:	c8 1a       	sub	r12, r24
    c030:	d9 0a       	sbc	r13, r25
    c032:	ea 0a       	sbc	r14, r26
    c034:	fb 0a       	sbc	r15, r27
    c036:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    c03a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    c03e:	89 1b       	sub	r24, r25
    c040:	99 0b       	sbc	r25, r25
    c042:	97 fd       	sbrc	r25, 7
    c044:	83 c0       	rjmp	.+262    	; 0xc14c <_Z17NEW_Cone_Int_Leftv+0x4da>
    c046:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    c04a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c04e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c052:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    c056:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    c05a:	77 ff       	sbrs	r23, 7
    c05c:	02 c0       	rjmp	.+4      	; 0xc062 <_Z17NEW_Cone_Int_Leftv+0x3f0>
    c05e:	6f 5f       	subi	r22, 0xFF	; 255
    c060:	7f 4f       	sbci	r23, 0xFF	; 255
    c062:	75 95       	asr	r23
    c064:	67 95       	ror	r22
    c066:	07 2e       	mov	r0, r23
    c068:	00 0c       	add	r0, r0
    c06a:	88 0b       	sbc	r24, r24
    c06c:	99 0b       	sbc	r25, r25
    c06e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c072:	4b 01       	movw	r8, r22
    c074:	5c 01       	movw	r10, r24
    c076:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    c07a:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    c07e:	07 2e       	mov	r0, r23
    c080:	00 0c       	add	r0, r0
    c082:	88 0b       	sbc	r24, r24
    c084:	99 0b       	sbc	r25, r25
    c086:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c08a:	9b 01       	movw	r18, r22
    c08c:	ac 01       	movw	r20, r24
    c08e:	c5 01       	movw	r24, r10
    c090:	b4 01       	movw	r22, r8
    c092:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    c096:	4b 01       	movw	r8, r22
    c098:	5c 01       	movw	r10, r24
    c09a:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    c09e:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    c0a2:	07 2e       	mov	r0, r23
    c0a4:	00 0c       	add	r0, r0
    c0a6:	88 0b       	sbc	r24, r24
    c0a8:	99 0b       	sbc	r25, r25
    c0aa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c0ae:	9b 01       	movw	r18, r22
    c0b0:	ac 01       	movw	r20, r24
    c0b2:	c5 01       	movw	r24, r10
    c0b4:	b4 01       	movw	r22, r8
    c0b6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    c0ba:	20 e0       	ldi	r18, 0x00	; 0
    c0bc:	30 e0       	ldi	r19, 0x00	; 0
    c0be:	40 e0       	ldi	r20, 0x00	; 0
    c0c0:	5f e3       	ldi	r21, 0x3F	; 63
    c0c2:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    c0c6:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    c0ca:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    c0ce:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    c0d2:	26 9f       	mul	r18, r22
    c0d4:	a0 01       	movw	r20, r0
    c0d6:	27 9f       	mul	r18, r23
    c0d8:	50 0d       	add	r21, r0
    c0da:	36 9f       	mul	r19, r22
    c0dc:	50 0d       	add	r21, r0
    c0de:	11 24       	eor	r1, r1
    c0e0:	ca 01       	movw	r24, r20
    c0e2:	55 0f       	add	r21, r21
    c0e4:	aa 0b       	sbc	r26, r26
    c0e6:	bb 0b       	sbc	r27, r27
    c0e8:	c8 1a       	sub	r12, r24
    c0ea:	d9 0a       	sbc	r13, r25
    c0ec:	ea 0a       	sbc	r14, r26
    c0ee:	fb 0a       	sbc	r15, r27
    c0f0:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    c0f4:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    c0f8:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    c0fc:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    c100:	11 98       	cbi	0x02, 1	; 2
    c102:	81 e0       	ldi	r24, 0x01	; 1
    c104:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    c108:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    c10c:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    c110:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    c114:	86 30       	cpi	r24, 0x06	; 6
    c116:	09 f0       	breq	.+2      	; 0xc11a <_Z17NEW_Cone_Int_Leftv+0x4a8>
    c118:	ec ce       	rjmp	.-552    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    c11a:	80 e0       	ldi	r24, 0x00	; 0
    c11c:	90 e0       	ldi	r25, 0x00	; 0
    c11e:	a0 e0       	ldi	r26, 0x00	; 0
    c120:	b0 e4       	ldi	r27, 0x40	; 64
    c122:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    c126:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    c12a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    c12e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    c132:	80 e0       	ldi	r24, 0x00	; 0
    c134:	90 e0       	ldi	r25, 0x00	; 0
    c136:	a0 e0       	ldi	r26, 0x00	; 0
    c138:	b0 ec       	ldi	r27, 0xC0	; 192
    c13a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    c13e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    c142:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    c146:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    c14a:	d3 ce       	rjmp	.-602    	; 0xbef2 <_Z17NEW_Cone_Int_Leftv+0x280>
    c14c:	86 e0       	ldi	r24, 0x06	; 6
    c14e:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    c152:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c156:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c15a:	c0 92 ba 04 	sts	0x04BA, r12	; 0x8004ba <Limit_Pos_Rear>
    c15e:	d0 92 bb 04 	sts	0x04BB, r13	; 0x8004bb <Limit_Pos_Rear+0x1>
    c162:	e0 92 bc 04 	sts	0x04BC, r14	; 0x8004bc <Limit_Pos_Rear+0x2>
    c166:	f0 92 bd 04 	sts	0x04BD, r15	; 0x8004bd <Limit_Pos_Rear+0x3>
    c16a:	13 9a       	sbi	0x02, 3	; 2
    c16c:	11 9a       	sbi	0x02, 1	; 2
    c16e:	81 e0       	ldi	r24, 0x01	; 1
    c170:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    c174:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    c178:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    c17c:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <_Z12BeepCompletev>
    c180:	c5 cf       	rjmp	.-118    	; 0xc10c <_Z17NEW_Cone_Int_Leftv+0x49a>

0000c182 <_Z18NEW_Cone_Ext_Rightv>:
    c182:	8f 92       	push	r8
    c184:	9f 92       	push	r9
    c186:	af 92       	push	r10
    c188:	bf 92       	push	r11
    c18a:	cf 92       	push	r12
    c18c:	df 92       	push	r13
    c18e:	ef 92       	push	r14
    c190:	ff 92       	push	r15
    c192:	cf 93       	push	r28
    c194:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    c198:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    c19c:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    c1a0:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    c1a4:	80 90 f6 09 	lds	r8, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    c1a8:	90 90 f7 09 	lds	r9, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    c1ac:	a0 90 f8 09 	lds	r10, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    c1b0:	b0 90 f9 09 	lds	r11, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    c1b4:	48 15       	cp	r20, r8
    c1b6:	59 05       	cpc	r21, r9
    c1b8:	6a 05       	cpc	r22, r10
    c1ba:	7b 05       	cpc	r23, r11
    c1bc:	09 f0       	breq	.+2      	; 0xc1c0 <_Z18NEW_Cone_Ext_Rightv+0x3e>
    c1be:	e5 c0       	rjmp	.+458    	; 0xc38a <_Z18NEW_Cone_Ext_Rightv+0x208>
    c1c0:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    c1c4:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    c1c8:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    c1cc:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    c1d0:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    c1d4:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    c1d8:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    c1dc:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    c1e0:	c8 16       	cp	r12, r24
    c1e2:	d9 06       	cpc	r13, r25
    c1e4:	ea 06       	cpc	r14, r26
    c1e6:	fb 06       	cpc	r15, r27
    c1e8:	09 f0       	breq	.+2      	; 0xc1ec <_Z18NEW_Cone_Ext_Rightv+0x6a>
    c1ea:	bc c0       	rjmp	.+376    	; 0xc364 <_Z18NEW_Cone_Ext_Rightv+0x1e2>
    c1ec:	f3 99       	sbic	0x1e, 3	; 30
    c1ee:	ba c0       	rjmp	.+372    	; 0xc364 <_Z18NEW_Cone_Ext_Rightv+0x1e2>
    c1f0:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <Cone_qStep>
    c1f4:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    c1f8:	81 11       	cpse	r24, r1
    c1fa:	fb c0       	rjmp	.+502    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c1fc:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    c200:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    c204:	8c 17       	cp	r24, r28
    c206:	08 f4       	brcc	.+2      	; 0xc20a <_Z18NEW_Cone_Ext_Rightv+0x88>
    c208:	f4 c0       	rjmp	.+488    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c20a:	81 e0       	ldi	r24, 0x01	; 1
    c20c:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    c210:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c214:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c218:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    c21c:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    c220:	77 ff       	sbrs	r23, 7
    c222:	02 c0       	rjmp	.+4      	; 0xc228 <_Z18NEW_Cone_Ext_Rightv+0xa6>
    c224:	6f 5f       	subi	r22, 0xFF	; 255
    c226:	7f 4f       	sbci	r23, 0xFF	; 255
    c228:	75 95       	asr	r23
    c22a:	67 95       	ror	r22
    c22c:	07 2e       	mov	r0, r23
    c22e:	00 0c       	add	r0, r0
    c230:	88 0b       	sbc	r24, r24
    c232:	99 0b       	sbc	r25, r25
    c234:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c238:	4b 01       	movw	r8, r22
    c23a:	5c 01       	movw	r10, r24
    c23c:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    c240:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    c244:	07 2e       	mov	r0, r23
    c246:	00 0c       	add	r0, r0
    c248:	88 0b       	sbc	r24, r24
    c24a:	99 0b       	sbc	r25, r25
    c24c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c250:	9b 01       	movw	r18, r22
    c252:	ac 01       	movw	r20, r24
    c254:	c5 01       	movw	r24, r10
    c256:	b4 01       	movw	r22, r8
    c258:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    c25c:	4b 01       	movw	r8, r22
    c25e:	5c 01       	movw	r10, r24
    c260:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    c264:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    c268:	07 2e       	mov	r0, r23
    c26a:	00 0c       	add	r0, r0
    c26c:	88 0b       	sbc	r24, r24
    c26e:	99 0b       	sbc	r25, r25
    c270:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c274:	9b 01       	movw	r18, r22
    c276:	ac 01       	movw	r20, r24
    c278:	c5 01       	movw	r24, r10
    c27a:	b4 01       	movw	r22, r8
    c27c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    c280:	20 e0       	ldi	r18, 0x00	; 0
    c282:	30 e0       	ldi	r19, 0x00	; 0
    c284:	40 e0       	ldi	r20, 0x00	; 0
    c286:	5f e3       	ldi	r21, 0x3F	; 63
    c288:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    c28c:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    c290:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    c294:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    c298:	26 9f       	mul	r18, r22
    c29a:	a0 01       	movw	r20, r0
    c29c:	27 9f       	mul	r18, r23
    c29e:	50 0d       	add	r21, r0
    c2a0:	36 9f       	mul	r19, r22
    c2a2:	50 0d       	add	r21, r0
    c2a4:	11 24       	eor	r1, r1
    c2a6:	05 2e       	mov	r0, r21
    c2a8:	00 0c       	add	r0, r0
    c2aa:	66 0b       	sbc	r22, r22
    c2ac:	77 0b       	sbc	r23, r23
    c2ae:	41 15       	cp	r20, r1
    c2b0:	51 05       	cpc	r21, r1
    c2b2:	61 05       	cpc	r22, r1
    c2b4:	71 05       	cpc	r23, r1
    c2b6:	21 f5       	brne	.+72     	; 0xc300 <_Z18NEW_Cone_Ext_Rightv+0x17e>
    c2b8:	8f ef       	ldi	r24, 0xFF	; 255
    c2ba:	c8 1a       	sub	r12, r24
    c2bc:	d8 0a       	sbc	r13, r24
    c2be:	e8 0a       	sbc	r14, r24
    c2c0:	f8 0a       	sbc	r15, r24
    c2c2:	c1 30       	cpi	r28, 0x01	; 1
    c2c4:	19 f1       	breq	.+70     	; 0xc30c <_Z18NEW_Cone_Ext_Rightv+0x18a>
    c2c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    c2ca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c2ce:	09 2e       	mov	r0, r25
    c2d0:	00 0c       	add	r0, r0
    c2d2:	aa 0b       	sbc	r26, r26
    c2d4:	bb 0b       	sbc	r27, r27
    c2d6:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c2da:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c2de:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c2e2:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c2e6:	84 0f       	add	r24, r20
    c2e8:	95 1f       	adc	r25, r21
    c2ea:	a6 1f       	adc	r26, r22
    c2ec:	b7 1f       	adc	r27, r23
    c2ee:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    c2f2:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    c2f6:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    c2fa:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    c2fe:	0e c0       	rjmp	.+28     	; 0xc31c <_Z18NEW_Cone_Ext_Rightv+0x19a>
    c300:	c1 30       	cpi	r28, 0x01	; 1
    c302:	d9 f4       	brne	.+54     	; 0xc33a <_Z18NEW_Cone_Ext_Rightv+0x1b8>
    c304:	c4 0e       	add	r12, r20
    c306:	d5 1e       	adc	r13, r21
    c308:	e6 1e       	adc	r14, r22
    c30a:	f7 1e       	adc	r15, r23
    c30c:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    c310:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    c314:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    c318:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    c31c:	13 98       	cbi	0x02, 3	; 2
    c31e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    c322:	81 e0       	ldi	r24, 0x01	; 1
    c324:	cf 91       	pop	r28
    c326:	ff 90       	pop	r15
    c328:	ef 90       	pop	r14
    c32a:	df 90       	pop	r13
    c32c:	cf 90       	pop	r12
    c32e:	bf 90       	pop	r11
    c330:	af 90       	pop	r10
    c332:	9f 90       	pop	r9
    c334:	8f 90       	pop	r8
    c336:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    c33a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    c33e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c342:	09 2e       	mov	r0, r25
    c344:	00 0c       	add	r0, r0
    c346:	aa 0b       	sbc	r26, r26
    c348:	bb 0b       	sbc	r27, r27
    c34a:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c34e:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c352:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c356:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c35a:	8c 0d       	add	r24, r12
    c35c:	9d 1d       	adc	r25, r13
    c35e:	ae 1d       	adc	r26, r14
    c360:	bf 1d       	adc	r27, r15
    c362:	c1 cf       	rjmp	.-126    	; 0xc2e6 <_Z18NEW_Cone_Ext_Rightv+0x164>
    c364:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    c368:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    c36c:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    c370:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    c374:	c8 16       	cp	r12, r24
    c376:	d9 06       	cpc	r13, r25
    c378:	ea 06       	cpc	r14, r26
    c37a:	fb 06       	cpc	r15, r27
    c37c:	31 f4       	brne	.+12     	; 0xc38a <_Z18NEW_Cone_Ext_Rightv+0x208>
    c37e:	f6 99       	sbic	0x1e, 6	; 30
    c380:	04 c0       	rjmp	.+8      	; 0xc38a <_Z18NEW_Cone_Ext_Rightv+0x208>
    c382:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    c386:	86 30       	cpi	r24, 0x06	; 6
    c388:	21 f5       	brne	.+72     	; 0xc3d2 <_Z18NEW_Cone_Ext_Rightv+0x250>
    c38a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    c38e:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    c392:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    c396:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    c39a:	48 17       	cp	r20, r24
    c39c:	59 07       	cpc	r21, r25
    c39e:	6a 07       	cpc	r22, r26
    c3a0:	7b 07       	cpc	r23, r27
    c3a2:	09 f0       	breq	.+2      	; 0xc3a6 <_Z18NEW_Cone_Ext_Rightv+0x224>
    c3a4:	81 c0       	rjmp	.+258    	; 0xc4a8 <_Z18NEW_Cone_Ext_Rightv+0x326>
    c3a6:	20 91 df 11 	lds	r18, 0x11DF	; 0x8011df <Cone_qStep>
    c3aa:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    c3ae:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    c3b2:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    c3b6:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    c3ba:	21 30       	cpi	r18, 0x01	; 1
    c3bc:	21 f5       	brne	.+72     	; 0xc406 <_Z18NEW_Cone_Ext_Rightv+0x284>
    c3be:	c0 92 46 12 	sts	0x1246, r12	; 0x801246 <Motor_X_Pos>
    c3c2:	d0 92 47 12 	sts	0x1247, r13	; 0x801247 <Motor_X_Pos+0x1>
    c3c6:	e0 92 48 12 	sts	0x1248, r14	; 0x801248 <Motor_X_Pos+0x2>
    c3ca:	f0 92 49 12 	sts	0x1249, r15	; 0x801249 <Motor_X_Pos+0x3>
    c3ce:	82 e0       	ldi	r24, 0x02	; 2
    c3d0:	0e c0       	rjmp	.+28     	; 0xc3ee <_Z18NEW_Cone_Ext_Rightv+0x26c>
    c3d2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    c3d6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    c3da:	89 17       	cp	r24, r25
    c3dc:	50 f0       	brcs	.+20     	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c3de:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c3e2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c3e6:	81 e0       	ldi	r24, 0x01	; 1
    c3e8:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
    c3ec:	81 e0       	ldi	r24, 0x01	; 1
    c3ee:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    c3f2:	cf 91       	pop	r28
    c3f4:	ff 90       	pop	r15
    c3f6:	ef 90       	pop	r14
    c3f8:	df 90       	pop	r13
    c3fa:	cf 90       	pop	r12
    c3fc:	bf 90       	pop	r11
    c3fe:	af 90       	pop	r10
    c400:	9f 90       	pop	r9
    c402:	8f 90       	pop	r8
    c404:	08 95       	ret
    c406:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    c40a:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    c40e:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    c412:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    c416:	8c 15       	cp	r24, r12
    c418:	9d 05       	cpc	r25, r13
    c41a:	ae 05       	cpc	r26, r14
    c41c:	bf 05       	cpc	r27, r15
    c41e:	11 f5       	brne	.+68     	; 0xc464 <_Z18NEW_Cone_Ext_Rightv+0x2e2>
    c420:	22 30       	cpi	r18, 0x02	; 2
    c422:	01 f5       	brne	.+64     	; 0xc464 <_Z18NEW_Cone_Ext_Rightv+0x2e2>
    c424:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    c428:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c42c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c430:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    c434:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c438:	05 2e       	mov	r0, r21
    c43a:	00 0c       	add	r0, r0
    c43c:	66 0b       	sbc	r22, r22
    c43e:	77 0b       	sbc	r23, r23
    c440:	84 1b       	sub	r24, r20
    c442:	95 0b       	sbc	r25, r21
    c444:	a6 0b       	sbc	r26, r22
    c446:	b7 0b       	sbc	r27, r23
    c448:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    c44c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    c450:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    c454:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    c458:	11 98       	cbi	0x02, 1	; 2
    c45a:	81 e0       	ldi	r24, 0x01	; 1
    c45c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    c460:	83 e0       	ldi	r24, 0x03	; 3
    c462:	c5 cf       	rjmp	.-118    	; 0xc3ee <_Z18NEW_Cone_Ext_Rightv+0x26c>
    c464:	23 30       	cpi	r18, 0x03	; 3
    c466:	01 f5       	brne	.+64     	; 0xc4a8 <_Z18NEW_Cone_Ext_Rightv+0x326>
    c468:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c46c:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c470:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c474:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c478:	84 17       	cp	r24, r20
    c47a:	95 07       	cpc	r25, r21
    c47c:	a6 07       	cpc	r26, r22
    c47e:	b7 07       	cpc	r27, r23
    c480:	09 f0       	breq	.+2      	; 0xc484 <_Z18NEW_Cone_Ext_Rightv+0x302>
    c482:	b7 cf       	rjmp	.-146    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c484:	f6 99       	sbic	0x1e, 6	; 30
    c486:	b5 cf       	rjmp	.-150    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c488:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c48c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c490:	82 e0       	ldi	r24, 0x02	; 2
    c492:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
    c496:	84 e0       	ldi	r24, 0x04	; 4
    c498:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    c49c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    c4a0:	8f 5f       	subi	r24, 0xFF	; 255
    c4a2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    c4a6:	a5 cf       	rjmp	.-182    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c4a8:	48 15       	cp	r20, r8
    c4aa:	59 05       	cpc	r21, r9
    c4ac:	6a 05       	cpc	r22, r10
    c4ae:	7b 05       	cpc	r23, r11
    c4b0:	09 f0       	breq	.+2      	; 0xc4b4 <_Z18NEW_Cone_Ext_Rightv+0x332>
    c4b2:	9f cf       	rjmp	.-194    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c4b4:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    c4b8:	84 30       	cpi	r24, 0x04	; 4
    c4ba:	a1 f4       	brne	.+40     	; 0xc4e4 <_Z18NEW_Cone_Ext_Rightv+0x362>
    c4bc:	f3 99       	sbic	0x1e, 3	; 30
    c4be:	99 cf       	rjmp	.-206    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c4c0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c4c4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c4c8:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c4cc:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c4d0:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    c4d4:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    c4d8:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    c4dc:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    c4e0:	85 e0       	ldi	r24, 0x05	; 5
    c4e2:	85 cf       	rjmp	.-246    	; 0xc3ee <_Z18NEW_Cone_Ext_Rightv+0x26c>
    c4e4:	85 30       	cpi	r24, 0x05	; 5
    c4e6:	09 f0       	breq	.+2      	; 0xc4ea <_Z18NEW_Cone_Ext_Rightv+0x368>
    c4e8:	84 cf       	rjmp	.-248    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c4ea:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    c4ee:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    c4f2:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    c4f6:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    c4fa:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c4fe:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c502:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c506:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c50a:	48 17       	cp	r20, r24
    c50c:	59 07       	cpc	r21, r25
    c50e:	6a 07       	cpc	r22, r26
    c510:	7b 07       	cpc	r23, r27
    c512:	09 f0       	breq	.+2      	; 0xc516 <_Z18NEW_Cone_Ext_Rightv+0x394>
    c514:	6e cf       	rjmp	.-292    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c516:	f3 99       	sbic	0x1e, 3	; 30
    c518:	6c cf       	rjmp	.-296    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c51a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    c51e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c522:	09 2e       	mov	r0, r25
    c524:	00 0c       	add	r0, r0
    c526:	aa 0b       	sbc	r26, r26
    c528:	bb 0b       	sbc	r27, r27
    c52a:	6c 01       	movw	r12, r24
    c52c:	7d 01       	movw	r14, r26
    c52e:	c4 0e       	add	r12, r20
    c530:	d5 1e       	adc	r13, r21
    c532:	e6 1e       	adc	r14, r22
    c534:	f7 1e       	adc	r15, r23
    c536:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    c53a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    c53e:	89 1b       	sub	r24, r25
    c540:	99 0b       	sbc	r25, r25
    c542:	97 fd       	sbrc	r25, 7
    c544:	83 c0       	rjmp	.+262    	; 0xc64c <_Z18NEW_Cone_Ext_Rightv+0x4ca>
    c546:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    c54a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c54e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c552:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    c556:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    c55a:	77 ff       	sbrs	r23, 7
    c55c:	02 c0       	rjmp	.+4      	; 0xc562 <_Z18NEW_Cone_Ext_Rightv+0x3e0>
    c55e:	6f 5f       	subi	r22, 0xFF	; 255
    c560:	7f 4f       	sbci	r23, 0xFF	; 255
    c562:	75 95       	asr	r23
    c564:	67 95       	ror	r22
    c566:	07 2e       	mov	r0, r23
    c568:	00 0c       	add	r0, r0
    c56a:	88 0b       	sbc	r24, r24
    c56c:	99 0b       	sbc	r25, r25
    c56e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c572:	4b 01       	movw	r8, r22
    c574:	5c 01       	movw	r10, r24
    c576:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    c57a:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    c57e:	07 2e       	mov	r0, r23
    c580:	00 0c       	add	r0, r0
    c582:	88 0b       	sbc	r24, r24
    c584:	99 0b       	sbc	r25, r25
    c586:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c58a:	9b 01       	movw	r18, r22
    c58c:	ac 01       	movw	r20, r24
    c58e:	c5 01       	movw	r24, r10
    c590:	b4 01       	movw	r22, r8
    c592:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    c596:	4b 01       	movw	r8, r22
    c598:	5c 01       	movw	r10, r24
    c59a:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    c59e:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    c5a2:	07 2e       	mov	r0, r23
    c5a4:	00 0c       	add	r0, r0
    c5a6:	88 0b       	sbc	r24, r24
    c5a8:	99 0b       	sbc	r25, r25
    c5aa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c5ae:	9b 01       	movw	r18, r22
    c5b0:	ac 01       	movw	r20, r24
    c5b2:	c5 01       	movw	r24, r10
    c5b4:	b4 01       	movw	r22, r8
    c5b6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    c5ba:	20 e0       	ldi	r18, 0x00	; 0
    c5bc:	30 e0       	ldi	r19, 0x00	; 0
    c5be:	40 e0       	ldi	r20, 0x00	; 0
    c5c0:	5f e3       	ldi	r21, 0x3F	; 63
    c5c2:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    c5c6:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    c5ca:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    c5ce:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    c5d2:	26 9f       	mul	r18, r22
    c5d4:	a0 01       	movw	r20, r0
    c5d6:	27 9f       	mul	r18, r23
    c5d8:	50 0d       	add	r21, r0
    c5da:	36 9f       	mul	r19, r22
    c5dc:	50 0d       	add	r21, r0
    c5de:	11 24       	eor	r1, r1
    c5e0:	ca 01       	movw	r24, r20
    c5e2:	55 0f       	add	r21, r21
    c5e4:	aa 0b       	sbc	r26, r26
    c5e6:	bb 0b       	sbc	r27, r27
    c5e8:	8c 0d       	add	r24, r12
    c5ea:	9d 1d       	adc	r25, r13
    c5ec:	ae 1d       	adc	r26, r14
    c5ee:	bf 1d       	adc	r27, r15
    c5f0:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    c5f4:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    c5f8:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    c5fc:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    c600:	13 98       	cbi	0x02, 3	; 2
    c602:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    c606:	81 e0       	ldi	r24, 0x01	; 1
    c608:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    c60c:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    c610:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    c614:	86 30       	cpi	r24, 0x06	; 6
    c616:	09 f0       	breq	.+2      	; 0xc61a <_Z18NEW_Cone_Ext_Rightv+0x498>
    c618:	ec ce       	rjmp	.-552    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c61a:	80 e0       	ldi	r24, 0x00	; 0
    c61c:	90 e0       	ldi	r25, 0x00	; 0
    c61e:	a0 e0       	ldi	r26, 0x00	; 0
    c620:	b0 e4       	ldi	r27, 0x40	; 64
    c622:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    c626:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    c62a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    c62e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    c632:	80 e0       	ldi	r24, 0x00	; 0
    c634:	90 e0       	ldi	r25, 0x00	; 0
    c636:	a0 e0       	ldi	r26, 0x00	; 0
    c638:	b0 ec       	ldi	r27, 0xC0	; 192
    c63a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    c63e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    c642:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    c646:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    c64a:	d3 ce       	rjmp	.-602    	; 0xc3f2 <_Z18NEW_Cone_Ext_Rightv+0x270>
    c64c:	86 e0       	ldi	r24, 0x06	; 6
    c64e:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    c652:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c656:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c65a:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    c65e:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    c662:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    c666:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    c66a:	13 9a       	sbi	0x02, 3	; 2
    c66c:	11 9a       	sbi	0x02, 1	; 2
    c66e:	81 e0       	ldi	r24, 0x01	; 1
    c670:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    c674:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    c678:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    c67c:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <_Z12BeepCompletev>
    c680:	c5 cf       	rjmp	.-118    	; 0xc60c <_Z18NEW_Cone_Ext_Rightv+0x48a>

0000c682 <_Z17NEW_Cone_Ext_Leftv>:
    c682:	8f 92       	push	r8
    c684:	9f 92       	push	r9
    c686:	af 92       	push	r10
    c688:	bf 92       	push	r11
    c68a:	cf 92       	push	r12
    c68c:	df 92       	push	r13
    c68e:	ef 92       	push	r14
    c690:	ff 92       	push	r15
    c692:	cf 93       	push	r28
    c694:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    c698:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    c69c:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    c6a0:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    c6a4:	80 90 c3 04 	lds	r8, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    c6a8:	90 90 c4 04 	lds	r9, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    c6ac:	a0 90 c5 04 	lds	r10, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    c6b0:	b0 90 c6 04 	lds	r11, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    c6b4:	48 15       	cp	r20, r8
    c6b6:	59 05       	cpc	r21, r9
    c6b8:	6a 05       	cpc	r22, r10
    c6ba:	7b 05       	cpc	r23, r11
    c6bc:	09 f0       	breq	.+2      	; 0xc6c0 <_Z17NEW_Cone_Ext_Leftv+0x3e>
    c6be:	e5 c0       	rjmp	.+458    	; 0xc88a <_Z17NEW_Cone_Ext_Leftv+0x208>
    c6c0:	c0 90 46 12 	lds	r12, 0x1246	; 0x801246 <Motor_X_Pos>
    c6c4:	d0 90 47 12 	lds	r13, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    c6c8:	e0 90 48 12 	lds	r14, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    c6cc:	f0 90 49 12 	lds	r15, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    c6d0:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
    c6d4:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    c6d8:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    c6dc:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    c6e0:	c8 16       	cp	r12, r24
    c6e2:	d9 06       	cpc	r13, r25
    c6e4:	ea 06       	cpc	r14, r26
    c6e6:	fb 06       	cpc	r15, r27
    c6e8:	09 f0       	breq	.+2      	; 0xc6ec <_Z17NEW_Cone_Ext_Leftv+0x6a>
    c6ea:	bc c0       	rjmp	.+376    	; 0xc864 <_Z17NEW_Cone_Ext_Leftv+0x1e2>
    c6ec:	f3 99       	sbic	0x1e, 3	; 30
    c6ee:	ba c0       	rjmp	.+372    	; 0xc864 <_Z17NEW_Cone_Ext_Leftv+0x1e2>
    c6f0:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <Cone_qStep>
    c6f4:	80 91 26 12 	lds	r24, 0x1226	; 0x801226 <cycle_flag>
    c6f8:	81 11       	cpse	r24, r1
    c6fa:	fb c0       	rjmp	.+502    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c6fc:	c0 91 22 02 	lds	r28, 0x0222	; 0x800222 <Pass_Nr>
    c700:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    c704:	8c 17       	cp	r24, r28
    c706:	08 f4       	brcc	.+2      	; 0xc70a <_Z17NEW_Cone_Ext_Leftv+0x88>
    c708:	f4 c0       	rjmp	.+488    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c70a:	81 e0       	ldi	r24, 0x01	; 1
    c70c:	80 93 26 12 	sts	0x1226, r24	; 0x801226 <cycle_flag>
    c710:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c714:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c718:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    c71c:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    c720:	77 ff       	sbrs	r23, 7
    c722:	02 c0       	rjmp	.+4      	; 0xc728 <_Z17NEW_Cone_Ext_Leftv+0xa6>
    c724:	6f 5f       	subi	r22, 0xFF	; 255
    c726:	7f 4f       	sbci	r23, 0xFF	; 255
    c728:	75 95       	asr	r23
    c72a:	67 95       	ror	r22
    c72c:	07 2e       	mov	r0, r23
    c72e:	00 0c       	add	r0, r0
    c730:	88 0b       	sbc	r24, r24
    c732:	99 0b       	sbc	r25, r25
    c734:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c738:	4b 01       	movw	r8, r22
    c73a:	5c 01       	movw	r10, r24
    c73c:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    c740:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    c744:	07 2e       	mov	r0, r23
    c746:	00 0c       	add	r0, r0
    c748:	88 0b       	sbc	r24, r24
    c74a:	99 0b       	sbc	r25, r25
    c74c:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c750:	9b 01       	movw	r18, r22
    c752:	ac 01       	movw	r20, r24
    c754:	c5 01       	movw	r24, r10
    c756:	b4 01       	movw	r22, r8
    c758:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    c75c:	4b 01       	movw	r8, r22
    c75e:	5c 01       	movw	r10, r24
    c760:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    c764:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    c768:	07 2e       	mov	r0, r23
    c76a:	00 0c       	add	r0, r0
    c76c:	88 0b       	sbc	r24, r24
    c76e:	99 0b       	sbc	r25, r25
    c770:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    c774:	9b 01       	movw	r18, r22
    c776:	ac 01       	movw	r20, r24
    c778:	c5 01       	movw	r24, r10
    c77a:	b4 01       	movw	r22, r8
    c77c:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    c780:	20 e0       	ldi	r18, 0x00	; 0
    c782:	30 e0       	ldi	r19, 0x00	; 0
    c784:	40 e0       	ldi	r20, 0x00	; 0
    c786:	5f e3       	ldi	r21, 0x3F	; 63
    c788:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    c78c:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    c790:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    c794:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    c798:	26 9f       	mul	r18, r22
    c79a:	a0 01       	movw	r20, r0
    c79c:	27 9f       	mul	r18, r23
    c79e:	50 0d       	add	r21, r0
    c7a0:	36 9f       	mul	r19, r22
    c7a2:	50 0d       	add	r21, r0
    c7a4:	11 24       	eor	r1, r1
    c7a6:	05 2e       	mov	r0, r21
    c7a8:	00 0c       	add	r0, r0
    c7aa:	66 0b       	sbc	r22, r22
    c7ac:	77 0b       	sbc	r23, r23
    c7ae:	41 15       	cp	r20, r1
    c7b0:	51 05       	cpc	r21, r1
    c7b2:	61 05       	cpc	r22, r1
    c7b4:	71 05       	cpc	r23, r1
    c7b6:	21 f5       	brne	.+72     	; 0xc800 <_Z17NEW_Cone_Ext_Leftv+0x17e>
    c7b8:	8f ef       	ldi	r24, 0xFF	; 255
    c7ba:	c8 1a       	sub	r12, r24
    c7bc:	d8 0a       	sbc	r13, r24
    c7be:	e8 0a       	sbc	r14, r24
    c7c0:	f8 0a       	sbc	r15, r24
    c7c2:	c1 30       	cpi	r28, 0x01	; 1
    c7c4:	19 f1       	breq	.+70     	; 0xc80c <_Z17NEW_Cone_Ext_Leftv+0x18a>
    c7c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    c7ca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c7ce:	09 2e       	mov	r0, r25
    c7d0:	00 0c       	add	r0, r0
    c7d2:	aa 0b       	sbc	r26, r26
    c7d4:	bb 0b       	sbc	r27, r27
    c7d6:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c7da:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c7de:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c7e2:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c7e6:	84 0f       	add	r24, r20
    c7e8:	95 1f       	adc	r25, r21
    c7ea:	a6 1f       	adc	r26, r22
    c7ec:	b7 1f       	adc	r27, r23
    c7ee:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    c7f2:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    c7f6:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    c7fa:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    c7fe:	0e c0       	rjmp	.+28     	; 0xc81c <_Z17NEW_Cone_Ext_Leftv+0x19a>
    c800:	c1 30       	cpi	r28, 0x01	; 1
    c802:	d9 f4       	brne	.+54     	; 0xc83a <_Z17NEW_Cone_Ext_Leftv+0x1b8>
    c804:	c4 0e       	add	r12, r20
    c806:	d5 1e       	adc	r13, r21
    c808:	e6 1e       	adc	r14, r22
    c80a:	f7 1e       	adc	r15, r23
    c80c:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    c810:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    c814:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    c818:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    c81c:	13 98       	cbi	0x02, 3	; 2
    c81e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    c822:	81 e0       	ldi	r24, 0x01	; 1
    c824:	cf 91       	pop	r28
    c826:	ff 90       	pop	r15
    c828:	ef 90       	pop	r14
    c82a:	df 90       	pop	r13
    c82c:	cf 90       	pop	r12
    c82e:	bf 90       	pop	r11
    c830:	af 90       	pop	r10
    c832:	9f 90       	pop	r9
    c834:	8f 90       	pop	r8
    c836:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    c83a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    c83e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c842:	09 2e       	mov	r0, r25
    c844:	00 0c       	add	r0, r0
    c846:	aa 0b       	sbc	r26, r26
    c848:	bb 0b       	sbc	r27, r27
    c84a:	c0 90 ba 04 	lds	r12, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c84e:	d0 90 bb 04 	lds	r13, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c852:	e0 90 bc 04 	lds	r14, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c856:	f0 90 bd 04 	lds	r15, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c85a:	8c 0d       	add	r24, r12
    c85c:	9d 1d       	adc	r25, r13
    c85e:	ae 1d       	adc	r26, r14
    c860:	bf 1d       	adc	r27, r15
    c862:	c1 cf       	rjmp	.-126    	; 0xc7e6 <_Z17NEW_Cone_Ext_Leftv+0x164>
    c864:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    c868:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    c86c:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    c870:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    c874:	c8 16       	cp	r12, r24
    c876:	d9 06       	cpc	r13, r25
    c878:	ea 06       	cpc	r14, r26
    c87a:	fb 06       	cpc	r15, r27
    c87c:	31 f4       	brne	.+12     	; 0xc88a <_Z17NEW_Cone_Ext_Leftv+0x208>
    c87e:	f6 99       	sbic	0x1e, 6	; 30
    c880:	04 c0       	rjmp	.+8      	; 0xc88a <_Z17NEW_Cone_Ext_Leftv+0x208>
    c882:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    c886:	86 30       	cpi	r24, 0x06	; 6
    c888:	21 f5       	brne	.+72     	; 0xc8d2 <_Z17NEW_Cone_Ext_Leftv+0x250>
    c88a:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    c88e:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    c892:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    c896:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    c89a:	48 17       	cp	r20, r24
    c89c:	59 07       	cpc	r21, r25
    c89e:	6a 07       	cpc	r22, r26
    c8a0:	7b 07       	cpc	r23, r27
    c8a2:	09 f0       	breq	.+2      	; 0xc8a6 <_Z17NEW_Cone_Ext_Leftv+0x224>
    c8a4:	81 c0       	rjmp	.+258    	; 0xc9a8 <_Z17NEW_Cone_Ext_Leftv+0x326>
    c8a6:	20 91 df 11 	lds	r18, 0x11DF	; 0x8011df <Cone_qStep>
    c8aa:	c0 90 bf 04 	lds	r12, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    c8ae:	d0 90 c0 04 	lds	r13, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    c8b2:	e0 90 c1 04 	lds	r14, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    c8b6:	f0 90 c2 04 	lds	r15, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    c8ba:	21 30       	cpi	r18, 0x01	; 1
    c8bc:	21 f5       	brne	.+72     	; 0xc906 <_Z17NEW_Cone_Ext_Leftv+0x284>
    c8be:	c0 92 46 12 	sts	0x1246, r12	; 0x801246 <Motor_X_Pos>
    c8c2:	d0 92 47 12 	sts	0x1247, r13	; 0x801247 <Motor_X_Pos+0x1>
    c8c6:	e0 92 48 12 	sts	0x1248, r14	; 0x801248 <Motor_X_Pos+0x2>
    c8ca:	f0 92 49 12 	sts	0x1249, r15	; 0x801249 <Motor_X_Pos+0x3>
    c8ce:	82 e0       	ldi	r24, 0x02	; 2
    c8d0:	0e c0       	rjmp	.+28     	; 0xc8ee <_Z17NEW_Cone_Ext_Leftv+0x26c>
    c8d2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    c8d6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    c8da:	89 17       	cp	r24, r25
    c8dc:	50 f0       	brcs	.+20     	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c8de:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c8e2:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c8e6:	81 e0       	ldi	r24, 0x01	; 1
    c8e8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
    c8ec:	81 e0       	ldi	r24, 0x01	; 1
    c8ee:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    c8f2:	cf 91       	pop	r28
    c8f4:	ff 90       	pop	r15
    c8f6:	ef 90       	pop	r14
    c8f8:	df 90       	pop	r13
    c8fa:	cf 90       	pop	r12
    c8fc:	bf 90       	pop	r11
    c8fe:	af 90       	pop	r10
    c900:	9f 90       	pop	r9
    c902:	8f 90       	pop	r8
    c904:	08 95       	ret
    c906:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    c90a:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    c90e:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    c912:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    c916:	8c 15       	cp	r24, r12
    c918:	9d 05       	cpc	r25, r13
    c91a:	ae 05       	cpc	r26, r14
    c91c:	bf 05       	cpc	r27, r15
    c91e:	11 f5       	brne	.+68     	; 0xc964 <_Z17NEW_Cone_Ext_Leftv+0x2e2>
    c920:	22 30       	cpi	r18, 0x02	; 2
    c922:	01 f5       	brne	.+64     	; 0xc964 <_Z17NEW_Cone_Ext_Leftv+0x2e2>
    c924:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    c928:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c92c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c930:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <REBOUND_X>
    c934:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <REBOUND_X+0x1>
    c938:	05 2e       	mov	r0, r21
    c93a:	00 0c       	add	r0, r0
    c93c:	66 0b       	sbc	r22, r22
    c93e:	77 0b       	sbc	r23, r23
    c940:	84 1b       	sub	r24, r20
    c942:	95 0b       	sbc	r25, r21
    c944:	a6 0b       	sbc	r26, r22
    c946:	b7 0b       	sbc	r27, r23
    c948:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    c94c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    c950:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    c954:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    c958:	11 98       	cbi	0x02, 1	; 2
    c95a:	81 e0       	ldi	r24, 0x01	; 1
    c95c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
    c960:	83 e0       	ldi	r24, 0x03	; 3
    c962:	c5 cf       	rjmp	.-118    	; 0xc8ee <_Z17NEW_Cone_Ext_Leftv+0x26c>
    c964:	23 30       	cpi	r18, 0x03	; 3
    c966:	01 f5       	brne	.+64     	; 0xc9a8 <_Z17NEW_Cone_Ext_Leftv+0x326>
    c968:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c96c:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c970:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c974:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c978:	84 17       	cp	r24, r20
    c97a:	95 07       	cpc	r25, r21
    c97c:	a6 07       	cpc	r26, r22
    c97e:	b7 07       	cpc	r27, r23
    c980:	09 f0       	breq	.+2      	; 0xc984 <_Z17NEW_Cone_Ext_Leftv+0x302>
    c982:	b7 cf       	rjmp	.-146    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c984:	f6 99       	sbic	0x1e, 6	; 30
    c986:	b5 cf       	rjmp	.-150    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c988:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    c98c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    c990:	82 e0       	ldi	r24, 0x02	; 2
    c992:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
    c996:	84 e0       	ldi	r24, 0x04	; 4
    c998:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    c99c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Pass_Nr>
    c9a0:	8f 5f       	subi	r24, 0xFF	; 255
    c9a2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    c9a6:	a5 cf       	rjmp	.-182    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c9a8:	48 15       	cp	r20, r8
    c9aa:	59 05       	cpc	r21, r9
    c9ac:	6a 05       	cpc	r22, r10
    c9ae:	7b 05       	cpc	r23, r11
    c9b0:	09 f0       	breq	.+2      	; 0xc9b4 <_Z17NEW_Cone_Ext_Leftv+0x332>
    c9b2:	9f cf       	rjmp	.-194    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c9b4:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    c9b8:	84 30       	cpi	r24, 0x04	; 4
    c9ba:	a1 f4       	brne	.+40     	; 0xc9e4 <_Z17NEW_Cone_Ext_Leftv+0x362>
    c9bc:	f3 99       	sbic	0x1e, 3	; 30
    c9be:	99 cf       	rjmp	.-206    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c9c0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c9c4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    c9c8:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    c9cc:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    c9d0:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    c9d4:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    c9d8:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    c9dc:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    c9e0:	85 e0       	ldi	r24, 0x05	; 5
    c9e2:	85 cf       	rjmp	.-246    	; 0xc8ee <_Z17NEW_Cone_Ext_Leftv+0x26c>
    c9e4:	85 30       	cpi	r24, 0x05	; 5
    c9e6:	09 f0       	breq	.+2      	; 0xc9ea <_Z17NEW_Cone_Ext_Leftv+0x368>
    c9e8:	84 cf       	rjmp	.-248    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    c9ea:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    c9ee:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    c9f2:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    c9f6:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    c9fa:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    c9fe:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    ca02:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    ca06:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    ca0a:	48 17       	cp	r20, r24
    ca0c:	59 07       	cpc	r21, r25
    ca0e:	6a 07       	cpc	r22, r26
    ca10:	7b 07       	cpc	r23, r27
    ca12:	09 f0       	breq	.+2      	; 0xca16 <_Z17NEW_Cone_Ext_Leftv+0x394>
    ca14:	6e cf       	rjmp	.-292    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    ca16:	f3 99       	sbic	0x1e, 3	; 30
    ca18:	6c cf       	rjmp	.-296    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    ca1a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    ca1e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <REBOUND_X+0x1>
    ca22:	09 2e       	mov	r0, r25
    ca24:	00 0c       	add	r0, r0
    ca26:	aa 0b       	sbc	r26, r26
    ca28:	bb 0b       	sbc	r27, r27
    ca2a:	6c 01       	movw	r12, r24
    ca2c:	7d 01       	movw	r14, r26
    ca2e:	c4 0e       	add	r12, r20
    ca30:	d5 1e       	adc	r13, r21
    ca32:	e6 1e       	adc	r14, r22
    ca34:	f7 1e       	adc	r15, r23
    ca36:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Pass_Total>
    ca3a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Pass_Nr>
    ca3e:	89 1b       	sub	r24, r25
    ca40:	99 0b       	sbc	r25, r25
    ca42:	97 fd       	sbrc	r25, 7
    ca44:	83 c0       	rjmp	.+262    	; 0xcb4c <_Z17NEW_Cone_Ext_Leftv+0x4ca>
    ca46:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
    ca4a:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    ca4e:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    ca52:	60 91 dd 11 	lds	r22, 0x11DD	; 0x8011dd <Ap>
    ca56:	70 91 de 11 	lds	r23, 0x11DE	; 0x8011de <Ap+0x1>
    ca5a:	77 ff       	sbrs	r23, 7
    ca5c:	02 c0       	rjmp	.+4      	; 0xca62 <_Z17NEW_Cone_Ext_Leftv+0x3e0>
    ca5e:	6f 5f       	subi	r22, 0xFF	; 255
    ca60:	7f 4f       	sbci	r23, 0xFF	; 255
    ca62:	75 95       	asr	r23
    ca64:	67 95       	ror	r22
    ca66:	07 2e       	mov	r0, r23
    ca68:	00 0c       	add	r0, r0
    ca6a:	88 0b       	sbc	r24, r24
    ca6c:	99 0b       	sbc	r25, r25
    ca6e:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    ca72:	4b 01       	movw	r8, r22
    ca74:	5c 01       	movw	r10, r24
    ca76:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    ca7a:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    ca7e:	07 2e       	mov	r0, r23
    ca80:	00 0c       	add	r0, r0
    ca82:	88 0b       	sbc	r24, r24
    ca84:	99 0b       	sbc	r25, r25
    ca86:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    ca8a:	9b 01       	movw	r18, r22
    ca8c:	ac 01       	movw	r20, r24
    ca8e:	c5 01       	movw	r24, r10
    ca90:	b4 01       	movw	r22, r8
    ca92:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    ca96:	4b 01       	movw	r8, r22
    ca98:	5c 01       	movw	r10, r24
    ca9a:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    ca9e:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    caa2:	07 2e       	mov	r0, r23
    caa4:	00 0c       	add	r0, r0
    caa6:	88 0b       	sbc	r24, r24
    caa8:	99 0b       	sbc	r25, r25
    caaa:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    caae:	9b 01       	movw	r18, r22
    cab0:	ac 01       	movw	r20, r24
    cab2:	c5 01       	movw	r24, r10
    cab4:	b4 01       	movw	r22, r8
    cab6:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    caba:	20 e0       	ldi	r18, 0x00	; 0
    cabc:	30 e0       	ldi	r19, 0x00	; 0
    cabe:	40 e0       	ldi	r20, 0x00	; 0
    cac0:	5f e3       	ldi	r21, 0x3F	; 63
    cac2:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    cac6:	0e 94 2e 96 	call	0x12c5c	; 0x12c5c <__fixsfsi>
    caca:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
    cace:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    cad2:	26 9f       	mul	r18, r22
    cad4:	a0 01       	movw	r20, r0
    cad6:	27 9f       	mul	r18, r23
    cad8:	50 0d       	add	r21, r0
    cada:	36 9f       	mul	r19, r22
    cadc:	50 0d       	add	r21, r0
    cade:	11 24       	eor	r1, r1
    cae0:	ca 01       	movw	r24, r20
    cae2:	55 0f       	add	r21, r21
    cae4:	aa 0b       	sbc	r26, r26
    cae6:	bb 0b       	sbc	r27, r27
    cae8:	8c 0d       	add	r24, r12
    caea:	9d 1d       	adc	r25, r13
    caec:	ae 1d       	adc	r26, r14
    caee:	bf 1d       	adc	r27, r15
    caf0:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    caf4:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    caf8:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    cafc:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    cb00:	13 98       	cbi	0x02, 3	; 2
    cb02:	81 e0       	ldi	r24, 0x01	; 1
    cb04:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    cb08:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    cb0c:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
    cb10:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <Cone_qStep>
    cb14:	86 30       	cpi	r24, 0x06	; 6
    cb16:	09 f0       	breq	.+2      	; 0xcb1a <_Z17NEW_Cone_Ext_Leftv+0x498>
    cb18:	ec ce       	rjmp	.-552    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    cb1a:	80 e0       	ldi	r24, 0x00	; 0
    cb1c:	90 e0       	ldi	r25, 0x00	; 0
    cb1e:	a0 e0       	ldi	r26, 0x00	; 0
    cb20:	b0 e4       	ldi	r27, 0x40	; 64
    cb22:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
    cb26:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
    cb2a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
    cb2e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
    cb32:	80 e0       	ldi	r24, 0x00	; 0
    cb34:	90 e0       	ldi	r25, 0x00	; 0
    cb36:	a0 e0       	ldi	r26, 0x00	; 0
    cb38:	b0 ec       	ldi	r27, 0xC0	; 192
    cb3a:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
    cb3e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
    cb42:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
    cb46:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
    cb4a:	d3 ce       	rjmp	.-602    	; 0xc8f2 <_Z17NEW_Cone_Ext_Leftv+0x270>
    cb4c:	86 e0       	ldi	r24, 0x06	; 6
    cb4e:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <Cone_qStep>
    cb52:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
    cb56:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
    cb5a:	c0 92 bf 04 	sts	0x04BF, r12	; 0x8004bf <Limit_Pos_Front>
    cb5e:	d0 92 c0 04 	sts	0x04C0, r13	; 0x8004c0 <Limit_Pos_Front+0x1>
    cb62:	e0 92 c1 04 	sts	0x04C1, r14	; 0x8004c1 <Limit_Pos_Front+0x2>
    cb66:	f0 92 c2 04 	sts	0x04C2, r15	; 0x8004c2 <Limit_Pos_Front+0x3>
    cb6a:	13 9a       	sbi	0x02, 3	; 2
    cb6c:	11 9a       	sbi	0x02, 1	; 2
    cb6e:	81 e0       	ldi	r24, 0x01	; 1
    cb70:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Pass_Total>
    cb74:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Pass_Nr>
    cb78:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
    cb7c:	0e 94 b6 4d 	call	0x9b6c	; 0x9b6c <_Z12BeepCompletev>
    cb80:	c5 cf       	rjmp	.-118    	; 0xcb0c <_Z17NEW_Cone_Ext_Leftv+0x48a>

0000cb82 <_Z11Setup_Printv>:
    cb82:	8f 92       	push	r8
    cb84:	9f 92       	push	r9
    cb86:	af 92       	push	r10
    cb88:	bf 92       	push	r11
    cb8a:	cf 92       	push	r12
    cb8c:	df 92       	push	r13
    cb8e:	ef 92       	push	r14
    cb90:	ff 92       	push	r15
    cb92:	0f 93       	push	r16
    cb94:	1f 93       	push	r17
    cb96:	cf 93       	push	r28
    cb98:	df 93       	push	r29
    cb9a:	cd b7       	in	r28, 0x3d	; 61
    cb9c:	de b7       	in	r29, 0x3e	; 62
    cb9e:	e3 97       	sbiw	r28, 0x33	; 51
    cba0:	0f b6       	in	r0, 0x3f	; 63
    cba2:	f8 94       	cli
    cba4:	de bf       	out	0x3e, r29	; 62
    cba6:	0f be       	out	0x3f, r0	; 63
    cba8:	cd bf       	out	0x3d, r28	; 61
    cbaa:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37>
    cbae:	60 e0       	ldi	r22, 0x00	; 0
    cbb0:	80 e0       	ldi	r24, 0x00	; 0
    cbb2:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cbb6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SETUP_MODE>
    cbba:	81 30       	cpi	r24, 0x01	; 1
    cbbc:	09 f0       	breq	.+2      	; 0xcbc0 <_Z11Setup_Printv+0x3e>
    cbbe:	d9 c2       	rjmp	.+1458   	; 0xd172 <_Z11Setup_Printv+0x5f0>
    cbc0:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <bModeParameters>
    cbc4:	81 11       	cpse	r24, r1
    cbc6:	0d c0       	rjmp	.+26     	; 0xcbe2 <_Z11Setup_Printv+0x60>
    cbc8:	8f e0       	ldi	r24, 0x0F	; 15
    cbca:	9e e0       	ldi	r25, 0x0E	; 14
    cbcc:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cbd0:	61 e0       	ldi	r22, 0x01	; 1
    cbd2:	80 e0       	ldi	r24, 0x00	; 0
    cbd4:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cbd8:	8d ef       	ldi	r24, 0xFD	; 253
    cbda:	9d e0       	ldi	r25, 0x0D	; 13
    cbdc:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cbe0:	6e c0       	rjmp	.+220    	; 0xccbe <_Z11Setup_Printv+0x13c>
    cbe2:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    cbe6:	9e 01       	movw	r18, r28
    cbe8:	2d 5d       	subi	r18, 0xDD	; 221
    cbea:	3f 4f       	sbci	r19, 0xFF	; 255
    cbec:	79 01       	movw	r14, r18
    cbee:	81 11       	cpse	r24, r1
    cbf0:	2e c0       	rjmp	.+92     	; 0xcc4e <_Z11Setup_Printv+0xcc>
    cbf2:	6c ee       	ldi	r22, 0xEC	; 236
    cbf4:	7d e0       	ldi	r23, 0x0D	; 13
    cbf6:	c9 01       	movw	r24, r18
    cbf8:	0e 94 fe 98 	call	0x131fc	; 0x131fc <strcpy>
    cbfc:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <SETUP_ID>
    cc00:	e1 50       	subi	r30, 0x01	; 1
    cc02:	e9 31       	cpi	r30, 0x19	; 25
    cc04:	08 f0       	brcs	.+2      	; 0xcc08 <_Z11Setup_Printv+0x86>
    cc06:	5b c0       	rjmp	.+182    	; 0xccbe <_Z11Setup_Printv+0x13c>
    cc08:	f0 e0       	ldi	r31, 0x00	; 0
    cc0a:	8e 01       	movw	r16, r28
    cc0c:	0e 5e       	subi	r16, 0xEE	; 238
    cc0e:	1f 4f       	sbci	r17, 0xFF	; 255
    cc10:	88 27       	eor	r24, r24
    cc12:	e2 5f       	subi	r30, 0xF2	; 242
    cc14:	f9 49       	sbci	r31, 0x99	; 153
    cc16:	8f 4f       	sbci	r24, 0xFF	; 255
    cc18:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
    cc1c:	3c 66       	ori	r19, 0x6C	; 108
    cc1e:	72 66       	ori	r23, 0x62	; 98
    cc20:	82 66       	ori	r24, 0x62	; 98
    cc22:	92 66       	ori	r25, 0x62	; 98
    cc24:	a2 66       	ori	r26, 0x62	; 98
    cc26:	b2 66       	ori	r27, 0x62	; 98
    cc28:	c2 66       	ori	r28, 0x62	; 98
    cc2a:	d2 66       	ori	r29, 0x62	; 98
    cc2c:	e2 66       	ori	r30, 0x62	; 98
    cc2e:	f2 66       	ori	r31, 0x62	; 98
    cc30:	00 67       	ori	r16, 0x70	; 112
    cc32:	10 67       	ori	r17, 0x70	; 112
    cc34:	20 67       	ori	r18, 0x70	; 112
    cc36:	30 67       	ori	r19, 0x70	; 112
    cc38:	40 67       	ori	r20, 0x70	; 112
    cc3a:	50 67       	ori	r21, 0x70	; 112
    cc3c:	d4 67       	ori	r29, 0x74	; 116
    cc3e:	eb 67       	ori	r30, 0x7B	; 123
    cc40:	fb 67       	ori	r31, 0x7B	; 123
    cc42:	0b 68       	ori	r16, 0x8B	; 139
    cc44:	1b 68       	ori	r17, 0x8B	; 139
    cc46:	4d 68       	ori	r20, 0x8D	; 141
    cc48:	64 68       	ori	r22, 0x84	; 132
    cc4a:	7b 68       	ori	r23, 0x8B	; 139
    cc4c:	ac 68       	ori	r26, 0x8C	; 140
    cc4e:	8a ed       	ldi	r24, 0xDA	; 218
    cc50:	9d e0       	ldi	r25, 0x0D	; 13
    cc52:	9f 93       	push	r25
    cc54:	8f 93       	push	r24
    cc56:	81 e7       	ldi	r24, 0x71	; 113
    cc58:	9e e0       	ldi	r25, 0x0E	; 14
    cc5a:	9f 93       	push	r25
    cc5c:	8f 93       	push	r24
    cc5e:	1f 92       	push	r1
    cc60:	81 e1       	ldi	r24, 0x11	; 17
    cc62:	8f 93       	push	r24
    cc64:	ff 92       	push	r15
    cc66:	2f 93       	push	r18
    cc68:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    cc6c:	0f b6       	in	r0, 0x3f	; 63
    cc6e:	f8 94       	cli
    cc70:	de bf       	out	0x3e, r29	; 62
    cc72:	0f be       	out	0x3f, r0	; 63
    cc74:	cd bf       	out	0x3d, r28	; 61
    cc76:	c2 cf       	rjmp	.-124    	; 0xcbfc <_Z11Setup_Printv+0x7a>
    cc78:	88 ee       	ldi	r24, 0xE8	; 232
    cc7a:	9e e0       	ldi	r25, 0x0E	; 14
    cc7c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cc80:	61 e0       	ldi	r22, 0x01	; 1
    cc82:	80 e0       	ldi	r24, 0x00	; 0
    cc84:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cc88:	ff 92       	push	r15
    cc8a:	ef 92       	push	r14
    cc8c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    cc90:	8f 93       	push	r24
    cc92:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    cc96:	8f 93       	push	r24
    cc98:	89 ef       	ldi	r24, 0xF9	; 249
    cc9a:	9e e0       	ldi	r25, 0x0E	; 14
    cc9c:	9f 93       	push	r25
    cc9e:	8f 93       	push	r24
    cca0:	1f 92       	push	r1
    cca2:	81 e1       	ldi	r24, 0x11	; 17
    cca4:	8f 93       	push	r24
    cca6:	1f 93       	push	r17
    cca8:	0f 93       	push	r16
    ccaa:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    ccae:	c8 01       	movw	r24, r16
    ccb0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ccb4:	0f b6       	in	r0, 0x3f	; 63
    ccb6:	f8 94       	cli
    ccb8:	de bf       	out	0x3e, r29	; 62
    ccba:	0f be       	out	0x3f, r0	; 63
    ccbc:	cd bf       	out	0x3d, r28	; 61
    ccbe:	e3 96       	adiw	r28, 0x33	; 51
    ccc0:	0f b6       	in	r0, 0x3f	; 63
    ccc2:	f8 94       	cli
    ccc4:	de bf       	out	0x3e, r29	; 62
    ccc6:	0f be       	out	0x3f, r0	; 63
    ccc8:	cd bf       	out	0x3d, r28	; 61
    ccca:	df 91       	pop	r29
    cccc:	cf 91       	pop	r28
    ccce:	1f 91       	pop	r17
    ccd0:	0f 91       	pop	r16
    ccd2:	ff 90       	pop	r15
    ccd4:	ef 90       	pop	r14
    ccd6:	df 90       	pop	r13
    ccd8:	cf 90       	pop	r12
    ccda:	bf 90       	pop	r11
    ccdc:	af 90       	pop	r10
    ccde:	9f 90       	pop	r9
    cce0:	8f 90       	pop	r8
    cce2:	08 95       	ret
    cce4:	8e ef       	ldi	r24, 0xFE	; 254
    cce6:	9e e0       	ldi	r25, 0x0E	; 14
    cce8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ccec:	61 e0       	ldi	r22, 0x01	; 1
    ccee:	80 e0       	ldi	r24, 0x00	; 0
    ccf0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ccf4:	ff 92       	push	r15
    ccf6:	ef 92       	push	r14
    ccf8:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    ccfc:	8f 93       	push	r24
    ccfe:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    cd02:	c9 cf       	rjmp	.-110    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cd04:	8f e0       	ldi	r24, 0x0F	; 15
    cd06:	9f e0       	ldi	r25, 0x0F	; 15
    cd08:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cd0c:	61 e0       	ldi	r22, 0x01	; 1
    cd0e:	80 e0       	ldi	r24, 0x00	; 0
    cd10:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cd14:	ff 92       	push	r15
    cd16:	ef 92       	push	r14
    cd18:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    cd1c:	8f 93       	push	r24
    cd1e:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <SCREW_Z>
    cd22:	b9 cf       	rjmp	.-142    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cd24:	80 e2       	ldi	r24, 0x20	; 32
    cd26:	9f e0       	ldi	r25, 0x0F	; 15
    cd28:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cd2c:	61 e0       	ldi	r22, 0x01	; 1
    cd2e:	80 e0       	ldi	r24, 0x00	; 0
    cd30:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cd34:	ff 92       	push	r15
    cd36:	ef 92       	push	r14
    cd38:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    cd3c:	8f 93       	push	r24
    cd3e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
    cd42:	a9 cf       	rjmp	.-174    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cd44:	81 e3       	ldi	r24, 0x31	; 49
    cd46:	9f e0       	ldi	r25, 0x0F	; 15
    cd48:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cd4c:	61 e0       	ldi	r22, 0x01	; 1
    cd4e:	80 e0       	ldi	r24, 0x00	; 0
    cd50:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cd54:	ff 92       	push	r15
    cd56:	ef 92       	push	r14
    cd58:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    cd5c:	8f 93       	push	r24
    cd5e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <REBOUND_Z>
    cd62:	99 cf       	rjmp	.-206    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cd64:	82 e4       	ldi	r24, 0x42	; 66
    cd66:	9f e0       	ldi	r25, 0x0F	; 15
    cd68:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cd6c:	61 e0       	ldi	r22, 0x01	; 1
    cd6e:	80 e0       	ldi	r24, 0x00	; 0
    cd70:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cd74:	ff 92       	push	r15
    cd76:	ef 92       	push	r14
    cd78:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    cd7c:	8f 93       	push	r24
    cd7e:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    cd82:	89 cf       	rjmp	.-238    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cd84:	83 e5       	ldi	r24, 0x53	; 83
    cd86:	9f e0       	ldi	r25, 0x0F	; 15
    cd88:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cd8c:	61 e0       	ldi	r22, 0x01	; 1
    cd8e:	80 e0       	ldi	r24, 0x00	; 0
    cd90:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cd94:	ff 92       	push	r15
    cd96:	ef 92       	push	r14
    cd98:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    cd9c:	8f 93       	push	r24
    cd9e:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SCREW_X>
    cda2:	79 cf       	rjmp	.-270    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cda4:	84 e6       	ldi	r24, 0x64	; 100
    cda6:	9f e0       	ldi	r25, 0x0F	; 15
    cda8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cdac:	61 e0       	ldi	r22, 0x01	; 1
    cdae:	80 e0       	ldi	r24, 0x00	; 0
    cdb0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cdb4:	ff 92       	push	r15
    cdb6:	ef 92       	push	r14
    cdb8:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    cdbc:	8f 93       	push	r24
    cdbe:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    cdc2:	69 cf       	rjmp	.-302    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cdc4:	85 e7       	ldi	r24, 0x75	; 117
    cdc6:	9f e0       	ldi	r25, 0x0F	; 15
    cdc8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cdcc:	61 e0       	ldi	r22, 0x01	; 1
    cdce:	80 e0       	ldi	r24, 0x00	; 0
    cdd0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cdd4:	ff 92       	push	r15
    cdd6:	ef 92       	push	r14
    cdd8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <REBOUND_X+0x1>
    cddc:	8f 93       	push	r24
    cdde:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <REBOUND_X>
    cde2:	59 cf       	rjmp	.-334    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cde4:	86 e8       	ldi	r24, 0x86	; 134
    cde6:	9f e0       	ldi	r25, 0x0F	; 15
    cde8:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cdec:	61 e0       	ldi	r22, 0x01	; 1
    cdee:	80 e0       	ldi	r24, 0x00	; 0
    cdf0:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cdf4:	ff 92       	push	r15
    cdf6:	ef 92       	push	r14
    cdf8:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <THRD_ACCEL>
    cdfc:	1f 92       	push	r1
    cdfe:	4b cf       	rjmp	.-362    	; 0xcc96 <_Z11Setup_Printv+0x114>
    ce00:	87 e9       	ldi	r24, 0x97	; 151
    ce02:	9f e0       	ldi	r25, 0x0F	; 15
    ce04:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ce08:	61 e0       	ldi	r22, 0x01	; 1
    ce0a:	80 e0       	ldi	r24, 0x00	; 0
    ce0c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ce10:	ff 92       	push	r15
    ce12:	ef 92       	push	r14
    ce14:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    ce18:	8f 93       	push	r24
    ce1a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <FEED_ACCEL>
    ce1e:	3b cf       	rjmp	.-394    	; 0xcc96 <_Z11Setup_Printv+0x114>
    ce20:	88 ea       	ldi	r24, 0xA8	; 168
    ce22:	9f e0       	ldi	r25, 0x0F	; 15
    ce24:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ce28:	61 e0       	ldi	r22, 0x01	; 1
    ce2a:	80 e0       	ldi	r24, 0x00	; 0
    ce2c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ce30:	ff 92       	push	r15
    ce32:	ef 92       	push	r14
    ce34:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MIN_FEED+0x1>
    ce38:	8f 93       	push	r24
    ce3a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <MIN_FEED>
    ce3e:	2b cf       	rjmp	.-426    	; 0xcc96 <_Z11Setup_Printv+0x114>
    ce40:	89 eb       	ldi	r24, 0xB9	; 185
    ce42:	9f e0       	ldi	r25, 0x0F	; 15
    ce44:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ce48:	61 e0       	ldi	r22, 0x01	; 1
    ce4a:	80 e0       	ldi	r24, 0x00	; 0
    ce4c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ce50:	ff 92       	push	r15
    ce52:	ef 92       	push	r14
    ce54:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MAX_FEED+0x1>
    ce58:	8f 93       	push	r24
    ce5a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <MAX_FEED>
    ce5e:	1b cf       	rjmp	.-458    	; 0xcc96 <_Z11Setup_Printv+0x114>
    ce60:	8a ec       	ldi	r24, 0xCA	; 202
    ce62:	9f e0       	ldi	r25, 0x0F	; 15
    ce64:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ce68:	61 e0       	ldi	r22, 0x01	; 1
    ce6a:	80 e0       	ldi	r24, 0x00	; 0
    ce6c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ce70:	ff 92       	push	r15
    ce72:	ef 92       	push	r14
    ce74:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    ce78:	8f 93       	push	r24
    ce7a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <MIN_aFEED>
    ce7e:	0b cf       	rjmp	.-490    	; 0xcc96 <_Z11Setup_Printv+0x114>
    ce80:	8b ed       	ldi	r24, 0xDB	; 219
    ce82:	9f e0       	ldi	r25, 0x0F	; 15
    ce84:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ce88:	61 e0       	ldi	r22, 0x01	; 1
    ce8a:	80 e0       	ldi	r24, 0x00	; 0
    ce8c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ce90:	ff 92       	push	r15
    ce92:	ef 92       	push	r14
    ce94:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <MAX_aFEED+0x1>
    ce98:	8f 93       	push	r24
    ce9a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MAX_aFEED>
    ce9e:	fb ce       	rjmp	.-522    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cea0:	8c ee       	ldi	r24, 0xEC	; 236
    cea2:	9f e0       	ldi	r25, 0x0F	; 15
    cea4:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cea8:	61 e0       	ldi	r22, 0x01	; 1
    ceaa:	80 e0       	ldi	r24, 0x00	; 0
    ceac:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    ceb0:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    ceb4:	e0 90 b6 04 	lds	r14, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    ceb8:	f0 90 b7 04 	lds	r15, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    cebc:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    cec0:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    cec4:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    cec8:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    cecc:	81 11       	cpse	r24, r1
    cece:	31 c0       	rjmp	.+98     	; 0xcf32 <_Z11Setup_Printv+0x3b0>
    ced0:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    ced4:	9b 01       	movw	r18, r22
    ced6:	ac 01       	movw	r20, r24
    ced8:	22 0f       	add	r18, r18
    ceda:	33 1f       	adc	r19, r19
    cedc:	44 1f       	adc	r20, r20
    cede:	55 1f       	adc	r21, r21
    cee0:	b7 01       	movw	r22, r14
    cee2:	0f 2c       	mov	r0, r15
    cee4:	00 0c       	add	r0, r0
    cee6:	88 0b       	sbc	r24, r24
    cee8:	99 0b       	sbc	r25, r25
    ceea:	6f 5f       	subi	r22, 0xFF	; 255
    ceec:	7f 4f       	sbci	r23, 0xFF	; 255
    ceee:	8f 4f       	sbci	r24, 0xFF	; 255
    cef0:	9f 4f       	sbci	r25, 0xFF	; 255
    cef2:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    cef6:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    cefa:	9b 01       	movw	r18, r22
    cefc:	ac 01       	movw	r20, r24
    cefe:	60 ec       	ldi	r22, 0xC0	; 192
    cf00:	71 ee       	ldi	r23, 0xE1	; 225
    cf02:	84 ee       	ldi	r24, 0xE4	; 228
    cf04:	9b e4       	ldi	r25, 0x4B	; 75
    cf06:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    cf0a:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    cf0e:	9f 93       	push	r25
    cf10:	8f 93       	push	r24
    cf12:	7f 93       	push	r23
    cf14:	6f 93       	push	r22
    cf16:	ff 92       	push	r15
    cf18:	ef 92       	push	r14
    cf1a:	8d ef       	ldi	r24, 0xFD	; 253
    cf1c:	9f e0       	ldi	r25, 0x0F	; 15
    cf1e:	9f 93       	push	r25
    cf20:	8f 93       	push	r24
    cf22:	1f 92       	push	r1
    cf24:	81 e1       	ldi	r24, 0x11	; 17
    cf26:	8f 93       	push	r24
    cf28:	1f 93       	push	r17
    cf2a:	0f 93       	push	r16
    cf2c:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    cf30:	33 c0       	rjmp	.+102    	; 0xcf98 <_Z11Setup_Printv+0x416>
    cf32:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    cf36:	9b 01       	movw	r18, r22
    cf38:	ac 01       	movw	r20, r24
    cf3a:	22 0f       	add	r18, r18
    cf3c:	33 1f       	adc	r19, r19
    cf3e:	44 1f       	adc	r20, r20
    cf40:	55 1f       	adc	r21, r21
    cf42:	b7 01       	movw	r22, r14
    cf44:	0f 2c       	mov	r0, r15
    cf46:	00 0c       	add	r0, r0
    cf48:	88 0b       	sbc	r24, r24
    cf4a:	99 0b       	sbc	r25, r25
    cf4c:	6f 5f       	subi	r22, 0xFF	; 255
    cf4e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf50:	8f 4f       	sbci	r24, 0xFF	; 255
    cf52:	9f 4f       	sbci	r25, 0xFF	; 255
    cf54:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    cf58:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    cf5c:	9b 01       	movw	r18, r22
    cf5e:	ac 01       	movw	r20, r24
    cf60:	60 ec       	ldi	r22, 0xC0	; 192
    cf62:	71 ee       	ldi	r23, 0xE1	; 225
    cf64:	84 ee       	ldi	r24, 0xE4	; 228
    cf66:	9b e4       	ldi	r25, 0x4B	; 75
    cf68:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    cf6c:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    cf70:	9f 93       	push	r25
    cf72:	8f 93       	push	r24
    cf74:	7f 93       	push	r23
    cf76:	6f 93       	push	r22
    cf78:	8f ef       	ldi	r24, 0xFF	; 255
    cf7a:	8f 93       	push	r24
    cf7c:	8f 93       	push	r24
    cf7e:	ff 92       	push	r15
    cf80:	ef 92       	push	r14
    cf82:	8b e1       	ldi	r24, 0x1B	; 27
    cf84:	90 e1       	ldi	r25, 0x10	; 16
    cf86:	9f 93       	push	r25
    cf88:	8f 93       	push	r24
    cf8a:	1f 92       	push	r1
    cf8c:	81 e1       	ldi	r24, 0x11	; 17
    cf8e:	8f 93       	push	r24
    cf90:	1f 93       	push	r17
    cf92:	0f 93       	push	r16
    cf94:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    cf98:	0f b6       	in	r0, 0x3f	; 63
    cf9a:	f8 94       	cli
    cf9c:	de bf       	out	0x3e, r29	; 62
    cf9e:	0f be       	out	0x3f, r0	; 63
    cfa0:	cd bf       	out	0x3d, r28	; 61
    cfa2:	ce 01       	movw	r24, r28
    cfa4:	42 96       	adiw	r24, 0x12	; 18
    cfa6:	1a ce       	rjmp	.-972    	; 0xcbdc <_Z11Setup_Printv+0x5a>
    cfa8:	8a e3       	ldi	r24, 0x3A	; 58
    cfaa:	90 e1       	ldi	r25, 0x10	; 16
    cfac:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cfb0:	61 e0       	ldi	r22, 0x01	; 1
    cfb2:	80 e0       	ldi	r24, 0x00	; 0
    cfb4:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cfb8:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    cfbc:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    cfc0:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    cfc4:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    cfc8:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    cfcc:	e0 90 b8 04 	lds	r14, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    cfd0:	f0 90 b9 04 	lds	r15, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    cfd4:	7b cf       	rjmp	.-266    	; 0xcecc <_Z11Setup_Printv+0x34a>
    cfd6:	8b e4       	ldi	r24, 0x4B	; 75
    cfd8:	90 e1       	ldi	r25, 0x10	; 16
    cfda:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cfde:	61 e0       	ldi	r22, 0x01	; 1
    cfe0:	80 e0       	ldi	r24, 0x00	; 0
    cfe2:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    cfe6:	ff 92       	push	r15
    cfe8:	ef 92       	push	r14
    cfea:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <REPEAt+0x1>
    cfee:	8f 93       	push	r24
    cff0:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
    cff4:	50 ce       	rjmp	.-864    	; 0xcc96 <_Z11Setup_Printv+0x114>
    cff6:	8c e5       	ldi	r24, 0x5C	; 92
    cff8:	90 e1       	ldi	r25, 0x10	; 16
    cffa:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    cffe:	61 e0       	ldi	r22, 0x01	; 1
    d000:	80 e0       	ldi	r24, 0x00	; 0
    d002:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d006:	ff 92       	push	r15
    d008:	ef 92       	push	r14
    d00a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <HC_SCALE_1+0x1>
    d00e:	8f 93       	push	r24
    d010:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <HC_SCALE_1>
    d014:	40 ce       	rjmp	.-896    	; 0xcc96 <_Z11Setup_Printv+0x114>
    d016:	8d e6       	ldi	r24, 0x6D	; 109
    d018:	90 e1       	ldi	r25, 0x10	; 16
    d01a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d01e:	61 e0       	ldi	r22, 0x01	; 1
    d020:	80 e0       	ldi	r24, 0x00	; 0
    d022:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d026:	ff 92       	push	r15
    d028:	ef 92       	push	r14
    d02a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <HC_SCALE_10+0x1>
    d02e:	8f 93       	push	r24
    d030:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <HC_SCALE_10>
    d034:	30 ce       	rjmp	.-928    	; 0xcc96 <_Z11Setup_Printv+0x114>
    d036:	8e e7       	ldi	r24, 0x7E	; 126
    d038:	90 e1       	ldi	r25, 0x10	; 16
    d03a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d03e:	61 e0       	ldi	r22, 0x01	; 1
    d040:	80 e0       	ldi	r24, 0x00	; 0
    d042:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d046:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    d04a:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    d04e:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    d052:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    d056:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    d05a:	e0 90 07 02 	lds	r14, 0x0207	; 0x800207 <HC_START_SPEED_1>
    d05e:	f0 90 08 02 	lds	r15, 0x0208	; 0x800208 <HC_START_SPEED_1+0x1>
    d062:	81 11       	cpse	r24, r1
    d064:	5f c0       	rjmp	.+190    	; 0xd124 <_Z11Setup_Printv+0x5a2>
    d066:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    d06a:	9b 01       	movw	r18, r22
    d06c:	ac 01       	movw	r20, r24
    d06e:	c7 01       	movw	r24, r14
    d070:	0f 2c       	mov	r0, r15
    d072:	00 0c       	add	r0, r0
    d074:	aa 0b       	sbc	r26, r26
    d076:	bb 0b       	sbc	r27, r27
    d078:	bc 01       	movw	r22, r24
    d07a:	cd 01       	movw	r24, r26
    d07c:	6f 5f       	subi	r22, 0xFF	; 255
    d07e:	7f 4f       	sbci	r23, 0xFF	; 255
    d080:	8f 4f       	sbci	r24, 0xFF	; 255
    d082:	9f 4f       	sbci	r25, 0xFF	; 255
    d084:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    d088:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    d08c:	9b 01       	movw	r18, r22
    d08e:	ac 01       	movw	r20, r24
    d090:	60 ec       	ldi	r22, 0xC0	; 192
    d092:	71 ee       	ldi	r23, 0xE1	; 225
    d094:	84 ee       	ldi	r24, 0xE4	; 228
    d096:	9a e4       	ldi	r25, 0x4A	; 74
    d098:	36 cf       	rjmp	.-404    	; 0xcf06 <_Z11Setup_Printv+0x384>
    d09a:	8f e8       	ldi	r24, 0x8F	; 143
    d09c:	90 e1       	ldi	r25, 0x10	; 16
    d09e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d0a2:	61 e0       	ldi	r22, 0x01	; 1
    d0a4:	80 e0       	ldi	r24, 0x00	; 0
    d0a6:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d0aa:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    d0ae:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    d0b2:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    d0b6:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    d0ba:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    d0be:	e0 90 05 02 	lds	r14, 0x0205	; 0x800205 <HC_MAX_SPEED_1>
    d0c2:	f0 90 06 02 	lds	r15, 0x0206	; 0x800206 <HC_MAX_SPEED_1+0x1>
    d0c6:	cd cf       	rjmp	.-102    	; 0xd062 <_Z11Setup_Printv+0x4e0>
    d0c8:	80 ea       	ldi	r24, 0xA0	; 160
    d0ca:	90 e1       	ldi	r25, 0x10	; 16
    d0cc:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d0d0:	61 e0       	ldi	r22, 0x01	; 1
    d0d2:	80 e0       	ldi	r24, 0x00	; 0
    d0d4:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d0d8:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    d0dc:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    d0e0:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    d0e4:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    d0e8:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    d0ec:	e0 90 03 02 	lds	r14, 0x0203	; 0x800203 <HC_START_SPEED_10>
    d0f0:	f0 90 04 02 	lds	r15, 0x0204	; 0x800204 <HC_START_SPEED_10+0x1>
    d0f4:	b6 cf       	rjmp	.-148    	; 0xd062 <_Z11Setup_Printv+0x4e0>
    d0f6:	81 eb       	ldi	r24, 0xB1	; 177
    d0f8:	90 e1       	ldi	r25, 0x10	; 16
    d0fa:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d0fe:	61 e0       	ldi	r22, 0x01	; 1
    d100:	80 e0       	ldi	r24, 0x00	; 0
    d102:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d106:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    d10a:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    d10e:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    d112:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    d116:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    d11a:	e0 90 01 02 	lds	r14, 0x0201	; 0x800201 <HC_MAX_SPEED_10>
    d11e:	f0 90 02 02 	lds	r15, 0x0202	; 0x800202 <HC_MAX_SPEED_10+0x1>
    d122:	9f cf       	rjmp	.-194    	; 0xd062 <_Z11Setup_Printv+0x4e0>
    d124:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    d128:	9b 01       	movw	r18, r22
    d12a:	ac 01       	movw	r20, r24
    d12c:	c7 01       	movw	r24, r14
    d12e:	0f 2c       	mov	r0, r15
    d130:	00 0c       	add	r0, r0
    d132:	aa 0b       	sbc	r26, r26
    d134:	bb 0b       	sbc	r27, r27
    d136:	bc 01       	movw	r22, r24
    d138:	cd 01       	movw	r24, r26
    d13a:	6f 5f       	subi	r22, 0xFF	; 255
    d13c:	7f 4f       	sbci	r23, 0xFF	; 255
    d13e:	8f 4f       	sbci	r24, 0xFF	; 255
    d140:	9f 4f       	sbci	r25, 0xFF	; 255
    d142:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    d146:	0e 94 5f 96 	call	0x12cbe	; 0x12cbe <__floatunsisf>
    d14a:	9b 01       	movw	r18, r22
    d14c:	ac 01       	movw	r20, r24
    d14e:	60 ec       	ldi	r22, 0xC0	; 192
    d150:	71 ee       	ldi	r23, 0xE1	; 225
    d152:	84 ee       	ldi	r24, 0xE4	; 228
    d154:	9a e4       	ldi	r25, 0x4A	; 74
    d156:	08 cf       	rjmp	.-496    	; 0xcf68 <_Z11Setup_Printv+0x3e6>
    d158:	82 ec       	ldi	r24, 0xC2	; 194
    d15a:	90 e1       	ldi	r25, 0x10	; 16
    d15c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d160:	61 e0       	ldi	r22, 0x01	; 1
    d162:	80 e0       	ldi	r24, 0x00	; 0
    d164:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d168:	ff 92       	push	r15
    d16a:	ef 92       	push	r14
    d16c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    d170:	45 ce       	rjmp	.-886    	; 0xcdfc <_Z11Setup_Printv+0x27a>
    d172:	82 30       	cpi	r24, 0x02	; 2
    d174:	09 f0       	breq	.+2      	; 0xd178 <_Z11Setup_Printv+0x5f6>
    d176:	01 c1       	rjmp	.+514    	; 0xd37a <_Z11Setup_Printv+0x7f8>
    d178:	80 91 b4 11 	lds	r24, 0x11B4	; 0x8011b4 <bModeThread>
    d17c:	81 11       	cpse	r24, r1
    d17e:	0b c0       	rjmp	.+22     	; 0xd196 <_Z11Setup_Printv+0x614>
    d180:	82 ec       	ldi	r24, 0xC2	; 194
    d182:	9d e0       	ldi	r25, 0x0D	; 13
    d184:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d188:	61 e0       	ldi	r22, 0x01	; 1
    d18a:	80 e0       	ldi	r24, 0x00	; 0
    d18c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d190:	8e ea       	ldi	r24, 0xAE	; 174
    d192:	9d e0       	ldi	r25, 0x0D	; 13
    d194:	23 cd       	rjmp	.-1466   	; 0xcbdc <_Z11Setup_Printv+0x5a>
    d196:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <bEditUserThread>
    d19a:	9e 01       	movw	r18, r28
    d19c:	2e 5e       	subi	r18, 0xEE	; 238
    d19e:	3f 4f       	sbci	r19, 0xFF	; 255
    d1a0:	79 01       	movw	r14, r18
    d1a2:	fe 01       	movw	r30, r28
    d1a4:	31 96       	adiw	r30, 0x01	; 1
    d1a6:	6f 01       	movw	r12, r30
    d1a8:	81 11       	cpse	r24, r1
    d1aa:	99 c0       	rjmp	.+306    	; 0xd2de <_Z11Setup_Printv+0x75c>
    d1ac:	80 ea       	ldi	r24, 0xA0	; 160
    d1ae:	9d e0       	ldi	r25, 0x0D	; 13
    d1b0:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d1b4:	e0 91 c2 11 	lds	r30, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    d1b8:	2a e1       	ldi	r18, 0x1A	; 26
    d1ba:	e2 9f       	mul	r30, r18
    d1bc:	f0 01       	movw	r30, r0
    d1be:	11 24       	eor	r1, r1
    d1c0:	e3 53       	subi	r30, 0x33	; 51
    d1c2:	fb 4f       	sbci	r31, 0xFB	; 251
    d1c4:	df 01       	movw	r26, r30
    d1c6:	0d 90       	ld	r0, X+
    d1c8:	00 20       	and	r0, r0
    d1ca:	e9 f7       	brne	.-6      	; 0xd1c6 <_Z11Setup_Printv+0x644>
    d1cc:	11 97       	sbiw	r26, 0x01	; 1
    d1ce:	ae 1b       	sub	r26, r30
    d1d0:	bf 0b       	sbc	r27, r31
    d1d2:	a4 30       	cpi	r26, 0x04	; 4
    d1d4:	b1 05       	cpc	r27, r1
    d1d6:	09 f0       	breq	.+2      	; 0xd1da <_Z11Setup_Printv+0x658>
    d1d8:	4c c0       	rjmp	.+152    	; 0xd272 <_Z11Setup_Printv+0x6f0>
    d1da:	ff 93       	push	r31
    d1dc:	ef 93       	push	r30
    d1de:	81 e7       	ldi	r24, 0x71	; 113
    d1e0:	9e e0       	ldi	r25, 0x0E	; 14
    d1e2:	9f 93       	push	r25
    d1e4:	8f 93       	push	r24
    d1e6:	1f 92       	push	r1
    d1e8:	85 e0       	ldi	r24, 0x05	; 5
    d1ea:	8f 93       	push	r24
    d1ec:	df 92       	push	r13
    d1ee:	cf 92       	push	r12
    d1f0:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d1f4:	c6 01       	movw	r24, r12
    d1f6:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d1fa:	8b e9       	ldi	r24, 0x9B	; 155
    d1fc:	9d e0       	ldi	r25, 0x0D	; 13
    d1fe:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d202:	0f b6       	in	r0, 0x3f	; 63
    d204:	f8 94       	cli
    d206:	de bf       	out	0x3e, r29	; 62
    d208:	0f be       	out	0x3f, r0	; 63
    d20a:	cd bf       	out	0x3d, r28	; 61
    d20c:	61 e0       	ldi	r22, 0x01	; 1
    d20e:	80 e0       	ldi	r24, 0x00	; 0
    d210:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d214:	e0 91 c2 11 	lds	r30, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    d218:	3a e1       	ldi	r19, 0x1A	; 26
    d21a:	e3 9f       	mul	r30, r19
    d21c:	f0 01       	movw	r30, r0
    d21e:	11 24       	eor	r1, r1
    d220:	e9 53       	subi	r30, 0x39	; 57
    d222:	fb 4f       	sbci	r31, 0xFB	; 251
    d224:	80 81       	ld	r24, Z
    d226:	af 01       	movw	r20, r30
    d228:	4c 5f       	subi	r20, 0xFC	; 252
    d22a:	5f 4f       	sbci	r21, 0xFF	; 255
    d22c:	34 81       	ldd	r19, Z+4	; 0x04
    d22e:	23 81       	ldd	r18, Z+3	; 0x03
    d230:	df 01       	movw	r26, r30
    d232:	11 96       	adiw	r26, 0x01	; 1
    d234:	91 81       	ldd	r25, Z+1	; 0x01
    d236:	81 11       	cpse	r24, r1
    d238:	32 c0       	rjmp	.+100    	; 0xd29e <_Z11Setup_Printv+0x71c>
    d23a:	6a e8       	ldi	r22, 0x8A	; 138
    d23c:	7d e0       	ldi	r23, 0x0D	; 13
    d23e:	7f 93       	push	r23
    d240:	6f 93       	push	r22
    d242:	fa 01       	movw	r30, r20
    d244:	81 81       	ldd	r24, Z+1	; 0x01
    d246:	8f 93       	push	r24
    d248:	3f 93       	push	r19
    d24a:	1f 92       	push	r1
    d24c:	2f 93       	push	r18
    d24e:	11 96       	adiw	r26, 0x01	; 1
    d250:	8c 91       	ld	r24, X
    d252:	8f 93       	push	r24
    d254:	9f 93       	push	r25
    d256:	1f 92       	push	r1
    d258:	1f 92       	push	r1
    d25a:	83 ed       	ldi	r24, 0xD3	; 211
    d25c:	90 e1       	ldi	r25, 0x10	; 16
    d25e:	9f 93       	push	r25
    d260:	8f 93       	push	r24
    d262:	1f 92       	push	r1
    d264:	81 e1       	ldi	r24, 0x11	; 17
    d266:	8f 93       	push	r24
    d268:	ff 92       	push	r15
    d26a:	ef 92       	push	r14
    d26c:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d270:	93 ce       	rjmp	.-730    	; 0xcf98 <_Z11Setup_Printv+0x416>
    d272:	13 97       	sbiw	r26, 0x03	; 3
    d274:	79 f4       	brne	.+30     	; 0xd294 <_Z11Setup_Printv+0x712>
    d276:	ff 93       	push	r31
    d278:	ef 93       	push	r30
    d27a:	8a e6       	ldi	r24, 0x6A	; 106
    d27c:	9e e0       	ldi	r25, 0x0E	; 14
    d27e:	9f 93       	push	r25
    d280:	8f 93       	push	r24
    d282:	1f 92       	push	r1
    d284:	87 e0       	ldi	r24, 0x07	; 7
    d286:	8f 93       	push	r24
    d288:	df 92       	push	r13
    d28a:	cf 92       	push	r12
    d28c:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d290:	c6 01       	movw	r24, r12
    d292:	b5 cf       	rjmp	.-150    	; 0xd1fe <_Z11Setup_Printv+0x67c>
    d294:	ff 93       	push	r31
    d296:	ef 93       	push	r30
    d298:	81 e7       	ldi	r24, 0x71	; 113
    d29a:	9e e0       	ldi	r25, 0x0E	; 14
    d29c:	f0 cf       	rjmp	.-32     	; 0xd27e <_Z11Setup_Printv+0x6fc>
    d29e:	fa 01       	movw	r30, r20
    d2a0:	51 81       	ldd	r21, Z+1	; 0x01
    d2a2:	11 96       	adiw	r26, 0x01	; 1
    d2a4:	4c 91       	ld	r20, X
    d2a6:	82 30       	cpi	r24, 0x02	; 2
    d2a8:	70 f4       	brcc	.+28     	; 0xd2c6 <_Z11Setup_Printv+0x744>
    d2aa:	69 e7       	ldi	r22, 0x79	; 121
    d2ac:	7d e0       	ldi	r23, 0x0D	; 13
    d2ae:	7f 93       	push	r23
    d2b0:	6f 93       	push	r22
    d2b2:	5f 93       	push	r21
    d2b4:	3f 93       	push	r19
    d2b6:	1f 92       	push	r1
    d2b8:	2f 93       	push	r18
    d2ba:	4f 93       	push	r20
    d2bc:	9f 93       	push	r25
    d2be:	1f 92       	push	r1
    d2c0:	81 e0       	ldi	r24, 0x01	; 1
    d2c2:	8f 93       	push	r24
    d2c4:	ca cf       	rjmp	.-108    	; 0xd25a <_Z11Setup_Printv+0x6d8>
    d2c6:	6c ee       	ldi	r22, 0xEC	; 236
    d2c8:	7d e0       	ldi	r23, 0x0D	; 13
    d2ca:	7f 93       	push	r23
    d2cc:	6f 93       	push	r22
    d2ce:	5f 93       	push	r21
    d2d0:	3f 93       	push	r19
    d2d2:	1f 92       	push	r1
    d2d4:	2f 93       	push	r18
    d2d6:	4f 93       	push	r20
    d2d8:	9f 93       	push	r25
    d2da:	1f 92       	push	r1
    d2dc:	f2 cf       	rjmp	.-28     	; 0xd2c2 <_Z11Setup_Printv+0x740>
    d2de:	4e 01       	movw	r8, r28
    d2e0:	93 e2       	ldi	r25, 0x23	; 35
    d2e2:	89 0e       	add	r8, r25
    d2e4:	91 1c       	adc	r9, r1
    d2e6:	e0 91 c2 11 	lds	r30, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    d2ea:	2a e1       	ldi	r18, 0x1A	; 26
    d2ec:	b2 2e       	mov	r11, r18
    d2ee:	be 9e       	mul	r11, r30
    d2f0:	f0 01       	movw	r30, r0
    d2f2:	11 24       	eor	r1, r1
    d2f4:	e9 53       	subi	r30, 0x39	; 57
    d2f6:	fb 4f       	sbci	r31, 0xFB	; 251
    d2f8:	65 85       	ldd	r22, Z+13	; 0x0d
    d2fa:	76 85       	ldd	r23, Z+14	; 0x0e
    d2fc:	87 85       	ldd	r24, Z+15	; 0x0f
    d2fe:	90 89       	ldd	r25, Z+16	; 0x10
    d300:	84 01       	movw	r16, r8
    d302:	24 e0       	ldi	r18, 0x04	; 4
    d304:	48 e0       	ldi	r20, 0x08	; 8
    d306:	0e 94 90 92 	call	0x12520	; 0x12520 <dtostrf>
    d30a:	80 e7       	ldi	r24, 0x70	; 112
    d30c:	9d e0       	ldi	r25, 0x0D	; 13
    d30e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d312:	0c ee       	ldi	r16, 0xEC	; 236
    d314:	1d e0       	ldi	r17, 0x0D	; 13
    d316:	1f 93       	push	r17
    d318:	0f 93       	push	r16
    d31a:	9f 92       	push	r9
    d31c:	8f 92       	push	r8
    d31e:	85 ee       	ldi	r24, 0xE5	; 229
    d320:	90 e1       	ldi	r25, 0x10	; 16
    d322:	9f 93       	push	r25
    d324:	8f 93       	push	r24
    d326:	1f 92       	push	r1
    d328:	3b e0       	ldi	r19, 0x0B	; 11
    d32a:	a3 2e       	mov	r10, r19
    d32c:	af 92       	push	r10
    d32e:	df 92       	push	r13
    d330:	cf 92       	push	r12
    d332:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d336:	c6 01       	movw	r24, r12
    d338:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d33c:	61 e0       	ldi	r22, 0x01	; 1
    d33e:	80 e0       	ldi	r24, 0x00	; 0
    d340:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d344:	88 e6       	ldi	r24, 0x68	; 104
    d346:	9d e0       	ldi	r25, 0x0D	; 13
    d348:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d34c:	1f 93       	push	r17
    d34e:	0f 93       	push	r16
    d350:	e0 91 c2 11 	lds	r30, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    d354:	be 9e       	mul	r11, r30
    d356:	f0 01       	movw	r30, r0
    d358:	11 24       	eor	r1, r1
    d35a:	e9 53       	subi	r30, 0x39	; 57
    d35c:	fb 4f       	sbci	r31, 0xFB	; 251
    d35e:	81 89       	ldd	r24, Z+17	; 0x11
    d360:	1f 92       	push	r1
    d362:	8f 93       	push	r24
    d364:	8b ee       	ldi	r24, 0xEB	; 235
    d366:	90 e1       	ldi	r25, 0x10	; 16
    d368:	9f 93       	push	r25
    d36a:	8f 93       	push	r24
    d36c:	1f 92       	push	r1
    d36e:	af 92       	push	r10
    d370:	ff 92       	push	r15
    d372:	ef 92       	push	r14
    d374:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d378:	0f ce       	rjmp	.-994    	; 0xcf98 <_Z11Setup_Printv+0x416>
    d37a:	83 30       	cpi	r24, 0x03	; 3
    d37c:	09 f0       	breq	.+2      	; 0xd380 <_Z11Setup_Printv+0x7fe>
    d37e:	db c0       	rjmp	.+438    	; 0xd536 <_Z11Setup_Printv+0x9b4>
    d380:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <bModeCone>
    d384:	81 11       	cpse	r24, r1
    d386:	0b c0       	rjmp	.+22     	; 0xd39e <_Z11Setup_Printv+0x81c>
    d388:	80 e5       	ldi	r24, 0x50	; 80
    d38a:	9d e0       	ldi	r25, 0x0D	; 13
    d38c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d390:	61 e0       	ldi	r22, 0x01	; 1
    d392:	80 e0       	ldi	r24, 0x00	; 0
    d394:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d398:	8e e3       	ldi	r24, 0x3E	; 62
    d39a:	9d e0       	ldi	r25, 0x0D	; 13
    d39c:	1f cc       	rjmp	.-1986   	; 0xcbdc <_Z11Setup_Printv+0x5a>
    d39e:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <bEditUserConeAB>
    d3a2:	9e 01       	movw	r18, r28
    d3a4:	2e 5e       	subi	r18, 0xEE	; 238
    d3a6:	3f 4f       	sbci	r19, 0xFF	; 255
    d3a8:	79 01       	movw	r14, r18
    d3aa:	fe 01       	movw	r30, r28
    d3ac:	31 96       	adiw	r30, 0x01	; 1
    d3ae:	6f 01       	movw	r12, r30
    d3b0:	88 23       	and	r24, r24
    d3b2:	09 f4       	brne	.+2      	; 0xd3b6 <_Z11Setup_Printv+0x834>
    d3b4:	48 c0       	rjmp	.+144    	; 0xd446 <_Z11Setup_Printv+0x8c4>
    d3b6:	5e 01       	movw	r10, r28
    d3b8:	f3 e2       	ldi	r31, 0x23	; 35
    d3ba:	af 0e       	add	r10, r31
    d3bc:	b1 1c       	adc	r11, r1
    d3be:	e0 91 c0 11 	lds	r30, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    d3c2:	83 e1       	ldi	r24, 0x13	; 19
    d3c4:	98 2e       	mov	r9, r24
    d3c6:	9e 9e       	mul	r9, r30
    d3c8:	f0 01       	movw	r30, r0
    d3ca:	11 24       	eor	r1, r1
    d3cc:	e0 5d       	subi	r30, 0xD0	; 208
    d3ce:	fd 4f       	sbci	r31, 0xFD	; 253
    d3d0:	62 85       	ldd	r22, Z+10	; 0x0a
    d3d2:	73 85       	ldd	r23, Z+11	; 0x0b
    d3d4:	84 85       	ldd	r24, Z+12	; 0x0c
    d3d6:	95 85       	ldd	r25, Z+13	; 0x0d
    d3d8:	85 01       	movw	r16, r10
    d3da:	24 e0       	ldi	r18, 0x04	; 4
    d3dc:	4a e0       	ldi	r20, 0x0A	; 10
    d3de:	0e 94 90 92 	call	0x12520	; 0x12520 <dtostrf>
    d3e2:	bf 92       	push	r11
    d3e4:	af 92       	push	r10
    d3e6:	82 ef       	ldi	r24, 0xF2	; 242
    d3e8:	90 e1       	ldi	r25, 0x10	; 16
    d3ea:	9f 93       	push	r25
    d3ec:	8f 93       	push	r24
    d3ee:	1f 92       	push	r1
    d3f0:	91 e1       	ldi	r25, 0x11	; 17
    d3f2:	89 2e       	mov	r8, r25
    d3f4:	8f 92       	push	r8
    d3f6:	df 92       	push	r13
    d3f8:	cf 92       	push	r12
    d3fa:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d3fe:	c6 01       	movw	r24, r12
    d400:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d404:	61 e0       	ldi	r22, 0x01	; 1
    d406:	80 e0       	ldi	r24, 0x00	; 0
    d408:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d40c:	e0 91 c0 11 	lds	r30, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    d410:	9e 9e       	mul	r9, r30
    d412:	f0 01       	movw	r30, r0
    d414:	11 24       	eor	r1, r1
    d416:	e0 5d       	subi	r30, 0xD0	; 208
    d418:	fd 4f       	sbci	r31, 0xFD	; 253
    d41a:	66 85       	ldd	r22, Z+14	; 0x0e
    d41c:	77 85       	ldd	r23, Z+15	; 0x0f
    d41e:	80 89       	ldd	r24, Z+16	; 0x10
    d420:	91 89       	ldd	r25, Z+17	; 0x11
    d422:	24 e0       	ldi	r18, 0x04	; 4
    d424:	4a e0       	ldi	r20, 0x0A	; 10
    d426:	0e 94 90 92 	call	0x12520	; 0x12520 <dtostrf>
    d42a:	bf 92       	push	r11
    d42c:	af 92       	push	r10
    d42e:	87 e0       	ldi	r24, 0x07	; 7
    d430:	91 e1       	ldi	r25, 0x11	; 17
    d432:	9f 93       	push	r25
    d434:	8f 93       	push	r24
    d436:	1f 92       	push	r1
    d438:	8f 92       	push	r8
    d43a:	ff 92       	push	r15
    d43c:	ef 92       	push	r14
    d43e:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d442:	c7 01       	movw	r24, r14
    d444:	35 cc       	rjmp	.-1942   	; 0xccb0 <_Z11Setup_Printv+0x12e>
    d446:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <bEditUserConeDEG>
    d44a:	88 23       	and	r24, r24
    d44c:	41 f1       	breq	.+80     	; 0xd49e <_Z11Setup_Printv+0x91c>
    d44e:	e0 91 c0 11 	lds	r30, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    d452:	33 e1       	ldi	r19, 0x13	; 19
    d454:	e3 9f       	mul	r30, r19
    d456:	f0 01       	movw	r30, r0
    d458:	11 24       	eor	r1, r1
    d45a:	e0 5d       	subi	r30, 0xD0	; 208
    d45c:	fd 4f       	sbci	r31, 0xFD	; 253
    d45e:	62 85       	ldd	r22, Z+10	; 0x0a
    d460:	73 85       	ldd	r23, Z+11	; 0x0b
    d462:	84 85       	ldd	r24, Z+12	; 0x0c
    d464:	95 85       	ldd	r25, Z+13	; 0x0d
    d466:	87 01       	movw	r16, r14
    d468:	24 e0       	ldi	r18, 0x04	; 4
    d46a:	4a e0       	ldi	r20, 0x0A	; 10
    d46c:	0e 94 90 92 	call	0x12520	; 0x12520 <dtostrf>
    d470:	ff 92       	push	r15
    d472:	ef 92       	push	r14
    d474:	8c e1       	ldi	r24, 0x1C	; 28
    d476:	91 e1       	ldi	r25, 0x11	; 17
    d478:	9f 93       	push	r25
    d47a:	8f 93       	push	r24
    d47c:	1f 92       	push	r1
    d47e:	81 e1       	ldi	r24, 0x11	; 17
    d480:	8f 93       	push	r24
    d482:	df 92       	push	r13
    d484:	cf 92       	push	r12
    d486:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d48a:	c6 01       	movw	r24, r12
    d48c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d490:	61 e0       	ldi	r22, 0x01	; 1
    d492:	80 e0       	ldi	r24, 0x00	; 0
    d494:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d498:	8c ee       	ldi	r24, 0xEC	; 236
    d49a:	9d e0       	ldi	r25, 0x0D	; 13
    d49c:	09 cc       	rjmp	.-2030   	; 0xccb0 <_Z11Setup_Printv+0x12e>
    d49e:	85 e3       	ldi	r24, 0x35	; 53
    d4a0:	9d e0       	ldi	r25, 0x0D	; 13
    d4a2:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d4a6:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    d4aa:	13 e1       	ldi	r17, 0x13	; 19
    d4ac:	81 9f       	mul	r24, r17
    d4ae:	c0 01       	movw	r24, r0
    d4b0:	11 24       	eor	r1, r1
    d4b2:	8d 5c       	subi	r24, 0xCD	; 205
    d4b4:	9d 4f       	sbci	r25, 0xFD	; 253
    d4b6:	9f 93       	push	r25
    d4b8:	8f 93       	push	r24
    d4ba:	84 e3       	ldi	r24, 0x34	; 52
    d4bc:	91 e1       	ldi	r25, 0x11	; 17
    d4be:	9f 93       	push	r25
    d4c0:	8f 93       	push	r24
    d4c2:	1f 92       	push	r1
    d4c4:	8a e0       	ldi	r24, 0x0A	; 10
    d4c6:	8f 93       	push	r24
    d4c8:	df 92       	push	r13
    d4ca:	cf 92       	push	r12
    d4cc:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    d4d0:	c6 01       	movw	r24, r12
    d4d2:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d4d6:	61 e0       	ldi	r22, 0x01	; 1
    d4d8:	80 e0       	ldi	r24, 0x00	; 0
    d4da:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d4de:	e0 91 c0 11 	lds	r30, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    d4e2:	1e 9f       	mul	r17, r30
    d4e4:	f0 01       	movw	r30, r0
    d4e6:	11 24       	eor	r1, r1
    d4e8:	e0 5d       	subi	r30, 0xD0	; 208
    d4ea:	fd 4f       	sbci	r31, 0xFD	; 253
    d4ec:	0f b6       	in	r0, 0x3f	; 63
    d4ee:	f8 94       	cli
    d4f0:	de bf       	out	0x3e, r29	; 62
    d4f2:	0f be       	out	0x3f, r0	; 63
    d4f4:	cd bf       	out	0x3d, r28	; 61
    d4f6:	22 89       	ldd	r18, Z+18	; 0x12
    d4f8:	df 01       	movw	r26, r30
    d4fa:	11 96       	adiw	r26, 0x01	; 1
    d4fc:	91 81       	ldd	r25, Z+1	; 0x01
    d4fe:	80 81       	ld	r24, Z
    d500:	21 11       	cpse	r18, r1
    d502:	10 c0       	rjmp	.+32     	; 0xd524 <_Z11Setup_Printv+0x9a2>
    d504:	11 96       	adiw	r26, 0x01	; 1
    d506:	2c 91       	ld	r18, X
    d508:	2f 93       	push	r18
    d50a:	9f 93       	push	r25
    d50c:	1f 92       	push	r1
    d50e:	8f 93       	push	r24
    d510:	8c e3       	ldi	r24, 0x3C	; 60
    d512:	91 e1       	ldi	r25, 0x11	; 17
    d514:	9f 93       	push	r25
    d516:	8f 93       	push	r24
    d518:	1f 92       	push	r1
    d51a:	81 e1       	ldi	r24, 0x11	; 17
    d51c:	8f 93       	push	r24
    d51e:	ff 92       	push	r15
    d520:	ef 92       	push	r14
    d522:	28 cf       	rjmp	.-432    	; 0xd374 <_Z11Setup_Printv+0x7f2>
    d524:	11 96       	adiw	r26, 0x01	; 1
    d526:	2c 91       	ld	r18, X
    d528:	2f 93       	push	r18
    d52a:	9f 93       	push	r25
    d52c:	1f 92       	push	r1
    d52e:	8f 93       	push	r24
    d530:	8d e4       	ldi	r24, 0x4D	; 77
    d532:	91 e1       	ldi	r25, 0x11	; 17
    d534:	ef cf       	rjmp	.-34     	; 0xd514 <_Z11Setup_Printv+0x992>
    d536:	84 30       	cpi	r24, 0x04	; 4
    d538:	d1 f4       	brne	.+52     	; 0xd56e <_Z11Setup_Printv+0x9ec>
    d53a:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <bModeResetToDefaults>
    d53e:	81 11       	cpse	r24, r1
    d540:	0b c0       	rjmp	.+22     	; 0xd558 <_Z11Setup_Printv+0x9d6>
    d542:	83 e2       	ldi	r24, 0x23	; 35
    d544:	9d e0       	ldi	r25, 0x0D	; 13
    d546:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d54a:	61 e0       	ldi	r22, 0x01	; 1
    d54c:	80 e0       	ldi	r24, 0x00	; 0
    d54e:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d552:	8e e0       	ldi	r24, 0x0E	; 14
    d554:	9d e0       	ldi	r25, 0x0D	; 13
    d556:	42 cb       	rjmp	.-2428   	; 0xcbdc <_Z11Setup_Printv+0x5a>
    d558:	8a ef       	ldi	r24, 0xFA	; 250
    d55a:	9c e0       	ldi	r25, 0x0C	; 12
    d55c:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d560:	61 e0       	ldi	r22, 0x01	; 1
    d562:	80 e0       	ldi	r24, 0x00	; 0
    d564:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d568:	88 ee       	ldi	r24, 0xE8	; 232
    d56a:	9c e0       	ldi	r25, 0x0C	; 12
    d56c:	37 cb       	rjmp	.-2450   	; 0xcbdc <_Z11Setup_Printv+0x5a>
    d56e:	85 30       	cpi	r24, 0x05	; 5
    d570:	79 f4       	brne	.+30     	; 0xd590 <_Z11Setup_Printv+0xa0e>
    d572:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <bModeSaveAndExit>
    d576:	81 11       	cpse	r24, r1
    d578:	ef cf       	rjmp	.-34     	; 0xd558 <_Z11Setup_Printv+0x9d6>
    d57a:	85 ed       	ldi	r24, 0xD5	; 213
    d57c:	9c e0       	ldi	r25, 0x0C	; 12
    d57e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d582:	61 e0       	ldi	r22, 0x01	; 1
    d584:	80 e0       	ldi	r24, 0x00	; 0
    d586:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d58a:	80 ec       	ldi	r24, 0xC0	; 192
    d58c:	9c e0       	ldi	r25, 0x0C	; 12
    d58e:	26 cb       	rjmp	.-2484   	; 0xcbdc <_Z11Setup_Printv+0x5a>
    d590:	86 30       	cpi	r24, 0x06	; 6
    d592:	09 f0       	breq	.+2      	; 0xd596 <_Z11Setup_Printv+0xa14>
    d594:	94 cb       	rjmp	.-2264   	; 0xccbe <_Z11Setup_Printv+0x13c>
    d596:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <bModeWithoutExit>
    d59a:	81 11       	cpse	r24, r1
    d59c:	dd cf       	rjmp	.-70     	; 0xd558 <_Z11Setup_Printv+0x9d6>
    d59e:	8d ea       	ldi	r24, 0xAD	; 173
    d5a0:	9c e0       	ldi	r25, 0x0C	; 12
    d5a2:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    d5a6:	61 e0       	ldi	r22, 0x01	; 1
    d5a8:	80 e0       	ldi	r24, 0x00	; 0
    d5aa:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    d5ae:	88 e9       	ldi	r24, 0x98	; 152
    d5b0:	9c e0       	ldi	r25, 0x0C	; 12
    d5b2:	14 cb       	rjmp	.-2520   	; 0xcbdc <_Z11Setup_Printv+0x5a>

0000d5b4 <_Z11Save_EEPROMv>:
    d5b4:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    d5b8:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    d5bc:	82 e0       	ldi	r24, 0x02	; 2
    d5be:	90 e0       	ldi	r25, 0x00	; 0
    d5c0:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d5c4:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    d5c8:	70 91 06 0a 	lds	r23, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    d5cc:	84 e0       	ldi	r24, 0x04	; 4
    d5ce:	90 e0       	ldi	r25, 0x00	; 0
    d5d0:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d5d4:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    d5d8:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    d5dc:	86 e0       	ldi	r24, 0x06	; 6
    d5de:	90 e0       	ldi	r25, 0x00	; 0
    d5e0:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d5e4:	60 91 03 0a 	lds	r22, 0x0A03	; 0x800a03 <McSTEP_Z>
    d5e8:	70 91 04 0a 	lds	r23, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    d5ec:	88 e0       	ldi	r24, 0x08	; 8
    d5ee:	90 e0       	ldi	r25, 0x00	; 0
    d5f0:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d5f4:	60 91 ff 09 	lds	r22, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    d5f8:	70 91 00 0a 	lds	r23, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    d5fc:	8a e0       	ldi	r24, 0x0A	; 10
    d5fe:	90 e0       	ldi	r25, 0x00	; 0
    d600:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d604:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    d608:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    d60c:	8c e0       	ldi	r24, 0x0C	; 12
    d60e:	90 e0       	ldi	r25, 0x00	; 0
    d610:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d614:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <REBOUND_X>
    d618:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <REBOUND_X+0x1>
    d61c:	8e e0       	ldi	r24, 0x0E	; 14
    d61e:	90 e0       	ldi	r25, 0x00	; 0
    d620:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d624:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <REBOUND_Z>
    d628:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <REBOUND_Z+0x1>
    d62c:	80 e1       	ldi	r24, 0x10	; 16
    d62e:	90 e0       	ldi	r25, 0x00	; 0
    d630:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d634:	60 91 fd 09 	lds	r22, 0x09FD	; 0x8009fd <McSTEP_X>
    d638:	70 91 fe 09 	lds	r23, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    d63c:	82 e1       	ldi	r24, 0x12	; 18
    d63e:	90 e0       	ldi	r25, 0x00	; 0
    d640:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d644:	60 91 fc 09 	lds	r22, 0x09FC	; 0x8009fc <THRD_ACCEL>
    d648:	70 e0       	ldi	r23, 0x00	; 0
    d64a:	84 e1       	ldi	r24, 0x14	; 20
    d64c:	90 e0       	ldi	r25, 0x00	; 0
    d64e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d652:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <FEED_ACCEL>
    d656:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    d65a:	86 e1       	ldi	r24, 0x16	; 22
    d65c:	90 e0       	ldi	r25, 0x00	; 0
    d65e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d662:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <MIN_FEED>
    d666:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <MIN_FEED+0x1>
    d66a:	88 e1       	ldi	r24, 0x18	; 24
    d66c:	90 e0       	ldi	r25, 0x00	; 0
    d66e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d672:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <MAX_FEED>
    d676:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <MAX_FEED+0x1>
    d67a:	8a e1       	ldi	r24, 0x1A	; 26
    d67c:	90 e0       	ldi	r25, 0x00	; 0
    d67e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d682:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <MIN_aFEED>
    d686:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    d68a:	8c e1       	ldi	r24, 0x1C	; 28
    d68c:	90 e0       	ldi	r25, 0x00	; 0
    d68e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d692:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <MAX_aFEED>
    d696:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <MAX_aFEED+0x1>
    d69a:	8e e1       	ldi	r24, 0x1E	; 30
    d69c:	90 e0       	ldi	r25, 0x00	; 0
    d69e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d6a2:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    d6a6:	70 91 b7 04 	lds	r23, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    d6aa:	80 e2       	ldi	r24, 0x20	; 32
    d6ac:	90 e0       	ldi	r25, 0x00	; 0
    d6ae:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d6b2:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    d6b6:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    d6ba:	82 e2       	ldi	r24, 0x22	; 34
    d6bc:	90 e0       	ldi	r25, 0x00	; 0
    d6be:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d6c2:	60 91 fa 09 	lds	r22, 0x09FA	; 0x8009fa <REPEAt>
    d6c6:	70 91 fb 09 	lds	r23, 0x09FB	; 0x8009fb <REPEAt+0x1>
    d6ca:	84 e2       	ldi	r24, 0x24	; 36
    d6cc:	90 e0       	ldi	r25, 0x00	; 0
    d6ce:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d6d2:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <HC_SCALE_1>
    d6d6:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <HC_SCALE_1+0x1>
    d6da:	86 e2       	ldi	r24, 0x26	; 38
    d6dc:	90 e0       	ldi	r25, 0x00	; 0
    d6de:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d6e2:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <HC_SCALE_10>
    d6e6:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <HC_SCALE_10+0x1>
    d6ea:	88 e2       	ldi	r24, 0x28	; 40
    d6ec:	90 e0       	ldi	r25, 0x00	; 0
    d6ee:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d6f2:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <HC_START_SPEED_1>
    d6f6:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <HC_START_SPEED_1+0x1>
    d6fa:	8a e2       	ldi	r24, 0x2A	; 42
    d6fc:	90 e0       	ldi	r25, 0x00	; 0
    d6fe:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d702:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <HC_MAX_SPEED_1>
    d706:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <HC_MAX_SPEED_1+0x1>
    d70a:	8c e2       	ldi	r24, 0x2C	; 44
    d70c:	90 e0       	ldi	r25, 0x00	; 0
    d70e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d712:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <HC_START_SPEED_10>
    d716:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <HC_START_SPEED_10+0x1>
    d71a:	8e e2       	ldi	r24, 0x2E	; 46
    d71c:	90 e0       	ldi	r25, 0x00	; 0
    d71e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d722:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <HC_MAX_SPEED_10>
    d726:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <HC_MAX_SPEED_10+0x1>
    d72a:	80 e3       	ldi	r24, 0x30	; 48
    d72c:	90 e0       	ldi	r25, 0x00	; 0
    d72e:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d732:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
    d736:	70 e0       	ldi	r23, 0x00	; 0
    d738:	82 e3       	ldi	r24, 0x32	; 50
    d73a:	90 e0       	ldi	r25, 0x00	; 0
    d73c:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d740:	40 91 e8 09 	lds	r20, 0x09E8	; 0x8009e8 <Thread_Info+0x521>
    d744:	50 91 e9 09 	lds	r21, 0x09E9	; 0x8009e9 <Thread_Info+0x522>
    d748:	60 91 ea 09 	lds	r22, 0x09EA	; 0x8009ea <Thread_Info+0x523>
    d74c:	70 91 eb 09 	lds	r23, 0x09EB	; 0x8009eb <Thread_Info+0x524>
    d750:	84 e3       	ldi	r24, 0x34	; 52
    d752:	90 e0       	ldi	r25, 0x00	; 0
    d754:	0e 94 07 95 	call	0x12a0e	; 0x12a0e <eeprom_update_dword>
    d758:	60 91 ec 09 	lds	r22, 0x09EC	; 0x8009ec <Thread_Info+0x525>
    d75c:	70 e0       	ldi	r23, 0x00	; 0
    d75e:	88 e3       	ldi	r24, 0x38	; 56
    d760:	90 e0       	ldi	r25, 0x00	; 0
    d762:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    d766:	40 91 9a 04 	lds	r20, 0x049A	; 0x80049a <Cone_Info+0x26a>
    d76a:	50 91 9b 04 	lds	r21, 0x049B	; 0x80049b <Cone_Info+0x26b>
    d76e:	60 91 9c 04 	lds	r22, 0x049C	; 0x80049c <Cone_Info+0x26c>
    d772:	70 91 9d 04 	lds	r23, 0x049D	; 0x80049d <Cone_Info+0x26d>
    d776:	8a e3       	ldi	r24, 0x3A	; 58
    d778:	90 e0       	ldi	r25, 0x00	; 0
    d77a:	0e 94 07 95 	call	0x12a0e	; 0x12a0e <eeprom_update_dword>
    d77e:	40 91 9e 04 	lds	r20, 0x049E	; 0x80049e <Cone_Info+0x26e>
    d782:	50 91 9f 04 	lds	r21, 0x049F	; 0x80049f <Cone_Info+0x26f>
    d786:	60 91 a0 04 	lds	r22, 0x04A0	; 0x8004a0 <Cone_Info+0x270>
    d78a:	70 91 a1 04 	lds	r23, 0x04A1	; 0x8004a1 <Cone_Info+0x271>
    d78e:	8e e3       	ldi	r24, 0x3E	; 62
    d790:	90 e0       	ldi	r25, 0x00	; 0
    d792:	0e 94 07 95 	call	0x12a0e	; 0x12a0e <eeprom_update_dword>
    d796:	40 91 ad 04 	lds	r20, 0x04AD	; 0x8004ad <Cone_Info+0x27d>
    d79a:	50 91 ae 04 	lds	r21, 0x04AE	; 0x8004ae <Cone_Info+0x27e>
    d79e:	60 91 af 04 	lds	r22, 0x04AF	; 0x8004af <Cone_Info+0x27f>
    d7a2:	70 91 b0 04 	lds	r23, 0x04B0	; 0x8004b0 <Cone_Info+0x280>
    d7a6:	82 e4       	ldi	r24, 0x42	; 66
    d7a8:	90 e0       	ldi	r25, 0x00	; 0
    d7aa:	0c 94 07 95 	jmp	0x12a0e	; 0x12a0e <eeprom_update_dword>

0000d7ae <_Z10Calc_C_DEGfPhPiS_>:
    d7ae:	2f 92       	push	r2
    d7b0:	3f 92       	push	r3
    d7b2:	4f 92       	push	r4
    d7b4:	5f 92       	push	r5
    d7b6:	6f 92       	push	r6
    d7b8:	7f 92       	push	r7
    d7ba:	8f 92       	push	r8
    d7bc:	9f 92       	push	r9
    d7be:	af 92       	push	r10
    d7c0:	bf 92       	push	r11
    d7c2:	cf 92       	push	r12
    d7c4:	df 92       	push	r13
    d7c6:	ef 92       	push	r14
    d7c8:	ff 92       	push	r15
    d7ca:	0f 93       	push	r16
    d7cc:	1f 93       	push	r17
    d7ce:	cf 93       	push	r28
    d7d0:	df 93       	push	r29
    d7d2:	6b 01       	movw	r12, r22
    d7d4:	7c 01       	movw	r14, r24
    d7d6:	ea 01       	movw	r28, r20
    d7d8:	19 01       	movw	r2, r18
    d7da:	20 e0       	ldi	r18, 0x00	; 0
    d7dc:	30 e0       	ldi	r19, 0x00	; 0
    d7de:	a9 01       	movw	r20, r18
    d7e0:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    d7e4:	18 16       	cp	r1, r24
    d7e6:	54 f4       	brge	.+20     	; 0xd7fc <_Z10Calc_C_DEGfPhPiS_+0x4e>
    d7e8:	20 e0       	ldi	r18, 0x00	; 0
    d7ea:	30 e0       	ldi	r19, 0x00	; 0
    d7ec:	44 eb       	ldi	r20, 0xB4	; 180
    d7ee:	52 e4       	ldi	r21, 0x42	; 66
    d7f0:	c7 01       	movw	r24, r14
    d7f2:	b6 01       	movw	r22, r12
    d7f4:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    d7f8:	87 fd       	sbrc	r24, 7
    d7fa:	1a c0       	rjmp	.+52     	; 0xd830 <_Z10Calc_C_DEGfPhPiS_+0x82>
    d7fc:	18 82       	st	Y, r1
    d7fe:	f1 01       	movw	r30, r2
    d800:	11 82       	std	Z+1, r1	; 0x01
    d802:	10 82       	st	Z, r1
    d804:	f8 01       	movw	r30, r16
    d806:	10 82       	st	Z, r1
    d808:	80 e0       	ldi	r24, 0x00	; 0
    d80a:	df 91       	pop	r29
    d80c:	cf 91       	pop	r28
    d80e:	1f 91       	pop	r17
    d810:	0f 91       	pop	r16
    d812:	ff 90       	pop	r15
    d814:	ef 90       	pop	r14
    d816:	df 90       	pop	r13
    d818:	cf 90       	pop	r12
    d81a:	bf 90       	pop	r11
    d81c:	af 90       	pop	r10
    d81e:	9f 90       	pop	r9
    d820:	8f 90       	pop	r8
    d822:	7f 90       	pop	r7
    d824:	6f 90       	pop	r6
    d826:	5f 90       	pop	r5
    d828:	4f 90       	pop	r4
    d82a:	3f 90       	pop	r3
    d82c:	2f 90       	pop	r2
    d82e:	08 95       	ret
    d830:	25 e3       	ldi	r18, 0x35	; 53
    d832:	3a ef       	ldi	r19, 0xFA	; 250
    d834:	4e e8       	ldi	r20, 0x8E	; 142
    d836:	5c e3       	ldi	r21, 0x3C	; 60
    d838:	c7 01       	movw	r24, r14
    d83a:	b6 01       	movw	r22, r12
    d83c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    d840:	0e 94 e9 97 	call	0x12fd2	; 0x12fd2 <tan>
    d844:	4b 01       	movw	r8, r22
    d846:	5c 01       	movw	r10, r24
    d848:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <SCREW_X>
    d84c:	70 91 08 0a 	lds	r23, 0x0A08	; 0x800a08 <SCREW_X+0x1>
    d850:	07 2e       	mov	r0, r23
    d852:	00 0c       	add	r0, r0
    d854:	88 0b       	sbc	r24, r24
    d856:	99 0b       	sbc	r25, r25
    d858:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    d85c:	2a e0       	ldi	r18, 0x0A	; 10
    d85e:	37 ed       	ldi	r19, 0xD7	; 215
    d860:	43 e2       	ldi	r20, 0x23	; 35
    d862:	5c e3       	ldi	r21, 0x3C	; 60
    d864:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    d868:	6b 01       	movw	r12, r22
    d86a:	7c 01       	movw	r14, r24
    d86c:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    d870:	30 91 00 0a 	lds	r19, 0x0A00	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    d874:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <McSTEP_X>
    d878:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
    d87c:	28 9f       	mul	r18, r24
    d87e:	b0 01       	movw	r22, r0
    d880:	29 9f       	mul	r18, r25
    d882:	70 0d       	add	r23, r0
    d884:	38 9f       	mul	r19, r24
    d886:	70 0d       	add	r23, r0
    d888:	11 24       	eor	r1, r1
    d88a:	07 2e       	mov	r0, r23
    d88c:	00 0c       	add	r0, r0
    d88e:	88 0b       	sbc	r24, r24
    d890:	99 0b       	sbc	r25, r25
    d892:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    d896:	9b 01       	movw	r18, r22
    d898:	ac 01       	movw	r20, r24
    d89a:	c7 01       	movw	r24, r14
    d89c:	b6 01       	movw	r22, r12
    d89e:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    d8a2:	9b 01       	movw	r18, r22
    d8a4:	ac 01       	movw	r20, r24
    d8a6:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    d8aa:	6b 01       	movw	r12, r22
    d8ac:	7c 01       	movw	r14, r24
    d8ae:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <SCREW_Z>
    d8b2:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    d8b6:	07 2e       	mov	r0, r23
    d8b8:	00 0c       	add	r0, r0
    d8ba:	88 0b       	sbc	r24, r24
    d8bc:	99 0b       	sbc	r25, r25
    d8be:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    d8c2:	2a e0       	ldi	r18, 0x0A	; 10
    d8c4:	37 ed       	ldi	r19, 0xD7	; 215
    d8c6:	43 e2       	ldi	r20, 0x23	; 35
    d8c8:	5c e3       	ldi	r21, 0x3C	; 60
    d8ca:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    d8ce:	2b 01       	movw	r4, r22
    d8d0:	3c 01       	movw	r6, r24
    d8d2:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    d8d6:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    d8da:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
    d8de:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    d8e2:	28 9f       	mul	r18, r24
    d8e4:	b0 01       	movw	r22, r0
    d8e6:	29 9f       	mul	r18, r25
    d8e8:	70 0d       	add	r23, r0
    d8ea:	38 9f       	mul	r19, r24
    d8ec:	70 0d       	add	r23, r0
    d8ee:	11 24       	eor	r1, r1
    d8f0:	07 2e       	mov	r0, r23
    d8f2:	00 0c       	add	r0, r0
    d8f4:	88 0b       	sbc	r24, r24
    d8f6:	99 0b       	sbc	r25, r25
    d8f8:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    d8fc:	9b 01       	movw	r18, r22
    d8fe:	ac 01       	movw	r20, r24
    d900:	c3 01       	movw	r24, r6
    d902:	b2 01       	movw	r22, r4
    d904:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    d908:	a5 01       	movw	r20, r10
    d90a:	94 01       	movw	r18, r8
    d90c:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    d910:	9b 01       	movw	r18, r22
    d912:	ac 01       	movw	r20, r24
    d914:	c7 01       	movw	r24, r14
    d916:	b6 01       	movw	r22, r12
    d918:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    d91c:	6b 01       	movw	r12, r22
    d91e:	7c 01       	movw	r14, r24
    d920:	20 e0       	ldi	r18, 0x00	; 0
    d922:	30 e0       	ldi	r19, 0x00	; 0
    d924:	40 e8       	ldi	r20, 0x80	; 128
    d926:	5f e3       	ldi	r21, 0x3F	; 63
    d928:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    d92c:	87 fd       	sbrc	r24, 7
    d92e:	2b c0       	rjmp	.+86     	; 0xd986 <_Z10Calc_C_DEGfPhPiS_+0x1d8>
    d930:	21 e7       	ldi	r18, 0x71	; 113
    d932:	3d ef       	ldi	r19, 0xFD	; 253
    d934:	4e e7       	ldi	r20, 0x7E	; 126
    d936:	53 e4       	ldi	r21, 0x43	; 67
    d938:	c7 01       	movw	r24, r14
    d93a:	b6 01       	movw	r22, r12
    d93c:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    d940:	18 16       	cp	r1, r24
    d942:	0c f4       	brge	.+2      	; 0xd946 <_Z10Calc_C_DEGfPhPiS_+0x198>
    d944:	5b cf       	rjmp	.-330    	; 0xd7fc <_Z10Calc_C_DEGfPhPiS_+0x4e>
    d946:	c7 01       	movw	r24, r14
    d948:	b6 01       	movw	r22, r12
    d94a:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    d94e:	68 83       	st	Y, r22
    d950:	70 e0       	ldi	r23, 0x00	; 0
    d952:	90 e0       	ldi	r25, 0x00	; 0
    d954:	80 e0       	ldi	r24, 0x00	; 0
    d956:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    d95a:	9b 01       	movw	r18, r22
    d95c:	ac 01       	movw	r20, r24
    d95e:	c7 01       	movw	r24, r14
    d960:	b6 01       	movw	r22, r12
    d962:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    d966:	20 e0       	ldi	r18, 0x00	; 0
    d968:	30 e4       	ldi	r19, 0x40	; 64
    d96a:	4c e1       	ldi	r20, 0x1C	; 28
    d96c:	56 e4       	ldi	r21, 0x46	; 70
    d96e:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    d972:	ae 01       	movw	r20, r28
    d974:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z6_roundfPh>
    d978:	f1 01       	movw	r30, r2
    d97a:	91 83       	std	Z+1, r25	; 0x01
    d97c:	80 83       	st	Z, r24
    d97e:	f8 01       	movw	r30, r16
    d980:	10 82       	st	Z, r1
    d982:	81 e0       	ldi	r24, 0x01	; 1
    d984:	42 cf       	rjmp	.-380    	; 0xd80a <_Z10Calc_C_DEGfPhPiS_+0x5c>
    d986:	a7 01       	movw	r20, r14
    d988:	96 01       	movw	r18, r12
    d98a:	60 e0       	ldi	r22, 0x00	; 0
    d98c:	70 e0       	ldi	r23, 0x00	; 0
    d98e:	80 e8       	ldi	r24, 0x80	; 128
    d990:	9f e3       	ldi	r25, 0x3F	; 63
    d992:	0e 94 c6 95 	call	0x12b8c	; 0x12b8c <__divsf3>
    d996:	6b 01       	movw	r12, r22
    d998:	7c 01       	movw	r14, r24
    d99a:	21 e7       	ldi	r18, 0x71	; 113
    d99c:	3d ef       	ldi	r19, 0xFD	; 253
    d99e:	4e e7       	ldi	r20, 0x7E	; 126
    d9a0:	53 e4       	ldi	r21, 0x43	; 67
    d9a2:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    d9a6:	18 16       	cp	r1, r24
    d9a8:	0c f4       	brge	.+2      	; 0xd9ac <_Z10Calc_C_DEGfPhPiS_+0x1fe>
    d9aa:	28 cf       	rjmp	.-432    	; 0xd7fc <_Z10Calc_C_DEGfPhPiS_+0x4e>
    d9ac:	c7 01       	movw	r24, r14
    d9ae:	b6 01       	movw	r22, r12
    d9b0:	0e 94 33 96 	call	0x12c66	; 0x12c66 <__fixunssfsi>
    d9b4:	68 83       	st	Y, r22
    d9b6:	70 e0       	ldi	r23, 0x00	; 0
    d9b8:	90 e0       	ldi	r25, 0x00	; 0
    d9ba:	80 e0       	ldi	r24, 0x00	; 0
    d9bc:	0e 94 61 96 	call	0x12cc2	; 0x12cc2 <__floatsisf>
    d9c0:	9b 01       	movw	r18, r22
    d9c2:	ac 01       	movw	r20, r24
    d9c4:	c7 01       	movw	r24, r14
    d9c6:	b6 01       	movw	r22, r12
    d9c8:	0e 94 35 95 	call	0x12a6a	; 0x12a6a <__subsf3>
    d9cc:	20 e0       	ldi	r18, 0x00	; 0
    d9ce:	30 e4       	ldi	r19, 0x40	; 64
    d9d0:	4c e1       	ldi	r20, 0x1C	; 28
    d9d2:	56 e4       	ldi	r21, 0x46	; 70
    d9d4:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    d9d8:	ae 01       	movw	r20, r28
    d9da:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z6_roundfPh>
    d9de:	f1 01       	movw	r30, r2
    d9e0:	91 83       	std	Z+1, r25	; 0x01
    d9e2:	80 83       	st	Z, r24
    d9e4:	81 e0       	ldi	r24, 0x01	; 1
    d9e6:	f8 01       	movw	r30, r16
    d9e8:	80 83       	st	Z, r24
    d9ea:	0f cf       	rjmp	.-482    	; 0xd80a <_Z10Calc_C_DEGfPhPiS_+0x5c>

0000d9ec <_Z17Update_Parametersv>:
    d9ec:	2f 92       	push	r2
    d9ee:	3f 92       	push	r3
    d9f0:	4f 92       	push	r4
    d9f2:	5f 92       	push	r5
    d9f4:	6f 92       	push	r6
    d9f6:	7f 92       	push	r7
    d9f8:	8f 92       	push	r8
    d9fa:	9f 92       	push	r9
    d9fc:	af 92       	push	r10
    d9fe:	bf 92       	push	r11
    da00:	cf 92       	push	r12
    da02:	df 92       	push	r13
    da04:	ef 92       	push	r14
    da06:	ff 92       	push	r15
    da08:	0f 93       	push	r16
    da0a:	1f 93       	push	r17
    da0c:	cf 93       	push	r28
    da0e:	df 93       	push	r29
    da10:	cd b7       	in	r28, 0x3d	; 61
    da12:	de b7       	in	r29, 0x3e	; 62
    da14:	6f 97       	sbiw	r28, 0x1f	; 31
    da16:	0f b6       	in	r0, 0x3f	; 63
    da18:	f8 94       	cli
    da1a:	de bf       	out	0x3e, r29	; 62
    da1c:	0f be       	out	0x3f, r0	; 63
    da1e:	cd bf       	out	0x3d, r28	; 61
    da20:	80 90 29 02 	lds	r8, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    da24:	90 90 2a 02 	lds	r9, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    da28:	c4 01       	movw	r24, r8
    da2a:	88 0f       	add	r24, r24
    da2c:	99 1f       	adc	r25, r25
    da2e:	90 93 b2 11 	sts	0x11B2, r25	; 0x8011b2 <ENC_TICK+0x1>
    da32:	80 93 b1 11 	sts	0x11B1, r24	; 0x8011b1 <ENC_TICK>
    da36:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <HC_SCALE_1>
    da3a:	80 93 b0 11 	sts	0x11B0, r24	; 0x8011b0 <Scale>
    da3e:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <THRD_ACCEL>
    da42:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
    da46:	80 93 57 12 	sts	0x1257, r24	; 0x801257 <tmp_Accel>
    da4a:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    da4e:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    da52:	a0 91 03 0a 	lds	r26, 0x0A03	; 0x800a03 <McSTEP_Z>
    da56:	b0 91 04 0a 	lds	r27, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
    da5a:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
    da5e:	2b 01       	movw	r4, r22
    da60:	3c 01       	movw	r6, r24
    da62:	00 91 01 0a 	lds	r16, 0x0A01	; 0x800a01 <SCREW_Z>
    da66:	10 91 02 0a 	lds	r17, 0x0A02	; 0x800a02 <SCREW_Z+0x1>
    da6a:	c0 90 2c 02 	lds	r12, 0x022C	; 0x80022c <FEED_ACCEL>
    da6e:	d0 90 2d 02 	lds	r13, 0x022D	; 0x80022d <FEED_ACCEL+0x1>
    da72:	0d 2c       	mov	r0, r13
    da74:	00 0c       	add	r0, r0
    da76:	ee 08       	sbc	r14, r14
    da78:	ff 08       	sbc	r15, r15
    da7a:	09 2c       	mov	r0, r9
    da7c:	00 0c       	add	r0, r0
    da7e:	aa 08       	sbc	r10, r10
    da80:	bb 08       	sbc	r11, r11
    da82:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <MIN_FEED>
    da86:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <MIN_FEED+0x1>
    da8a:	ac 01       	movw	r20, r24
    da8c:	9b 01       	movw	r18, r22
    da8e:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    da92:	98 01       	movw	r18, r16
    da94:	01 2e       	mov	r0, r17
    da96:	00 0c       	add	r0, r0
    da98:	44 0b       	sbc	r20, r20
    da9a:	55 0b       	sbc	r21, r21
    da9c:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    daa0:	c5 01       	movw	r24, r10
    daa2:	b4 01       	movw	r22, r8
    daa4:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    daa8:	ca 01       	movw	r24, r20
    daaa:	b9 01       	movw	r22, r18
    daac:	a7 01       	movw	r20, r14
    daae:	96 01       	movw	r18, r12
    dab0:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    dab4:	30 93 2f 12 	sts	0x122F, r19	; 0x80122f <max_OCR5A+0x1>
    dab8:	20 93 2e 12 	sts	0x122E, r18	; 0x80122e <max_OCR5A>
    dabc:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <MIN_aFEED>
    dac0:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <MIN_aFEED+0x1>
    dac4:	a3 01       	movw	r20, r6
    dac6:	92 01       	movw	r18, r4
    dac8:	0e 94 f8 98 	call	0x131f0	; 0x131f0 <__mulshisi3>
    dacc:	4b 01       	movw	r8, r22
    dace:	5c 01       	movw	r10, r24
    dad0:	2c e3       	ldi	r18, 0x3C	; 60
    dad2:	30 e0       	ldi	r19, 0x00	; 0
    dad4:	d8 01       	movw	r26, r16
    dad6:	0e 94 e8 98 	call	0x131d0	; 0x131d0 <__usmulhisi3>
    dada:	24 e6       	ldi	r18, 0x64	; 100
    dadc:	30 e0       	ldi	r19, 0x00	; 0
    dade:	40 e0       	ldi	r20, 0x00	; 0
    dae0:	50 e0       	ldi	r21, 0x00	; 0
    dae2:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    dae6:	c5 01       	movw	r24, r10
    dae8:	b4 01       	movw	r22, r8
    daea:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    daee:	22 0f       	add	r18, r18
    daf0:	33 1f       	adc	r19, r19
    daf2:	44 1f       	adc	r20, r20
    daf4:	55 1f       	adc	r21, r21
    daf6:	60 e9       	ldi	r22, 0x90	; 144
    daf8:	70 ed       	ldi	r23, 0xD0	; 208
    dafa:	83 e0       	ldi	r24, 0x03	; 3
    dafc:	90 e0       	ldi	r25, 0x00	; 0
    dafe:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    db02:	ca 01       	movw	r24, r20
    db04:	b9 01       	movw	r22, r18
    db06:	61 50       	subi	r22, 0x01	; 1
    db08:	71 09       	sbc	r23, r1
    db0a:	81 09       	sbc	r24, r1
    db0c:	91 09       	sbc	r25, r1
    db0e:	a7 01       	movw	r20, r14
    db10:	96 01       	movw	r18, r12
    db12:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
    db16:	30 93 44 12 	sts	0x1244, r19	; 0x801244 <max_OCR4A+0x1>
    db1a:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <max_OCR4A>
    db1e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <HC_START_SPEED_1>
    db22:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <HC_START_SPEED_1+0x1>
    db26:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <max_OCR3A+0x1>
    db2a:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <max_OCR3A>
    db2e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <HC_MAX_SPEED_1>
    db32:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <HC_MAX_SPEED_1+0x1>
    db36:	90 93 af 11 	sts	0x11AF, r25	; 0x8011af <min_OCR3A+0x1>
    db3a:	80 93 ae 11 	sts	0x11AE, r24	; 0x8011ae <min_OCR3A>
    db3e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cutter_Step>
    db42:	f0 e0       	ldi	r31, 0x00	; 0
    db44:	ee 0f       	add	r30, r30
    db46:	ff 1f       	adc	r31, r31
    db48:	ed 5c       	subi	r30, 0xCD	; 205
    db4a:	f1 4f       	sbci	r31, 0xF1	; 241
    db4c:	80 81       	ld	r24, Z
    db4e:	91 81       	ldd	r25, Z+1	; 0x01
    db50:	90 93 25 12 	sts	0x1225, r25	; 0x801225 <Cutter_Width+0x1>
    db54:	80 93 24 12 	sts	0x1224, r24	; 0x801224 <Cutter_Width>
    db58:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <Cutting_Step>
    db5c:	f0 e0       	ldi	r31, 0x00	; 0
    db5e:	ee 0f       	add	r30, r30
    db60:	ff 1f       	adc	r31, r31
    db62:	e3 5c       	subi	r30, 0xC3	; 195
    db64:	f1 4f       	sbci	r31, 0xF1	; 241
    db66:	80 81       	ld	r24, Z
    db68:	91 81       	ldd	r25, Z+1	; 0x01
    db6a:	90 93 28 12 	sts	0x1228, r25	; 0x801228 <Cutting_Width+0x1>
    db6e:	80 93 27 12 	sts	0x1227, r24	; 0x801227 <Cutting_Width>
    db72:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <Sph_R_mm>
    db76:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <Sph_R_mm+0x1>
    db7a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <Sph_R_mm+0x2>
    db7e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <Sph_R_mm+0x3>
    db82:	9b 01       	movw	r18, r22
    db84:	ac 01       	movw	r20, r24
    db86:	0e 94 57 98 	call	0x130ae	; 0x130ae <__mulsi3>
    db8a:	60 93 1c 12 	sts	0x121C, r22	; 0x80121c <R_Quad>
    db8e:	70 93 1d 12 	sts	0x121D, r23	; 0x80121d <R_Quad+0x1>
    db92:	80 93 1e 12 	sts	0x121E, r24	; 0x80121e <R_Quad+0x2>
    db96:	90 93 1f 12 	sts	0x121F, r25	; 0x80121f <R_Quad+0x3>
    db9a:	61 e7       	ldi	r22, 0x71	; 113
    db9c:	7d ef       	ldi	r23, 0xFD	; 253
    db9e:	8e e7       	ldi	r24, 0x7E	; 126
    dba0:	93 e4       	ldi	r25, 0x43	; 67
    dba2:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z12MinimumStepZf>
    dba6:	1b 01       	movw	r2, r22
    dba8:	2c 01       	movw	r4, r24
    dbaa:	61 e7       	ldi	r22, 0x71	; 113
    dbac:	7d ef       	ldi	r23, 0xFD	; 253
    dbae:	8e e7       	ldi	r24, 0x7E	; 126
    dbb0:	93 e4       	ldi	r25, 0x43	; 67
    dbb2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12MinimumStepXf>
    dbb6:	d6 2e       	mov	r13, r22
    dbb8:	c7 2e       	mov	r12, r23
    dbba:	b8 2e       	mov	r11, r24
    dbbc:	a9 2e       	mov	r10, r25
    dbbe:	60 e0       	ldi	r22, 0x00	; 0
    dbc0:	70 e0       	ldi	r23, 0x00	; 0
    dbc2:	80 e8       	ldi	r24, 0x80	; 128
    dbc4:	9f e3       	ldi	r25, 0x3F	; 63
    dbc6:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z12MinimumStepZf>
    dbca:	7b 01       	movw	r14, r22
    dbcc:	8c 01       	movw	r16, r24
    dbce:	60 e0       	ldi	r22, 0x00	; 0
    dbd0:	70 e0       	ldi	r23, 0x00	; 0
    dbd2:	80 e8       	ldi	r24, 0x80	; 128
    dbd4:	9f e3       	ldi	r25, 0x3F	; 63
    dbd6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z12MinimumStepXf>
    dbda:	96 2e       	mov	r9, r22
    dbdc:	87 2e       	mov	r8, r23
    dbde:	78 2e       	mov	r7, r24
    dbe0:	69 2e       	mov	r6, r25
    dbe2:	2d 2d       	mov	r18, r13
    dbe4:	3c 2d       	mov	r19, r12
    dbe6:	4b 2d       	mov	r20, r11
    dbe8:	5a 2d       	mov	r21, r10
    dbea:	b1 01       	movw	r22, r2
    dbec:	c2 01       	movw	r24, r4
    dbee:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    dbf2:	87 fd       	sbrc	r24, 7
    dbf4:	04 c0       	rjmp	.+8      	; 0xdbfe <_Z17Update_Parametersv+0x212>
    dbf6:	d2 2c       	mov	r13, r2
    dbf8:	c3 2c       	mov	r12, r3
    dbfa:	b4 2c       	mov	r11, r4
    dbfc:	a5 2c       	mov	r10, r5
    dbfe:	29 2d       	mov	r18, r9
    dc00:	38 2d       	mov	r19, r8
    dc02:	47 2d       	mov	r20, r7
    dc04:	56 2d       	mov	r21, r6
    dc06:	b7 01       	movw	r22, r14
    dc08:	c8 01       	movw	r24, r16
    dc0a:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    dc0e:	18 16       	cp	r1, r24
    dc10:	24 f0       	brlt	.+8      	; 0xdc1a <_Z17Update_Parametersv+0x22e>
    dc12:	9e 2c       	mov	r9, r14
    dc14:	8f 2c       	mov	r8, r15
    dc16:	70 2e       	mov	r7, r16
    dc18:	61 2e       	mov	r6, r17
    dc1a:	07 ec       	ldi	r16, 0xC7	; 199
    dc1c:	14 e0       	ldi	r17, 0x04	; 4
    dc1e:	f1 2c       	mov	r15, r1
    dc20:	e1 2c       	mov	r14, r1
    dc22:	f8 01       	movw	r30, r16
    dc24:	65 85       	ldd	r22, Z+13	; 0x0d
    dc26:	76 85       	ldd	r23, Z+14	; 0x0e
    dc28:	87 85       	ldd	r24, Z+15	; 0x0f
    dc2a:	90 89       	ldd	r25, Z+16	; 0x10
    dc2c:	98 01       	movw	r18, r16
    dc2e:	2f 5f       	subi	r18, 0xFF	; 255
    dc30:	3f 4f       	sbci	r19, 0xFF	; 255
    dc32:	a8 01       	movw	r20, r16
    dc34:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z8Calc_K_ZfPhPi>
    dc38:	f8 01       	movw	r30, r16
    dc3a:	65 85       	ldd	r22, Z+13	; 0x0d
    dc3c:	76 85       	ldd	r23, Z+14	; 0x0e
    dc3e:	87 85       	ldd	r24, Z+15	; 0x0f
    dc40:	90 89       	ldd	r25, Z+16	; 0x10
    dc42:	98 01       	movw	r18, r16
    dc44:	2c 5f       	subi	r18, 0xFC	; 252
    dc46:	3f 4f       	sbci	r19, 0xFF	; 255
    dc48:	a8 01       	movw	r20, r16
    dc4a:	4d 5f       	subi	r20, 0xFD	; 253
    dc4c:	5f 4f       	sbci	r21, 0xFF	; 255
    dc4e:	0e 94 82 08 	call	0x1104	; 0x1104 <_Z8Calc_K_XfPhPi>
    dc52:	f2 e3       	ldi	r31, 0x32	; 50
    dc54:	ef 16       	cp	r14, r31
    dc56:	f1 04       	cpc	r15, r1
    dc58:	09 f0       	breq	.+2      	; 0xdc5c <_Z17Update_Parametersv+0x270>
    dc5a:	4e c0       	rjmp	.+156    	; 0xdcf8 <_Z17Update_Parametersv+0x30c>
    dc5c:	20 90 e8 09 	lds	r2, 0x09E8	; 0x8009e8 <Thread_Info+0x521>
    dc60:	30 90 e9 09 	lds	r3, 0x09E9	; 0x8009e9 <Thread_Info+0x522>
    dc64:	40 90 ea 09 	lds	r4, 0x09EA	; 0x8009ea <Thread_Info+0x523>
    dc68:	50 90 eb 09 	lds	r5, 0x09EB	; 0x8009eb <Thread_Info+0x524>
    dc6c:	2d 2d       	mov	r18, r13
    dc6e:	3c 2d       	mov	r19, r12
    dc70:	4b 2d       	mov	r20, r11
    dc72:	5a 2d       	mov	r21, r10
    dc74:	c2 01       	movw	r24, r4
    dc76:	b1 01       	movw	r22, r2
    dc78:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    dc7c:	87 fd       	sbrc	r24, 7
    dc7e:	0a c0       	rjmp	.+20     	; 0xdc94 <_Z17Update_Parametersv+0x2a8>
    dc80:	29 2d       	mov	r18, r9
    dc82:	38 2d       	mov	r19, r8
    dc84:	47 2d       	mov	r20, r7
    dc86:	56 2d       	mov	r21, r6
    dc88:	c2 01       	movw	r24, r4
    dc8a:	b1 01       	movw	r22, r2
    dc8c:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    dc90:	18 16       	cp	r1, r24
    dc92:	94 f5       	brge	.+100    	; 0xdcf8 <_Z17Update_Parametersv+0x30c>
    dc94:	29 2d       	mov	r18, r9
    dc96:	38 2d       	mov	r19, r8
    dc98:	47 2d       	mov	r20, r7
    dc9a:	56 2d       	mov	r21, r6
    dc9c:	6d 2d       	mov	r22, r13
    dc9e:	7c 2d       	mov	r23, r12
    dca0:	8b 2d       	mov	r24, r11
    dca2:	9a 2d       	mov	r25, r10
    dca4:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    dca8:	20 e0       	ldi	r18, 0x00	; 0
    dcaa:	30 e0       	ldi	r19, 0x00	; 0
    dcac:	40 e0       	ldi	r20, 0x00	; 0
    dcae:	5f e3       	ldi	r21, 0x3F	; 63
    dcb0:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    dcb4:	60 93 e8 09 	sts	0x09E8, r22	; 0x8009e8 <Thread_Info+0x521>
    dcb8:	70 93 e9 09 	sts	0x09E9, r23	; 0x8009e9 <Thread_Info+0x522>
    dcbc:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <Thread_Info+0x523>
    dcc0:	90 93 eb 09 	sts	0x09EB, r25	; 0x8009eb <Thread_Info+0x524>
    dcc4:	2c ed       	ldi	r18, 0xDC	; 220
    dcc6:	39 e0       	ldi	r19, 0x09	; 9
    dcc8:	4b ed       	ldi	r20, 0xDB	; 219
    dcca:	59 e0       	ldi	r21, 0x09	; 9
    dccc:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z8Calc_K_ZfPhPi>
    dcd0:	60 91 e8 09 	lds	r22, 0x09E8	; 0x8009e8 <Thread_Info+0x521>
    dcd4:	70 91 e9 09 	lds	r23, 0x09E9	; 0x8009e9 <Thread_Info+0x522>
    dcd8:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <Thread_Info+0x523>
    dcdc:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <Thread_Info+0x524>
    dce0:	2f ed       	ldi	r18, 0xDF	; 223
    dce2:	39 e0       	ldi	r19, 0x09	; 9
    dce4:	4e ed       	ldi	r20, 0xDE	; 222
    dce6:	59 e0       	ldi	r21, 0x09	; 9
    dce8:	0e 94 82 08 	call	0x1104	; 0x1104 <_Z8Calc_K_XfPhPi>
    dcec:	6f ef       	ldi	r22, 0xFF	; 255
    dcee:	7b e0       	ldi	r23, 0x0B	; 11
    dcf0:	82 e1       	ldi	r24, 0x12	; 18
    dcf2:	9c e0       	ldi	r25, 0x0C	; 12
    dcf4:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <_Z19Setup_Print_LCD_MSGPKcS0_>
    dcf8:	2f ef       	ldi	r18, 0xFF	; 255
    dcfa:	e2 1a       	sub	r14, r18
    dcfc:	f2 0a       	sbc	r15, r18
    dcfe:	06 5e       	subi	r16, 0xE6	; 230
    dd00:	1f 4f       	sbci	r17, 0xFF	; 255
    dd02:	83 e3       	ldi	r24, 0x33	; 51
    dd04:	e8 16       	cp	r14, r24
    dd06:	f1 04       	cpc	r15, r1
    dd08:	09 f0       	breq	.+2      	; 0xdd0c <_Z17Update_Parametersv+0x320>
    dd0a:	8b cf       	rjmp	.-234    	; 0xdc22 <_Z17Update_Parametersv+0x236>
    dd0c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z11Get_deg_DEGfh.part.13.constprop.31>
    dd10:	6c 8b       	std	Y+20, r22	; 0x14
    dd12:	7d 8b       	std	Y+21, r23	; 0x15
    dd14:	8e 8b       	std	Y+22, r24	; 0x16
    dd16:	9f 8b       	std	Y+23, r25	; 0x17
    dd18:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <_Z11Get_deg_DEGfh.constprop.9>
    dd1c:	68 8f       	std	Y+24, r22	; 0x18
    dd1e:	79 8f       	std	Y+25, r23	; 0x19
    dd20:	8a 8f       	std	Y+26, r24	; 0x1a
    dd22:	9b 8f       	std	Y+27, r25	; 0x1b
    dd24:	20 e3       	ldi	r18, 0x30	; 48
    dd26:	22 2e       	mov	r2, r18
    dd28:	22 e0       	ldi	r18, 0x02	; 2
    dd2a:	32 2e       	mov	r3, r18
    dd2c:	1b 8a       	std	Y+19, r1	; 0x13
    dd2e:	1a 8a       	std	Y+18, r1	; 0x12
    dd30:	61 01       	movw	r12, r2
    dd32:	92 e1       	ldi	r25, 0x12	; 18
    dd34:	c9 0e       	add	r12, r25
    dd36:	d1 1c       	adc	r13, r1
    dd38:	71 01       	movw	r14, r2
    dd3a:	ef ef       	ldi	r30, 0xFF	; 255
    dd3c:	ee 1a       	sub	r14, r30
    dd3e:	fe 0a       	sbc	r15, r30
    dd40:	f1 01       	movw	r30, r2
    dd42:	62 85       	ldd	r22, Z+10	; 0x0a
    dd44:	73 85       	ldd	r23, Z+11	; 0x0b
    dd46:	84 85       	ldd	r24, Z+12	; 0x0c
    dd48:	95 85       	ldd	r25, Z+13	; 0x0d
    dd4a:	21 85       	ldd	r18, Z+9	; 0x09
    dd4c:	21 30       	cpi	r18, 0x01	; 1
    dd4e:	09 f0       	breq	.+2      	; 0xdd52 <_Z17Update_Parametersv+0x366>
    dd50:	c5 c0       	rjmp	.+394    	; 0xdedc <_Z17Update_Parametersv+0x4f0>
    dd52:	86 01       	movw	r16, r12
    dd54:	97 01       	movw	r18, r14
    dd56:	a1 01       	movw	r20, r2
    dd58:	2a dd       	rcall	.-1452   	; 0xd7ae <_Z10Calc_C_DEGfPhPiS_>
    dd5a:	81 11       	cpse	r24, r1
    dd5c:	36 c0       	rjmp	.+108    	; 0xddca <_Z17Update_Parametersv+0x3de>
    dd5e:	60 e0       	ldi	r22, 0x00	; 0
    dd60:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    dd64:	8d e5       	ldi	r24, 0x5D	; 93
    dd66:	9c e0       	ldi	r25, 0x0C	; 12
    dd68:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    dd6c:	61 e0       	ldi	r22, 0x01	; 1
    dd6e:	80 e0       	ldi	r24, 0x00	; 0
    dd70:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
    dd74:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    dd78:	f3 e1       	ldi	r31, 0x13	; 19
    dd7a:	8f 9f       	mul	r24, r31
    dd7c:	c0 01       	movw	r24, r0
    dd7e:	11 24       	eor	r1, r1
    dd80:	8d 5c       	subi	r24, 0xCD	; 205
    dd82:	9d 4f       	sbci	r25, 0xFD	; 253
    dd84:	9f 93       	push	r25
    dd86:	8f 93       	push	r24
    dd88:	8e e5       	ldi	r24, 0x5E	; 94
    dd8a:	91 e1       	ldi	r25, 0x11	; 17
    dd8c:	9f 93       	push	r25
    dd8e:	8f 93       	push	r24
    dd90:	1f 92       	push	r1
    dd92:	f1 e1       	ldi	r31, 0x11	; 17
    dd94:	ff 93       	push	r31
    dd96:	81 e0       	ldi	r24, 0x01	; 1
    dd98:	90 e0       	ldi	r25, 0x00	; 0
    dd9a:	8c 0f       	add	r24, r28
    dd9c:	9d 1f       	adc	r25, r29
    dd9e:	9f 93       	push	r25
    dda0:	8f 93       	push	r24
    dda2:	0e 94 05 99 	call	0x1320a	; 0x1320a <snprintf>
    dda6:	ce 01       	movw	r24, r28
    dda8:	01 96       	adiw	r24, 0x01	; 1
    ddaa:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
    ddae:	9f ef       	ldi	r25, 0xFF	; 255
    ddb0:	e3 ed       	ldi	r30, 0xD3	; 211
    ddb2:	f0 e3       	ldi	r31, 0x30	; 48
    ddb4:	91 50       	subi	r25, 0x01	; 1
    ddb6:	e0 40       	sbci	r30, 0x00	; 0
    ddb8:	f0 40       	sbci	r31, 0x00	; 0
    ddba:	e1 f7       	brne	.-8      	; 0xddb4 <_Z17Update_Parametersv+0x3c8>
    ddbc:	00 c0       	rjmp	.+0      	; 0xddbe <_Z17Update_Parametersv+0x3d2>
    ddbe:	00 00       	nop
    ddc0:	0f b6       	in	r0, 0x3f	; 63
    ddc2:	f8 94       	cli
    ddc4:	de bf       	out	0x3e, r29	; 62
    ddc6:	0f be       	out	0x3f, r0	; 63
    ddc8:	cd bf       	out	0x3d, r28	; 61
    ddca:	ea 89       	ldd	r30, Y+18	; 0x12
    ddcc:	fb 89       	ldd	r31, Y+19	; 0x13
    ddce:	b0 97       	sbiw	r30, 0x20	; 32
    ddd0:	09 f0       	breq	.+2      	; 0xddd4 <_Z17Update_Parametersv+0x3e8>
    ddd2:	8c c0       	rjmp	.+280    	; 0xdeec <_Z17Update_Parametersv+0x500>
    ddd4:	80 90 9a 04 	lds	r8, 0x049A	; 0x80049a <Cone_Info+0x26a>
    ddd8:	90 90 9b 04 	lds	r9, 0x049B	; 0x80049b <Cone_Info+0x26b>
    dddc:	a0 90 9c 04 	lds	r10, 0x049C	; 0x80049c <Cone_Info+0x26c>
    dde0:	b0 90 9d 04 	lds	r11, 0x049D	; 0x80049d <Cone_Info+0x26d>
    dde4:	41 e0       	ldi	r20, 0x01	; 1
    dde6:	c5 01       	movw	r24, r10
    dde8:	b4 01       	movw	r22, r8
    ddea:	0e 94 9c 02 	call	0x538	; 0x538 <_Z8Get_B_ABffh.constprop.10>
    ddee:	6b 01       	movw	r12, r22
    ddf0:	7c 01       	movw	r14, r24
    ddf2:	40 e0       	ldi	r20, 0x00	; 0
    ddf4:	c5 01       	movw	r24, r10
    ddf6:	b4 01       	movw	r22, r8
    ddf8:	0e 94 9c 02 	call	0x538	; 0x538 <_Z8Get_B_ABffh.constprop.10>
    ddfc:	6c 8f       	std	Y+28, r22	; 0x1c
    ddfe:	7d 8f       	std	Y+29, r23	; 0x1d
    de00:	8e 8f       	std	Y+30, r24	; 0x1e
    de02:	9f 8f       	std	Y+31, r25	; 0x1f
    de04:	40 90 9e 04 	lds	r4, 0x049E	; 0x80049e <Cone_Info+0x26e>
    de08:	50 90 9f 04 	lds	r5, 0x049F	; 0x80049f <Cone_Info+0x26f>
    de0c:	60 90 a0 04 	lds	r6, 0x04A0	; 0x8004a0 <Cone_Info+0x270>
    de10:	70 90 a1 04 	lds	r7, 0x04A1	; 0x8004a1 <Cone_Info+0x271>
    de14:	a3 01       	movw	r20, r6
    de16:	92 01       	movw	r18, r4
    de18:	c7 01       	movw	r24, r14
    de1a:	b6 01       	movw	r22, r12
    de1c:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    de20:	18 16       	cp	r1, r24
    de22:	54 f0       	brlt	.+20     	; 0xde38 <_Z17Update_Parametersv+0x44c>
    de24:	a3 01       	movw	r20, r6
    de26:	92 01       	movw	r18, r4
    de28:	6c 8d       	ldd	r22, Y+28	; 0x1c
    de2a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    de2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    de2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    de30:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    de34:	87 ff       	sbrs	r24, 7
    de36:	2c c0       	rjmp	.+88     	; 0xde90 <_Z17Update_Parametersv+0x4a4>
    de38:	2c 8d       	ldd	r18, Y+28	; 0x1c
    de3a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    de3c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    de3e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    de40:	c7 01       	movw	r24, r14
    de42:	b6 01       	movw	r22, r12
    de44:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    de48:	20 e0       	ldi	r18, 0x00	; 0
    de4a:	30 e0       	ldi	r19, 0x00	; 0
    de4c:	40 e0       	ldi	r20, 0x00	; 0
    de4e:	5f e3       	ldi	r21, 0x3F	; 63
    de50:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    de54:	9b 01       	movw	r18, r22
    de56:	ac 01       	movw	r20, r24
    de58:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <Cone_Info+0x26e>
    de5c:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <Cone_Info+0x26f>
    de60:	40 93 a0 04 	sts	0x04A0, r20	; 0x8004a0 <Cone_Info+0x270>
    de64:	50 93 a1 04 	sts	0x04A1, r21	; 0x8004a1 <Cone_Info+0x271>
    de68:	82 ea       	ldi	r24, 0xA2	; 162
    de6a:	c8 2e       	mov	r12, r24
    de6c:	84 e0       	ldi	r24, 0x04	; 4
    de6e:	d8 2e       	mov	r13, r24
    de70:	91 e9       	ldi	r25, 0x91	; 145
    de72:	e9 2e       	mov	r14, r25
    de74:	94 e0       	ldi	r25, 0x04	; 4
    de76:	f9 2e       	mov	r15, r25
    de78:	00 e9       	ldi	r16, 0x90	; 144
    de7a:	14 e0       	ldi	r17, 0x04	; 4
    de7c:	c5 01       	movw	r24, r10
    de7e:	b4 01       	movw	r22, r8
    de80:	0e 94 5f 07 	call	0xebe	; 0xebe <_Z9Calc_C_ABffPhPiS_>
    de84:	68 e3       	ldi	r22, 0x38	; 56
    de86:	7c e0       	ldi	r23, 0x0C	; 12
    de88:	8b e4       	ldi	r24, 0x4B	; 75
    de8a:	9c e0       	ldi	r25, 0x0C	; 12
    de8c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <_Z19Setup_Print_LCD_MSGPKcS0_>
    de90:	ea 89       	ldd	r30, Y+18	; 0x12
    de92:	fb 89       	ldd	r31, Y+19	; 0x13
    de94:	31 96       	adiw	r30, 0x01	; 1
    de96:	fb 8b       	std	Y+19, r31	; 0x13
    de98:	ea 8b       	std	Y+18, r30	; 0x12
    de9a:	f3 e1       	ldi	r31, 0x13	; 19
    de9c:	2f 0e       	add	r2, r31
    de9e:	31 1c       	adc	r3, r1
    dea0:	8a 89       	ldd	r24, Y+18	; 0x12
    dea2:	9b 89       	ldd	r25, Y+19	; 0x13
    dea4:	82 97       	sbiw	r24, 0x22	; 34
    dea6:	09 f0       	breq	.+2      	; 0xdeaa <_Z17Update_Parametersv+0x4be>
    dea8:	43 cf       	rjmp	.-378    	; 0xdd30 <_Z17Update_Parametersv+0x344>
    deaa:	6f 96       	adiw	r28, 0x1f	; 31
    deac:	0f b6       	in	r0, 0x3f	; 63
    deae:	f8 94       	cli
    deb0:	de bf       	out	0x3e, r29	; 62
    deb2:	0f be       	out	0x3f, r0	; 63
    deb4:	cd bf       	out	0x3d, r28	; 61
    deb6:	df 91       	pop	r29
    deb8:	cf 91       	pop	r28
    deba:	1f 91       	pop	r17
    debc:	0f 91       	pop	r16
    debe:	ff 90       	pop	r15
    dec0:	ef 90       	pop	r14
    dec2:	df 90       	pop	r13
    dec4:	cf 90       	pop	r12
    dec6:	bf 90       	pop	r11
    dec8:	af 90       	pop	r10
    deca:	9f 90       	pop	r9
    decc:	8f 90       	pop	r8
    dece:	7f 90       	pop	r7
    ded0:	6f 90       	pop	r6
    ded2:	5f 90       	pop	r5
    ded4:	4f 90       	pop	r4
    ded6:	3f 90       	pop	r3
    ded8:	2f 90       	pop	r2
    deda:	08 95       	ret
    dedc:	26 85       	ldd	r18, Z+14	; 0x0e
    dede:	37 85       	ldd	r19, Z+15	; 0x0f
    dee0:	40 89       	ldd	r20, Z+16	; 0x10
    dee2:	51 89       	ldd	r21, Z+17	; 0x11
    dee4:	81 01       	movw	r16, r2
    dee6:	0e 94 5f 07 	call	0xebe	; 0xebe <_Z9Calc_C_ABffPhPiS_>
    deea:	37 cf       	rjmp	.-402    	; 0xdd5a <_Z17Update_Parametersv+0x36e>
    deec:	8a 89       	ldd	r24, Y+18	; 0x12
    deee:	9b 89       	ldd	r25, Y+19	; 0x13
    def0:	81 97       	sbiw	r24, 0x21	; 33
    def2:	71 f6       	brne	.-100    	; 0xde90 <_Z17Update_Parametersv+0x4a4>
    def4:	c0 90 ad 04 	lds	r12, 0x04AD	; 0x8004ad <Cone_Info+0x27d>
    def8:	d0 90 ae 04 	lds	r13, 0x04AE	; 0x8004ae <Cone_Info+0x27e>
    defc:	e0 90 af 04 	lds	r14, 0x04AF	; 0x8004af <Cone_Info+0x27f>
    df00:	f0 90 b0 04 	lds	r15, 0x04B0	; 0x8004b0 <Cone_Info+0x280>
    df04:	a7 01       	movw	r20, r14
    df06:	96 01       	movw	r18, r12
    df08:	6c 89       	ldd	r22, Y+20	; 0x14
    df0a:	7d 89       	ldd	r23, Y+21	; 0x15
    df0c:	8e 89       	ldd	r24, Y+22	; 0x16
    df0e:	9f 89       	ldd	r25, Y+23	; 0x17
    df10:	0e 94 36 97 	call	0x12e6c	; 0x12e6c <__gesf2>
    df14:	18 16       	cp	r1, r24
    df16:	54 f0       	brlt	.+20     	; 0xdf2c <_Z17Update_Parametersv+0x540>
    df18:	a7 01       	movw	r20, r14
    df1a:	96 01       	movw	r18, r12
    df1c:	68 8d       	ldd	r22, Y+24	; 0x18
    df1e:	79 8d       	ldd	r23, Y+25	; 0x19
    df20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    df22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    df24:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <__cmpsf2>
    df28:	87 ff       	sbrs	r24, 7
    df2a:	b2 cf       	rjmp	.-156    	; 0xde90 <_Z17Update_Parametersv+0x4a4>
    df2c:	28 8d       	ldd	r18, Y+24	; 0x18
    df2e:	39 8d       	ldd	r19, Y+25	; 0x19
    df30:	4a 8d       	ldd	r20, Y+26	; 0x1a
    df32:	5b 8d       	ldd	r21, Y+27	; 0x1b
    df34:	6c 89       	ldd	r22, Y+20	; 0x14
    df36:	7d 89       	ldd	r23, Y+21	; 0x15
    df38:	8e 89       	ldd	r24, Y+22	; 0x16
    df3a:	9f 89       	ldd	r25, Y+23	; 0x17
    df3c:	0e 94 36 95 	call	0x12a6c	; 0x12a6c <__addsf3>
    df40:	20 e0       	ldi	r18, 0x00	; 0
    df42:	30 e0       	ldi	r19, 0x00	; 0
    df44:	40 e0       	ldi	r20, 0x00	; 0
    df46:	5f e3       	ldi	r21, 0x3F	; 63
    df48:	0e 94 41 97 	call	0x12e82	; 0x12e82 <__mulsf3>
    df4c:	60 93 ad 04 	sts	0x04AD, r22	; 0x8004ad <Cone_Info+0x27d>
    df50:	70 93 ae 04 	sts	0x04AE, r23	; 0x8004ae <Cone_Info+0x27e>
    df54:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <Cone_Info+0x27f>
    df58:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <Cone_Info+0x280>
    df5c:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <Cone_Info+0x281>
    df60:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <Cone_Info+0x282>
    df64:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <Cone_Info+0x283>
    df68:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <Cone_Info+0x284>
    df6c:	05 eb       	ldi	r16, 0xB5	; 181
    df6e:	14 e0       	ldi	r17, 0x04	; 4
    df70:	24 ea       	ldi	r18, 0xA4	; 164
    df72:	34 e0       	ldi	r19, 0x04	; 4
    df74:	43 ea       	ldi	r20, 0xA3	; 163
    df76:	54 e0       	ldi	r21, 0x04	; 4
    df78:	1a dc       	rcall	.-1996   	; 0xd7ae <_Z10Calc_C_DEGfPhPiS_>
    df7a:	68 e3       	ldi	r22, 0x38	; 56
    df7c:	7c e0       	ldi	r23, 0x0C	; 12
    df7e:	86 e2       	ldi	r24, 0x26	; 38
    df80:	9c e0       	ldi	r25, 0x0C	; 12
    df82:	84 cf       	rjmp	.-248    	; 0xde8c <_Z17Update_Parametersv+0x4a0>

0000df84 <_Z17Reset_To_Defaultsv>:
    df84:	88 e0       	ldi	r24, 0x08	; 8
    df86:	97 e0       	ldi	r25, 0x07	; 7
    df88:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <ENC_LINE_PER_REV+0x1>
    df8c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <ENC_LINE_PER_REV>
    df90:	88 ec       	ldi	r24, 0xC8	; 200
    df92:	90 e0       	ldi	r25, 0x00	; 0
    df94:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    df98:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    df9c:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <SCREW_Z+0x1>
    dfa0:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <SCREW_Z>
    dfa4:	24 e0       	ldi	r18, 0x04	; 4
    dfa6:	30 e0       	ldi	r19, 0x00	; 0
    dfa8:	30 93 04 0a 	sts	0x0A04, r19	; 0x800a04 <McSTEP_Z+0x1>
    dfac:	20 93 03 0a 	sts	0x0A03, r18	; 0x800a03 <McSTEP_Z>
    dfb0:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    dfb4:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    dfb8:	90 93 08 0a 	sts	0x0A08, r25	; 0x800a08 <SCREW_X+0x1>
    dfbc:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <SCREW_X>
    dfc0:	80 e9       	ldi	r24, 0x90	; 144
    dfc2:	91 e0       	ldi	r25, 0x01	; 1
    dfc4:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <REBOUND_X+0x1>
    dfc8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <REBOUND_X>
    dfcc:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <REBOUND_Z+0x1>
    dfd0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <REBOUND_Z>
    dfd4:	30 93 fe 09 	sts	0x09FE, r19	; 0x8009fe <McSTEP_X+0x1>
    dfd8:	20 93 fd 09 	sts	0x09FD, r18	; 0x8009fd <McSTEP_X>
    dfdc:	49 e1       	ldi	r20, 0x19	; 25
    dfde:	40 93 fc 09 	sts	0x09FC, r20	; 0x8009fc <THRD_ACCEL>
    dfe2:	43 e0       	ldi	r20, 0x03	; 3
    dfe4:	50 e0       	ldi	r21, 0x00	; 0
    dfe6:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <FEED_ACCEL+0x1>
    dfea:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <FEED_ACCEL>
    dfee:	42 e0       	ldi	r20, 0x02	; 2
    dff0:	50 e0       	ldi	r21, 0x00	; 0
    dff2:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <MIN_FEED+0x1>
    dff6:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <MIN_FEED>
    dffa:	49 e1       	ldi	r20, 0x19	; 25
    dffc:	50 e0       	ldi	r21, 0x00	; 0
    dffe:	50 93 18 02 	sts	0x0218, r21	; 0x800218 <MAX_FEED+0x1>
    e002:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <MAX_FEED>
    e006:	64 e1       	ldi	r22, 0x14	; 20
    e008:	70 e0       	ldi	r23, 0x00	; 0
    e00a:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <MIN_aFEED+0x1>
    e00e:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <MIN_aFEED>
    e012:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <MAX_aFEED+0x1>
    e016:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <MAX_aFEED>
    e01a:	50 93 b7 04 	sts	0x04B7, r21	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    e01e:	40 93 b6 04 	sts	0x04B6, r20	; 0x8004b6 <MAX_RAPID_MOTION>
    e022:	8f ea       	ldi	r24, 0xAF	; 175
    e024:	90 e0       	ldi	r25, 0x00	; 0
    e026:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    e02a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <MIN_RAPID_MOTION>
    e02e:	30 93 fb 09 	sts	0x09FB, r19	; 0x8009fb <REPEAt+0x1>
    e032:	20 93 fa 09 	sts	0x09FA, r18	; 0x8009fa <REPEAt>
    e036:	81 e0       	ldi	r24, 0x01	; 1
    e038:	90 e0       	ldi	r25, 0x00	; 0
    e03a:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <HC_SCALE_1+0x1>
    e03e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <HC_SCALE_1>
    e042:	8a e0       	ldi	r24, 0x0A	; 10
    e044:	90 e0       	ldi	r25, 0x00	; 0
    e046:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <HC_SCALE_10+0x1>
    e04a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <HC_SCALE_10>
    e04e:	82 e7       	ldi	r24, 0x72	; 114
    e050:	91 e0       	ldi	r25, 0x01	; 1
    e052:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <HC_START_SPEED_1+0x1>
    e056:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <HC_START_SPEED_1>
    e05a:	29 eb       	ldi	r18, 0xB9	; 185
    e05c:	30 e0       	ldi	r19, 0x00	; 0
    e05e:	30 93 06 02 	sts	0x0206, r19	; 0x800206 <HC_MAX_SPEED_1+0x1>
    e062:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <HC_MAX_SPEED_1>
    e066:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <HC_START_SPEED_10+0x1>
    e06a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <HC_START_SPEED_10>
    e06e:	86 e3       	ldi	r24, 0x36	; 54
    e070:	90 e0       	ldi	r25, 0x00	; 0
    e072:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <HC_MAX_SPEED_10+0x1>
    e076:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <HC_MAX_SPEED_10>
    e07a:	81 e0       	ldi	r24, 0x01	; 1
    e07c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    e080:	b5 dc       	rcall	.-1686   	; 0xd9ec <_Z17Update_Parametersv>
    e082:	62 e7       	ldi	r22, 0x72	; 114
    e084:	7c e0       	ldi	r23, 0x0C	; 12
    e086:	86 e8       	ldi	r24, 0x86	; 134
    e088:	9c e0       	ldi	r25, 0x0C	; 12
    e08a:	0c 94 5b 30 	jmp	0x60b6	; 0x60b6 <_Z19Setup_Print_LCD_MSGPKcS0_>

0000e08e <_Z15Loop_Setup_Menuv.part.16>:
    e08e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    e092:	d1 e0       	ldi	r29, 0x01	; 1
    e094:	a3 e0       	ldi	r26, 0x03	; 3
    e096:	9a 2e       	mov	r9, r26
    e098:	aa 24       	eor	r10, r10
    e09a:	a3 94       	inc	r10
    e09c:	b1 2c       	mov	r11, r1
    e09e:	9f b1       	in	r25, 0x0f	; 15
    e0a0:	80 91 0c 12 	lds	r24, 0x120C	; 0x80120c <Button_Sel_Old>
    e0a4:	29 2f       	mov	r18, r25
    e0a6:	20 71       	andi	r18, 0x10	; 16
    e0a8:	82 2e       	mov	r8, r18
    e0aa:	94 fd       	sbrc	r25, 4
    e0ac:	17 c1       	rjmp	.+558    	; 0xe2dc <_Z15Loop_Setup_Menuv.part.16+0x24e>
    e0ae:	80 31       	cpi	r24, 0x10	; 16
    e0b0:	09 f0       	breq	.+2      	; 0xe0b4 <_Z15Loop_Setup_Menuv.part.16+0x26>
    e0b2:	1d c1       	rjmp	.+570    	; 0xe2ee <_Z15Loop_Setup_Menuv.part.16+0x260>
    e0b4:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
    e0b8:	81 11       	cpse	r24, r1
    e0ba:	0d c0       	rjmp	.+26     	; 0xe0d6 <_Z15Loop_Setup_Menuv.part.16+0x48>
    e0bc:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <SETUP_MODE>
    e0c0:	c3 30       	cpi	r28, 0x03	; 3
    e0c2:	09 f4       	brne	.+2      	; 0xe0c6 <_Z15Loop_Setup_Menuv.part.16+0x38>
    e0c4:	71 c0       	rjmp	.+226    	; 0xe1a8 <_Z15Loop_Setup_Menuv.part.16+0x11a>
    e0c6:	38 f5       	brcc	.+78     	; 0xe116 <_Z15Loop_Setup_Menuv.part.16+0x88>
    e0c8:	c1 30       	cpi	r28, 0x01	; 1
    e0ca:	99 f1       	breq	.+102    	; 0xe132 <_Z15Loop_Setup_Menuv.part.16+0xa4>
    e0cc:	c2 30       	cpi	r28, 0x02	; 2
    e0ce:	09 f4       	brne	.+2      	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e0d0:	41 c0       	rjmp	.+130    	; 0xe154 <_Z15Loop_Setup_Menuv.part.16+0xc6>
    e0d2:	d0 93 0b 12 	sts	0x120B, r29	; 0x80120b <key_sel_flag>
    e0d6:	0e 94 c1 65 	call	0xcb82	; 0xcb82 <_Z11Setup_Printv>
    e0da:	80 92 0c 12 	sts	0x120C, r8	; 0x80120c <Button_Sel_Old>
    e0de:	cf b1       	in	r28, 0x0f	; 15
    e0e0:	cf 70       	andi	r28, 0x0F	; 15
    e0e2:	80 91 0a 12 	lds	r24, 0x120A	; 0x80120a <Button_Old>
    e0e6:	c8 17       	cp	r28, r24
    e0e8:	09 f4       	brne	.+2      	; 0xe0ec <_Z15Loop_Setup_Menuv.part.16+0x5e>
    e0ea:	d2 c0       	rjmp	.+420    	; 0xe290 <_Z15Loop_Setup_Menuv.part.16+0x202>
    e0ec:	c7 30       	cpi	r28, 0x07	; 7
    e0ee:	09 f0       	breq	.+2      	; 0xe0f2 <_Z15Loop_Setup_Menuv.part.16+0x64>
    e0f0:	b9 c0       	rjmp	.+370    	; 0xe264 <_Z15Loop_Setup_Menuv.part.16+0x1d6>
    e0f2:	0e 94 c9 23 	call	0x4792	; 0x4792 <_Z22Setup_Key_Down_Pressedv>
    e0f6:	10 92 c5 11 	sts	0x11C5, r1	; 0x8011c5 <Setup_KeyCycle>
    e0fa:	c0 93 0a 12 	sts	0x120A, r28	; 0x80120a <Button_Old>
    e0fe:	0e 94 c1 65 	call	0xcb82	; 0xcb82 <_Z11Setup_Printv>
    e102:	8f e7       	ldi	r24, 0x7F	; 127
    e104:	9a e1       	ldi	r25, 0x1A	; 26
    e106:	26 e0       	ldi	r18, 0x06	; 6
    e108:	81 50       	subi	r24, 0x01	; 1
    e10a:	90 40       	sbci	r25, 0x00	; 0
    e10c:	20 40       	sbci	r18, 0x00	; 0
    e10e:	e1 f7       	brne	.-8      	; 0xe108 <_Z15Loop_Setup_Menuv.part.16+0x7a>
    e110:	00 c0       	rjmp	.+0      	; 0xe112 <_Z15Loop_Setup_Menuv.part.16+0x84>
    e112:	00 00       	nop
    e114:	c4 cf       	rjmp	.-120    	; 0xe09e <_Z15Loop_Setup_Menuv.part.16+0x10>
    e116:	c5 30       	cpi	r28, 0x05	; 5
    e118:	09 f4       	brne	.+2      	; 0xe11c <_Z15Loop_Setup_Menuv.part.16+0x8e>
    e11a:	99 c0       	rjmp	.+306    	; 0xe24e <_Z15Loop_Setup_Menuv.part.16+0x1c0>
    e11c:	08 f4       	brcc	.+2      	; 0xe120 <_Z15Loop_Setup_Menuv.part.16+0x92>
    e11e:	8c c0       	rjmp	.+280    	; 0xe238 <_Z15Loop_Setup_Menuv.part.16+0x1aa>
    e120:	c6 30       	cpi	r28, 0x06	; 6
    e122:	b9 f6       	brne	.-82     	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e124:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <bModeWithoutExit>
    e128:	88 23       	and	r24, r24
    e12a:	99 f2       	breq	.-90     	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e12c:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    e130:	96 c0       	rjmp	.+300    	; 0xe25e <_Z15Loop_Setup_Menuv.part.16+0x1d0>
    e132:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <bModeParameters>
    e136:	88 23       	and	r24, r24
    e138:	61 f2       	breq	.-104    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e13a:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    e13e:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <bEditParameters>
    e142:	88 23       	and	r24, r24
    e144:	21 f0       	breq	.+8      	; 0xe14e <_Z15Loop_Setup_Menuv.part.16+0xc0>
    e146:	10 92 c3 11 	sts	0x11C3, r1	; 0x8011c3 <bEditParameters>
    e14a:	50 dc       	rcall	.-1888   	; 0xd9ec <_Z17Update_Parametersv>
    e14c:	c2 cf       	rjmp	.-124    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e14e:	c0 93 c3 11 	sts	0x11C3, r28	; 0x8011c3 <bEditParameters>
    e152:	bf cf       	rjmp	.-130    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e154:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <CURRENT_THREAD>
    e158:	82 33       	cpi	r24, 0x32	; 50
    e15a:	19 f5       	brne	.+70     	; 0xe1a2 <_Z15Loop_Setup_Menuv.part.16+0x114>
    e15c:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <bEditUserThread>
    e160:	81 11       	cpse	r24, r1
    e162:	03 c0       	rjmp	.+6      	; 0xe16a <_Z15Loop_Setup_Menuv.part.16+0xdc>
    e164:	d0 93 c1 11 	sts	0x11C1, r29	; 0x8011c1 <bEditUserThread>
    e168:	b4 cf       	rjmp	.-152    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e16a:	60 91 e8 09 	lds	r22, 0x09E8	; 0x8009e8 <Thread_Info+0x521>
    e16e:	70 91 e9 09 	lds	r23, 0x09E9	; 0x8009e9 <Thread_Info+0x522>
    e172:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <Thread_Info+0x523>
    e176:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <Thread_Info+0x524>
    e17a:	2c ed       	ldi	r18, 0xDC	; 220
    e17c:	39 e0       	ldi	r19, 0x09	; 9
    e17e:	4b ed       	ldi	r20, 0xDB	; 219
    e180:	59 e0       	ldi	r21, 0x09	; 9
    e182:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z8Calc_K_ZfPhPi>
    e186:	60 91 e8 09 	lds	r22, 0x09E8	; 0x8009e8 <Thread_Info+0x521>
    e18a:	70 91 e9 09 	lds	r23, 0x09E9	; 0x8009e9 <Thread_Info+0x522>
    e18e:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <Thread_Info+0x523>
    e192:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <Thread_Info+0x524>
    e196:	2f ed       	ldi	r18, 0xDF	; 223
    e198:	39 e0       	ldi	r19, 0x09	; 9
    e19a:	4e ed       	ldi	r20, 0xDE	; 222
    e19c:	59 e0       	ldi	r21, 0x09	; 9
    e19e:	0e 94 82 08 	call	0x1104	; 0x1104 <_Z8Calc_K_XfPhPi>
    e1a2:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <bEditUserThread>
    e1a6:	95 cf       	rjmp	.-214    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e1a8:	80 91 c0 11 	lds	r24, 0x11C0	; 0x8011c0 <CURRENT_CONE>
    e1ac:	80 32       	cpi	r24, 0x20	; 32
    e1ae:	31 f5       	brne	.+76     	; 0xe1fc <_Z15Loop_Setup_Menuv.part.16+0x16e>
    e1b0:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <bEditUserConeAB>
    e1b4:	81 11       	cpse	r24, r1
    e1b6:	03 c0       	rjmp	.+6      	; 0xe1be <_Z15Loop_Setup_Menuv.part.16+0x130>
    e1b8:	d0 93 bf 11 	sts	0x11BF, r29	; 0x8011bf <bEditUserConeAB>
    e1bc:	8a cf       	rjmp	.-236    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e1be:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <Cone_Info+0x26e>
    e1c2:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <Cone_Info+0x26f>
    e1c6:	40 91 a0 04 	lds	r20, 0x04A0	; 0x8004a0 <Cone_Info+0x270>
    e1ca:	50 91 a1 04 	lds	r21, 0x04A1	; 0x8004a1 <Cone_Info+0x271>
    e1ce:	60 91 9a 04 	lds	r22, 0x049A	; 0x80049a <Cone_Info+0x26a>
    e1d2:	70 91 9b 04 	lds	r23, 0x049B	; 0x80049b <Cone_Info+0x26b>
    e1d6:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Cone_Info+0x26c>
    e1da:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Cone_Info+0x26d>
    e1de:	e2 ea       	ldi	r30, 0xA2	; 162
    e1e0:	ce 2e       	mov	r12, r30
    e1e2:	e4 e0       	ldi	r30, 0x04	; 4
    e1e4:	de 2e       	mov	r13, r30
    e1e6:	f1 e9       	ldi	r31, 0x91	; 145
    e1e8:	ef 2e       	mov	r14, r31
    e1ea:	f4 e0       	ldi	r31, 0x04	; 4
    e1ec:	ff 2e       	mov	r15, r31
    e1ee:	00 e9       	ldi	r16, 0x90	; 144
    e1f0:	14 e0       	ldi	r17, 0x04	; 4
    e1f2:	0e 94 5f 07 	call	0xebe	; 0xebe <_Z9Calc_C_ABffPhPiS_>
    e1f6:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <bEditUserConeAB>
    e1fa:	6b cf       	rjmp	.-298    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e1fc:	81 32       	cpi	r24, 0x21	; 33
    e1fe:	c9 f4       	brne	.+50     	; 0xe232 <_Z15Loop_Setup_Menuv.part.16+0x1a4>
    e200:	80 91 be 11 	lds	r24, 0x11BE	; 0x8011be <bEditUserConeDEG>
    e204:	81 11       	cpse	r24, r1
    e206:	03 c0       	rjmp	.+6      	; 0xe20e <_Z15Loop_Setup_Menuv.part.16+0x180>
    e208:	d0 93 be 11 	sts	0x11BE, r29	; 0x8011be <bEditUserConeDEG>
    e20c:	62 cf       	rjmp	.-316    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e20e:	60 91 ad 04 	lds	r22, 0x04AD	; 0x8004ad <Cone_Info+0x27d>
    e212:	70 91 ae 04 	lds	r23, 0x04AE	; 0x8004ae <Cone_Info+0x27e>
    e216:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <Cone_Info+0x27f>
    e21a:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <Cone_Info+0x280>
    e21e:	05 eb       	ldi	r16, 0xB5	; 181
    e220:	14 e0       	ldi	r17, 0x04	; 4
    e222:	24 ea       	ldi	r18, 0xA4	; 164
    e224:	34 e0       	ldi	r19, 0x04	; 4
    e226:	43 ea       	ldi	r20, 0xA3	; 163
    e228:	54 e0       	ldi	r21, 0x04	; 4
    e22a:	c1 da       	rcall	.-2686   	; 0xd7ae <_Z10Calc_C_DEGfPhPiS_>
    e22c:	10 92 be 11 	sts	0x11BE, r1	; 0x8011be <bEditUserConeDEG>
    e230:	50 cf       	rjmp	.-352    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e232:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <bEditUserConeAB>
    e236:	fa cf       	rjmp	.-12     	; 0xe22c <_Z15Loop_Setup_Menuv.part.16+0x19e>
    e238:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <bModeResetToDefaults>
    e23c:	88 23       	and	r24, r24
    e23e:	09 f4       	brne	.+2      	; 0xe242 <_Z15Loop_Setup_Menuv.part.16+0x1b4>
    e240:	48 cf       	rjmp	.-368    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e242:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
    e246:	9e de       	rcall	.-708    	; 0xdf84 <_Z17Reset_To_Defaultsv>
    e248:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <bModeResetToDefaults>
    e24c:	42 cf       	rjmp	.-380    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e24e:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <bModeSaveAndExit>
    e252:	88 23       	and	r24, r24
    e254:	09 f4       	brne	.+2      	; 0xe258 <_Z15Loop_Setup_Menuv.part.16+0x1ca>
    e256:	3d cf       	rjmp	.-390    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e258:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z8BeepBeepv>
    e25c:	ab d9       	rcall	.-3242   	; 0xd5b4 <_Z11Save_EEPROMv>
    e25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    e262:	37 cf       	rjmp	.-402    	; 0xe0d2 <_Z15Loop_Setup_Menuv.part.16+0x44>
    e264:	cb 30       	cpi	r28, 0x0B	; 11
    e266:	19 f4       	brne	.+6      	; 0xe26e <_Z15Loop_Setup_Menuv.part.16+0x1e0>
    e268:	0e 94 13 28 	call	0x5026	; 0x5026 <_Z20Setup_Key_Up_Pressedv>
    e26c:	44 cf       	rjmp	.-376    	; 0xe0f6 <_Z15Loop_Setup_Menuv.part.16+0x68>
    e26e:	cd 30       	cpi	r28, 0x0D	; 13
    e270:	19 f4       	brne	.+6      	; 0xe278 <_Z15Loop_Setup_Menuv.part.16+0x1ea>
    e272:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z23Setup_Key_Right_Pressedv>
    e276:	3f cf       	rjmp	.-386    	; 0xe0f6 <_Z15Loop_Setup_Menuv.part.16+0x68>
    e278:	ce 30       	cpi	r28, 0x0E	; 14
    e27a:	19 f4       	brne	.+6      	; 0xe282 <_Z15Loop_Setup_Menuv.part.16+0x1f4>
    e27c:	0e 94 2f 22 	call	0x445e	; 0x445e <_Z22Setup_Key_Left_Pressedv>
    e280:	3a cf       	rjmp	.-396    	; 0xe0f6 <_Z15Loop_Setup_Menuv.part.16+0x68>
    e282:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
    e286:	b0 92 16 02 	sts	0x0216, r11	; 0x800216 <scaleFloat+0x1>
    e28a:	a0 92 15 02 	sts	0x0215, r10	; 0x800215 <scaleFloat>
    e28e:	33 cf       	rjmp	.-410    	; 0xe0f6 <_Z15Loop_Setup_Menuv.part.16+0x68>
    e290:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <Setup_KeyCycle>
    e294:	8f 5f       	subi	r24, 0xFF	; 255
    e296:	80 93 c5 11 	sts	0x11C5, r24	; 0x8011c5 <Setup_KeyCycle>
    e29a:	85 30       	cpi	r24, 0x05	; 5
    e29c:	08 f4       	brcc	.+2      	; 0xe2a0 <_Z15Loop_Setup_Menuv.part.16+0x212>
    e29e:	2d cf       	rjmp	.-422    	; 0xe0fa <_Z15Loop_Setup_Menuv.part.16+0x6c>
    e2a0:	c7 30       	cpi	r28, 0x07	; 7
    e2a2:	39 f4       	brne	.+14     	; 0xe2b2 <_Z15Loop_Setup_Menuv.part.16+0x224>
    e2a4:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
    e2a8:	0e 94 c9 23 	call	0x4792	; 0x4792 <_Z22Setup_Key_Down_Pressedv>
    e2ac:	90 92 c5 11 	sts	0x11C5, r9	; 0x8011c5 <Setup_KeyCycle>
    e2b0:	24 cf       	rjmp	.-440    	; 0xe0fa <_Z15Loop_Setup_Menuv.part.16+0x6c>
    e2b2:	cb 30       	cpi	r28, 0x0B	; 11
    e2b4:	29 f4       	brne	.+10     	; 0xe2c0 <_Z15Loop_Setup_Menuv.part.16+0x232>
    e2b6:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
    e2ba:	0e 94 13 28 	call	0x5026	; 0x5026 <_Z20Setup_Key_Up_Pressedv>
    e2be:	f6 cf       	rjmp	.-20     	; 0xe2ac <_Z15Loop_Setup_Menuv.part.16+0x21e>
    e2c0:	cd 30       	cpi	r28, 0x0D	; 13
    e2c2:	29 f4       	brne	.+10     	; 0xe2ce <_Z15Loop_Setup_Menuv.part.16+0x240>
    e2c4:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
    e2c8:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <_Z23Setup_Key_Right_Pressedv>
    e2cc:	ef cf       	rjmp	.-34     	; 0xe2ac <_Z15Loop_Setup_Menuv.part.16+0x21e>
    e2ce:	ce 30       	cpi	r28, 0x0E	; 14
    e2d0:	69 f7       	brne	.-38     	; 0xe2ac <_Z15Loop_Setup_Menuv.part.16+0x21e>
    e2d2:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
    e2d6:	0e 94 2f 22 	call	0x445e	; 0x445e <_Z22Setup_Key_Left_Pressedv>
    e2da:	e8 cf       	rjmp	.-48     	; 0xe2ac <_Z15Loop_Setup_Menuv.part.16+0x21e>
    e2dc:	88 23       	and	r24, r24
    e2de:	09 f4       	brne	.+2      	; 0xe2e2 <_Z15Loop_Setup_Menuv.part.16+0x254>
    e2e0:	fa ce       	rjmp	.-524    	; 0xe0d6 <_Z15Loop_Setup_Menuv.part.16+0x48>
    e2e2:	80 31       	cpi	r24, 0x10	; 16
    e2e4:	09 f0       	breq	.+2      	; 0xe2e8 <_Z15Loop_Setup_Menuv.part.16+0x25a>
    e2e6:	f9 ce       	rjmp	.-526    	; 0xe0da <_Z15Loop_Setup_Menuv.part.16+0x4c>
    e2e8:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <key_sel_flag>
    e2ec:	f4 ce       	rjmp	.-536    	; 0xe0d6 <_Z15Loop_Setup_Menuv.part.16+0x48>
    e2ee:	81 11       	cpse	r24, r1
    e2f0:	f4 ce       	rjmp	.-536    	; 0xe0da <_Z15Loop_Setup_Menuv.part.16+0x4c>
    e2f2:	f1 ce       	rjmp	.-542    	; 0xe0d6 <_Z15Loop_Setup_Menuv.part.16+0x48>

0000e2f4 <_Z11Load_EEPROMv>:
    e2f4:	8f 92       	push	r8
    e2f6:	9f 92       	push	r9
    e2f8:	af 92       	push	r10
    e2fa:	bf 92       	push	r11
    e2fc:	cf 92       	push	r12
    e2fe:	df 92       	push	r13
    e300:	ef 92       	push	r14
    e302:	ff 92       	push	r15
    e304:	0f 93       	push	r16
    e306:	1f 93       	push	r17
    e308:	90 e0       	ldi	r25, 0x00	; 0
    e30a:	80 e0       	ldi	r24, 0x00	; 0
    e30c:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e310:	86 97       	sbiw	r24, 0x26	; 38
    e312:	41 f0       	breq	.+16     	; 0xe324 <_Z11Load_EEPROMv+0x30>
    e314:	66 e2       	ldi	r22, 0x26	; 38
    e316:	70 e0       	ldi	r23, 0x00	; 0
    e318:	90 e0       	ldi	r25, 0x00	; 0
    e31a:	80 e0       	ldi	r24, 0x00	; 0
    e31c:	0e 94 0f 95 	call	0x12a1e	; 0x12a1e <eeprom_update_word>
    e320:	31 de       	rcall	.-926    	; 0xdf84 <_Z17Reset_To_Defaultsv>
    e322:	48 d9       	rcall	.-3440   	; 0xd5b4 <_Z11Save_EEPROMv>
    e324:	82 e0       	ldi	r24, 0x02	; 2
    e326:	90 e0       	ldi	r25, 0x00	; 0
    e328:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e32c:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <ENC_LINE_PER_REV+0x1>
    e330:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <ENC_LINE_PER_REV>
    e334:	84 e0       	ldi	r24, 0x04	; 4
    e336:	90 e0       	ldi	r25, 0x00	; 0
    e338:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e33c:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <MOTOR_Z_STEP_PER_REV+0x1>
    e340:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <MOTOR_Z_STEP_PER_REV>
    e344:	86 e0       	ldi	r24, 0x06	; 6
    e346:	90 e0       	ldi	r25, 0x00	; 0
    e348:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e34c:	90 93 02 0a 	sts	0x0A02, r25	; 0x800a02 <SCREW_Z+0x1>
    e350:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <SCREW_Z>
    e354:	88 e0       	ldi	r24, 0x08	; 8
    e356:	90 e0       	ldi	r25, 0x00	; 0
    e358:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e35c:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <McSTEP_Z+0x1>
    e360:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <McSTEP_Z>
    e364:	8a e0       	ldi	r24, 0x0A	; 10
    e366:	90 e0       	ldi	r25, 0x00	; 0
    e368:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e36c:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <MOTOR_X_STEP_PER_REV+0x1>
    e370:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <MOTOR_X_STEP_PER_REV>
    e374:	8c e0       	ldi	r24, 0x0C	; 12
    e376:	90 e0       	ldi	r25, 0x00	; 0
    e378:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e37c:	90 93 08 0a 	sts	0x0A08, r25	; 0x800a08 <SCREW_X+0x1>
    e380:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <SCREW_X>
    e384:	8e e0       	ldi	r24, 0x0E	; 14
    e386:	90 e0       	ldi	r25, 0x00	; 0
    e388:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e38c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <REBOUND_X+0x1>
    e390:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <REBOUND_X>
    e394:	80 e1       	ldi	r24, 0x10	; 16
    e396:	90 e0       	ldi	r25, 0x00	; 0
    e398:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e39c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <REBOUND_Z+0x1>
    e3a0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <REBOUND_Z>
    e3a4:	82 e1       	ldi	r24, 0x12	; 18
    e3a6:	90 e0       	ldi	r25, 0x00	; 0
    e3a8:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e3ac:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <McSTEP_X+0x1>
    e3b0:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <McSTEP_X>
    e3b4:	84 e1       	ldi	r24, 0x14	; 20
    e3b6:	90 e0       	ldi	r25, 0x00	; 0
    e3b8:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e3bc:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <THRD_ACCEL>
    e3c0:	86 e1       	ldi	r24, 0x16	; 22
    e3c2:	90 e0       	ldi	r25, 0x00	; 0
    e3c4:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e3c8:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <FEED_ACCEL+0x1>
    e3cc:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <FEED_ACCEL>
    e3d0:	88 e1       	ldi	r24, 0x18	; 24
    e3d2:	90 e0       	ldi	r25, 0x00	; 0
    e3d4:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e3d8:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <MIN_FEED+0x1>
    e3dc:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <MIN_FEED>
    e3e0:	8a e1       	ldi	r24, 0x1A	; 26
    e3e2:	90 e0       	ldi	r25, 0x00	; 0
    e3e4:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e3e8:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <MAX_FEED+0x1>
    e3ec:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <MAX_FEED>
    e3f0:	8c e1       	ldi	r24, 0x1C	; 28
    e3f2:	90 e0       	ldi	r25, 0x00	; 0
    e3f4:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e3f8:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <MIN_aFEED+0x1>
    e3fc:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <MIN_aFEED>
    e400:	8e e1       	ldi	r24, 0x1E	; 30
    e402:	90 e0       	ldi	r25, 0x00	; 0
    e404:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e408:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <MAX_aFEED+0x1>
    e40c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <MAX_aFEED>
    e410:	80 e2       	ldi	r24, 0x20	; 32
    e412:	90 e0       	ldi	r25, 0x00	; 0
    e414:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e418:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    e41c:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <MAX_RAPID_MOTION>
    e420:	82 e2       	ldi	r24, 0x22	; 34
    e422:	90 e0       	ldi	r25, 0x00	; 0
    e424:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e428:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    e42c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <MIN_RAPID_MOTION>
    e430:	84 e2       	ldi	r24, 0x24	; 36
    e432:	90 e0       	ldi	r25, 0x00	; 0
    e434:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e438:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <REPEAt+0x1>
    e43c:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <REPEAt>
    e440:	86 e2       	ldi	r24, 0x26	; 38
    e442:	90 e0       	ldi	r25, 0x00	; 0
    e444:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e448:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <HC_SCALE_1+0x1>
    e44c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <HC_SCALE_1>
    e450:	88 e2       	ldi	r24, 0x28	; 40
    e452:	90 e0       	ldi	r25, 0x00	; 0
    e454:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e458:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <HC_SCALE_10+0x1>
    e45c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <HC_SCALE_10>
    e460:	8a e2       	ldi	r24, 0x2A	; 42
    e462:	90 e0       	ldi	r25, 0x00	; 0
    e464:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e468:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <HC_START_SPEED_1+0x1>
    e46c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <HC_START_SPEED_1>
    e470:	8c e2       	ldi	r24, 0x2C	; 44
    e472:	90 e0       	ldi	r25, 0x00	; 0
    e474:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e478:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <HC_MAX_SPEED_1+0x1>
    e47c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <HC_MAX_SPEED_1>
    e480:	8e e2       	ldi	r24, 0x2E	; 46
    e482:	90 e0       	ldi	r25, 0x00	; 0
    e484:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e488:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <HC_START_SPEED_10+0x1>
    e48c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <HC_START_SPEED_10>
    e490:	80 e3       	ldi	r24, 0x30	; 48
    e492:	90 e0       	ldi	r25, 0x00	; 0
    e494:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e498:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <HC_MAX_SPEED_10+0x1>
    e49c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <HC_MAX_SPEED_10>
    e4a0:	82 e3       	ldi	r24, 0x32	; 50
    e4a2:	90 e0       	ldi	r25, 0x00	; 0
    e4a4:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e4a8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    e4ac:	9f da       	rcall	.-2754   	; 0xd9ec <_Z17Update_Parametersv>
    e4ae:	84 e3       	ldi	r24, 0x34	; 52
    e4b0:	90 e0       	ldi	r25, 0x00	; 0
    e4b2:	0e 94 fd 94 	call	0x129fa	; 0x129fa <eeprom_read_dword>
    e4b6:	4b 01       	movw	r8, r22
    e4b8:	5c 01       	movw	r10, r24
    e4ba:	80 92 e8 09 	sts	0x09E8, r8	; 0x8009e8 <Thread_Info+0x521>
    e4be:	90 92 e9 09 	sts	0x09E9, r9	; 0x8009e9 <Thread_Info+0x522>
    e4c2:	a0 92 ea 09 	sts	0x09EA, r10	; 0x8009ea <Thread_Info+0x523>
    e4c6:	b0 92 eb 09 	sts	0x09EB, r11	; 0x8009eb <Thread_Info+0x524>
    e4ca:	88 e3       	ldi	r24, 0x38	; 56
    e4cc:	90 e0       	ldi	r25, 0x00	; 0
    e4ce:	0e 94 02 95 	call	0x12a04	; 0x12a04 <eeprom_read_word>
    e4d2:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <Thread_Info+0x525>
    e4d6:	2c ed       	ldi	r18, 0xDC	; 220
    e4d8:	39 e0       	ldi	r19, 0x09	; 9
    e4da:	4b ed       	ldi	r20, 0xDB	; 219
    e4dc:	59 e0       	ldi	r21, 0x09	; 9
    e4de:	c5 01       	movw	r24, r10
    e4e0:	b4 01       	movw	r22, r8
    e4e2:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z8Calc_K_ZfPhPi>
    e4e6:	60 91 e8 09 	lds	r22, 0x09E8	; 0x8009e8 <Thread_Info+0x521>
    e4ea:	70 91 e9 09 	lds	r23, 0x09E9	; 0x8009e9 <Thread_Info+0x522>
    e4ee:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <Thread_Info+0x523>
    e4f2:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <Thread_Info+0x524>
    e4f6:	2f ed       	ldi	r18, 0xDF	; 223
    e4f8:	39 e0       	ldi	r19, 0x09	; 9
    e4fa:	4e ed       	ldi	r20, 0xDE	; 222
    e4fc:	59 e0       	ldi	r21, 0x09	; 9
    e4fe:	0e 94 82 08 	call	0x1104	; 0x1104 <_Z8Calc_K_XfPhPi>
    e502:	8a e3       	ldi	r24, 0x3A	; 58
    e504:	90 e0       	ldi	r25, 0x00	; 0
    e506:	0e 94 fd 94 	call	0x129fa	; 0x129fa <eeprom_read_dword>
    e50a:	4b 01       	movw	r8, r22
    e50c:	5c 01       	movw	r10, r24
    e50e:	80 92 9a 04 	sts	0x049A, r8	; 0x80049a <Cone_Info+0x26a>
    e512:	90 92 9b 04 	sts	0x049B, r9	; 0x80049b <Cone_Info+0x26b>
    e516:	a0 92 9c 04 	sts	0x049C, r10	; 0x80049c <Cone_Info+0x26c>
    e51a:	b0 92 9d 04 	sts	0x049D, r11	; 0x80049d <Cone_Info+0x26d>
    e51e:	8e e3       	ldi	r24, 0x3E	; 62
    e520:	90 e0       	ldi	r25, 0x00	; 0
    e522:	0e 94 fd 94 	call	0x129fa	; 0x129fa <eeprom_read_dword>
    e526:	9b 01       	movw	r18, r22
    e528:	ac 01       	movw	r20, r24
    e52a:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <Cone_Info+0x26e>
    e52e:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <Cone_Info+0x26f>
    e532:	40 93 a0 04 	sts	0x04A0, r20	; 0x8004a0 <Cone_Info+0x270>
    e536:	50 93 a1 04 	sts	0x04A1, r21	; 0x8004a1 <Cone_Info+0x271>
    e53a:	82 ea       	ldi	r24, 0xA2	; 162
    e53c:	c8 2e       	mov	r12, r24
    e53e:	84 e0       	ldi	r24, 0x04	; 4
    e540:	d8 2e       	mov	r13, r24
    e542:	91 e9       	ldi	r25, 0x91	; 145
    e544:	e9 2e       	mov	r14, r25
    e546:	94 e0       	ldi	r25, 0x04	; 4
    e548:	f9 2e       	mov	r15, r25
    e54a:	00 e9       	ldi	r16, 0x90	; 144
    e54c:	14 e0       	ldi	r17, 0x04	; 4
    e54e:	c5 01       	movw	r24, r10
    e550:	b4 01       	movw	r22, r8
    e552:	0e 94 5f 07 	call	0xebe	; 0xebe <_Z9Calc_C_ABffPhPiS_>
    e556:	82 e4       	ldi	r24, 0x42	; 66
    e558:	90 e0       	ldi	r25, 0x00	; 0
    e55a:	0e 94 fd 94 	call	0x129fa	; 0x129fa <eeprom_read_dword>
    e55e:	60 93 ad 04 	sts	0x04AD, r22	; 0x8004ad <Cone_Info+0x27d>
    e562:	70 93 ae 04 	sts	0x04AE, r23	; 0x8004ae <Cone_Info+0x27e>
    e566:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <Cone_Info+0x27f>
    e56a:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <Cone_Info+0x280>
    e56e:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <Cone_Info+0x281>
    e572:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <Cone_Info+0x282>
    e576:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <Cone_Info+0x283>
    e57a:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <Cone_Info+0x284>
    e57e:	05 eb       	ldi	r16, 0xB5	; 181
    e580:	14 e0       	ldi	r17, 0x04	; 4
    e582:	24 ea       	ldi	r18, 0xA4	; 164
    e584:	34 e0       	ldi	r19, 0x04	; 4
    e586:	43 ea       	ldi	r20, 0xA3	; 163
    e588:	54 e0       	ldi	r21, 0x04	; 4
    e58a:	11 d9       	rcall	.-3550   	; 0xd7ae <_Z10Calc_C_DEGfPhPiS_>
    e58c:	1f 91       	pop	r17
    e58e:	0f 91       	pop	r16
    e590:	ff 90       	pop	r15
    e592:	ef 90       	pop	r14
    e594:	df 90       	pop	r13
    e596:	cf 90       	pop	r12
    e598:	bf 90       	pop	r11
    e59a:	af 90       	pop	r10
    e59c:	9f 90       	pop	r9
    e59e:	8f 90       	pop	r8
    e5a0:	08 95       	ret

0000e5a2 <__vector_23>:
    e5a2:	1f 92       	push	r1
    e5a4:	0f 92       	push	r0
    e5a6:	0f b6       	in	r0, 0x3f	; 63
    e5a8:	0f 92       	push	r0
    e5aa:	11 24       	eor	r1, r1
    e5ac:	2f 93       	push	r18
    e5ae:	3f 93       	push	r19
    e5b0:	8f 93       	push	r24
    e5b2:	9f 93       	push	r25
    e5b4:	af 93       	push	r26
    e5b6:	bf 93       	push	r27
    e5b8:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <timer0_millis>
    e5bc:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <timer0_millis+0x1>
    e5c0:	a0 91 cd 11 	lds	r26, 0x11CD	; 0x8011cd <timer0_millis+0x2>
    e5c4:	b0 91 ce 11 	lds	r27, 0x11CE	; 0x8011ce <timer0_millis+0x3>
    e5c8:	30 91 ca 11 	lds	r19, 0x11CA	; 0x8011ca <timer0_fract>
    e5cc:	23 e0       	ldi	r18, 0x03	; 3
    e5ce:	23 0f       	add	r18, r19
    e5d0:	2d 37       	cpi	r18, 0x7D	; 125
    e5d2:	58 f5       	brcc	.+86     	; 0xe62a <__vector_23+0x88>
    e5d4:	01 96       	adiw	r24, 0x01	; 1
    e5d6:	a1 1d       	adc	r26, r1
    e5d8:	b1 1d       	adc	r27, r1
    e5da:	20 93 ca 11 	sts	0x11CA, r18	; 0x8011ca <timer0_fract>
    e5de:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <timer0_millis>
    e5e2:	90 93 cc 11 	sts	0x11CC, r25	; 0x8011cc <timer0_millis+0x1>
    e5e6:	a0 93 cd 11 	sts	0x11CD, r26	; 0x8011cd <timer0_millis+0x2>
    e5ea:	b0 93 ce 11 	sts	0x11CE, r27	; 0x8011ce <timer0_millis+0x3>
    e5ee:	80 91 c6 11 	lds	r24, 0x11C6	; 0x8011c6 <timer0_overflow_count>
    e5f2:	90 91 c7 11 	lds	r25, 0x11C7	; 0x8011c7 <timer0_overflow_count+0x1>
    e5f6:	a0 91 c8 11 	lds	r26, 0x11C8	; 0x8011c8 <timer0_overflow_count+0x2>
    e5fa:	b0 91 c9 11 	lds	r27, 0x11C9	; 0x8011c9 <timer0_overflow_count+0x3>
    e5fe:	01 96       	adiw	r24, 0x01	; 1
    e600:	a1 1d       	adc	r26, r1
    e602:	b1 1d       	adc	r27, r1
    e604:	80 93 c6 11 	sts	0x11C6, r24	; 0x8011c6 <timer0_overflow_count>
    e608:	90 93 c7 11 	sts	0x11C7, r25	; 0x8011c7 <timer0_overflow_count+0x1>
    e60c:	a0 93 c8 11 	sts	0x11C8, r26	; 0x8011c8 <timer0_overflow_count+0x2>
    e610:	b0 93 c9 11 	sts	0x11C9, r27	; 0x8011c9 <timer0_overflow_count+0x3>
    e614:	bf 91       	pop	r27
    e616:	af 91       	pop	r26
    e618:	9f 91       	pop	r25
    e61a:	8f 91       	pop	r24
    e61c:	3f 91       	pop	r19
    e61e:	2f 91       	pop	r18
    e620:	0f 90       	pop	r0
    e622:	0f be       	out	0x3f, r0	; 63
    e624:	0f 90       	pop	r0
    e626:	1f 90       	pop	r1
    e628:	18 95       	reti
    e62a:	26 e8       	ldi	r18, 0x86	; 134
    e62c:	23 0f       	add	r18, r19
    e62e:	02 96       	adiw	r24, 0x02	; 2
    e630:	a1 1d       	adc	r26, r1
    e632:	b1 1d       	adc	r27, r1
    e634:	d2 cf       	rjmp	.-92     	; 0xe5da <__vector_23+0x38>

0000e636 <__vector_48>:
    e636:	1f 92       	push	r1
    e638:	0f 92       	push	r0
    e63a:	0f b6       	in	r0, 0x3f	; 63
    e63c:	0f 92       	push	r0
    e63e:	11 24       	eor	r1, r1
    e640:	2f 93       	push	r18
    e642:	3f 93       	push	r19
    e644:	4f 93       	push	r20
    e646:	5f 93       	push	r21
    e648:	6f 93       	push	r22
    e64a:	7f 93       	push	r23
    e64c:	8f 93       	push	r24
    e64e:	9f 93       	push	r25
    e650:	af 93       	push	r26
    e652:	bf 93       	push	r27
    e654:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e658:	8f 77       	andi	r24, 0x7F	; 127
    e65a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e65e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e662:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e666:	01 96       	adiw	r24, 0x01	; 1
    e668:	20 91 d3 11 	lds	r18, 0x11D3	; 0x8011d3 <Tacho_Count>
    e66c:	30 91 d4 11 	lds	r19, 0x11D4	; 0x8011d4 <Tacho_Count+0x1>
    e670:	82 0f       	add	r24, r18
    e672:	93 1f       	adc	r25, r19
    e674:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <Tacho_Count+0x1>
    e678:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <Tacho_Count>
    e67c:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    e680:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    e684:	28 17       	cp	r18, r24
    e686:	39 07       	cpc	r19, r25
    e688:	9c f4       	brge	.+38     	; 0xe6b0 <__vector_48+0x7a>
    e68a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e68e:	80 68       	ori	r24, 0x80	; 128
    e690:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e694:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <Tacho_Count>
    e698:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <Tacho_Count+0x1>
    e69c:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    e6a0:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    e6a4:	82 1b       	sub	r24, r18
    e6a6:	93 0b       	sbc	r25, r19
    e6a8:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <Tacho_Count+0x1>
    e6ac:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <Tacho_Count>
    e6b0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    e6b4:	82 30       	cpi	r24, 0x02	; 2
    e6b6:	09 f0       	breq	.+2      	; 0xe6ba <__vector_48+0x84>
    e6b8:	44 c0       	rjmp	.+136    	; 0xe742 <__vector_48+0x10c>
    e6ba:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
    e6be:	82 30       	cpi	r24, 0x02	; 2
    e6c0:	09 f0       	breq	.+2      	; 0xe6c4 <__vector_48+0x8e>
    e6c2:	d2 c0       	rjmp	.+420    	; 0xe868 <__vector_48+0x232>
    e6c4:	f4 99       	sbic	0x1e, 4	; 30
    e6c6:	15 c0       	rjmp	.+42     	; 0xe6f2 <__vector_48+0xbc>
    e6c8:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    e6cc:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    e6d0:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    e6d4:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    e6d8:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    e6dc:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e6e0:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e6e4:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e6e8:	84 17       	cp	r24, r20
    e6ea:	95 07       	cpc	r25, r21
    e6ec:	a6 07       	cpc	r26, r22
    e6ee:	b7 07       	cpc	r27, r23
    e6f0:	bc f1       	brlt	.+110    	; 0xe760 <__vector_48+0x12a>
    e6f2:	f4 9b       	sbis	0x1e, 4	; 30
    e6f4:	15 c0       	rjmp	.+42     	; 0xe720 <__vector_48+0xea>
    e6f6:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    e6fa:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    e6fe:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    e702:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    e706:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    e70a:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e70e:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e712:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e716:	48 17       	cp	r20, r24
    e718:	59 07       	cpc	r21, r25
    e71a:	6a 07       	cpc	r22, r26
    e71c:	7b 07       	cpc	r23, r27
    e71e:	04 f1       	brlt	.+64     	; 0xe760 <__vector_48+0x12a>
    e720:	80 91 30 12 	lds	r24, 0x1230	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
    e724:	88 23       	and	r24, r24
    e726:	e1 f0       	breq	.+56     	; 0xe760 <__vector_48+0x12a>
    e728:	81 e0       	ldi	r24, 0x01	; 1
    e72a:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <X_WORKING_RAPID_FLAG>
    e72e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e732:	92 e0       	ldi	r25, 0x02	; 2
    e734:	89 27       	eor	r24, r25
    e736:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e73a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    e73e:	81 ff       	sbrs	r24, 1
    e740:	55 c0       	rjmp	.+170    	; 0xe7ec <__vector_48+0x1b6>
    e742:	bf 91       	pop	r27
    e744:	af 91       	pop	r26
    e746:	9f 91       	pop	r25
    e748:	8f 91       	pop	r24
    e74a:	7f 91       	pop	r23
    e74c:	6f 91       	pop	r22
    e74e:	5f 91       	pop	r21
    e750:	4f 91       	pop	r20
    e752:	3f 91       	pop	r19
    e754:	2f 91       	pop	r18
    e756:	0f 90       	pop	r0
    e758:	0f be       	out	0x3f, r0	; 63
    e75a:	0f 90       	pop	r0
    e75c:	1f 90       	pop	r1
    e75e:	18 95       	reti
    e760:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e764:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e768:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    e76c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    e770:	28 17       	cp	r18, r24
    e772:	39 07       	cpc	r19, r25
    e774:	c0 f5       	brcc	.+112    	; 0xe7e6 <__vector_48+0x1b0>
    e776:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e77a:	92 e0       	ldi	r25, 0x02	; 2
    e77c:	89 27       	eor	r24, r25
    e77e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e782:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    e786:	81 fd       	sbrc	r24, 1
    e788:	dc cf       	rjmp	.-72     	; 0xe742 <__vector_48+0x10c>
    e78a:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    e78e:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e792:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e796:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e79a:	f4 99       	sbic	0x1e, 4	; 30
    e79c:	20 c0       	rjmp	.+64     	; 0xe7de <__vector_48+0x1a8>
    e79e:	01 96       	adiw	r24, 0x01	; 1
    e7a0:	a1 1d       	adc	r26, r1
    e7a2:	b1 1d       	adc	r27, r1
    e7a4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    e7a8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    e7ac:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    e7b0:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    e7b4:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    e7b8:	8f 5f       	subi	r24, 0xFF	; 255
    e7ba:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    e7be:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    e7c2:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    e7c6:	82 17       	cp	r24, r18
    e7c8:	13 06       	cpc	r1, r19
    e7ca:	0c f4       	brge	.+2      	; 0xe7ce <__vector_48+0x198>
    e7cc:	ba cf       	rjmp	.-140    	; 0xe742 <__vector_48+0x10c>
    e7ce:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    e7d2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e7d6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e7da:	01 96       	adiw	r24, 0x01	; 1
    e7dc:	3c c0       	rjmp	.+120    	; 0xe856 <__vector_48+0x220>
    e7de:	01 97       	sbiw	r24, 0x01	; 1
    e7e0:	a1 09       	sbc	r26, r1
    e7e2:	b1 09       	sbc	r27, r1
    e7e4:	df cf       	rjmp	.-66     	; 0xe7a4 <__vector_48+0x16e>
    e7e6:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
    e7ea:	ab cf       	rjmp	.-170    	; 0xe742 <__vector_48+0x10c>
    e7ec:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    e7f0:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e7f4:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e7f8:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e7fc:	f4 99       	sbic	0x1e, 4	; 30
    e7fe:	30 c0       	rjmp	.+96     	; 0xe860 <__vector_48+0x22a>
    e800:	01 96       	adiw	r24, 0x01	; 1
    e802:	a1 1d       	adc	r26, r1
    e804:	b1 1d       	adc	r27, r1
    e806:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    e80a:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    e80e:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    e812:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    e816:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e81a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e81e:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    e822:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    e826:	82 17       	cp	r24, r18
    e828:	93 07       	cpc	r25, r19
    e82a:	08 f0       	brcs	.+2      	; 0xe82e <__vector_48+0x1f8>
    e82c:	8a cf       	rjmp	.-236    	; 0xe742 <__vector_48+0x10c>
    e82e:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    e832:	8f 5f       	subi	r24, 0xFF	; 255
    e834:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    e838:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    e83c:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    e840:	82 17       	cp	r24, r18
    e842:	13 06       	cpc	r1, r19
    e844:	0c f4       	brge	.+2      	; 0xe848 <__vector_48+0x212>
    e846:	7d cf       	rjmp	.-262    	; 0xe742 <__vector_48+0x10c>
    e848:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    e84c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e850:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e854:	01 97       	sbiw	r24, 0x01	; 1
    e856:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e85a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e85e:	71 cf       	rjmp	.-286    	; 0xe742 <__vector_48+0x10c>
    e860:	01 97       	sbiw	r24, 0x01	; 1
    e862:	a1 09       	sbc	r26, r1
    e864:	b1 09       	sbc	r27, r1
    e866:	cf cf       	rjmp	.-98     	; 0xe806 <__vector_48+0x1d0>
    e868:	f4 99       	sbic	0x1e, 4	; 30
    e86a:	16 c0       	rjmp	.+44     	; 0xe898 <__vector_48+0x262>
    e86c:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    e870:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    e874:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    e878:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    e87c:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    e880:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e884:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e888:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e88c:	84 17       	cp	r24, r20
    e88e:	95 07       	cpc	r25, r21
    e890:	a6 07       	cpc	r26, r22
    e892:	b7 07       	cpc	r27, r23
    e894:	0c f4       	brge	.+2      	; 0xe898 <__vector_48+0x262>
    e896:	50 c0       	rjmp	.+160    	; 0xe938 <__vector_48+0x302>
    e898:	f4 9b       	sbis	0x1e, 4	; 30
    e89a:	15 c0       	rjmp	.+42     	; 0xe8c6 <__vector_48+0x290>
    e89c:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    e8a0:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    e8a4:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    e8a8:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    e8ac:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    e8b0:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e8b4:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e8b8:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e8bc:	48 17       	cp	r20, r24
    e8be:	59 07       	cpc	r21, r25
    e8c0:	6a 07       	cpc	r22, r26
    e8c2:	7b 07       	cpc	r23, r27
    e8c4:	cc f1       	brlt	.+114    	; 0xe938 <__vector_48+0x302>
    e8c6:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    e8ca:	88 23       	and	r24, r24
    e8cc:	a9 f1       	breq	.+106    	; 0xe938 <__vector_48+0x302>
    e8ce:	f6 9a       	sbi	0x1e, 6	; 30
    e8d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e8d4:	92 e0       	ldi	r25, 0x02	; 2
    e8d6:	89 27       	eor	r24, r25
    e8d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e8dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    e8e0:	81 fd       	sbrc	r24, 1
    e8e2:	2f cf       	rjmp	.-418    	; 0xe742 <__vector_48+0x10c>
    e8e4:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    e8e8:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e8ec:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e8f0:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e8f4:	f4 99       	sbic	0x1e, 4	; 30
    e8f6:	5a c0       	rjmp	.+180    	; 0xe9ac <__vector_48+0x376>
    e8f8:	01 96       	adiw	r24, 0x01	; 1
    e8fa:	a1 1d       	adc	r26, r1
    e8fc:	b1 1d       	adc	r27, r1
    e8fe:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    e902:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    e906:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    e90a:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    e90e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e912:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e916:	80 91 2a 12 	lds	r24, 0x122A	; 0x80122a <Feed_Divisor>
    e91a:	90 91 2b 12 	lds	r25, 0x122B	; 0x80122b <Feed_Divisor+0x1>
    e91e:	82 17       	cp	r24, r18
    e920:	93 07       	cpc	r25, r19
    e922:	08 f4       	brcc	.+2      	; 0xe926 <__vector_48+0x2f0>
    e924:	93 cf       	rjmp	.-218    	; 0xe84c <__vector_48+0x216>
    e926:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e92a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e92e:	28 17       	cp	r18, r24
    e930:	39 07       	cpc	r19, r25
    e932:	08 f4       	brcc	.+2      	; 0xe936 <__vector_48+0x300>
    e934:	4e cf       	rjmp	.-356    	; 0xe7d2 <__vector_48+0x19c>
    e936:	05 cf       	rjmp	.-502    	; 0xe742 <__vector_48+0x10c>
    e938:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e93c:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e940:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
    e944:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
    e948:	28 17       	cp	r18, r24
    e94a:	39 07       	cpc	r19, r25
    e94c:	68 f5       	brcc	.+90     	; 0xe9a8 <__vector_48+0x372>
    e94e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e952:	92 e0       	ldi	r25, 0x02	; 2
    e954:	89 27       	eor	r24, r25
    e956:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e95a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    e95e:	81 fd       	sbrc	r24, 1
    e960:	f0 ce       	rjmp	.-544    	; 0xe742 <__vector_48+0x10c>
    e962:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e966:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e96a:	01 96       	adiw	r24, 0x01	; 1
    e96c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e970:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e974:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    e978:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    e97c:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    e980:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    e984:	f4 99       	sbic	0x1e, 4	; 30
    e986:	0c c0       	rjmp	.+24     	; 0xe9a0 <__vector_48+0x36a>
    e988:	01 96       	adiw	r24, 0x01	; 1
    e98a:	a1 1d       	adc	r26, r1
    e98c:	b1 1d       	adc	r27, r1
    e98e:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    e992:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    e996:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    e99a:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    e99e:	d1 ce       	rjmp	.-606    	; 0xe742 <__vector_48+0x10c>
    e9a0:	01 97       	sbiw	r24, 0x01	; 1
    e9a2:	a1 09       	sbc	r26, r1
    e9a4:	b1 09       	sbc	r27, r1
    e9a6:	f3 cf       	rjmp	.-26     	; 0xe98e <__vector_48+0x358>
    e9a8:	f6 98       	cbi	0x1e, 6	; 30
    e9aa:	cb ce       	rjmp	.-618    	; 0xe742 <__vector_48+0x10c>
    e9ac:	01 97       	sbiw	r24, 0x01	; 1
    e9ae:	a1 09       	sbc	r26, r1
    e9b0:	b1 09       	sbc	r27, r1
    e9b2:	a5 cf       	rjmp	.-182    	; 0xe8fe <__vector_48+0x2c8>

0000e9b4 <__vector_47>:
    e9b4:	1f 92       	push	r1
    e9b6:	0f 92       	push	r0
    e9b8:	0f b6       	in	r0, 0x3f	; 63
    e9ba:	0f 92       	push	r0
    e9bc:	11 24       	eor	r1, r1
    e9be:	2f 93       	push	r18
    e9c0:	3f 93       	push	r19
    e9c2:	4f 93       	push	r20
    e9c4:	5f 93       	push	r21
    e9c6:	6f 93       	push	r22
    e9c8:	7f 93       	push	r23
    e9ca:	8f 93       	push	r24
    e9cc:	9f 93       	push	r25
    e9ce:	af 93       	push	r26
    e9d0:	bf 93       	push	r27
    e9d2:	f2 9b       	sbis	0x1e, 2	; 30
    e9d4:	05 c0       	rjmp	.+10     	; 0xe9e0 <__vector_47+0x2c>
    e9d6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e9da:	82 60       	ori	r24, 0x02	; 2
    e9dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e9e0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e9e4:	8f 77       	andi	r24, 0x7F	; 127
    e9e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    e9ea:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    e9ee:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    e9f2:	01 96       	adiw	r24, 0x01	; 1
    e9f4:	20 91 d3 11 	lds	r18, 0x11D3	; 0x8011d3 <Tacho_Count>
    e9f8:	30 91 d4 11 	lds	r19, 0x11D4	; 0x8011d4 <Tacho_Count+0x1>
    e9fc:	82 0f       	add	r24, r18
    e9fe:	93 1f       	adc	r25, r19
    ea00:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <Tacho_Count+0x1>
    ea04:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <Tacho_Count>
    ea08:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    ea0c:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    ea10:	28 17       	cp	r18, r24
    ea12:	39 07       	cpc	r19, r25
    ea14:	9c f4       	brge	.+38     	; 0xea3c <__vector_47+0x88>
    ea16:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ea1a:	80 68       	ori	r24, 0x80	; 128
    ea1c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ea20:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <Tacho_Count>
    ea24:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <Tacho_Count+0x1>
    ea28:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
    ea2c:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
    ea30:	82 1b       	sub	r24, r18
    ea32:	93 0b       	sbc	r25, r19
    ea34:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <Tacho_Count+0x1>
    ea38:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <Tacho_Count>
    ea3c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    ea40:	82 30       	cpi	r24, 0x02	; 2
    ea42:	09 f0       	breq	.+2      	; 0xea46 <__vector_47+0x92>
    ea44:	43 c0       	rjmp	.+134    	; 0xeacc <__vector_47+0x118>
    ea46:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
    ea4a:	82 30       	cpi	r24, 0x02	; 2
    ea4c:	09 f0       	breq	.+2      	; 0xea50 <__vector_47+0x9c>
    ea4e:	d2 c0       	rjmp	.+420    	; 0xebf4 <__vector_47+0x240>
    ea50:	f1 99       	sbic	0x1e, 1	; 30
    ea52:	15 c0       	rjmp	.+42     	; 0xea7e <__vector_47+0xca>
    ea54:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    ea58:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ea5c:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ea60:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ea64:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ea68:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ea6c:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ea70:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ea74:	84 17       	cp	r24, r20
    ea76:	95 07       	cpc	r25, r21
    ea78:	a6 07       	cpc	r26, r22
    ea7a:	b7 07       	cpc	r27, r23
    ea7c:	b4 f1       	brlt	.+108    	; 0xeaea <__vector_47+0x136>
    ea7e:	f1 9b       	sbis	0x1e, 1	; 30
    ea80:	15 c0       	rjmp	.+42     	; 0xeaac <__vector_47+0xf8>
    ea82:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    ea86:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ea8a:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ea8e:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ea92:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ea96:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ea9a:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ea9e:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    eaa2:	48 17       	cp	r20, r24
    eaa4:	59 07       	cpc	r21, r25
    eaa6:	6a 07       	cpc	r22, r26
    eaa8:	7b 07       	cpc	r23, r27
    eaaa:	fc f0       	brlt	.+62     	; 0xeaea <__vector_47+0x136>
    eaac:	80 91 35 12 	lds	r24, 0x1235	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
    eab0:	88 23       	and	r24, r24
    eab2:	d9 f0       	breq	.+54     	; 0xeaea <__vector_47+0x136>
    eab4:	91 e0       	ldi	r25, 0x01	; 1
    eab6:	90 93 45 12 	sts	0x1245, r25	; 0x801245 <Z_WORKING_RAPID_FLAG>
    eaba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eabe:	89 27       	eor	r24, r25
    eac0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eac4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    eac8:	80 ff       	sbrs	r24, 0
    eaca:	56 c0       	rjmp	.+172    	; 0xeb78 <__vector_47+0x1c4>
    eacc:	bf 91       	pop	r27
    eace:	af 91       	pop	r26
    ead0:	9f 91       	pop	r25
    ead2:	8f 91       	pop	r24
    ead4:	7f 91       	pop	r23
    ead6:	6f 91       	pop	r22
    ead8:	5f 91       	pop	r21
    eada:	4f 91       	pop	r20
    eadc:	3f 91       	pop	r19
    eade:	2f 91       	pop	r18
    eae0:	0f 90       	pop	r0
    eae2:	0f be       	out	0x3f, r0	; 63
    eae4:	0f 90       	pop	r0
    eae6:	1f 90       	pop	r1
    eae8:	18 95       	reti
    eaea:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    eaee:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    eaf2:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    eaf6:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    eafa:	28 17       	cp	r18, r24
    eafc:	39 07       	cpc	r19, r25
    eafe:	c0 f5       	brcc	.+112    	; 0xeb70 <__vector_47+0x1bc>
    eb00:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eb04:	91 e0       	ldi	r25, 0x01	; 1
    eb06:	89 27       	eor	r24, r25
    eb08:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eb0c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    eb10:	80 fd       	sbrc	r24, 0
    eb12:	dc cf       	rjmp	.-72     	; 0xeacc <__vector_47+0x118>
    eb14:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    eb18:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    eb1c:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    eb20:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    eb24:	f1 99       	sbic	0x1e, 1	; 30
    eb26:	20 c0       	rjmp	.+64     	; 0xeb68 <__vector_47+0x1b4>
    eb28:	01 96       	adiw	r24, 0x01	; 1
    eb2a:	a1 1d       	adc	r26, r1
    eb2c:	b1 1d       	adc	r27, r1
    eb2e:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    eb32:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    eb36:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    eb3a:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    eb3e:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    eb42:	8f 5f       	subi	r24, 0xFF	; 255
    eb44:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    eb48:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    eb4c:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    eb50:	82 17       	cp	r24, r18
    eb52:	13 06       	cpc	r1, r19
    eb54:	0c f4       	brge	.+2      	; 0xeb58 <__vector_47+0x1a4>
    eb56:	ba cf       	rjmp	.-140    	; 0xeacc <__vector_47+0x118>
    eb58:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    eb5c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    eb60:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    eb64:	01 96       	adiw	r24, 0x01	; 1
    eb66:	3d c0       	rjmp	.+122    	; 0xebe2 <__vector_47+0x22e>
    eb68:	01 97       	sbiw	r24, 0x01	; 1
    eb6a:	a1 09       	sbc	r26, r1
    eb6c:	b1 09       	sbc	r27, r1
    eb6e:	df cf       	rjmp	.-66     	; 0xeb2e <__vector_47+0x17a>
    eb70:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    eb74:	f6 98       	cbi	0x1e, 6	; 30
    eb76:	aa cf       	rjmp	.-172    	; 0xeacc <__vector_47+0x118>
    eb78:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    eb7c:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    eb80:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    eb84:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    eb88:	f1 99       	sbic	0x1e, 1	; 30
    eb8a:	30 c0       	rjmp	.+96     	; 0xebec <__vector_47+0x238>
    eb8c:	01 96       	adiw	r24, 0x01	; 1
    eb8e:	a1 1d       	adc	r26, r1
    eb90:	b1 1d       	adc	r27, r1
    eb92:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    eb96:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    eb9a:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    eb9e:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    eba2:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    eba6:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    ebaa:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    ebae:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    ebb2:	82 17       	cp	r24, r18
    ebb4:	93 07       	cpc	r25, r19
    ebb6:	08 f0       	brcs	.+2      	; 0xebba <__vector_47+0x206>
    ebb8:	89 cf       	rjmp	.-238    	; 0xeacc <__vector_47+0x118>
    ebba:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    ebbe:	8f 5f       	subi	r24, 0xFF	; 255
    ebc0:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    ebc4:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    ebc8:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    ebcc:	82 17       	cp	r24, r18
    ebce:	13 06       	cpc	r1, r19
    ebd0:	0c f4       	brge	.+2      	; 0xebd4 <__vector_47+0x220>
    ebd2:	7c cf       	rjmp	.-264    	; 0xeacc <__vector_47+0x118>
    ebd4:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    ebd8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ebdc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    ebe0:	01 97       	sbiw	r24, 0x01	; 1
    ebe2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    ebe6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ebea:	70 cf       	rjmp	.-288    	; 0xeacc <__vector_47+0x118>
    ebec:	01 97       	sbiw	r24, 0x01	; 1
    ebee:	a1 09       	sbc	r26, r1
    ebf0:	b1 09       	sbc	r27, r1
    ebf2:	cf cf       	rjmp	.-98     	; 0xeb92 <__vector_47+0x1de>
    ebf4:	f1 99       	sbic	0x1e, 1	; 30
    ebf6:	16 c0       	rjmp	.+44     	; 0xec24 <__vector_47+0x270>
    ebf8:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    ebfc:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ec00:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ec04:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ec08:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ec0c:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ec10:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ec14:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ec18:	84 17       	cp	r24, r20
    ec1a:	95 07       	cpc	r25, r21
    ec1c:	a6 07       	cpc	r26, r22
    ec1e:	b7 07       	cpc	r27, r23
    ec20:	0c f4       	brge	.+2      	; 0xec24 <__vector_47+0x270>
    ec22:	50 c0       	rjmp	.+160    	; 0xecc4 <__vector_47+0x310>
    ec24:	f1 9b       	sbis	0x1e, 1	; 30
    ec26:	15 c0       	rjmp	.+42     	; 0xec52 <__vector_47+0x29e>
    ec28:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    ec2c:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ec30:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ec34:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ec38:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ec3c:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ec40:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ec44:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ec48:	48 17       	cp	r20, r24
    ec4a:	59 07       	cpc	r21, r25
    ec4c:	6a 07       	cpc	r22, r26
    ec4e:	7b 07       	cpc	r23, r27
    ec50:	cc f1       	brlt	.+114    	; 0xecc4 <__vector_47+0x310>
    ec52:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    ec56:	88 23       	and	r24, r24
    ec58:	a9 f1       	breq	.+106    	; 0xecc4 <__vector_47+0x310>
    ec5a:	f3 9a       	sbi	0x1e, 3	; 30
    ec5c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ec60:	91 e0       	ldi	r25, 0x01	; 1
    ec62:	89 27       	eor	r24, r25
    ec64:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ec68:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    ec6c:	80 fd       	sbrc	r24, 0
    ec6e:	2e cf       	rjmp	.-420    	; 0xeacc <__vector_47+0x118>
    ec70:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    ec74:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ec78:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ec7c:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ec80:	f1 99       	sbic	0x1e, 1	; 30
    ec82:	5a c0       	rjmp	.+180    	; 0xed38 <__vector_47+0x384>
    ec84:	01 96       	adiw	r24, 0x01	; 1
    ec86:	a1 1d       	adc	r26, r1
    ec88:	b1 1d       	adc	r27, r1
    ec8a:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    ec8e:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    ec92:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    ec96:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    ec9a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ec9e:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    eca2:	80 91 2a 12 	lds	r24, 0x122A	; 0x80122a <Feed_Divisor>
    eca6:	90 91 2b 12 	lds	r25, 0x122B	; 0x80122b <Feed_Divisor+0x1>
    ecaa:	82 17       	cp	r24, r18
    ecac:	93 07       	cpc	r25, r19
    ecae:	08 f4       	brcc	.+2      	; 0xecb2 <__vector_47+0x2fe>
    ecb0:	93 cf       	rjmp	.-218    	; 0xebd8 <__vector_47+0x224>
    ecb2:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ecb6:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    ecba:	28 17       	cp	r18, r24
    ecbc:	39 07       	cpc	r19, r25
    ecbe:	08 f4       	brcc	.+2      	; 0xecc2 <__vector_47+0x30e>
    ecc0:	4d cf       	rjmp	.-358    	; 0xeb5c <__vector_47+0x1a8>
    ecc2:	04 cf       	rjmp	.-504    	; 0xeacc <__vector_47+0x118>
    ecc4:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ecc8:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    eccc:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
    ecd0:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
    ecd4:	28 17       	cp	r18, r24
    ecd6:	39 07       	cpc	r19, r25
    ecd8:	68 f5       	brcc	.+90     	; 0xed34 <__vector_47+0x380>
    ecda:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ecde:	91 e0       	ldi	r25, 0x01	; 1
    ece0:	89 27       	eor	r24, r25
    ece2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ece6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    ecea:	80 fd       	sbrc	r24, 0
    ecec:	ef ce       	rjmp	.-546    	; 0xeacc <__vector_47+0x118>
    ecee:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ecf2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    ecf6:	01 96       	adiw	r24, 0x01	; 1
    ecf8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    ecfc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    ed00:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    ed04:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ed08:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ed0c:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ed10:	f1 99       	sbic	0x1e, 1	; 30
    ed12:	0c c0       	rjmp	.+24     	; 0xed2c <__vector_47+0x378>
    ed14:	01 96       	adiw	r24, 0x01	; 1
    ed16:	a1 1d       	adc	r26, r1
    ed18:	b1 1d       	adc	r27, r1
    ed1a:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    ed1e:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    ed22:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    ed26:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    ed2a:	d0 ce       	rjmp	.-608    	; 0xeacc <__vector_47+0x118>
    ed2c:	01 97       	sbiw	r24, 0x01	; 1
    ed2e:	a1 09       	sbc	r26, r1
    ed30:	b1 09       	sbc	r27, r1
    ed32:	f3 cf       	rjmp	.-26     	; 0xed1a <__vector_47+0x366>
    ed34:	f3 98       	cbi	0x1e, 3	; 30
    ed36:	1e cf       	rjmp	.-452    	; 0xeb74 <__vector_47+0x1c0>
    ed38:	01 97       	sbiw	r24, 0x01	; 1
    ed3a:	a1 09       	sbc	r26, r1
    ed3c:	b1 09       	sbc	r27, r1
    ed3e:	a5 cf       	rjmp	.-182    	; 0xec8a <__vector_47+0x2d6>

0000ed40 <__vector_44>:
    ed40:	1f 92       	push	r1
    ed42:	0f 92       	push	r0
    ed44:	0f b6       	in	r0, 0x3f	; 63
    ed46:	0f 92       	push	r0
    ed48:	11 24       	eor	r1, r1
    ed4a:	2f 93       	push	r18
    ed4c:	3f 93       	push	r19
    ed4e:	4f 93       	push	r20
    ed50:	5f 93       	push	r21
    ed52:	6f 93       	push	r22
    ed54:	7f 93       	push	r23
    ed56:	8f 93       	push	r24
    ed58:	9f 93       	push	r25
    ed5a:	af 93       	push	r26
    ed5c:	bf 93       	push	r27
    ed5e:	80 91 3b 12 	lds	r24, 0x123B	; 0x80123b <XZ_Divisor>
    ed62:	81 11       	cpse	r24, r1
    ed64:	23 c0       	rjmp	.+70     	; 0xedac <__vector_44+0x6c>
    ed66:	80 91 3e 12 	lds	r24, 0x123E	; 0x80123e <Cs_Divisor>
    ed6a:	82 30       	cpi	r24, 0x02	; 2
    ed6c:	d0 f4       	brcc	.+52     	; 0xeda2 <__vector_44+0x62>
    ed6e:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <MotorX_NeedClear>
    ed72:	88 23       	and	r24, r24
    ed74:	d9 f0       	breq	.+54     	; 0xedac <__vector_44+0x6c>
    ed76:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ed7a:	82 60       	ori	r24, 0x02	; 2
    ed7c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ed80:	10 92 a9 11 	sts	0x11A9, r1	; 0x8011a9 <MotorX_NeedClear>
    ed84:	bf 91       	pop	r27
    ed86:	af 91       	pop	r26
    ed88:	9f 91       	pop	r25
    ed8a:	8f 91       	pop	r24
    ed8c:	7f 91       	pop	r23
    ed8e:	6f 91       	pop	r22
    ed90:	5f 91       	pop	r21
    ed92:	4f 91       	pop	r20
    ed94:	3f 91       	pop	r19
    ed96:	2f 91       	pop	r18
    ed98:	0f 90       	pop	r0
    ed9a:	0f be       	out	0x3f, r0	; 63
    ed9c:	0f 90       	pop	r0
    ed9e:	1f 90       	pop	r1
    eda0:	18 95       	reti
    eda2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eda6:	82 60       	ori	r24, 0x02	; 2
    eda8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    edac:	30 91 36 12 	lds	r19, 0x1236	; 0x801236 <SpeedMode>
    edb0:	20 91 3b 12 	lds	r18, 0x123B	; 0x80123b <XZ_Divisor>
    edb4:	21 30       	cpi	r18, 0x01	; 1
    edb6:	31 f5       	brne	.+76     	; 0xee04 <__vector_44+0xc4>
    edb8:	f3 9b       	sbis	0x1e, 3	; 30
    edba:	24 c0       	rjmp	.+72     	; 0xee04 <__vector_44+0xc4>
    edbc:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <Cs_Count>
    edc0:	8f 5f       	subi	r24, 0xFF	; 255
    edc2:	80 93 42 12 	sts	0x1242, r24	; 0x801242 <Cs_Count>
    edc6:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <Cs_Divisor>
    edca:	98 17       	cp	r25, r24
    edcc:	08 f0       	brcs	.+2      	; 0xedd0 <__vector_44+0x90>
    edce:	5c c0       	rjmp	.+184    	; 0xee88 <__vector_44+0x148>
    edd0:	40 91 3c 12 	lds	r20, 0x123C	; 0x80123c <Cm_Divisor>
    edd4:	50 91 3d 12 	lds	r21, 0x123D	; 0x80123d <Cm_Divisor+0x1>
    edd8:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <Cm_Count>
    eddc:	90 91 41 12 	lds	r25, 0x1241	; 0x801241 <Cm_Count+0x1>
    ede0:	84 0f       	add	r24, r20
    ede2:	95 1f       	adc	r25, r21
    ede4:	90 93 41 12 	sts	0x1241, r25	; 0x801241 <Cm_Count+0x1>
    ede8:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <Cm_Count>
    edec:	48 17       	cp	r20, r24
    edee:	59 07       	cpc	r21, r25
    edf0:	0c f0       	brlt	.+2      	; 0xedf4 <__vector_44+0xb4>
    edf2:	71 c0       	rjmp	.+226    	; 0xeed6 <__vector_44+0x196>
    edf4:	80 51       	subi	r24, 0x10	; 16
    edf6:	97 42       	sbci	r25, 0x27	; 39
    edf8:	90 93 41 12 	sts	0x1241, r25	; 0x801241 <Cm_Count+0x1>
    edfc:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <Cm_Count>
    ee00:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <Cs_Count>
    ee04:	32 30       	cpi	r19, 0x02	; 2
    ee06:	09 f0       	breq	.+2      	; 0xee0a <__vector_44+0xca>
    ee08:	ee c0       	rjmp	.+476    	; 0xefe6 <__vector_44+0x2a6>
    ee0a:	f1 99       	sbic	0x1e, 1	; 30
    ee0c:	16 c0       	rjmp	.+44     	; 0xee3a <__vector_44+0xfa>
    ee0e:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    ee12:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ee16:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ee1a:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ee1e:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ee22:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ee26:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ee2a:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ee2e:	84 17       	cp	r24, r20
    ee30:	95 07       	cpc	r25, r21
    ee32:	a6 07       	cpc	r26, r22
    ee34:	b7 07       	cpc	r27, r23
    ee36:	0c f4       	brge	.+2      	; 0xee3a <__vector_44+0xfa>
    ee38:	51 c0       	rjmp	.+162    	; 0xeedc <__vector_44+0x19c>
    ee3a:	f1 9b       	sbis	0x1e, 1	; 30
    ee3c:	15 c0       	rjmp	.+42     	; 0xee68 <__vector_44+0x128>
    ee3e:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    ee42:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ee46:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ee4a:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ee4e:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ee52:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ee56:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ee5a:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ee5e:	48 17       	cp	r20, r24
    ee60:	59 07       	cpc	r21, r25
    ee62:	6a 07       	cpc	r22, r26
    ee64:	7b 07       	cpc	r23, r27
    ee66:	d4 f1       	brlt	.+116    	; 0xeedc <__vector_44+0x19c>
    ee68:	80 91 35 12 	lds	r24, 0x1235	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
    ee6c:	88 23       	and	r24, r24
    ee6e:	b1 f1       	breq	.+108    	; 0xeedc <__vector_44+0x19c>
    ee70:	91 e0       	ldi	r25, 0x01	; 1
    ee72:	90 93 45 12 	sts	0x1245, r25	; 0x801245 <Z_WORKING_RAPID_FLAG>
    ee76:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ee7a:	89 27       	eor	r24, r25
    ee7c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ee80:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    ee84:	80 ff       	sbrs	r24, 0
    ee86:	71 c0       	rjmp	.+226    	; 0xef6a <__vector_44+0x22a>
    ee88:	f6 9b       	sbis	0x1e, 6	; 30
    ee8a:	7c cf       	rjmp	.-264    	; 0xed84 <__vector_44+0x44>
    ee8c:	80 91 3b 12 	lds	r24, 0x123B	; 0x80123b <XZ_Divisor>
    ee90:	81 30       	cpi	r24, 0x01	; 1
    ee92:	09 f0       	breq	.+2      	; 0xee96 <__vector_44+0x156>
    ee94:	52 c1       	rjmp	.+676    	; 0xf13a <__vector_44+0x3fa>
    ee96:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    ee9a:	92 e0       	ldi	r25, 0x02	; 2
    ee9c:	89 27       	eor	r24, r25
    ee9e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eea2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    eea6:	81 fd       	sbrc	r24, 1
    eea8:	6d cf       	rjmp	.-294    	; 0xed84 <__vector_44+0x44>
    eeaa:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    eeae:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    eeb2:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    eeb6:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    eeba:	f4 99       	sbic	0x1e, 4	; 30
    eebc:	3a c1       	rjmp	.+628    	; 0xf132 <__vector_44+0x3f2>
    eebe:	01 96       	adiw	r24, 0x01	; 1
    eec0:	a1 1d       	adc	r26, r1
    eec2:	b1 1d       	adc	r27, r1
    eec4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    eec8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    eecc:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    eed0:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    eed4:	57 cf       	rjmp	.-338    	; 0xed84 <__vector_44+0x44>
    eed6:	20 93 42 12 	sts	0x1242, r18	; 0x801242 <Cs_Count>
    eeda:	94 cf       	rjmp	.-216    	; 0xee04 <__vector_44+0xc4>
    eedc:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    eee0:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    eee4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    eee8:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    eeec:	28 17       	cp	r18, r24
    eeee:	39 07       	cpc	r19, r25
    eef0:	c0 f5       	brcc	.+112    	; 0xef62 <__vector_44+0x222>
    eef2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eef6:	91 e0       	ldi	r25, 0x01	; 1
    eef8:	89 27       	eor	r24, r25
    eefa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    eefe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    ef02:	80 fd       	sbrc	r24, 0
    ef04:	c1 cf       	rjmp	.-126    	; 0xee88 <__vector_44+0x148>
    ef06:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    ef0a:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ef0e:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ef12:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ef16:	f1 99       	sbic	0x1e, 1	; 30
    ef18:	20 c0       	rjmp	.+64     	; 0xef5a <__vector_44+0x21a>
    ef1a:	01 96       	adiw	r24, 0x01	; 1
    ef1c:	a1 1d       	adc	r26, r1
    ef1e:	b1 1d       	adc	r27, r1
    ef20:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    ef24:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    ef28:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    ef2c:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    ef30:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    ef34:	8f 5f       	subi	r24, 0xFF	; 255
    ef36:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    ef3a:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    ef3e:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    ef42:	82 17       	cp	r24, r18
    ef44:	13 06       	cpc	r1, r19
    ef46:	0c f4       	brge	.+2      	; 0xef4a <__vector_44+0x20a>
    ef48:	9f cf       	rjmp	.-194    	; 0xee88 <__vector_44+0x148>
    ef4a:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    ef4e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    ef52:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    ef56:	01 96       	adiw	r24, 0x01	; 1
    ef58:	3d c0       	rjmp	.+122    	; 0xefd4 <__vector_44+0x294>
    ef5a:	01 97       	sbiw	r24, 0x01	; 1
    ef5c:	a1 09       	sbc	r26, r1
    ef5e:	b1 09       	sbc	r27, r1
    ef60:	df cf       	rjmp	.-66     	; 0xef20 <__vector_44+0x1e0>
    ef62:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    ef66:	f6 98       	cbi	0x1e, 6	; 30
    ef68:	8f cf       	rjmp	.-226    	; 0xee88 <__vector_44+0x148>
    ef6a:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    ef6e:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ef72:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ef76:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ef7a:	f1 99       	sbic	0x1e, 1	; 30
    ef7c:	30 c0       	rjmp	.+96     	; 0xefde <__vector_44+0x29e>
    ef7e:	01 96       	adiw	r24, 0x01	; 1
    ef80:	a1 1d       	adc	r26, r1
    ef82:	b1 1d       	adc	r27, r1
    ef84:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    ef88:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    ef8c:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    ef90:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    ef94:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    ef98:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    ef9c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    efa0:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    efa4:	82 17       	cp	r24, r18
    efa6:	93 07       	cpc	r25, r19
    efa8:	08 f0       	brcs	.+2      	; 0xefac <__vector_44+0x26c>
    efaa:	6e cf       	rjmp	.-292    	; 0xee88 <__vector_44+0x148>
    efac:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    efb0:	8f 5f       	subi	r24, 0xFF	; 255
    efb2:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    efb6:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    efba:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    efbe:	82 17       	cp	r24, r18
    efc0:	13 06       	cpc	r1, r19
    efc2:	0c f4       	brge	.+2      	; 0xefc6 <__vector_44+0x286>
    efc4:	61 cf       	rjmp	.-318    	; 0xee88 <__vector_44+0x148>
    efc6:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    efca:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    efce:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    efd2:	01 97       	sbiw	r24, 0x01	; 1
    efd4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    efd8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    efdc:	55 cf       	rjmp	.-342    	; 0xee88 <__vector_44+0x148>
    efde:	01 97       	sbiw	r24, 0x01	; 1
    efe0:	a1 09       	sbc	r26, r1
    efe2:	b1 09       	sbc	r27, r1
    efe4:	cf cf       	rjmp	.-98     	; 0xef84 <__vector_44+0x244>
    efe6:	f1 99       	sbic	0x1e, 1	; 30
    efe8:	16 c0       	rjmp	.+44     	; 0xf016 <__vector_44+0x2d6>
    efea:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    efee:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    eff2:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    eff6:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    effa:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    effe:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f002:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f006:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f00a:	84 17       	cp	r24, r20
    f00c:	95 07       	cpc	r25, r21
    f00e:	a6 07       	cpc	r26, r22
    f010:	b7 07       	cpc	r27, r23
    f012:	0c f4       	brge	.+2      	; 0xf016 <__vector_44+0x2d6>
    f014:	50 c0       	rjmp	.+160    	; 0xf0b6 <__vector_44+0x376>
    f016:	f1 9b       	sbis	0x1e, 1	; 30
    f018:	15 c0       	rjmp	.+42     	; 0xf044 <__vector_44+0x304>
    f01a:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f01e:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f022:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f026:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f02a:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    f02e:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f032:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f036:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f03a:	48 17       	cp	r20, r24
    f03c:	59 07       	cpc	r21, r25
    f03e:	6a 07       	cpc	r22, r26
    f040:	7b 07       	cpc	r23, r27
    f042:	cc f1       	brlt	.+114    	; 0xf0b6 <__vector_44+0x376>
    f044:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    f048:	88 23       	and	r24, r24
    f04a:	a9 f1       	breq	.+106    	; 0xf0b6 <__vector_44+0x376>
    f04c:	f3 9a       	sbi	0x1e, 3	; 30
    f04e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f052:	91 e0       	ldi	r25, 0x01	; 1
    f054:	89 27       	eor	r24, r25
    f056:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f05a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f05e:	80 fd       	sbrc	r24, 0
    f060:	13 cf       	rjmp	.-474    	; 0xee88 <__vector_44+0x148>
    f062:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    f066:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f06a:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f06e:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f072:	f1 99       	sbic	0x1e, 1	; 30
    f074:	5a c0       	rjmp	.+180    	; 0xf12a <__vector_44+0x3ea>
    f076:	01 96       	adiw	r24, 0x01	; 1
    f078:	a1 1d       	adc	r26, r1
    f07a:	b1 1d       	adc	r27, r1
    f07c:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    f080:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    f084:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    f088:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    f08c:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f090:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f094:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <aFeed_Divisor>
    f098:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    f09c:	82 17       	cp	r24, r18
    f09e:	93 07       	cpc	r25, r19
    f0a0:	08 f4       	brcc	.+2      	; 0xf0a4 <__vector_44+0x364>
    f0a2:	93 cf       	rjmp	.-218    	; 0xefca <__vector_44+0x28a>
    f0a4:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f0a8:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f0ac:	28 17       	cp	r18, r24
    f0ae:	39 07       	cpc	r19, r25
    f0b0:	08 f0       	brcs	.+2      	; 0xf0b4 <__vector_44+0x374>
    f0b2:	ea ce       	rjmp	.-556    	; 0xee88 <__vector_44+0x148>
    f0b4:	4c cf       	rjmp	.-360    	; 0xef4e <__vector_44+0x20e>
    f0b6:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f0ba:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f0be:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    f0c2:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    f0c6:	28 17       	cp	r18, r24
    f0c8:	39 07       	cpc	r19, r25
    f0ca:	68 f5       	brcc	.+90     	; 0xf126 <__vector_44+0x3e6>
    f0cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f0d0:	91 e0       	ldi	r25, 0x01	; 1
    f0d2:	89 27       	eor	r24, r25
    f0d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f0d8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f0dc:	80 fd       	sbrc	r24, 0
    f0de:	d4 ce       	rjmp	.-600    	; 0xee88 <__vector_44+0x148>
    f0e0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f0e4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f0e8:	01 96       	adiw	r24, 0x01	; 1
    f0ea:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f0ee:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f0f2:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    f0f6:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f0fa:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f0fe:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f102:	f1 99       	sbic	0x1e, 1	; 30
    f104:	0c c0       	rjmp	.+24     	; 0xf11e <__vector_44+0x3de>
    f106:	01 96       	adiw	r24, 0x01	; 1
    f108:	a1 1d       	adc	r26, r1
    f10a:	b1 1d       	adc	r27, r1
    f10c:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    f110:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    f114:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    f118:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    f11c:	b5 ce       	rjmp	.-662    	; 0xee88 <__vector_44+0x148>
    f11e:	01 97       	sbiw	r24, 0x01	; 1
    f120:	a1 09       	sbc	r26, r1
    f122:	b1 09       	sbc	r27, r1
    f124:	f3 cf       	rjmp	.-26     	; 0xf10c <__vector_44+0x3cc>
    f126:	f3 98       	cbi	0x1e, 3	; 30
    f128:	1e cf       	rjmp	.-452    	; 0xef66 <__vector_44+0x226>
    f12a:	01 97       	sbiw	r24, 0x01	; 1
    f12c:	a1 09       	sbc	r26, r1
    f12e:	b1 09       	sbc	r27, r1
    f130:	a5 cf       	rjmp	.-182    	; 0xf07c <__vector_44+0x33c>
    f132:	01 97       	sbiw	r24, 0x01	; 1
    f134:	a1 09       	sbc	r26, r1
    f136:	b1 09       	sbc	r27, r1
    f138:	c5 ce       	rjmp	.-630    	; 0xeec4 <__vector_44+0x184>
    f13a:	80 91 42 12 	lds	r24, 0x1242	; 0x801242 <Cs_Count>
    f13e:	8f 5f       	subi	r24, 0xFF	; 255
    f140:	80 93 42 12 	sts	0x1242, r24	; 0x801242 <Cs_Count>
    f144:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <Cs_Divisor>
    f148:	98 17       	cp	r25, r24
    f14a:	08 f0       	brcs	.+2      	; 0xf14e <__vector_44+0x40e>
    f14c:	1b ce       	rjmp	.-970    	; 0xed84 <__vector_44+0x44>
    f14e:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f152:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f156:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f15a:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f15e:	f4 99       	sbic	0x1e, 4	; 30
    f160:	32 c0       	rjmp	.+100    	; 0xf1c6 <__vector_44+0x486>
    f162:	01 96       	adiw	r24, 0x01	; 1
    f164:	a1 1d       	adc	r26, r1
    f166:	b1 1d       	adc	r27, r1
    f168:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f16c:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f170:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f174:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f178:	20 91 3c 12 	lds	r18, 0x123C	; 0x80123c <Cm_Divisor>
    f17c:	30 91 3d 12 	lds	r19, 0x123D	; 0x80123d <Cm_Divisor+0x1>
    f180:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <Cm_Count>
    f184:	90 91 41 12 	lds	r25, 0x1241	; 0x801241 <Cm_Count+0x1>
    f188:	82 0f       	add	r24, r18
    f18a:	93 1f       	adc	r25, r19
    f18c:	90 93 41 12 	sts	0x1241, r25	; 0x801241 <Cm_Count+0x1>
    f190:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <Cm_Count>
    f194:	28 17       	cp	r18, r24
    f196:	39 07       	cpc	r19, r25
    f198:	d4 f4       	brge	.+52     	; 0xf1ce <__vector_44+0x48e>
    f19a:	80 51       	subi	r24, 0x10	; 16
    f19c:	97 42       	sbci	r25, 0x27	; 39
    f19e:	90 93 41 12 	sts	0x1241, r25	; 0x801241 <Cm_Count+0x1>
    f1a2:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <Cm_Count>
    f1a6:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <Cs_Count>
    f1aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f1ae:	8d 7f       	andi	r24, 0xFD	; 253
    f1b0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f1b4:	80 91 3e 12 	lds	r24, 0x123E	; 0x80123e <Cs_Divisor>
    f1b8:	82 30       	cpi	r24, 0x02	; 2
    f1ba:	08 f0       	brcs	.+2      	; 0xf1be <__vector_44+0x47e>
    f1bc:	e3 cd       	rjmp	.-1082   	; 0xed84 <__vector_44+0x44>
    f1be:	81 e0       	ldi	r24, 0x01	; 1
    f1c0:	80 93 a9 11 	sts	0x11A9, r24	; 0x8011a9 <MotorX_NeedClear>
    f1c4:	df cd       	rjmp	.-1090   	; 0xed84 <__vector_44+0x44>
    f1c6:	01 97       	sbiw	r24, 0x01	; 1
    f1c8:	a1 09       	sbc	r26, r1
    f1ca:	b1 09       	sbc	r27, r1
    f1cc:	cd cf       	rjmp	.-102    	; 0xf168 <__vector_44+0x428>
    f1ce:	81 e0       	ldi	r24, 0x01	; 1
    f1d0:	80 93 42 12 	sts	0x1242, r24	; 0x801242 <Cs_Count>
    f1d4:	ea cf       	rjmp	.-44     	; 0xf1aa <__vector_44+0x46a>

0000f1d6 <__vector_43>:
    f1d6:	1f 92       	push	r1
    f1d8:	0f 92       	push	r0
    f1da:	0f b6       	in	r0, 0x3f	; 63
    f1dc:	0f 92       	push	r0
    f1de:	11 24       	eor	r1, r1
    f1e0:	2f 93       	push	r18
    f1e2:	3f 93       	push	r19
    f1e4:	4f 93       	push	r20
    f1e6:	5f 93       	push	r21
    f1e8:	6f 93       	push	r22
    f1ea:	7f 93       	push	r23
    f1ec:	8f 93       	push	r24
    f1ee:	9f 93       	push	r25
    f1f0:	af 93       	push	r26
    f1f2:	bf 93       	push	r27
    f1f4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    f1f8:	83 50       	subi	r24, 0x03	; 3
    f1fa:	83 30       	cpi	r24, 0x03	; 3
    f1fc:	08 f0       	brcs	.+2      	; 0xf200 <__vector_43+0x2a>
    f1fe:	44 c0       	rjmp	.+136    	; 0xf288 <__vector_43+0xb2>
    f200:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
    f204:	82 30       	cpi	r24, 0x02	; 2
    f206:	09 f0       	breq	.+2      	; 0xf20a <__vector_43+0x34>
    f208:	d2 c0       	rjmp	.+420    	; 0xf3ae <__vector_43+0x1d8>
    f20a:	f4 99       	sbic	0x1e, 4	; 30
    f20c:	15 c0       	rjmp	.+42     	; 0xf238 <__vector_43+0x62>
    f20e:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f212:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f216:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f21a:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f21e:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    f222:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f226:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f22a:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f22e:	84 17       	cp	r24, r20
    f230:	95 07       	cpc	r25, r21
    f232:	a6 07       	cpc	r26, r22
    f234:	b7 07       	cpc	r27, r23
    f236:	bc f1       	brlt	.+110    	; 0xf2a6 <__vector_43+0xd0>
    f238:	f4 9b       	sbis	0x1e, 4	; 30
    f23a:	15 c0       	rjmp	.+42     	; 0xf266 <__vector_43+0x90>
    f23c:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f240:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f244:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f248:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f24c:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    f250:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f254:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f258:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f25c:	48 17       	cp	r20, r24
    f25e:	59 07       	cpc	r21, r25
    f260:	6a 07       	cpc	r22, r26
    f262:	7b 07       	cpc	r23, r27
    f264:	04 f1       	brlt	.+64     	; 0xf2a6 <__vector_43+0xd0>
    f266:	80 91 30 12 	lds	r24, 0x1230	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
    f26a:	88 23       	and	r24, r24
    f26c:	e1 f0       	breq	.+56     	; 0xf2a6 <__vector_43+0xd0>
    f26e:	81 e0       	ldi	r24, 0x01	; 1
    f270:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <X_WORKING_RAPID_FLAG>
    f274:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f278:	92 e0       	ldi	r25, 0x02	; 2
    f27a:	89 27       	eor	r24, r25
    f27c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f280:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f284:	81 ff       	sbrs	r24, 1
    f286:	55 c0       	rjmp	.+170    	; 0xf332 <__vector_43+0x15c>
    f288:	bf 91       	pop	r27
    f28a:	af 91       	pop	r26
    f28c:	9f 91       	pop	r25
    f28e:	8f 91       	pop	r24
    f290:	7f 91       	pop	r23
    f292:	6f 91       	pop	r22
    f294:	5f 91       	pop	r21
    f296:	4f 91       	pop	r20
    f298:	3f 91       	pop	r19
    f29a:	2f 91       	pop	r18
    f29c:	0f 90       	pop	r0
    f29e:	0f be       	out	0x3f, r0	; 63
    f2a0:	0f 90       	pop	r0
    f2a2:	1f 90       	pop	r1
    f2a4:	18 95       	reti
    f2a6:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f2aa:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f2ae:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    f2b2:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    f2b6:	28 17       	cp	r18, r24
    f2b8:	39 07       	cpc	r19, r25
    f2ba:	c0 f5       	brcc	.+112    	; 0xf32c <__vector_43+0x156>
    f2bc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f2c0:	92 e0       	ldi	r25, 0x02	; 2
    f2c2:	89 27       	eor	r24, r25
    f2c4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f2c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f2cc:	81 fd       	sbrc	r24, 1
    f2ce:	dc cf       	rjmp	.-72     	; 0xf288 <__vector_43+0xb2>
    f2d0:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f2d4:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f2d8:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f2dc:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f2e0:	f4 99       	sbic	0x1e, 4	; 30
    f2e2:	20 c0       	rjmp	.+64     	; 0xf324 <__vector_43+0x14e>
    f2e4:	01 96       	adiw	r24, 0x01	; 1
    f2e6:	a1 1d       	adc	r26, r1
    f2e8:	b1 1d       	adc	r27, r1
    f2ea:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f2ee:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f2f2:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f2f6:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f2fa:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    f2fe:	8f 5f       	subi	r24, 0xFF	; 255
    f300:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    f304:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    f308:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    f30c:	82 17       	cp	r24, r18
    f30e:	13 06       	cpc	r1, r19
    f310:	0c f4       	brge	.+2      	; 0xf314 <__vector_43+0x13e>
    f312:	ba cf       	rjmp	.-140    	; 0xf288 <__vector_43+0xb2>
    f314:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    f318:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f31c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f320:	01 96       	adiw	r24, 0x01	; 1
    f322:	3c c0       	rjmp	.+120    	; 0xf39c <__vector_43+0x1c6>
    f324:	01 97       	sbiw	r24, 0x01	; 1
    f326:	a1 09       	sbc	r26, r1
    f328:	b1 09       	sbc	r27, r1
    f32a:	df cf       	rjmp	.-66     	; 0xf2ea <__vector_43+0x114>
    f32c:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
    f330:	ab cf       	rjmp	.-170    	; 0xf288 <__vector_43+0xb2>
    f332:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f336:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f33a:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f33e:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f342:	f4 99       	sbic	0x1e, 4	; 30
    f344:	30 c0       	rjmp	.+96     	; 0xf3a6 <__vector_43+0x1d0>
    f346:	01 96       	adiw	r24, 0x01	; 1
    f348:	a1 1d       	adc	r26, r1
    f34a:	b1 1d       	adc	r27, r1
    f34c:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f350:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f354:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f358:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f35c:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f360:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f364:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    f368:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    f36c:	82 17       	cp	r24, r18
    f36e:	93 07       	cpc	r25, r19
    f370:	08 f0       	brcs	.+2      	; 0xf374 <__vector_43+0x19e>
    f372:	8a cf       	rjmp	.-236    	; 0xf288 <__vector_43+0xb2>
    f374:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    f378:	8f 5f       	subi	r24, 0xFF	; 255
    f37a:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    f37e:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    f382:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    f386:	82 17       	cp	r24, r18
    f388:	13 06       	cpc	r1, r19
    f38a:	0c f4       	brge	.+2      	; 0xf38e <__vector_43+0x1b8>
    f38c:	7d cf       	rjmp	.-262    	; 0xf288 <__vector_43+0xb2>
    f38e:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    f392:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f396:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f39a:	01 97       	sbiw	r24, 0x01	; 1
    f39c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f3a0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f3a4:	71 cf       	rjmp	.-286    	; 0xf288 <__vector_43+0xb2>
    f3a6:	01 97       	sbiw	r24, 0x01	; 1
    f3a8:	a1 09       	sbc	r26, r1
    f3aa:	b1 09       	sbc	r27, r1
    f3ac:	cf cf       	rjmp	.-98     	; 0xf34c <__vector_43+0x176>
    f3ae:	f4 99       	sbic	0x1e, 4	; 30
    f3b0:	16 c0       	rjmp	.+44     	; 0xf3de <__vector_43+0x208>
    f3b2:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f3b6:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f3ba:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f3be:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f3c2:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    f3c6:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f3ca:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f3ce:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f3d2:	84 17       	cp	r24, r20
    f3d4:	95 07       	cpc	r25, r21
    f3d6:	a6 07       	cpc	r26, r22
    f3d8:	b7 07       	cpc	r27, r23
    f3da:	0c f4       	brge	.+2      	; 0xf3de <__vector_43+0x208>
    f3dc:	50 c0       	rjmp	.+160    	; 0xf47e <__vector_43+0x2a8>
    f3de:	f4 9b       	sbis	0x1e, 4	; 30
    f3e0:	15 c0       	rjmp	.+42     	; 0xf40c <__vector_43+0x236>
    f3e2:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f3e6:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f3ea:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f3ee:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f3f2:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
    f3f6:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f3fa:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f3fe:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f402:	48 17       	cp	r20, r24
    f404:	59 07       	cpc	r21, r25
    f406:	6a 07       	cpc	r22, r26
    f408:	7b 07       	cpc	r23, r27
    f40a:	cc f1       	brlt	.+114    	; 0xf47e <__vector_43+0x2a8>
    f40c:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <X_NEED_RUN_FEED_FLAG>
    f410:	88 23       	and	r24, r24
    f412:	a9 f1       	breq	.+106    	; 0xf47e <__vector_43+0x2a8>
    f414:	f6 9a       	sbi	0x1e, 6	; 30
    f416:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f41a:	92 e0       	ldi	r25, 0x02	; 2
    f41c:	89 27       	eor	r24, r25
    f41e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f422:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f426:	81 fd       	sbrc	r24, 1
    f428:	2f cf       	rjmp	.-418    	; 0xf288 <__vector_43+0xb2>
    f42a:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f42e:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f432:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f436:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f43a:	f4 99       	sbic	0x1e, 4	; 30
    f43c:	5b c0       	rjmp	.+182    	; 0xf4f4 <__vector_43+0x31e>
    f43e:	01 96       	adiw	r24, 0x01	; 1
    f440:	a1 1d       	adc	r26, r1
    f442:	b1 1d       	adc	r27, r1
    f444:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f448:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f44c:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f450:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f454:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f458:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f45c:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <aFeed_Divisor>
    f460:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    f464:	82 17       	cp	r24, r18
    f466:	93 07       	cpc	r25, r19
    f468:	08 f4       	brcc	.+2      	; 0xf46c <__vector_43+0x296>
    f46a:	93 cf       	rjmp	.-218    	; 0xf392 <__vector_43+0x1bc>
    f46c:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f470:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f474:	28 17       	cp	r18, r24
    f476:	39 07       	cpc	r19, r25
    f478:	08 f4       	brcc	.+2      	; 0xf47c <__vector_43+0x2a6>
    f47a:	4e cf       	rjmp	.-356    	; 0xf318 <__vector_43+0x142>
    f47c:	05 cf       	rjmp	.-502    	; 0xf288 <__vector_43+0xb2>
    f47e:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f482:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f486:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    f48a:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    f48e:	28 17       	cp	r18, r24
    f490:	39 07       	cpc	r19, r25
    f492:	68 f5       	brcc	.+90     	; 0xf4ee <__vector_43+0x318>
    f494:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f498:	92 e0       	ldi	r25, 0x02	; 2
    f49a:	89 27       	eor	r24, r25
    f49c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f4a0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f4a4:	81 fd       	sbrc	r24, 1
    f4a6:	f0 ce       	rjmp	.-544    	; 0xf288 <__vector_43+0xb2>
    f4a8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f4ac:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f4b0:	01 96       	adiw	r24, 0x01	; 1
    f4b2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f4b6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f4ba:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f4be:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f4c2:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f4c6:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f4ca:	f4 99       	sbic	0x1e, 4	; 30
    f4cc:	0c c0       	rjmp	.+24     	; 0xf4e6 <__vector_43+0x310>
    f4ce:	01 96       	adiw	r24, 0x01	; 1
    f4d0:	a1 1d       	adc	r26, r1
    f4d2:	b1 1d       	adc	r27, r1
    f4d4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f4d8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f4dc:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f4e0:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f4e4:	d1 ce       	rjmp	.-606    	; 0xf288 <__vector_43+0xb2>
    f4e6:	01 97       	sbiw	r24, 0x01	; 1
    f4e8:	a1 09       	sbc	r26, r1
    f4ea:	b1 09       	sbc	r27, r1
    f4ec:	f3 cf       	rjmp	.-26     	; 0xf4d4 <__vector_43+0x2fe>
    f4ee:	f3 98       	cbi	0x1e, 3	; 30
    f4f0:	f6 98       	cbi	0x1e, 6	; 30
    f4f2:	ca ce       	rjmp	.-620    	; 0xf288 <__vector_43+0xb2>
    f4f4:	01 97       	sbiw	r24, 0x01	; 1
    f4f6:	a1 09       	sbc	r26, r1
    f4f8:	b1 09       	sbc	r27, r1
    f4fa:	a4 cf       	rjmp	.-184    	; 0xf444 <__vector_43+0x26e>

0000f4fc <__vector_42>:
    f4fc:	1f 92       	push	r1
    f4fe:	0f 92       	push	r0
    f500:	0f b6       	in	r0, 0x3f	; 63
    f502:	0f 92       	push	r0
    f504:	11 24       	eor	r1, r1
    f506:	2f 93       	push	r18
    f508:	3f 93       	push	r19
    f50a:	4f 93       	push	r20
    f50c:	5f 93       	push	r21
    f50e:	6f 93       	push	r22
    f510:	7f 93       	push	r23
    f512:	8f 93       	push	r24
    f514:	9f 93       	push	r25
    f516:	af 93       	push	r26
    f518:	bf 93       	push	r27
    f51a:	f2 9b       	sbis	0x1e, 2	; 30
    f51c:	05 c0       	rjmp	.+10     	; 0xf528 <__vector_42+0x2c>
    f51e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f522:	82 60       	ori	r24, 0x02	; 2
    f524:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f528:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    f52c:	83 30       	cpi	r24, 0x03	; 3
    f52e:	09 f0       	breq	.+2      	; 0xf532 <__vector_42+0x36>
    f530:	43 c0       	rjmp	.+134    	; 0xf5b8 <__vector_42+0xbc>
    f532:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
    f536:	82 30       	cpi	r24, 0x02	; 2
    f538:	09 f0       	breq	.+2      	; 0xf53c <__vector_42+0x40>
    f53a:	d3 c0       	rjmp	.+422    	; 0xf6e2 <__vector_42+0x1e6>
    f53c:	f1 99       	sbic	0x1e, 1	; 30
    f53e:	15 c0       	rjmp	.+42     	; 0xf56a <__vector_42+0x6e>
    f540:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f544:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f548:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f54c:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f550:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    f554:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f558:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f55c:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f560:	84 17       	cp	r24, r20
    f562:	95 07       	cpc	r25, r21
    f564:	a6 07       	cpc	r26, r22
    f566:	b7 07       	cpc	r27, r23
    f568:	bc f1       	brlt	.+110    	; 0xf5d8 <__vector_42+0xdc>
    f56a:	f1 9b       	sbis	0x1e, 1	; 30
    f56c:	15 c0       	rjmp	.+42     	; 0xf598 <__vector_42+0x9c>
    f56e:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f572:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f576:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f57a:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f57e:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    f582:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f586:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f58a:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f58e:	48 17       	cp	r20, r24
    f590:	59 07       	cpc	r21, r25
    f592:	6a 07       	cpc	r22, r26
    f594:	7b 07       	cpc	r23, r27
    f596:	04 f1       	brlt	.+64     	; 0xf5d8 <__vector_42+0xdc>
    f598:	80 91 35 12 	lds	r24, 0x1235	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
    f59c:	88 23       	and	r24, r24
    f59e:	e1 f0       	breq	.+56     	; 0xf5d8 <__vector_42+0xdc>
    f5a0:	91 e0       	ldi	r25, 0x01	; 1
    f5a2:	90 93 45 12 	sts	0x1245, r25	; 0x801245 <Z_WORKING_RAPID_FLAG>
    f5a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f5aa:	89 27       	eor	r24, r25
    f5ac:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f5b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f5b4:	80 ff       	sbrs	r24, 0
    f5b6:	57 c0       	rjmp	.+174    	; 0xf666 <__vector_42+0x16a>
    f5b8:	19 ba       	out	0x19, r1	; 25
    f5ba:	bf 91       	pop	r27
    f5bc:	af 91       	pop	r26
    f5be:	9f 91       	pop	r25
    f5c0:	8f 91       	pop	r24
    f5c2:	7f 91       	pop	r23
    f5c4:	6f 91       	pop	r22
    f5c6:	5f 91       	pop	r21
    f5c8:	4f 91       	pop	r20
    f5ca:	3f 91       	pop	r19
    f5cc:	2f 91       	pop	r18
    f5ce:	0f 90       	pop	r0
    f5d0:	0f be       	out	0x3f, r0	; 63
    f5d2:	0f 90       	pop	r0
    f5d4:	1f 90       	pop	r1
    f5d6:	18 95       	reti
    f5d8:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f5dc:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f5e0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
    f5e4:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
    f5e8:	28 17       	cp	r18, r24
    f5ea:	39 07       	cpc	r19, r25
    f5ec:	c0 f5       	brcc	.+112    	; 0xf65e <__vector_42+0x162>
    f5ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f5f2:	91 e0       	ldi	r25, 0x01	; 1
    f5f4:	89 27       	eor	r24, r25
    f5f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f5fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f5fe:	80 fd       	sbrc	r24, 0
    f600:	db cf       	rjmp	.-74     	; 0xf5b8 <__vector_42+0xbc>
    f602:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    f606:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f60a:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f60e:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f612:	f1 99       	sbic	0x1e, 1	; 30
    f614:	20 c0       	rjmp	.+64     	; 0xf656 <__vector_42+0x15a>
    f616:	01 96       	adiw	r24, 0x01	; 1
    f618:	a1 1d       	adc	r26, r1
    f61a:	b1 1d       	adc	r27, r1
    f61c:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    f620:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    f624:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    f628:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    f62c:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    f630:	8f 5f       	subi	r24, 0xFF	; 255
    f632:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    f636:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    f63a:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    f63e:	82 17       	cp	r24, r18
    f640:	13 06       	cpc	r1, r19
    f642:	0c f4       	brge	.+2      	; 0xf646 <__vector_42+0x14a>
    f644:	b9 cf       	rjmp	.-142    	; 0xf5b8 <__vector_42+0xbc>
    f646:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    f64a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f64e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f652:	01 96       	adiw	r24, 0x01	; 1
    f654:	3d c0       	rjmp	.+122    	; 0xf6d0 <__vector_42+0x1d4>
    f656:	01 97       	sbiw	r24, 0x01	; 1
    f658:	a1 09       	sbc	r26, r1
    f65a:	b1 09       	sbc	r27, r1
    f65c:	df cf       	rjmp	.-66     	; 0xf61c <__vector_42+0x120>
    f65e:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
    f662:	f6 98       	cbi	0x1e, 6	; 30
    f664:	a9 cf       	rjmp	.-174    	; 0xf5b8 <__vector_42+0xbc>
    f666:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    f66a:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f66e:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f672:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f676:	f1 99       	sbic	0x1e, 1	; 30
    f678:	30 c0       	rjmp	.+96     	; 0xf6da <__vector_42+0x1de>
    f67a:	01 96       	adiw	r24, 0x01	; 1
    f67c:	a1 1d       	adc	r26, r1
    f67e:	b1 1d       	adc	r27, r1
    f680:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    f684:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    f688:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    f68c:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    f690:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f694:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f698:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
    f69c:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
    f6a0:	82 17       	cp	r24, r18
    f6a2:	93 07       	cpc	r25, r19
    f6a4:	08 f0       	brcs	.+2      	; 0xf6a8 <__vector_42+0x1ac>
    f6a6:	88 cf       	rjmp	.-240    	; 0xf5b8 <__vector_42+0xbc>
    f6a8:	80 91 e0 11 	lds	r24, 0x11E0	; 0x8011e0 <Repeat_Count>
    f6ac:	8f 5f       	subi	r24, 0xFF	; 255
    f6ae:	80 93 e0 11 	sts	0x11E0, r24	; 0x8011e0 <Repeat_Count>
    f6b2:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    f6b6:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    f6ba:	82 17       	cp	r24, r18
    f6bc:	13 06       	cpc	r1, r19
    f6be:	0c f4       	brge	.+2      	; 0xf6c2 <__vector_42+0x1c6>
    f6c0:	7b cf       	rjmp	.-266    	; 0xf5b8 <__vector_42+0xbc>
    f6c2:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    f6c6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f6ca:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f6ce:	01 97       	sbiw	r24, 0x01	; 1
    f6d0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f6d4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f6d8:	6f cf       	rjmp	.-290    	; 0xf5b8 <__vector_42+0xbc>
    f6da:	01 97       	sbiw	r24, 0x01	; 1
    f6dc:	a1 09       	sbc	r26, r1
    f6de:	b1 09       	sbc	r27, r1
    f6e0:	cf cf       	rjmp	.-98     	; 0xf680 <__vector_42+0x184>
    f6e2:	f1 99       	sbic	0x1e, 1	; 30
    f6e4:	16 c0       	rjmp	.+44     	; 0xf712 <__vector_42+0x216>
    f6e6:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f6ea:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f6ee:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f6f2:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f6f6:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    f6fa:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f6fe:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f702:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f706:	84 17       	cp	r24, r20
    f708:	95 07       	cpc	r25, r21
    f70a:	a6 07       	cpc	r26, r22
    f70c:	b7 07       	cpc	r27, r23
    f70e:	0c f4       	brge	.+2      	; 0xf712 <__vector_42+0x216>
    f710:	50 c0       	rjmp	.+160    	; 0xf7b2 <__vector_42+0x2b6>
    f712:	f1 9b       	sbis	0x1e, 1	; 30
    f714:	15 c0       	rjmp	.+42     	; 0xf740 <__vector_42+0x244>
    f716:	80 91 4c 12 	lds	r24, 0x124C	; 0x80124c <Limit_Pos>
    f71a:	90 91 4d 12 	lds	r25, 0x124D	; 0x80124d <Limit_Pos+0x1>
    f71e:	a0 91 4e 12 	lds	r26, 0x124E	; 0x80124e <Limit_Pos+0x2>
    f722:	b0 91 4f 12 	lds	r27, 0x124F	; 0x80124f <Limit_Pos+0x3>
    f726:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    f72a:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f72e:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f732:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f736:	48 17       	cp	r20, r24
    f738:	59 07       	cpc	r21, r25
    f73a:	6a 07       	cpc	r22, r26
    f73c:	7b 07       	cpc	r23, r27
    f73e:	cc f1       	brlt	.+114    	; 0xf7b2 <__vector_42+0x2b6>
    f740:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
    f744:	88 23       	and	r24, r24
    f746:	a9 f1       	breq	.+106    	; 0xf7b2 <__vector_42+0x2b6>
    f748:	f3 9a       	sbi	0x1e, 3	; 30
    f74a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f74e:	91 e0       	ldi	r25, 0x01	; 1
    f750:	89 27       	eor	r24, r25
    f752:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f756:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f75a:	80 fd       	sbrc	r24, 0
    f75c:	2d cf       	rjmp	.-422    	; 0xf5b8 <__vector_42+0xbc>
    f75e:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    f762:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f766:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f76a:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f76e:	f1 99       	sbic	0x1e, 1	; 30
    f770:	5a c0       	rjmp	.+180    	; 0xf826 <__vector_42+0x32a>
    f772:	01 96       	adiw	r24, 0x01	; 1
    f774:	a1 1d       	adc	r26, r1
    f776:	b1 1d       	adc	r27, r1
    f778:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    f77c:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    f780:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    f784:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    f788:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f78c:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f790:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <aFeed_Divisor>
    f794:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <aFeed_Divisor+0x1>
    f798:	82 17       	cp	r24, r18
    f79a:	93 07       	cpc	r25, r19
    f79c:	08 f4       	brcc	.+2      	; 0xf7a0 <__vector_42+0x2a4>
    f79e:	93 cf       	rjmp	.-218    	; 0xf6c6 <__vector_42+0x1ca>
    f7a0:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f7a4:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f7a8:	28 17       	cp	r18, r24
    f7aa:	39 07       	cpc	r19, r25
    f7ac:	08 f4       	brcc	.+2      	; 0xf7b0 <__vector_42+0x2b4>
    f7ae:	4d cf       	rjmp	.-358    	; 0xf64a <__vector_42+0x14e>
    f7b0:	03 cf       	rjmp	.-506    	; 0xf5b8 <__vector_42+0xbc>
    f7b2:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f7b6:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f7ba:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
    f7be:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
    f7c2:	28 17       	cp	r18, r24
    f7c4:	39 07       	cpc	r19, r25
    f7c6:	68 f5       	brcc	.+90     	; 0xf822 <__vector_42+0x326>
    f7c8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f7cc:	91 e0       	ldi	r25, 0x01	; 1
    f7ce:	89 27       	eor	r24, r25
    f7d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f7d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f7d8:	80 fd       	sbrc	r24, 0
    f7da:	ee ce       	rjmp	.-548    	; 0xf5b8 <__vector_42+0xbc>
    f7dc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f7e0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f7e4:	01 96       	adiw	r24, 0x01	; 1
    f7e6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    f7ea:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    f7ee:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    f7f2:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    f7f6:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    f7fa:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    f7fe:	f1 99       	sbic	0x1e, 1	; 30
    f800:	0c c0       	rjmp	.+24     	; 0xf81a <__vector_42+0x31e>
    f802:	01 96       	adiw	r24, 0x01	; 1
    f804:	a1 1d       	adc	r26, r1
    f806:	b1 1d       	adc	r27, r1
    f808:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    f80c:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    f810:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    f814:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    f818:	cf ce       	rjmp	.-610    	; 0xf5b8 <__vector_42+0xbc>
    f81a:	01 97       	sbiw	r24, 0x01	; 1
    f81c:	a1 09       	sbc	r26, r1
    f81e:	b1 09       	sbc	r27, r1
    f820:	f3 cf       	rjmp	.-26     	; 0xf808 <__vector_42+0x30c>
    f822:	f3 98       	cbi	0x1e, 3	; 30
    f824:	1e cf       	rjmp	.-452    	; 0xf662 <__vector_42+0x166>
    f826:	01 97       	sbiw	r24, 0x01	; 1
    f828:	a1 09       	sbc	r26, r1
    f82a:	b1 09       	sbc	r27, r1
    f82c:	a5 cf       	rjmp	.-182    	; 0xf778 <__vector_42+0x27c>

0000f82e <__vector_33>:
    f82e:	1f 92       	push	r1
    f830:	0f 92       	push	r0
    f832:	0f b6       	in	r0, 0x3f	; 63
    f834:	0f 92       	push	r0
    f836:	11 24       	eor	r1, r1
    f838:	0f 93       	push	r16
    f83a:	1f 93       	push	r17
    f83c:	2f 93       	push	r18
    f83e:	3f 93       	push	r19
    f840:	4f 93       	push	r20
    f842:	5f 93       	push	r21
    f844:	6f 93       	push	r22
    f846:	7f 93       	push	r23
    f848:	8f 93       	push	r24
    f84a:	9f 93       	push	r25
    f84c:	af 93       	push	r26
    f84e:	bf 93       	push	r27
    f850:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f854:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f858:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f85c:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f860:	20 91 03 12 	lds	r18, 0x1203	; 0x801203 <flag_Scale_x10>
    f864:	22 23       	and	r18, r18
    f866:	69 f1       	breq	.+90     	; 0xf8c2 <__vector_33+0x94>
    f868:	f1 99       	sbic	0x1e, 1	; 30
    f86a:	1e c0       	rjmp	.+60     	; 0xf8a8 <__vector_33+0x7a>
    f86c:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
    f870:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
    f874:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
    f878:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
    f87c:	84 17       	cp	r24, r20
    f87e:	95 07       	cpc	r25, r21
    f880:	a6 07       	cpc	r26, r22
    f882:	b7 07       	cpc	r27, r23
    f884:	f4 f0       	brlt	.+60     	; 0xf8c2 <__vector_33+0x94>
    f886:	bf 91       	pop	r27
    f888:	af 91       	pop	r26
    f88a:	9f 91       	pop	r25
    f88c:	8f 91       	pop	r24
    f88e:	7f 91       	pop	r23
    f890:	6f 91       	pop	r22
    f892:	5f 91       	pop	r21
    f894:	4f 91       	pop	r20
    f896:	3f 91       	pop	r19
    f898:	2f 91       	pop	r18
    f89a:	1f 91       	pop	r17
    f89c:	0f 91       	pop	r16
    f89e:	0f 90       	pop	r0
    f8a0:	0f be       	out	0x3f, r0	; 63
    f8a2:	0f 90       	pop	r0
    f8a4:	1f 90       	pop	r1
    f8a6:	18 95       	reti
    f8a8:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
    f8ac:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
    f8b0:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
    f8b4:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
    f8b8:	48 17       	cp	r20, r24
    f8ba:	59 07       	cpc	r21, r25
    f8bc:	6a 07       	cpc	r22, r26
    f8be:	7b 07       	cpc	r23, r27
    f8c0:	14 f7       	brge	.-60     	; 0xf886 <__vector_33+0x58>
    f8c2:	40 91 10 12 	lds	r20, 0x1210	; 0x801210 <Null_X_Pos>
    f8c6:	50 91 11 12 	lds	r21, 0x1211	; 0x801211 <Null_X_Pos+0x1>
    f8ca:	60 91 12 12 	lds	r22, 0x1212	; 0x801212 <Null_X_Pos+0x2>
    f8ce:	70 91 13 12 	lds	r23, 0x1213	; 0x801213 <Null_X_Pos+0x3>
    f8d2:	00 91 ed 11 	lds	r16, 0x11ED	; 0x8011ed <Hand_X_Pos>
    f8d6:	10 91 ee 11 	lds	r17, 0x11EE	; 0x8011ee <Hand_X_Pos+0x1>
    f8da:	20 91 ef 11 	lds	r18, 0x11EF	; 0x8011ef <Hand_X_Pos+0x2>
    f8de:	30 91 f0 11 	lds	r19, 0x11F0	; 0x8011f0 <Hand_X_Pos+0x3>
    f8e2:	40 0f       	add	r20, r16
    f8e4:	51 1f       	adc	r21, r17
    f8e6:	62 1f       	adc	r22, r18
    f8e8:	73 1f       	adc	r23, r19
    f8ea:	f4 99       	sbic	0x1e, 4	; 30
    f8ec:	55 c0       	rjmp	.+170    	; 0xf998 <__vector_33+0x16a>
    f8ee:	84 17       	cp	r24, r20
    f8f0:	95 07       	cpc	r25, r21
    f8f2:	a6 07       	cpc	r26, r22
    f8f4:	b7 07       	cpc	r27, r23
    f8f6:	3c f6       	brge	.-114    	; 0xf886 <__vector_33+0x58>
    f8f8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f8fc:	92 e0       	ldi	r25, 0x02	; 2
    f8fe:	89 27       	eor	r24, r25
    f900:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f904:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f908:	81 fd       	sbrc	r24, 1
    f90a:	bd cf       	rjmp	.-134    	; 0xf886 <__vector_33+0x58>
    f90c:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f910:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f914:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f918:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f91c:	01 96       	adiw	r24, 0x01	; 1
    f91e:	a1 1d       	adc	r26, r1
    f920:	b1 1d       	adc	r27, r1
    f922:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f926:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f92a:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f92e:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f932:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    f936:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    f93a:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    f93e:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    f942:	48 17       	cp	r20, r24
    f944:	59 07       	cpc	r21, r25
    f946:	6a 07       	cpc	r22, r26
    f948:	7b 07       	cpc	r23, r27
    f94a:	0c f4       	brge	.+2      	; 0xf94e <__vector_33+0x120>
    f94c:	68 c0       	rjmp	.+208    	; 0xfa1e <__vector_33+0x1f0>
    f94e:	20 91 00 12 	lds	r18, 0x1200	; 0x801200 <hand_X>
    f952:	22 23       	and	r18, r18
    f954:	09 f4       	brne	.+2      	; 0xf958 <__vector_33+0x12a>
    f956:	63 c0       	rjmp	.+198    	; 0xfa1e <__vector_33+0x1f0>
    f958:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    f95c:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    f960:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    f964:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    f968:	84 17       	cp	r24, r20
    f96a:	95 07       	cpc	r25, r21
    f96c:	a6 07       	cpc	r26, r22
    f96e:	b7 07       	cpc	r27, r23
    f970:	0c f0       	brlt	.+2      	; 0xf974 <__vector_33+0x146>
    f972:	89 cf       	rjmp	.-238    	; 0xf886 <__vector_33+0x58>
    f974:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    f978:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    f97c:	80 91 ae 11 	lds	r24, 0x11AE	; 0x8011ae <min_OCR3A>
    f980:	90 91 af 11 	lds	r25, 0x11AF	; 0x8011af <min_OCR3A+0x1>
    f984:	82 17       	cp	r24, r18
    f986:	93 07       	cpc	r25, r19
    f988:	08 f0       	brcs	.+2      	; 0xf98c <__vector_33+0x15e>
    f98a:	7d cf       	rjmp	.-262    	; 0xf886 <__vector_33+0x58>
    f98c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    f990:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    f994:	01 97       	sbiw	r24, 0x01	; 1
    f996:	54 c0       	rjmp	.+168    	; 0xfa40 <__vector_33+0x212>
    f998:	48 17       	cp	r20, r24
    f99a:	59 07       	cpc	r21, r25
    f99c:	6a 07       	cpc	r22, r26
    f99e:	7b 07       	cpc	r23, r27
    f9a0:	0c f0       	brlt	.+2      	; 0xf9a4 <__vector_33+0x176>
    f9a2:	71 cf       	rjmp	.-286    	; 0xf886 <__vector_33+0x58>
    f9a4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f9a8:	92 e0       	ldi	r25, 0x02	; 2
    f9aa:	89 27       	eor	r24, r25
    f9ac:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    f9b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    f9b4:	81 fd       	sbrc	r24, 1
    f9b6:	67 cf       	rjmp	.-306    	; 0xf886 <__vector_33+0x58>
    f9b8:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
    f9bc:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    f9c0:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    f9c4:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    f9c8:	01 97       	sbiw	r24, 0x01	; 1
    f9ca:	a1 09       	sbc	r26, r1
    f9cc:	b1 09       	sbc	r27, r1
    f9ce:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
    f9d2:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
    f9d6:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
    f9da:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
    f9de:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    f9e2:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    f9e6:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    f9ea:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    f9ee:	84 17       	cp	r24, r20
    f9f0:	95 07       	cpc	r25, r21
    f9f2:	a6 07       	cpc	r26, r22
    f9f4:	b7 07       	cpc	r27, r23
    f9f6:	9c f0       	brlt	.+38     	; 0xfa1e <__vector_33+0x1f0>
    f9f8:	20 91 00 12 	lds	r18, 0x1200	; 0x801200 <hand_X>
    f9fc:	22 23       	and	r18, r18
    f9fe:	79 f0       	breq	.+30     	; 0xfa1e <__vector_33+0x1f0>
    fa00:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    fa04:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    fa08:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    fa0c:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    fa10:	48 17       	cp	r20, r24
    fa12:	59 07       	cpc	r21, r25
    fa14:	6a 07       	cpc	r22, r26
    fa16:	7b 07       	cpc	r23, r27
    fa18:	0c f4       	brge	.+2      	; 0xfa1c <__vector_33+0x1ee>
    fa1a:	ac cf       	rjmp	.-168    	; 0xf974 <__vector_33+0x146>
    fa1c:	34 cf       	rjmp	.-408    	; 0xf886 <__vector_33+0x58>
    fa1e:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fa22:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fa26:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <max_OCR3A>
    fa2a:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <max_OCR3A+0x1>
    fa2e:	28 17       	cp	r18, r24
    fa30:	39 07       	cpc	r19, r25
    fa32:	08 f0       	brcs	.+2      	; 0xfa36 <__vector_33+0x208>
    fa34:	28 cf       	rjmp	.-432    	; 0xf886 <__vector_33+0x58>
    fa36:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fa3a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fa3e:	01 96       	adiw	r24, 0x01	; 1
    fa40:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fa44:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fa48:	1e cf       	rjmp	.-452    	; 0xf886 <__vector_33+0x58>

0000fa4a <__vector_32>:
    fa4a:	1f 92       	push	r1
    fa4c:	0f 92       	push	r0
    fa4e:	0f b6       	in	r0, 0x3f	; 63
    fa50:	0f 92       	push	r0
    fa52:	11 24       	eor	r1, r1
    fa54:	0f 93       	push	r16
    fa56:	1f 93       	push	r17
    fa58:	2f 93       	push	r18
    fa5a:	3f 93       	push	r19
    fa5c:	4f 93       	push	r20
    fa5e:	5f 93       	push	r21
    fa60:	6f 93       	push	r22
    fa62:	7f 93       	push	r23
    fa64:	8f 93       	push	r24
    fa66:	9f 93       	push	r25
    fa68:	af 93       	push	r26
    fa6a:	bf 93       	push	r27
    fa6c:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    fa70:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    fa74:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    fa78:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    fa7c:	20 91 03 12 	lds	r18, 0x1203	; 0x801203 <flag_Scale_x10>
    fa80:	22 23       	and	r18, r18
    fa82:	69 f1       	breq	.+90     	; 0xfade <__vector_32+0x94>
    fa84:	f1 99       	sbic	0x1e, 1	; 30
    fa86:	1e c0       	rjmp	.+60     	; 0xfac4 <__vector_32+0x7a>
    fa88:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
    fa8c:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
    fa90:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
    fa94:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
    fa98:	84 17       	cp	r24, r20
    fa9a:	95 07       	cpc	r25, r21
    fa9c:	a6 07       	cpc	r26, r22
    fa9e:	b7 07       	cpc	r27, r23
    faa0:	f4 f0       	brlt	.+60     	; 0xfade <__vector_32+0x94>
    faa2:	bf 91       	pop	r27
    faa4:	af 91       	pop	r26
    faa6:	9f 91       	pop	r25
    faa8:	8f 91       	pop	r24
    faaa:	7f 91       	pop	r23
    faac:	6f 91       	pop	r22
    faae:	5f 91       	pop	r21
    fab0:	4f 91       	pop	r20
    fab2:	3f 91       	pop	r19
    fab4:	2f 91       	pop	r18
    fab6:	1f 91       	pop	r17
    fab8:	0f 91       	pop	r16
    faba:	0f 90       	pop	r0
    fabc:	0f be       	out	0x3f, r0	; 63
    fabe:	0f 90       	pop	r0
    fac0:	1f 90       	pop	r1
    fac2:	18 95       	reti
    fac4:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
    fac8:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
    facc:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
    fad0:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
    fad4:	48 17       	cp	r20, r24
    fad6:	59 07       	cpc	r21, r25
    fad8:	6a 07       	cpc	r22, r26
    fada:	7b 07       	cpc	r23, r27
    fadc:	14 f7       	brge	.-60     	; 0xfaa2 <__vector_32+0x58>
    fade:	40 91 20 12 	lds	r20, 0x1220	; 0x801220 <Null_Z_Pos>
    fae2:	50 91 21 12 	lds	r21, 0x1221	; 0x801221 <Null_Z_Pos+0x1>
    fae6:	60 91 22 12 	lds	r22, 0x1222	; 0x801222 <Null_Z_Pos+0x2>
    faea:	70 91 23 12 	lds	r23, 0x1223	; 0x801223 <Null_Z_Pos+0x3>
    faee:	00 91 e9 11 	lds	r16, 0x11E9	; 0x8011e9 <Hand_Z_Pos>
    faf2:	10 91 ea 11 	lds	r17, 0x11EA	; 0x8011ea <Hand_Z_Pos+0x1>
    faf6:	20 91 eb 11 	lds	r18, 0x11EB	; 0x8011eb <Hand_Z_Pos+0x2>
    fafa:	30 91 ec 11 	lds	r19, 0x11EC	; 0x8011ec <Hand_Z_Pos+0x3>
    fafe:	40 0f       	add	r20, r16
    fb00:	51 1f       	adc	r21, r17
    fb02:	62 1f       	adc	r22, r18
    fb04:	73 1f       	adc	r23, r19
    fb06:	f1 99       	sbic	0x1e, 1	; 30
    fb08:	55 c0       	rjmp	.+170    	; 0xfbb4 <__vector_32+0x16a>
    fb0a:	84 17       	cp	r24, r20
    fb0c:	95 07       	cpc	r25, r21
    fb0e:	a6 07       	cpc	r26, r22
    fb10:	b7 07       	cpc	r27, r23
    fb12:	3c f6       	brge	.-114    	; 0xfaa2 <__vector_32+0x58>
    fb14:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fb18:	91 e0       	ldi	r25, 0x01	; 1
    fb1a:	89 27       	eor	r24, r25
    fb1c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fb20:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    fb24:	80 fd       	sbrc	r24, 0
    fb26:	bd cf       	rjmp	.-134    	; 0xfaa2 <__vector_32+0x58>
    fb28:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    fb2c:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    fb30:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    fb34:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    fb38:	01 96       	adiw	r24, 0x01	; 1
    fb3a:	a1 1d       	adc	r26, r1
    fb3c:	b1 1d       	adc	r27, r1
    fb3e:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    fb42:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    fb46:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    fb4a:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    fb4e:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    fb52:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    fb56:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    fb5a:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    fb5e:	48 17       	cp	r20, r24
    fb60:	59 07       	cpc	r21, r25
    fb62:	6a 07       	cpc	r22, r26
    fb64:	7b 07       	cpc	r23, r27
    fb66:	0c f4       	brge	.+2      	; 0xfb6a <__vector_32+0x120>
    fb68:	68 c0       	rjmp	.+208    	; 0xfc3a <__vector_32+0x1f0>
    fb6a:	20 91 01 12 	lds	r18, 0x1201	; 0x801201 <hand_Z>
    fb6e:	22 23       	and	r18, r18
    fb70:	09 f4       	brne	.+2      	; 0xfb74 <__vector_32+0x12a>
    fb72:	63 c0       	rjmp	.+198    	; 0xfc3a <__vector_32+0x1f0>
    fb74:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    fb78:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    fb7c:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    fb80:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    fb84:	84 17       	cp	r24, r20
    fb86:	95 07       	cpc	r25, r21
    fb88:	a6 07       	cpc	r26, r22
    fb8a:	b7 07       	cpc	r27, r23
    fb8c:	0c f0       	brlt	.+2      	; 0xfb90 <__vector_32+0x146>
    fb8e:	89 cf       	rjmp	.-238    	; 0xfaa2 <__vector_32+0x58>
    fb90:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fb94:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fb98:	80 91 ae 11 	lds	r24, 0x11AE	; 0x8011ae <min_OCR3A>
    fb9c:	90 91 af 11 	lds	r25, 0x11AF	; 0x8011af <min_OCR3A+0x1>
    fba0:	82 17       	cp	r24, r18
    fba2:	93 07       	cpc	r25, r19
    fba4:	08 f0       	brcs	.+2      	; 0xfba8 <__vector_32+0x15e>
    fba6:	7d cf       	rjmp	.-262    	; 0xfaa2 <__vector_32+0x58>
    fba8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fbac:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fbb0:	01 97       	sbiw	r24, 0x01	; 1
    fbb2:	54 c0       	rjmp	.+168    	; 0xfc5c <__vector_32+0x212>
    fbb4:	48 17       	cp	r20, r24
    fbb6:	59 07       	cpc	r21, r25
    fbb8:	6a 07       	cpc	r22, r26
    fbba:	7b 07       	cpc	r23, r27
    fbbc:	0c f0       	brlt	.+2      	; 0xfbc0 <__vector_32+0x176>
    fbbe:	71 cf       	rjmp	.-286    	; 0xfaa2 <__vector_32+0x58>
    fbc0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fbc4:	91 e0       	ldi	r25, 0x01	; 1
    fbc6:	89 27       	eor	r24, r25
    fbc8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fbcc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    fbd0:	80 fd       	sbrc	r24, 0
    fbd2:	67 cf       	rjmp	.-306    	; 0xfaa2 <__vector_32+0x58>
    fbd4:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
    fbd8:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    fbdc:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    fbe0:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    fbe4:	01 97       	sbiw	r24, 0x01	; 1
    fbe6:	a1 09       	sbc	r26, r1
    fbe8:	b1 09       	sbc	r27, r1
    fbea:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <Motor_Z_Pos>
    fbee:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <Motor_Z_Pos+0x1>
    fbf2:	a0 93 5c 12 	sts	0x125C, r26	; 0x80125c <Motor_Z_Pos+0x2>
    fbf6:	b0 93 5d 12 	sts	0x125D, r27	; 0x80125d <Motor_Z_Pos+0x3>
    fbfa:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    fbfe:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    fc02:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    fc06:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    fc0a:	84 17       	cp	r24, r20
    fc0c:	95 07       	cpc	r25, r21
    fc0e:	a6 07       	cpc	r26, r22
    fc10:	b7 07       	cpc	r27, r23
    fc12:	9c f0       	brlt	.+38     	; 0xfc3a <__vector_32+0x1f0>
    fc14:	20 91 01 12 	lds	r18, 0x1201	; 0x801201 <hand_Z>
    fc18:	22 23       	and	r18, r18
    fc1a:	79 f0       	breq	.+30     	; 0xfc3a <__vector_32+0x1f0>
    fc1c:	40 91 a5 11 	lds	r20, 0x11A5	; 0x8011a5 <Limit_Pos_HC>
    fc20:	50 91 a6 11 	lds	r21, 0x11A6	; 0x8011a6 <Limit_Pos_HC+0x1>
    fc24:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <Limit_Pos_HC+0x2>
    fc28:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <Limit_Pos_HC+0x3>
    fc2c:	48 17       	cp	r20, r24
    fc2e:	59 07       	cpc	r21, r25
    fc30:	6a 07       	cpc	r22, r26
    fc32:	7b 07       	cpc	r23, r27
    fc34:	0c f4       	brge	.+2      	; 0xfc38 <__vector_32+0x1ee>
    fc36:	ac cf       	rjmp	.-168    	; 0xfb90 <__vector_32+0x146>
    fc38:	34 cf       	rjmp	.-408    	; 0xfaa2 <__vector_32+0x58>
    fc3a:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fc3e:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fc42:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <max_OCR3A>
    fc46:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <max_OCR3A+0x1>
    fc4a:	28 17       	cp	r18, r24
    fc4c:	39 07       	cpc	r19, r25
    fc4e:	08 f0       	brcs	.+2      	; 0xfc52 <__vector_32+0x208>
    fc50:	28 cf       	rjmp	.-432    	; 0xfaa2 <__vector_32+0x58>
    fc52:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fc56:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fc5a:	01 96       	adiw	r24, 0x01	; 1
    fc5c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    fc60:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    fc64:	1e cf       	rjmp	.-452    	; 0xfaa2 <__vector_32+0x58>

0000fc66 <__vector_22>:
    fc66:	1f 92       	push	r1
    fc68:	0f 92       	push	r0
    fc6a:	0f b6       	in	r0, 0x3f	; 63
    fc6c:	0f 92       	push	r0
    fc6e:	11 24       	eor	r1, r1
    fc70:	0f 90       	pop	r0
    fc72:	0f be       	out	0x3f, r0	; 63
    fc74:	0f 90       	pop	r0
    fc76:	1f 90       	pop	r1
    fc78:	18 95       	reti

0000fc7a <__vector_14>:
    fc7a:	1f 92       	push	r1
    fc7c:	0f 92       	push	r0
    fc7e:	0f b6       	in	r0, 0x3f	; 63
    fc80:	0f 92       	push	r0
    fc82:	11 24       	eor	r1, r1
    fc84:	0f 90       	pop	r0
    fc86:	0f be       	out	0x3f, r0	; 63
    fc88:	0f 90       	pop	r0
    fc8a:	1f 90       	pop	r1
    fc8c:	18 95       	reti

0000fc8e <__vector_13>:
    fc8e:	1f 92       	push	r1
    fc90:	0f 92       	push	r0
    fc92:	0f b6       	in	r0, 0x3f	; 63
    fc94:	0f 92       	push	r0
    fc96:	11 24       	eor	r1, r1
    fc98:	0f 90       	pop	r0
    fc9a:	0f be       	out	0x3f, r0	; 63
    fc9c:	0f 90       	pop	r0
    fc9e:	1f 90       	pop	r1
    fca0:	18 95       	reti

0000fca2 <__vector_3>:
    fca2:	1f 92       	push	r1
    fca4:	0f 92       	push	r0
    fca6:	0f b6       	in	r0, 0x3f	; 63
    fca8:	0f 92       	push	r0
    fcaa:	11 24       	eor	r1, r1
    fcac:	8f 93       	push	r24
    fcae:	9f 93       	push	r25
    fcb0:	af 93       	push	r26
    fcb2:	bf 93       	push	r27
    fcb4:	4b 99       	sbic	0x09, 3	; 9
    fcb6:	15 c0       	rjmp	.+42     	; 0xfce2 <__vector_3+0x40>
    fcb8:	4a 99       	sbic	0x09, 2	; 9
    fcba:	1c c0       	rjmp	.+56     	; 0xfcf4 <__vector_3+0x52>
    fcbc:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <Hand_Count>
    fcc0:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <Hand_Count+0x1>
    fcc4:	a0 91 fb 11 	lds	r26, 0x11FB	; 0x8011fb <Hand_Count+0x2>
    fcc8:	b0 91 fc 11 	lds	r27, 0x11FC	; 0x8011fc <Hand_Count+0x3>
    fccc:	01 97       	sbiw	r24, 0x01	; 1
    fcce:	a1 09       	sbc	r26, r1
    fcd0:	b1 09       	sbc	r27, r1
    fcd2:	80 93 f9 11 	sts	0x11F9, r24	; 0x8011f9 <Hand_Count>
    fcd6:	90 93 fa 11 	sts	0x11FA, r25	; 0x8011fa <Hand_Count+0x1>
    fcda:	a0 93 fb 11 	sts	0x11FB, r26	; 0x8011fb <Hand_Count+0x2>
    fcde:	b0 93 fc 11 	sts	0x11FC, r27	; 0x8011fc <Hand_Count+0x3>
    fce2:	bf 91       	pop	r27
    fce4:	af 91       	pop	r26
    fce6:	9f 91       	pop	r25
    fce8:	8f 91       	pop	r24
    fcea:	0f 90       	pop	r0
    fcec:	0f be       	out	0x3f, r0	; 63
    fcee:	0f 90       	pop	r0
    fcf0:	1f 90       	pop	r1
    fcf2:	18 95       	reti
    fcf4:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <Hand_Count>
    fcf8:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <Hand_Count+0x1>
    fcfc:	a0 91 fb 11 	lds	r26, 0x11FB	; 0x8011fb <Hand_Count+0x2>
    fd00:	b0 91 fc 11 	lds	r27, 0x11FC	; 0x8011fc <Hand_Count+0x3>
    fd04:	01 96       	adiw	r24, 0x01	; 1
    fd06:	a1 1d       	adc	r26, r1
    fd08:	b1 1d       	adc	r27, r1
    fd0a:	e3 cf       	rjmp	.-58     	; 0xfcd2 <__vector_3+0x30>

0000fd0c <__vector_2>:
    fd0c:	1f 92       	push	r1
    fd0e:	0f 92       	push	r0
    fd10:	0f b6       	in	r0, 0x3f	; 63
    fd12:	0f 92       	push	r0
    fd14:	11 24       	eor	r1, r1
    fd16:	8f 93       	push	r24
    fd18:	9f 93       	push	r25
    fd1a:	af 93       	push	r26
    fd1c:	bf 93       	push	r27
    fd1e:	80 91 a1 11 	lds	r24, 0x11A1	; 0x8011a1 <TachoCount>
    fd22:	90 91 a2 11 	lds	r25, 0x11A2	; 0x8011a2 <TachoCount+0x1>
    fd26:	a0 91 a3 11 	lds	r26, 0x11A3	; 0x8011a3 <TachoCount+0x2>
    fd2a:	b0 91 a4 11 	lds	r27, 0x11A4	; 0x8011a4 <TachoCount+0x3>
    fd2e:	01 96       	adiw	r24, 0x01	; 1
    fd30:	a1 1d       	adc	r26, r1
    fd32:	b1 1d       	adc	r27, r1
    fd34:	80 93 a1 11 	sts	0x11A1, r24	; 0x8011a1 <TachoCount>
    fd38:	90 93 a2 11 	sts	0x11A2, r25	; 0x8011a2 <TachoCount+0x1>
    fd3c:	a0 93 a3 11 	sts	0x11A3, r26	; 0x8011a3 <TachoCount+0x2>
    fd40:	b0 93 a4 11 	sts	0x11A4, r27	; 0x8011a4 <TachoCount+0x3>
    fd44:	80 91 a0 11 	lds	r24, 0x11A0	; 0x8011a0 <MotorZ_NeedClear>
    fd48:	88 23       	and	r24, r24
    fd4a:	39 f0       	breq	.+14     	; 0xfd5a <__vector_2+0x4e>
    fd4c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fd50:	8e 7f       	andi	r24, 0xFE	; 254
    fd52:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fd56:	10 92 a0 11 	sts	0x11A0, r1	; 0x8011a0 <MotorZ_NeedClear>
    fd5a:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <MotorX_NeedClear>
    fd5e:	88 23       	and	r24, r24
    fd60:	39 f0       	breq	.+14     	; 0xfd70 <__vector_2+0x64>
    fd62:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fd66:	8d 7f       	andi	r24, 0xFD	; 253
    fd68:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fd6c:	10 92 a9 11 	sts	0x11A9, r1	; 0x8011a9 <MotorX_NeedClear>
    fd70:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    fd74:	88 30       	cpi	r24, 0x08	; 8
    fd76:	89 f4       	brne	.+34     	; 0xfd9a <__vector_2+0x8e>
    fd78:	48 99       	sbic	0x09, 0	; 9
    fd7a:	07 c0       	rjmp	.+14     	; 0xfd8a <__vector_2+0x7e>
    fd7c:	49 99       	sbic	0x09, 1	; 9
    fd7e:	07 c0       	rjmp	.+14     	; 0xfd8e <__vector_2+0x82>
    fd80:	10 92 ab 11 	sts	0x11AB, r1	; 0x8011ab <Enc_Pos_Divider+0x1>
    fd84:	10 92 aa 11 	sts	0x11AA, r1	; 0x8011aa <Enc_Pos_Divider>
    fd88:	08 c0       	rjmp	.+16     	; 0xfd9a <__vector_2+0x8e>
    fd8a:	49 99       	sbic	0x09, 1	; 9
    fd8c:	f9 cf       	rjmp	.-14     	; 0xfd80 <__vector_2+0x74>
    fd8e:	81 e0       	ldi	r24, 0x01	; 1
    fd90:	90 e0       	ldi	r25, 0x00	; 0
    fd92:	90 93 ab 11 	sts	0x11AB, r25	; 0x8011ab <Enc_Pos_Divider+0x1>
    fd96:	80 93 aa 11 	sts	0x11AA, r24	; 0x8011aa <Enc_Pos_Divider>
    fd9a:	bf 91       	pop	r27
    fd9c:	af 91       	pop	r26
    fd9e:	9f 91       	pop	r25
    fda0:	8f 91       	pop	r24
    fda2:	0f 90       	pop	r0
    fda4:	0f be       	out	0x3f, r0	; 63
    fda6:	0f 90       	pop	r0
    fda8:	1f 90       	pop	r1
    fdaa:	18 95       	reti

0000fdac <__vector_1>:
    fdac:	1f 92       	push	r1
    fdae:	0f 92       	push	r0
    fdb0:	0f b6       	in	r0, 0x3f	; 63
    fdb2:	0f 92       	push	r0
    fdb4:	11 24       	eor	r1, r1
    fdb6:	0f 93       	push	r16
    fdb8:	1f 93       	push	r17
    fdba:	2f 93       	push	r18
    fdbc:	3f 93       	push	r19
    fdbe:	4f 93       	push	r20
    fdc0:	5f 93       	push	r21
    fdc2:	6f 93       	push	r22
    fdc4:	7f 93       	push	r23
    fdc6:	8f 93       	push	r24
    fdc8:	9f 93       	push	r25
    fdca:	f3 9b       	sbis	0x1e, 3	; 30
    fdcc:	05 c0       	rjmp	.+10     	; 0xfdd8 <__vector_1+0x2c>
    fdce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fdd2:	81 60       	ori	r24, 0x01	; 1
    fdd4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fdd8:	f6 9b       	sbis	0x1e, 6	; 30
    fdda:	05 c0       	rjmp	.+10     	; 0xfde6 <__vector_1+0x3a>
    fddc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fde0:	82 60       	ori	r24, 0x02	; 2
    fde2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fde6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fdea:	8f 77       	andi	r24, 0x7F	; 127
    fdec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fdf0:	48 99       	sbic	0x09, 0	; 9
    fdf2:	18 c0       	rjmp	.+48     	; 0xfe24 <__DATA_REGION_LENGTH__+0x24>
    fdf4:	49 99       	sbic	0x09, 1	; 9
    fdf6:	18 c0       	rjmp	.+48     	; 0xfe28 <__DATA_REGION_LENGTH__+0x28>
    fdf8:	f0 98       	cbi	0x1e, 0	; 30
    fdfa:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <Enc_Pos>
    fdfe:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <Enc_Pos+0x1>
    fe02:	01 96       	adiw	r24, 0x01	; 1
    fe04:	90 93 e4 11 	sts	0x11E4, r25	; 0x8011e4 <Enc_Pos+0x1>
    fe08:	80 93 e3 11 	sts	0x11E3, r24	; 0x8011e3 <Enc_Pos>
    fe0c:	20 91 b1 11 	lds	r18, 0x11B1	; 0x8011b1 <ENC_TICK>
    fe10:	30 91 b2 11 	lds	r19, 0x11B2	; 0x8011b2 <ENC_TICK+0x1>
    fe14:	82 17       	cp	r24, r18
    fe16:	93 07       	cpc	r25, r19
    fe18:	24 f1       	brlt	.+72     	; 0xfe62 <__DATA_REGION_LENGTH__+0x62>
    fe1a:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <Enc_Pos+0x1>
    fe1e:	10 92 e3 11 	sts	0x11E3, r1	; 0x8011e3 <Enc_Pos>
    fe22:	17 c0       	rjmp	.+46     	; 0xfe52 <__DATA_REGION_LENGTH__+0x52>
    fe24:	49 99       	sbic	0x09, 1	; 9
    fe26:	e8 cf       	rjmp	.-48     	; 0xfdf8 <__vector_1+0x4c>
    fe28:	f0 9a       	sbi	0x1e, 0	; 30
    fe2a:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <Enc_Pos>
    fe2e:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <Enc_Pos+0x1>
    fe32:	01 97       	sbiw	r24, 0x01	; 1
    fe34:	90 93 e4 11 	sts	0x11E4, r25	; 0x8011e4 <Enc_Pos+0x1>
    fe38:	80 93 e3 11 	sts	0x11E3, r24	; 0x8011e3 <Enc_Pos>
    fe3c:	97 ff       	sbrs	r25, 7
    fe3e:	11 c0       	rjmp	.+34     	; 0xfe62 <__DATA_REGION_LENGTH__+0x62>
    fe40:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <ENC_TICK>
    fe44:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <ENC_TICK+0x1>
    fe48:	01 97       	sbiw	r24, 0x01	; 1
    fe4a:	90 93 e4 11 	sts	0x11E4, r25	; 0x8011e4 <Enc_Pos+0x1>
    fe4e:	80 93 e3 11 	sts	0x11E3, r24	; 0x8011e3 <Enc_Pos>
    fe52:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fe56:	80 68       	ori	r24, 0x80	; 128
    fe58:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    fe5c:	f2 9b       	sbis	0x1e, 2	; 30
    fe5e:	8b c0       	rjmp	.+278    	; 0xff76 <__DATA_REGION_LENGTH__+0x176>
    fe60:	f3 9a       	sbi	0x1e, 3	; 30
    fe62:	f3 9b       	sbis	0x1e, 3	; 30
    fe64:	3c c0       	rjmp	.+120    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
    fe66:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <tmp_Ks_Divisor>
    fe6a:	f1 99       	sbic	0x1e, 1	; 30
    fe6c:	16 c0       	rjmp	.+44     	; 0xfe9a <__DATA_REGION_LENGTH__+0x9a>
    fe6e:	40 91 4c 12 	lds	r20, 0x124C	; 0x80124c <Limit_Pos>
    fe72:	50 91 4d 12 	lds	r21, 0x124D	; 0x80124d <Limit_Pos+0x1>
    fe76:	60 91 4e 12 	lds	r22, 0x124E	; 0x80124e <Limit_Pos+0x2>
    fe7a:	70 91 4f 12 	lds	r23, 0x124F	; 0x80124f <Limit_Pos+0x3>
    fe7e:	00 91 5a 12 	lds	r16, 0x125A	; 0x80125a <Motor_Z_Pos>
    fe82:	10 91 5b 12 	lds	r17, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    fe86:	20 91 5c 12 	lds	r18, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    fe8a:	30 91 5d 12 	lds	r19, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    fe8e:	40 17       	cp	r20, r16
    fe90:	51 07       	cpc	r21, r17
    fe92:	62 07       	cpc	r22, r18
    fe94:	73 07       	cpc	r23, r19
    fe96:	0c f4       	brge	.+2      	; 0xfe9a <__DATA_REGION_LENGTH__+0x9a>
    fe98:	72 c0       	rjmp	.+228    	; 0xff7e <__DATA_REGION_LENGTH__+0x17e>
    fe9a:	f1 9b       	sbis	0x1e, 1	; 30
    fe9c:	16 c0       	rjmp	.+44     	; 0xfeca <__DATA_REGION_LENGTH__+0xca>
    fe9e:	40 91 4c 12 	lds	r20, 0x124C	; 0x80124c <Limit_Pos>
    fea2:	50 91 4d 12 	lds	r21, 0x124D	; 0x80124d <Limit_Pos+0x1>
    fea6:	60 91 4e 12 	lds	r22, 0x124E	; 0x80124e <Limit_Pos+0x2>
    feaa:	70 91 4f 12 	lds	r23, 0x124F	; 0x80124f <Limit_Pos+0x3>
    feae:	00 91 5a 12 	lds	r16, 0x125A	; 0x80125a <Motor_Z_Pos>
    feb2:	10 91 5b 12 	lds	r17, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    feb6:	20 91 5c 12 	lds	r18, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    feba:	30 91 5d 12 	lds	r19, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    febe:	04 17       	cp	r16, r20
    fec0:	15 07       	cpc	r17, r21
    fec2:	26 07       	cpc	r18, r22
    fec4:	37 07       	cpc	r19, r23
    fec6:	0c f4       	brge	.+2      	; 0xfeca <__DATA_REGION_LENGTH__+0xca>
    fec8:	5a c0       	rjmp	.+180    	; 0xff7e <__DATA_REGION_LENGTH__+0x17e>
    feca:	f2 9b       	sbis	0x1e, 2	; 30
    fecc:	58 c0       	rjmp	.+176    	; 0xff7e <__DATA_REGION_LENGTH__+0x17e>
    fece:	90 91 52 12 	lds	r25, 0x1252	; 0x801252 <Ks_Count>
    fed2:	9f 5f       	subi	r25, 0xFF	; 255
    fed4:	90 93 52 12 	sts	0x1252, r25	; 0x801252 <Ks_Count>
    fed8:	89 17       	cp	r24, r25
    feda:	08 f4       	brcc	.+2      	; 0xfede <__DATA_REGION_LENGTH__+0xde>
    fedc:	91 c0       	rjmp	.+290    	; 0x10000 <__EEPROM_REGION_LENGTH__>
    fede:	f6 9b       	sbis	0x1e, 6	; 30
    fee0:	3c c0       	rjmp	.+120    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
    fee2:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <tmp_Ks_Divisor>
    fee6:	f4 99       	sbic	0x1e, 4	; 30
    fee8:	16 c0       	rjmp	.+44     	; 0xff16 <__DATA_REGION_LENGTH__+0x116>
    feea:	40 91 4c 12 	lds	r20, 0x124C	; 0x80124c <Limit_Pos>
    feee:	50 91 4d 12 	lds	r21, 0x124D	; 0x80124d <Limit_Pos+0x1>
    fef2:	60 91 4e 12 	lds	r22, 0x124E	; 0x80124e <Limit_Pos+0x2>
    fef6:	70 91 4f 12 	lds	r23, 0x124F	; 0x80124f <Limit_Pos+0x3>
    fefa:	00 91 46 12 	lds	r16, 0x1246	; 0x801246 <Motor_X_Pos>
    fefe:	10 91 47 12 	lds	r17, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    ff02:	20 91 48 12 	lds	r18, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    ff06:	30 91 49 12 	lds	r19, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    ff0a:	40 17       	cp	r20, r16
    ff0c:	51 07       	cpc	r21, r17
    ff0e:	62 07       	cpc	r22, r18
    ff10:	73 07       	cpc	r23, r19
    ff12:	0c f4       	brge	.+2      	; 0xff16 <__DATA_REGION_LENGTH__+0x116>
    ff14:	c8 c0       	rjmp	.+400    	; 0x100a6 <__EEPROM_REGION_LENGTH__+0xa6>
    ff16:	f4 9b       	sbis	0x1e, 4	; 30
    ff18:	16 c0       	rjmp	.+44     	; 0xff46 <__DATA_REGION_LENGTH__+0x146>
    ff1a:	40 91 4c 12 	lds	r20, 0x124C	; 0x80124c <Limit_Pos>
    ff1e:	50 91 4d 12 	lds	r21, 0x124D	; 0x80124d <Limit_Pos+0x1>
    ff22:	60 91 4e 12 	lds	r22, 0x124E	; 0x80124e <Limit_Pos+0x2>
    ff26:	70 91 4f 12 	lds	r23, 0x124F	; 0x80124f <Limit_Pos+0x3>
    ff2a:	00 91 46 12 	lds	r16, 0x1246	; 0x801246 <Motor_X_Pos>
    ff2e:	10 91 47 12 	lds	r17, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
    ff32:	20 91 48 12 	lds	r18, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
    ff36:	30 91 49 12 	lds	r19, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
    ff3a:	04 17       	cp	r16, r20
    ff3c:	15 07       	cpc	r17, r21
    ff3e:	26 07       	cpc	r18, r22
    ff40:	37 07       	cpc	r19, r23
    ff42:	0c f4       	brge	.+2      	; 0xff46 <__DATA_REGION_LENGTH__+0x146>
    ff44:	b0 c0       	rjmp	.+352    	; 0x100a6 <__EEPROM_REGION_LENGTH__+0xa6>
    ff46:	f5 9b       	sbis	0x1e, 5	; 30
    ff48:	ae c0       	rjmp	.+348    	; 0x100a6 <__EEPROM_REGION_LENGTH__+0xa6>
    ff4a:	90 91 52 12 	lds	r25, 0x1252	; 0x801252 <Ks_Count>
    ff4e:	9f 5f       	subi	r25, 0xFF	; 255
    ff50:	90 93 52 12 	sts	0x1252, r25	; 0x801252 <Ks_Count>
    ff54:	89 17       	cp	r24, r25
    ff56:	08 f4       	brcc	.+2      	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
    ff58:	e7 c0       	rjmp	.+462    	; 0x10128 <__EEPROM_REGION_LENGTH__+0x128>
    ff5a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
    ff5e:	88 30       	cpi	r24, 0x08	; 8
    ff60:	09 f0       	breq	.+2      	; 0xff64 <__DATA_REGION_LENGTH__+0x164>
    ff62:	3d c1       	rjmp	.+634    	; 0x101de <__EEPROM_REGION_LENGTH__+0x1de>
    ff64:	48 99       	sbic	0x09, 0	; 9
    ff66:	33 c1       	rjmp	.+614    	; 0x101ce <__EEPROM_REGION_LENGTH__+0x1ce>
    ff68:	49 99       	sbic	0x09, 1	; 9
    ff6a:	33 c1       	rjmp	.+614    	; 0x101d2 <__EEPROM_REGION_LENGTH__+0x1d2>
    ff6c:	10 92 ab 11 	sts	0x11AB, r1	; 0x8011ab <Enc_Pos_Divider+0x1>
    ff70:	10 92 aa 11 	sts	0x11AA, r1	; 0x8011aa <Enc_Pos_Divider>
    ff74:	34 c1       	rjmp	.+616    	; 0x101de <__EEPROM_REGION_LENGTH__+0x1de>
    ff76:	f5 9b       	sbis	0x1e, 5	; 30
    ff78:	74 cf       	rjmp	.-280    	; 0xfe62 <__DATA_REGION_LENGTH__+0x62>
    ff7a:	f6 9a       	sbi	0x1e, 6	; 30
    ff7c:	72 cf       	rjmp	.-284    	; 0xfe62 <__DATA_REGION_LENGTH__+0x62>
    ff7e:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <tmp_Accel>
    ff82:	89 17       	cp	r24, r25
    ff84:	d8 f5       	brcc	.+118    	; 0xfffc <__DATA_REGION_LENGTH__+0x1fc>
    ff86:	90 91 52 12 	lds	r25, 0x1252	; 0x801252 <Ks_Count>
    ff8a:	9f 5f       	subi	r25, 0xFF	; 255
    ff8c:	90 93 52 12 	sts	0x1252, r25	; 0x801252 <Ks_Count>
    ff90:	89 17       	cp	r24, r25
    ff92:	08 f0       	brcs	.+2      	; 0xff96 <__DATA_REGION_LENGTH__+0x196>
    ff94:	a4 cf       	rjmp	.-184    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
    ff96:	91 e0       	ldi	r25, 0x01	; 1
    ff98:	90 93 a0 11 	sts	0x11A0, r25	; 0x8011a0 <MotorZ_NeedClear>
    ff9c:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
    ffa0:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
    ffa4:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
    ffa8:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
    ffac:	f1 99       	sbic	0x1e, 1	; 30
    ffae:	21 c0       	rjmp	.+66     	; 0xfff2 <__DATA_REGION_LENGTH__+0x1f2>
    ffb0:	4f 5f       	subi	r20, 0xFF	; 255
    ffb2:	5f 4f       	sbci	r21, 0xFF	; 255
    ffb4:	6f 4f       	sbci	r22, 0xFF	; 255
    ffb6:	7f 4f       	sbci	r23, 0xFF	; 255
    ffb8:	40 93 5a 12 	sts	0x125A, r20	; 0x80125a <Motor_Z_Pos>
    ffbc:	50 93 5b 12 	sts	0x125B, r21	; 0x80125b <Motor_Z_Pos+0x1>
    ffc0:	60 93 5c 12 	sts	0x125C, r22	; 0x80125c <Motor_Z_Pos+0x2>
    ffc4:	70 93 5d 12 	sts	0x125D, r23	; 0x80125d <Motor_Z_Pos+0x3>
    ffc8:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
    ffcc:	90 91 e0 11 	lds	r25, 0x11E0	; 0x8011e0 <Repeat_Count>
    ffd0:	9f 5f       	subi	r25, 0xFF	; 255
    ffd2:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <Repeat_Count>
    ffd6:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
    ffda:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
    ffde:	92 17       	cp	r25, r18
    ffe0:	13 06       	cpc	r1, r19
    ffe2:	0c f4       	brge	.+2      	; 0xffe6 <__DATA_REGION_LENGTH__+0x1e6>
    ffe4:	7c cf       	rjmp	.-264    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
    ffe6:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
    ffea:	8f 5f       	subi	r24, 0xFF	; 255
    ffec:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
    fff0:	76 cf       	rjmp	.-276    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
    fff2:	41 50       	subi	r20, 0x01	; 1
    fff4:	51 09       	sbc	r21, r1
    fff6:	61 09       	sbc	r22, r1
    fff8:	71 09       	sbc	r23, r1
    fffa:	de cf       	rjmp	.-68     	; 0xffb8 <__DATA_REGION_LENGTH__+0x1b8>
    fffc:	f3 98       	cbi	0x1e, 3	; 30
    fffe:	6f cf       	rjmp	.-290    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
   10000:	91 e0       	ldi	r25, 0x01	; 1
   10002:	90 93 a0 11 	sts	0x11A0, r25	; 0x8011a0 <MotorZ_NeedClear>
   10006:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   1000a:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   1000e:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   10012:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   10016:	f1 99       	sbic	0x1e, 1	; 30
   10018:	23 c0       	rjmp	.+70     	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
   1001a:	4f 5f       	subi	r20, 0xFF	; 255
   1001c:	5f 4f       	sbci	r21, 0xFF	; 255
   1001e:	6f 4f       	sbci	r22, 0xFF	; 255
   10020:	7f 4f       	sbci	r23, 0xFF	; 255
   10022:	40 93 5a 12 	sts	0x125A, r20	; 0x80125a <Motor_Z_Pos>
   10026:	50 93 5b 12 	sts	0x125B, r21	; 0x80125b <Motor_Z_Pos+0x1>
   1002a:	60 93 5c 12 	sts	0x125C, r22	; 0x80125c <Motor_Z_Pos+0x2>
   1002e:	70 93 5d 12 	sts	0x125D, r23	; 0x80125d <Motor_Z_Pos+0x3>
   10032:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <Ks_Divisor>
   10036:	98 17       	cp	r25, r24
   10038:	c0 f4       	brcc	.+48     	; 0x1006a <__EEPROM_REGION_LENGTH__+0x6a>
   1003a:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   1003e:	90 91 e0 11 	lds	r25, 0x11E0	; 0x8011e0 <Repeat_Count>
   10042:	9f 5f       	subi	r25, 0xFF	; 255
   10044:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <Repeat_Count>
   10048:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
   1004c:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
   10050:	92 17       	cp	r25, r18
   10052:	13 06       	cpc	r1, r19
   10054:	0c f4       	brge	.+2      	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
   10056:	43 cf       	rjmp	.-378    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
   10058:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   1005c:	81 50       	subi	r24, 0x01	; 1
   1005e:	c6 cf       	rjmp	.-116    	; 0xffec <__DATA_REGION_LENGTH__+0x1ec>
   10060:	41 50       	subi	r20, 0x01	; 1
   10062:	51 09       	sbc	r21, r1
   10064:	61 09       	sbc	r22, r1
   10066:	71 09       	sbc	r23, r1
   10068:	dc cf       	rjmp	.-72     	; 0x10022 <__EEPROM_REGION_LENGTH__+0x22>
   1006a:	20 91 53 12 	lds	r18, 0x1253	; 0x801253 <Km_Divisor>
   1006e:	30 91 54 12 	lds	r19, 0x1254	; 0x801254 <Km_Divisor+0x1>
   10072:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <Km_Count>
   10076:	90 91 51 12 	lds	r25, 0x1251	; 0x801251 <Km_Count+0x1>
   1007a:	82 0f       	add	r24, r18
   1007c:	93 1f       	adc	r25, r19
   1007e:	90 93 51 12 	sts	0x1251, r25	; 0x801251 <Km_Count+0x1>
   10082:	80 93 50 12 	sts	0x1250, r24	; 0x801250 <Km_Count>
   10086:	28 17       	cp	r18, r24
   10088:	39 07       	cpc	r19, r25
   1008a:	4c f4       	brge	.+18     	; 0x1009e <__EEPROM_REGION_LENGTH__+0x9e>
   1008c:	80 51       	subi	r24, 0x10	; 16
   1008e:	97 42       	sbci	r25, 0x27	; 39
   10090:	90 93 51 12 	sts	0x1251, r25	; 0x801251 <Km_Count+0x1>
   10094:	80 93 50 12 	sts	0x1250, r24	; 0x801250 <Km_Count>
   10098:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   1009c:	20 cf       	rjmp	.-448    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
   1009e:	81 e0       	ldi	r24, 0x01	; 1
   100a0:	80 93 52 12 	sts	0x1252, r24	; 0x801252 <Ks_Count>
   100a4:	1c cf       	rjmp	.-456    	; 0xfede <__DATA_REGION_LENGTH__+0xde>
   100a6:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <tmp_Accel>
   100aa:	89 17       	cp	r24, r25
   100ac:	d8 f5       	brcc	.+118    	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
   100ae:	90 91 52 12 	lds	r25, 0x1252	; 0x801252 <Ks_Count>
   100b2:	9f 5f       	subi	r25, 0xFF	; 255
   100b4:	90 93 52 12 	sts	0x1252, r25	; 0x801252 <Ks_Count>
   100b8:	89 17       	cp	r24, r25
   100ba:	08 f0       	brcs	.+2      	; 0x100be <__EEPROM_REGION_LENGTH__+0xbe>
   100bc:	4e cf       	rjmp	.-356    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   100be:	91 e0       	ldi	r25, 0x01	; 1
   100c0:	90 93 a9 11 	sts	0x11A9, r25	; 0x8011a9 <MotorX_NeedClear>
   100c4:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   100c8:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   100cc:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   100d0:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   100d4:	f4 99       	sbic	0x1e, 4	; 30
   100d6:	21 c0       	rjmp	.+66     	; 0x1011a <__EEPROM_REGION_LENGTH__+0x11a>
   100d8:	4f 5f       	subi	r20, 0xFF	; 255
   100da:	5f 4f       	sbci	r21, 0xFF	; 255
   100dc:	6f 4f       	sbci	r22, 0xFF	; 255
   100de:	7f 4f       	sbci	r23, 0xFF	; 255
   100e0:	40 93 46 12 	sts	0x1246, r20	; 0x801246 <Motor_X_Pos>
   100e4:	50 93 47 12 	sts	0x1247, r21	; 0x801247 <Motor_X_Pos+0x1>
   100e8:	60 93 48 12 	sts	0x1248, r22	; 0x801248 <Motor_X_Pos+0x2>
   100ec:	70 93 49 12 	sts	0x1249, r23	; 0x801249 <Motor_X_Pos+0x3>
   100f0:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   100f4:	90 91 e0 11 	lds	r25, 0x11E0	; 0x8011e0 <Repeat_Count>
   100f8:	9f 5f       	subi	r25, 0xFF	; 255
   100fa:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <Repeat_Count>
   100fe:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
   10102:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
   10106:	92 17       	cp	r25, r18
   10108:	13 06       	cpc	r1, r19
   1010a:	0c f4       	brge	.+2      	; 0x1010e <__EEPROM_REGION_LENGTH__+0x10e>
   1010c:	26 cf       	rjmp	.-436    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   1010e:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   10112:	8f 5f       	subi	r24, 0xFF	; 255
   10114:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <tmp_Ks_Divisor>
   10118:	20 cf       	rjmp	.-448    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   1011a:	41 50       	subi	r20, 0x01	; 1
   1011c:	51 09       	sbc	r21, r1
   1011e:	61 09       	sbc	r22, r1
   10120:	71 09       	sbc	r23, r1
   10122:	de cf       	rjmp	.-68     	; 0x100e0 <__EEPROM_REGION_LENGTH__+0xe0>
   10124:	f6 98       	cbi	0x1e, 6	; 30
   10126:	19 cf       	rjmp	.-462    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   10128:	91 e0       	ldi	r25, 0x01	; 1
   1012a:	90 93 a9 11 	sts	0x11A9, r25	; 0x8011a9 <MotorX_NeedClear>
   1012e:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   10132:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   10136:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   1013a:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   1013e:	f4 99       	sbic	0x1e, 4	; 30
   10140:	23 c0       	rjmp	.+70     	; 0x10188 <__EEPROM_REGION_LENGTH__+0x188>
   10142:	4f 5f       	subi	r20, 0xFF	; 255
   10144:	5f 4f       	sbci	r21, 0xFF	; 255
   10146:	6f 4f       	sbci	r22, 0xFF	; 255
   10148:	7f 4f       	sbci	r23, 0xFF	; 255
   1014a:	40 93 46 12 	sts	0x1246, r20	; 0x801246 <Motor_X_Pos>
   1014e:	50 93 47 12 	sts	0x1247, r21	; 0x801247 <Motor_X_Pos+0x1>
   10152:	60 93 48 12 	sts	0x1248, r22	; 0x801248 <Motor_X_Pos+0x2>
   10156:	70 93 49 12 	sts	0x1249, r23	; 0x801249 <Motor_X_Pos+0x3>
   1015a:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <Ks_Divisor>
   1015e:	98 17       	cp	r25, r24
   10160:	c0 f4       	brcc	.+48     	; 0x10192 <__EEPROM_REGION_LENGTH__+0x192>
   10162:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   10166:	90 91 e0 11 	lds	r25, 0x11E0	; 0x8011e0 <Repeat_Count>
   1016a:	9f 5f       	subi	r25, 0xFF	; 255
   1016c:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <Repeat_Count>
   10170:	20 91 fa 09 	lds	r18, 0x09FA	; 0x8009fa <REPEAt>
   10174:	30 91 fb 09 	lds	r19, 0x09FB	; 0x8009fb <REPEAt+0x1>
   10178:	92 17       	cp	r25, r18
   1017a:	13 06       	cpc	r1, r19
   1017c:	0c f4       	brge	.+2      	; 0x10180 <__EEPROM_REGION_LENGTH__+0x180>
   1017e:	ed ce       	rjmp	.-550    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   10180:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   10184:	81 50       	subi	r24, 0x01	; 1
   10186:	c6 cf       	rjmp	.-116    	; 0x10114 <__EEPROM_REGION_LENGTH__+0x114>
   10188:	41 50       	subi	r20, 0x01	; 1
   1018a:	51 09       	sbc	r21, r1
   1018c:	61 09       	sbc	r22, r1
   1018e:	71 09       	sbc	r23, r1
   10190:	dc cf       	rjmp	.-72     	; 0x1014a <__EEPROM_REGION_LENGTH__+0x14a>
   10192:	20 91 53 12 	lds	r18, 0x1253	; 0x801253 <Km_Divisor>
   10196:	30 91 54 12 	lds	r19, 0x1254	; 0x801254 <Km_Divisor+0x1>
   1019a:	80 91 50 12 	lds	r24, 0x1250	; 0x801250 <Km_Count>
   1019e:	90 91 51 12 	lds	r25, 0x1251	; 0x801251 <Km_Count+0x1>
   101a2:	82 0f       	add	r24, r18
   101a4:	93 1f       	adc	r25, r19
   101a6:	90 93 51 12 	sts	0x1251, r25	; 0x801251 <Km_Count+0x1>
   101aa:	80 93 50 12 	sts	0x1250, r24	; 0x801250 <Km_Count>
   101ae:	28 17       	cp	r18, r24
   101b0:	39 07       	cpc	r19, r25
   101b2:	4c f4       	brge	.+18     	; 0x101c6 <__EEPROM_REGION_LENGTH__+0x1c6>
   101b4:	80 51       	subi	r24, 0x10	; 16
   101b6:	97 42       	sbci	r25, 0x27	; 39
   101b8:	90 93 51 12 	sts	0x1251, r25	; 0x801251 <Km_Count+0x1>
   101bc:	80 93 50 12 	sts	0x1250, r24	; 0x801250 <Km_Count>
   101c0:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   101c4:	ca ce       	rjmp	.-620    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   101c6:	81 e0       	ldi	r24, 0x01	; 1
   101c8:	80 93 52 12 	sts	0x1252, r24	; 0x801252 <Ks_Count>
   101cc:	c6 ce       	rjmp	.-628    	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
   101ce:	49 99       	sbic	0x09, 1	; 9
   101d0:	cd ce       	rjmp	.-614    	; 0xff6c <__DATA_REGION_LENGTH__+0x16c>
   101d2:	81 e0       	ldi	r24, 0x01	; 1
   101d4:	90 e0       	ldi	r25, 0x00	; 0
   101d6:	90 93 ab 11 	sts	0x11AB, r25	; 0x8011ab <Enc_Pos_Divider+0x1>
   101da:	80 93 aa 11 	sts	0x11AA, r24	; 0x8011aa <Enc_Pos_Divider>
   101de:	9f 91       	pop	r25
   101e0:	8f 91       	pop	r24
   101e2:	7f 91       	pop	r23
   101e4:	6f 91       	pop	r22
   101e6:	5f 91       	pop	r21
   101e8:	4f 91       	pop	r20
   101ea:	3f 91       	pop	r19
   101ec:	2f 91       	pop	r18
   101ee:	1f 91       	pop	r17
   101f0:	0f 91       	pop	r16
   101f2:	0f 90       	pop	r0
   101f4:	0f be       	out	0x3f, r0	; 63
   101f6:	0f 90       	pop	r0
   101f8:	1f 90       	pop	r1
   101fa:	18 95       	reti

000101fc <__vector_12>:
   101fc:	1f 92       	push	r1
   101fe:	0f 92       	push	r0
   10200:	0f b6       	in	r0, 0x3f	; 63
   10202:	0f 92       	push	r0
   10204:	11 24       	eor	r1, r1
   10206:	0b b6       	in	r0, 0x3b	; 59
   10208:	0f 92       	push	r0
   1020a:	2f 93       	push	r18
   1020c:	3f 93       	push	r19
   1020e:	4f 93       	push	r20
   10210:	5f 93       	push	r21
   10212:	6f 93       	push	r22
   10214:	7f 93       	push	r23
   10216:	8f 93       	push	r24
   10218:	9f 93       	push	r25
   1021a:	af 93       	push	r26
   1021c:	bf 93       	push	r27
   1021e:	ef 93       	push	r30
   10220:	ff 93       	push	r31
   10222:	81 e0       	ldi	r24, 0x01	; 1
   10224:	80 93 0f 12 	sts	0x120F, r24	; 0x80120f <_WDT_TIMER_FLAG>
   10228:	80 91 9f 11 	lds	r24, 0x119F	; 0x80119f <TachoCycle>
   1022c:	8f 5f       	subi	r24, 0xFF	; 255
   1022e:	80 93 9f 11 	sts	0x119F, r24	; 0x80119f <TachoCycle>
   10232:	80 33       	cpi	r24, 0x30	; 48
   10234:	30 f1       	brcs	.+76     	; 0x10282 <__vector_12+0x86>
   10236:	60 91 a1 11 	lds	r22, 0x11A1	; 0x8011a1 <TachoCount>
   1023a:	70 91 a2 11 	lds	r23, 0x11A2	; 0x8011a2 <TachoCount+0x1>
   1023e:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <TachoCount+0x2>
   10242:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <TachoCount+0x3>
   10246:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <ENC_LINE_PER_REV>
   1024a:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <ENC_LINE_PER_REV+0x1>
   1024e:	03 2e       	mov	r0, r19
   10250:	00 0c       	add	r0, r0
   10252:	44 0b       	sbc	r20, r20
   10254:	55 0b       	sbc	r21, r21
   10256:	0e 94 8d 98 	call	0x1311a	; 0x1311a <__udivmodsi4>
   1025a:	6a e0       	ldi	r22, 0x0A	; 10
   1025c:	62 9f       	mul	r22, r18
   1025e:	c0 01       	movw	r24, r0
   10260:	63 9f       	mul	r22, r19
   10262:	90 0d       	add	r25, r0
   10264:	11 24       	eor	r1, r1
   10266:	90 93 ad 11 	sts	0x11AD, r25	; 0x8011ad <CurrentRPM+0x1>
   1026a:	80 93 ac 11 	sts	0x11AC, r24	; 0x8011ac <CurrentRPM>
   1026e:	10 92 a1 11 	sts	0x11A1, r1	; 0x8011a1 <TachoCount>
   10272:	10 92 a2 11 	sts	0x11A2, r1	; 0x8011a2 <TachoCount+0x1>
   10276:	10 92 a3 11 	sts	0x11A3, r1	; 0x8011a3 <TachoCount+0x2>
   1027a:	10 92 a4 11 	sts	0x11A4, r1	; 0x8011a4 <TachoCount+0x3>
   1027e:	10 92 9f 11 	sts	0x119F, r1	; 0x80119f <TachoCycle>
   10282:	ff 91       	pop	r31
   10284:	ef 91       	pop	r30
   10286:	bf 91       	pop	r27
   10288:	af 91       	pop	r26
   1028a:	9f 91       	pop	r25
   1028c:	8f 91       	pop	r24
   1028e:	7f 91       	pop	r23
   10290:	6f 91       	pop	r22
   10292:	5f 91       	pop	r21
   10294:	4f 91       	pop	r20
   10296:	3f 91       	pop	r19
   10298:	2f 91       	pop	r18
   1029a:	0f 90       	pop	r0
   1029c:	0b be       	out	0x3b, r0	; 59
   1029e:	0f 90       	pop	r0
   102a0:	0f be       	out	0x3f, r0	; 63
   102a2:	0f 90       	pop	r0
   102a4:	1f 90       	pop	r1
   102a6:	18 95       	reti

000102a8 <memcpy_PF>:
   102a8:	6b bf       	out	0x3b, r22	; 59
   102aa:	fa 01       	movw	r30, r20
   102ac:	dc 01       	movw	r26, r24
   102ae:	02 c0       	rjmp	.+4      	; 0x102b4 <memcpy_PF+0xc>
   102b0:	07 90       	elpm	r0, Z+
   102b2:	0d 92       	st	X+, r0
   102b4:	21 50       	subi	r18, 0x01	; 1
   102b6:	30 40       	sbci	r19, 0x00	; 0
   102b8:	d8 f7       	brcc	.-10     	; 0x102b0 <memcpy_PF+0x8>
   102ba:	08 95       	ret

000102bc <main>:
   102bc:	78 94       	sei
   102be:	84 b5       	in	r24, 0x24	; 36
   102c0:	82 60       	ori	r24, 0x02	; 2
   102c2:	84 bd       	out	0x24, r24	; 36
   102c4:	84 b5       	in	r24, 0x24	; 36
   102c6:	81 60       	ori	r24, 0x01	; 1
   102c8:	84 bd       	out	0x24, r24	; 36
   102ca:	85 b5       	in	r24, 0x25	; 37
   102cc:	82 60       	ori	r24, 0x02	; 2
   102ce:	85 bd       	out	0x25, r24	; 37
   102d0:	85 b5       	in	r24, 0x25	; 37
   102d2:	81 60       	ori	r24, 0x01	; 1
   102d4:	85 bd       	out	0x25, r24	; 37
   102d6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   102da:	81 60       	ori	r24, 0x01	; 1
   102dc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   102e0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   102e4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   102e8:	82 60       	ori	r24, 0x02	; 2
   102ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   102ee:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   102f2:	81 60       	ori	r24, 0x01	; 1
   102f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   102f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   102fc:	81 60       	ori	r24, 0x01	; 1
   102fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10302:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   10306:	84 60       	ori	r24, 0x04	; 4
   10308:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   1030c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10310:	81 60       	ori	r24, 0x01	; 1
   10312:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10316:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1031a:	82 60       	ori	r24, 0x02	; 2
   1031c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   10320:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   10324:	81 60       	ori	r24, 0x01	; 1
   10326:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1032a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1032e:	81 60       	ori	r24, 0x01	; 1
   10330:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10334:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   10338:	82 60       	ori	r24, 0x02	; 2
   1033a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   1033e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   10342:	81 60       	ori	r24, 0x01	; 1
   10344:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   10348:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1034c:	81 60       	ori	r24, 0x01	; 1
   1034e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10352:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   10356:	82 60       	ori	r24, 0x02	; 2
   10358:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   1035c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   10360:	81 60       	ori	r24, 0x01	; 1
   10362:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   10366:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1036a:	81 60       	ori	r24, 0x01	; 1
   1036c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10370:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10374:	84 60       	ori	r24, 0x04	; 4
   10376:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   1037a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   1037e:	82 60       	ori	r24, 0x02	; 2
   10380:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10384:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10388:	81 60       	ori	r24, 0x01	; 1
   1038a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   1038e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10392:	80 68       	ori	r24, 0x80	; 128
   10394:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10398:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
   1039c:	62 e0       	ldi	r22, 0x02	; 2
   1039e:	8e e5       	ldi	r24, 0x5E	; 94
   103a0:	92 e1       	ldi	r25, 0x12	; 18
   103a2:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <_ZN13LiquidCrystal5beginEhhh.constprop.35>
   103a6:	0e 94 7a 71 	call	0xe2f4	; 0xe2f4 <_Z11Load_EEPROMv>
   103aa:	60 e0       	ldi	r22, 0x00	; 0
   103ac:	80 e0       	ldi	r24, 0x00	; 0
   103ae:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
   103b2:	89 e5       	ldi	r24, 0x59	; 89
   103b4:	9e e0       	ldi	r25, 0x0E	; 14
   103b6:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
   103ba:	61 e0       	ldi	r22, 0x01	; 1
   103bc:	80 e0       	ldi	r24, 0x00	; 0
   103be:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <_ZN22LiquidCrystal_1602_RUS9setCursorEhh.constprop.17>
   103c2:	85 e4       	ldi	r24, 0x45	; 69
   103c4:	9e e0       	ldi	r25, 0x0E	; 14
   103c6:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <_ZN22LiquidCrystal_1602_RUS5printEPKc.constprop.13>
   103ca:	2f ef       	ldi	r18, 0xFF	; 255
   103cc:	47 ea       	ldi	r20, 0xA7	; 167
   103ce:	81 e6       	ldi	r24, 0x61	; 97
   103d0:	21 50       	subi	r18, 0x01	; 1
   103d2:	40 40       	sbci	r20, 0x00	; 0
   103d4:	80 40       	sbci	r24, 0x00	; 0
   103d6:	e1 f7       	brne	.-8      	; 0x103d0 <main+0x114>
   103d8:	00 c0       	rjmp	.+0      	; 0x103da <main+0x11e>
   103da:	00 00       	nop
   103dc:	8f ef       	ldi	r24, 0xFF	; 255
   103de:	83 bb       	out	0x13, r24	; 19
   103e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   103e4:	1a b8       	out	0x0a, r1	; 10
   103e6:	8b b9       	out	0x0b, r24	; 11
   103e8:	1d b8       	out	0x0d, r1	; 13
   103ea:	8e b9       	out	0x0e, r24	; 14
   103ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
   103f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
   103f4:	9b ef       	ldi	r25, 0xFB	; 251
   103f6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
   103fa:	94 e0       	ldi	r25, 0x04	; 4
   103fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10400:	9a ea       	ldi	r25, 0xAA	; 170
   10402:	91 b9       	out	0x01, r25	; 1
   10404:	95 e5       	ldi	r25, 0x55	; 85
   10406:	92 b9       	out	0x02, r25	; 2
   10408:	17 9a       	sbi	0x02, 7	; 2
   1040a:	15 9a       	sbi	0x02, 5	; 2
   1040c:	13 9a       	sbi	0x02, 3	; 2
   1040e:	11 9a       	sbi	0x02, 1	; 2
   10410:	10 ba       	out	0x10, r1	; 16
   10412:	81 bb       	out	0x11, r24	; 17
   10414:	92 e6       	ldi	r25, 0x62	; 98
   10416:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
   1041a:	9d e9       	ldi	r25, 0x9D	; 157
   1041c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   10420:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   10424:	92 60       	ori	r25, 0x02	; 2
   10426:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
   1042a:	7c 9b       	sbis	0x0f, 4	; 15
   1042c:	0e 94 47 70 	call	0xe08e	; 0xe08e <_Z15Loop_Setup_Menuv.part.16>
   10430:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
   10434:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
   10438:	17 b8       	out	0x07, r1	; 7
   1043a:	88 b9       	out	0x08, r24	; 8
   1043c:	87 e4       	ldi	r24, 0x47	; 71
   1043e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
   10442:	84 ec       	ldi	r24, 0xC4	; 196
   10444:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   10448:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   1044c:	81 60       	ori	r24, 0x01	; 1
   1044e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   10452:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   10456:	84 60       	ori	r24, 0x04	; 4
   10458:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   1045c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   10460:	80 61       	ori	r24, 0x10	; 16
   10462:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   10466:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1046a:	8b e0       	ldi	r24, 0x0B	; 11
   1046c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   10470:	20 91 cf 11 	lds	r18, 0x11CF	; 0x8011cf <max_OCR3A>
   10474:	30 91 d0 11 	lds	r19, 0x11D0	; 0x8011d0 <max_OCR3A+0x1>
   10478:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
   1047c:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
   10480:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10484:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   10488:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   1048c:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   10490:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   10494:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   10498:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1049c:	8f e0       	ldi	r24, 0x0F	; 15
   1049e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   104a2:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
   104a6:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
   104aa:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   104ae:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
   104b2:	f0 98       	cbi	0x1e, 0	; 30
   104b4:	f1 98       	cbi	0x1e, 1	; 30
   104b6:	f2 98       	cbi	0x1e, 2	; 30
   104b8:	f3 98       	cbi	0x1e, 3	; 30
   104ba:	f4 98       	cbi	0x1e, 4	; 30
   104bc:	f5 98       	cbi	0x1e, 5	; 30
   104be:	f6 98       	cbi	0x1e, 6	; 30
   104c0:	88 e1       	ldi	r24, 0x18	; 24
   104c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   104c6:	82 e4       	ldi	r24, 0x42	; 66
   104c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   104cc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_Z19get_Enc_Pos_Dividerv>
   104d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   104d4:	81 60       	ori	r24, 0x01	; 1
   104d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   104da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   104de:	82 60       	ori	r24, 0x02	; 2
   104e0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   104e4:	c1 2c       	mov	r12, r1
   104e6:	74 e0       	ldi	r23, 0x04	; 4
   104e8:	d7 2e       	mov	r13, r23
   104ea:	e1 2c       	mov	r14, r1
   104ec:	f1 2c       	mov	r15, r1
   104ee:	c1 e0       	ldi	r28, 0x01	; 1
   104f0:	41 2c       	mov	r4, r1
   104f2:	51 2c       	mov	r5, r1
   104f4:	61 2c       	mov	r6, r1
   104f6:	e0 ec       	ldi	r30, 0xC0	; 192
   104f8:	7e 2e       	mov	r7, r30
   104fa:	54 e0       	ldi	r21, 0x04	; 4
   104fc:	35 2e       	mov	r3, r21
   104fe:	d2 e0       	ldi	r29, 0x02	; 2
   10500:	65 e0       	ldi	r22, 0x05	; 5
   10502:	26 2e       	mov	r2, r22
   10504:	03 e0       	ldi	r16, 0x03	; 3
   10506:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <Spindle_Count>
   1050a:	90 91 d6 11 	lds	r25, 0x11D6	; 0x8011d6 <Spindle_Count+0x1>
   1050e:	01 96       	adiw	r24, 0x01	; 1
   10510:	8f 3e       	cpi	r24, 0xEF	; 239
   10512:	a2 e0       	ldi	r26, 0x02	; 2
   10514:	9a 07       	cpc	r25, r26
   10516:	0c f0       	brlt	.+2      	; 0x1051a <main+0x25e>
   10518:	66 c0       	rjmp	.+204    	; 0x105e6 <main+0x32a>
   1051a:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <Spindle_Count+0x1>
   1051e:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <Spindle_Count>
   10522:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   10526:	86 30       	cpi	r24, 0x06	; 6
   10528:	08 f0       	brcs	.+2      	; 0x1052c <main+0x270>
   1052a:	6a c0       	rjmp	.+212    	; 0x10600 <main+0x344>
   1052c:	83 30       	cpi	r24, 0x03	; 3
   1052e:	08 f0       	brcs	.+2      	; 0x10532 <main+0x276>
   10530:	d0 c0       	rjmp	.+416    	; 0x106d2 <main+0x416>
   10532:	82 30       	cpi	r24, 0x02	; 2
   10534:	09 f4       	brne	.+2      	; 0x10538 <main+0x27c>
   10536:	67 c0       	rjmp	.+206    	; 0x10606 <main+0x34a>
   10538:	80 91 0f 12 	lds	r24, 0x120F	; 0x80120f <_WDT_TIMER_FLAG>
   1053c:	88 23       	and	r24, r24
   1053e:	11 f4       	brne	.+4      	; 0x10544 <main+0x288>
   10540:	0c 94 c1 90 	jmp	0x12182	; 0x12182 <main+0x1ec6>
   10544:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10548:	8f 70       	andi	r24, 0x0F	; 15
   1054a:	8d 30       	cpi	r24, 0x0D	; 13
   1054c:	09 f4       	brne	.+2      	; 0x10550 <main+0x294>
   1054e:	93 c4       	rjmp	.+2342   	; 0x10e76 <main+0xbba>
   10550:	08 f0       	brcs	.+2      	; 0x10554 <main+0x298>
   10552:	45 c1       	rjmp	.+650    	; 0x107de <main+0x522>
   10554:	87 30       	cpi	r24, 0x07	; 7
   10556:	11 f4       	brne	.+4      	; 0x1055c <main+0x2a0>
   10558:	0c 94 03 8b 	jmp	0x11606	; 0x11606 <main+0x134a>
   1055c:	8b 30       	cpi	r24, 0x0B	; 11
   1055e:	09 f4       	brne	.+2      	; 0x10562 <main+0x2a6>
   10560:	a0 c6       	rjmp	.+3392   	; 0x112a2 <main+0xfe6>
   10562:	f2 9b       	sbis	0x1e, 2	; 30
   10564:	02 c0       	rjmp	.+4      	; 0x1056a <main+0x2ae>
   10566:	0c 94 ab 8d 	jmp	0x11b56	; 0x11b56 <main+0x189a>
   1056a:	f5 9b       	sbis	0x1e, 5	; 30
   1056c:	02 c0       	rjmp	.+4      	; 0x10572 <main+0x2b6>
   1056e:	0c 94 ab 8d 	jmp	0x11b56	; 0x11b56 <main+0x189a>
   10572:	16 b1       	in	r17, 0x06	; 6
   10574:	80 91 0e 12 	lds	r24, 0x120E	; 0x80120e <Mode_Old>
   10578:	18 17       	cp	r17, r24
   1057a:	11 f4       	brne	.+4      	; 0x10580 <main+0x2c4>
   1057c:	0c 94 ec 8c 	jmp	0x119d8	; 0x119d8 <main+0x171c>
   10580:	1f 3e       	cpi	r17, 0xEF	; 239
   10582:	11 f4       	brne	.+4      	; 0x10588 <main+0x2cc>
   10584:	0c 94 68 8d 	jmp	0x11ad0	; 0x11ad0 <main+0x1814>
   10588:	10 f0       	brcs	.+4      	; 0x1058e <main+0x2d2>
   1058a:	0c 94 e3 8c 	jmp	0x119c6	; 0x119c6 <main+0x170a>
   1058e:	1f 3b       	cpi	r17, 0xBF	; 191
   10590:	11 f4       	brne	.+4      	; 0x10596 <main+0x2da>
   10592:	0c 94 37 8d 	jmp	0x11a6e	; 0x11a6e <main+0x17b2>
   10596:	1f 3d       	cpi	r17, 0xDF	; 223
   10598:	11 f4       	brne	.+4      	; 0x1059e <main+0x2e2>
   1059a:	0c 94 5b 8d 	jmp	0x11ab6	; 0x11ab6 <main+0x17fa>
   1059e:	1f 37       	cpi	r17, 0x7F	; 127
   105a0:	11 f0       	breq	.+4      	; 0x105a6 <main+0x2ea>
   105a2:	0c 94 ea 8c 	jmp	0x119d4	; 0x119d4 <main+0x1718>
   105a6:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   105aa:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   105ae:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   105b2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   105b6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   105ba:	8d 7f       	andi	r24, 0xFD	; 253
   105bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   105c0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   105c4:	8b 7f       	andi	r24, 0xFB	; 251
   105c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   105ca:	e9 9a       	sbi	0x1d, 1	; 29
   105cc:	e8 9a       	sbi	0x1d, 0	; 29
   105ce:	c0 93 2b 02 	sts	0x022B, r28	; 0x80022b <Mode>
   105d2:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z16Reset_Step_rapidv>
   105d6:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z18Reset_Ks_Km_Repeatv>
   105da:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
   105de:	0e 94 a2 09 	call	0x1344	; 0x1344 <_Z10Motors_OFFv>
   105e2:	0c 94 ea 8c 	jmp	0x119d4	; 0x119d4 <main+0x1718>
   105e6:	10 92 d6 11 	sts	0x11D6, r1	; 0x8011d6 <Spindle_Count+0x1>
   105ea:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <Spindle_Count>
   105ee:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <Tacho_Count>
   105f2:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <Tacho_Count+0x1>
   105f6:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <Tacho_Count_Old+0x1>
   105fa:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <Tacho_Count_Old>
   105fe:	91 cf       	rjmp	.-222    	; 0x10522 <main+0x266>
   10600:	87 30       	cpi	r24, 0x07	; 7
   10602:	09 f0       	breq	.+2      	; 0x10606 <main+0x34a>
   10604:	99 cf       	rjmp	.-206    	; 0x10538 <main+0x27c>
   10606:	80 91 da 11 	lds	r24, 0x11DA	; 0x8011da <ADC_NeedUpdateFeedMode>
   1060a:	88 23       	and	r24, r24
   1060c:	09 f4       	brne	.+2      	; 0x10610 <main+0x354>
   1060e:	49 c0       	rjmp	.+146    	; 0x106a2 <main+0x3e6>
   10610:	10 92 da 11 	sts	0x11DA, r1	; 0x8011da <ADC_NeedUpdateFeedMode>
   10614:	a0 90 17 02 	lds	r10, 0x0217	; 0x800217 <MAX_FEED>
   10618:	b0 90 18 02 	lds	r11, 0x0218	; 0x800218 <MAX_FEED+0x1>
   1061c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <MIN_FEED>
   10620:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <MIN_FEED+0x1>
   10624:	95 01       	movw	r18, r10
   10626:	28 1b       	sub	r18, r24
   10628:	39 0b       	sbc	r19, r25
   1062a:	2f 5f       	subi	r18, 0xFF	; 255
   1062c:	3f 4f       	sbci	r19, 0xFF	; 255
   1062e:	a0 91 d7 11 	lds	r26, 0x11D7	; 0x8011d7 <ADC_Feed>
   10632:	b0 91 d8 11 	lds	r27, 0x11D8	; 0x8011d8 <ADC_Feed+0x1>
   10636:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
   1063a:	a7 01       	movw	r20, r14
   1063c:	96 01       	movw	r18, r12
   1063e:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
   10642:	50 95       	com	r21
   10644:	40 95       	com	r20
   10646:	30 95       	com	r19
   10648:	21 95       	neg	r18
   1064a:	3f 4f       	sbci	r19, 0xFF	; 255
   1064c:	4f 4f       	sbci	r20, 0xFF	; 255
   1064e:	5f 4f       	sbci	r21, 0xFF	; 255
   10650:	2a 0d       	add	r18, r10
   10652:	3b 1d       	adc	r19, r11
   10654:	80 91 2c 12 	lds	r24, 0x122C	; 0x80122c <Feed_mm>
   10658:	90 91 2d 12 	lds	r25, 0x122D	; 0x80122d <Feed_mm+0x1>
   1065c:	28 17       	cp	r18, r24
   1065e:	39 07       	cpc	r19, r25
   10660:	09 f4       	brne	.+2      	; 0x10664 <main+0x3a8>
   10662:	6a cf       	rjmp	.-300    	; 0x10538 <main+0x27c>
   10664:	30 93 2d 12 	sts	0x122D, r19	; 0x80122d <Feed_mm+0x1>
   10668:	20 93 2c 12 	sts	0x122C, r18	; 0x80122c <Feed_mm>
   1066c:	c0 93 d9 11 	sts	0x11D9, r28	; 0x8011d9 <ADC_NeedUpdateaFeedMode>
   10670:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
   10674:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
   10678:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   1067c:	84 ff       	sbrs	r24, 4
   1067e:	5c cf       	rjmp	.-328    	; 0x10538 <main+0x27c>
   10680:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   10684:	82 30       	cpi	r24, 0x02	; 2
   10686:	09 f0       	breq	.+2      	; 0x1068a <main+0x3ce>
   10688:	57 cf       	rjmp	.-338    	; 0x10538 <main+0x27c>
   1068a:	f2 9b       	sbis	0x1e, 2	; 30
   1068c:	0f c0       	rjmp	.+30     	; 0x106ac <main+0x3f0>
   1068e:	f3 9b       	sbis	0x1e, 3	; 30
   10690:	0d c0       	rjmp	.+26     	; 0x106ac <main+0x3f0>
   10692:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
   10696:	f1 99       	sbic	0x1e, 1	; 30
   10698:	15 c0       	rjmp	.+42     	; 0x106c4 <main+0x408>
   1069a:	81 e0       	ldi	r24, 0x01	; 1
   1069c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
   106a0:	4b cf       	rjmp	.-362    	; 0x10538 <main+0x27c>
   106a2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_Z21Read_ADC_ResistorFeedv>
   106a6:	81 11       	cpse	r24, r1
   106a8:	b5 cf       	rjmp	.-150    	; 0x10614 <main+0x358>
   106aa:	46 cf       	rjmp	.-372    	; 0x10538 <main+0x27c>
   106ac:	f5 9b       	sbis	0x1e, 5	; 30
   106ae:	44 cf       	rjmp	.-376    	; 0x10538 <main+0x27c>
   106b0:	f6 9b       	sbis	0x1e, 6	; 30
   106b2:	42 cf       	rjmp	.-380    	; 0x10538 <main+0x27c>
   106b4:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
   106b8:	81 e0       	ldi	r24, 0x01	; 1
   106ba:	f4 99       	sbic	0x1e, 4	; 30
   106bc:	07 c0       	rjmp	.+14     	; 0x106cc <main+0x410>
   106be:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
   106c2:	3a cf       	rjmp	.-396    	; 0x10538 <main+0x27c>
   106c4:	81 e0       	ldi	r24, 0x01	; 1
   106c6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
   106ca:	36 cf       	rjmp	.-404    	; 0x10538 <main+0x27c>
   106cc:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
   106d0:	33 cf       	rjmp	.-410    	; 0x10538 <main+0x27c>
   106d2:	80 91 d9 11 	lds	r24, 0x11D9	; 0x8011d9 <ADC_NeedUpdateaFeedMode>
   106d6:	88 23       	and	r24, r24
   106d8:	09 f4       	brne	.+2      	; 0x106dc <main+0x420>
   106da:	5b c0       	rjmp	.+182    	; 0x10792 <main+0x4d6>
   106dc:	10 92 d9 11 	sts	0x11D9, r1	; 0x8011d9 <ADC_NeedUpdateaFeedMode>
   106e0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MAX_aFEED>
   106e4:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <MAX_aFEED+0x1>
   106e8:	6a e0       	ldi	r22, 0x0A	; 10
   106ea:	70 e0       	ldi	r23, 0x00	; 0
   106ec:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
   106f0:	5b 01       	movw	r10, r22
   106f2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <MIN_aFEED>
   106f6:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <MIN_aFEED+0x1>
   106fa:	66 ef       	ldi	r22, 0xF6	; 246
   106fc:	7f ef       	ldi	r23, 0xFF	; 255
   106fe:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <__divmodhi4>
   10702:	9b 01       	movw	r18, r22
   10704:	2a 0d       	add	r18, r10
   10706:	3b 1d       	adc	r19, r11
   10708:	2f 5f       	subi	r18, 0xFF	; 255
   1070a:	3f 4f       	sbci	r19, 0xFF	; 255
   1070c:	a0 91 d7 11 	lds	r26, 0x11D7	; 0x8011d7 <ADC_Feed>
   10710:	b0 91 d8 11 	lds	r27, 0x11D8	; 0x8011d8 <ADC_Feed+0x1>
   10714:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <__mulhisi3>
   10718:	a7 01       	movw	r20, r14
   1071a:	96 01       	movw	r18, r12
   1071c:	0e 94 af 98 	call	0x1315e	; 0x1315e <__divmodsi4>
   10720:	50 95       	com	r21
   10722:	40 95       	com	r20
   10724:	30 95       	com	r19
   10726:	21 95       	neg	r18
   10728:	3f 4f       	sbci	r19, 0xFF	; 255
   1072a:	4f 4f       	sbci	r20, 0xFF	; 255
   1072c:	5f 4f       	sbci	r21, 0xFF	; 255
   1072e:	2a 0d       	add	r18, r10
   10730:	3b 1d       	adc	r19, r11
   10732:	ba e0       	ldi	r27, 0x0A	; 10
   10734:	b2 9f       	mul	r27, r18
   10736:	c0 01       	movw	r24, r0
   10738:	b3 9f       	mul	r27, r19
   1073a:	90 0d       	add	r25, r0
   1073c:	11 24       	eor	r1, r1
   1073e:	20 91 39 12 	lds	r18, 0x1239	; 0x801239 <aFeed_mm>
   10742:	30 91 3a 12 	lds	r19, 0x123A	; 0x80123a <aFeed_mm+0x1>
   10746:	82 17       	cp	r24, r18
   10748:	93 07       	cpc	r25, r19
   1074a:	09 f4       	brne	.+2      	; 0x1074e <main+0x492>
   1074c:	f5 ce       	rjmp	.-534    	; 0x10538 <main+0x27c>
   1074e:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <aFeed_mm+0x1>
   10752:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <aFeed_mm>
   10756:	c0 93 da 11 	sts	0x11DA, r28	; 0x8011da <ADC_NeedUpdateFeedMode>
   1075a:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
   1075e:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
   10762:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10766:	84 ff       	sbrs	r24, 4
   10768:	e7 ce       	rjmp	.-562    	; 0x10538 <main+0x27c>
   1076a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   1076e:	83 30       	cpi	r24, 0x03	; 3
   10770:	19 f5       	brne	.+70     	; 0x107b8 <main+0x4fc>
   10772:	f2 9b       	sbis	0x1e, 2	; 30
   10774:	02 c0       	rjmp	.+4      	; 0x1077a <main+0x4be>
   10776:	f3 99       	sbic	0x1e, 3	; 30
   10778:	11 c0       	rjmp	.+34     	; 0x1079c <main+0x4e0>
   1077a:	f5 9b       	sbis	0x1e, 5	; 30
   1077c:	dd ce       	rjmp	.-582    	; 0x10538 <main+0x27c>
   1077e:	f6 9b       	sbis	0x1e, 6	; 30
   10780:	db ce       	rjmp	.-586    	; 0x10538 <main+0x27c>
   10782:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
   10786:	81 e0       	ldi	r24, 0x01	; 1
   10788:	f4 99       	sbic	0x1e, 4	; 30
   1078a:	13 c0       	rjmp	.+38     	; 0x107b2 <main+0x4f6>
   1078c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
   10790:	d3 ce       	rjmp	.-602    	; 0x10538 <main+0x27c>
   10792:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_Z21Read_ADC_ResistorFeedv>
   10796:	81 11       	cpse	r24, r1
   10798:	a3 cf       	rjmp	.-186    	; 0x106e0 <main+0x424>
   1079a:	ce ce       	rjmp	.-612    	; 0x10538 <main+0x27c>
   1079c:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
   107a0:	81 e0       	ldi	r24, 0x01	; 1
   107a2:	f1 99       	sbic	0x1e, 1	; 30
   107a4:	03 c0       	rjmp	.+6      	; 0x107ac <main+0x4f0>
   107a6:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
   107aa:	c6 ce       	rjmp	.-628    	; 0x10538 <main+0x27c>
   107ac:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
   107b0:	c3 ce       	rjmp	.-634    	; 0x10538 <main+0x27c>
   107b2:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
   107b6:	c0 ce       	rjmp	.-640    	; 0x10538 <main+0x27c>
   107b8:	84 50       	subi	r24, 0x04	; 4
   107ba:	82 30       	cpi	r24, 0x02	; 2
   107bc:	08 f0       	brcs	.+2      	; 0x107c0 <main+0x504>
   107be:	bc ce       	rjmp	.-648    	; 0x10538 <main+0x27c>
   107c0:	f2 9b       	sbis	0x1e, 2	; 30
   107c2:	db cf       	rjmp	.-74     	; 0x1077a <main+0x4be>
   107c4:	f3 9b       	sbis	0x1e, 3	; 30
   107c6:	d9 cf       	rjmp	.-78     	; 0x1077a <main+0x4be>
   107c8:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
   107cc:	81 e0       	ldi	r24, 0x01	; 1
   107ce:	f1 99       	sbic	0x1e, 1	; 30
   107d0:	03 c0       	rjmp	.+6      	; 0x107d8 <main+0x51c>
   107d2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
   107d6:	b0 ce       	rjmp	.-672    	; 0x10538 <main+0x27c>
   107d8:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
   107dc:	ad ce       	rjmp	.-678    	; 0x10538 <main+0x27c>
   107de:	8e 30       	cpi	r24, 0x0E	; 14
   107e0:	09 f4       	brne	.+2      	; 0x107e4 <main+0x528>
   107e2:	25 c1       	rjmp	.+586    	; 0x10a2e <main+0x772>
   107e4:	8f 30       	cpi	r24, 0x0F	; 15
   107e6:	09 f0       	breq	.+2      	; 0x107ea <main+0x52e>
   107e8:	bc ce       	rjmp	.-648    	; 0x10562 <main+0x2a6>
   107ea:	10 92 dc 11 	sts	0x11DC, r1	; 0x8011dc <Complete_flag>
   107ee:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <Cone_qStep>
   107f2:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <flag_j>
   107f6:	88 23       	and	r24, r24
   107f8:	09 f4       	brne	.+2      	; 0x107fc <main+0x540>
   107fa:	b2 c0       	rjmp	.+356    	; 0x10960 <main+0x6a4>
   107fc:	f3 99       	sbic	0x1e, 3	; 30
   107fe:	b0 c0       	rjmp	.+352    	; 0x10960 <main+0x6a4>
   10800:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   10804:	81 11       	cpse	r24, r1
   10806:	ac c0       	rjmp	.+344    	; 0x10960 <main+0x6a4>
   10808:	f6 99       	sbic	0x1e, 6	; 30
   1080a:	aa c0       	rjmp	.+340    	; 0x10960 <main+0x6a4>
   1080c:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   10810:	81 11       	cpse	r24, r1
   10812:	a6 c0       	rjmp	.+332    	; 0x10960 <main+0x6a4>
   10814:	10 92 db 11 	sts	0x11DB, r1	; 0x8011db <flag_j>
   10818:	10 92 36 12 	sts	0x1236, r1	; 0x801236 <SpeedMode>
   1081c:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <McSTEP_Z>
   10820:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
   10824:	4c 01       	movw	r8, r24
   10826:	97 ff       	sbrs	r25, 7
   10828:	03 c0       	rjmp	.+6      	; 0x10830 <main+0x574>
   1082a:	2f ef       	ldi	r18, 0xFF	; 255
   1082c:	82 1a       	sub	r8, r18
   1082e:	92 0a       	sbc	r9, r18
   10830:	95 94       	asr	r9
   10832:	87 94       	ror	r8
   10834:	09 2c       	mov	r0, r9
   10836:	00 0c       	add	r0, r0
   10838:	aa 08       	sbc	r10, r10
   1083a:	bb 08       	sbc	r11, r11
   1083c:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   10840:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   10844:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   10848:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   1084c:	84 0e       	add	r8, r20
   1084e:	95 1e       	adc	r9, r21
   10850:	a6 1e       	adc	r10, r22
   10852:	b7 1e       	adc	r11, r23
   10854:	91 95       	neg	r25
   10856:	81 95       	neg	r24
   10858:	91 09       	sbc	r25, r1
   1085a:	09 2e       	mov	r0, r25
   1085c:	00 0c       	add	r0, r0
   1085e:	aa 0b       	sbc	r26, r26
   10860:	bb 0b       	sbc	r27, r27
   10862:	88 22       	and	r8, r24
   10864:	99 22       	and	r9, r25
   10866:	aa 22       	and	r10, r26
   10868:	bb 22       	and	r11, r27
   1086a:	80 92 5a 12 	sts	0x125A, r8	; 0x80125a <Motor_Z_Pos>
   1086e:	90 92 5b 12 	sts	0x125B, r9	; 0x80125b <Motor_Z_Pos+0x1>
   10872:	a0 92 5c 12 	sts	0x125C, r10	; 0x80125c <Motor_Z_Pos+0x2>
   10876:	b0 92 5d 12 	sts	0x125D, r11	; 0x80125d <Motor_Z_Pos+0x3>
   1087a:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <McSTEP_X>
   1087e:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
   10882:	c9 01       	movw	r24, r18
   10884:	37 fd       	sbrc	r19, 7
   10886:	01 96       	adiw	r24, 0x01	; 1
   10888:	95 95       	asr	r25
   1088a:	87 95       	ror	r24
   1088c:	09 2e       	mov	r0, r25
   1088e:	00 0c       	add	r0, r0
   10890:	aa 0b       	sbc	r26, r26
   10892:	bb 0b       	sbc	r27, r27
   10894:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   10898:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   1089c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   108a0:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   108a4:	84 0f       	add	r24, r20
   108a6:	95 1f       	adc	r25, r21
   108a8:	a6 1f       	adc	r26, r22
   108aa:	b7 1f       	adc	r27, r23
   108ac:	44 27       	eor	r20, r20
   108ae:	55 27       	eor	r21, r21
   108b0:	42 1b       	sub	r20, r18
   108b2:	53 0b       	sbc	r21, r19
   108b4:	05 2e       	mov	r0, r21
   108b6:	00 0c       	add	r0, r0
   108b8:	66 0b       	sbc	r22, r22
   108ba:	77 0b       	sbc	r23, r23
   108bc:	84 23       	and	r24, r20
   108be:	95 23       	and	r25, r21
   108c0:	a6 23       	and	r26, r22
   108c2:	b7 23       	and	r27, r23
   108c4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
   108c8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
   108cc:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
   108d0:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
   108d4:	80 92 20 12 	sts	0x1220, r8	; 0x801220 <Null_Z_Pos>
   108d8:	90 92 21 12 	sts	0x1221, r9	; 0x801221 <Null_Z_Pos+0x1>
   108dc:	a0 92 22 12 	sts	0x1222, r10	; 0x801222 <Null_Z_Pos+0x2>
   108e0:	b0 92 23 12 	sts	0x1223, r11	; 0x801223 <Null_Z_Pos+0x3>
   108e4:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <Null_X_Pos>
   108e8:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <Null_X_Pos+0x1>
   108ec:	a0 93 12 12 	sts	0x1212, r26	; 0x801212 <Null_X_Pos+0x2>
   108f0:	b0 93 13 12 	sts	0x1213, r27	; 0x801213 <Null_X_Pos+0x3>
   108f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   108f8:	81 60       	ori	r24, 0x01	; 1
   108fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   108fe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10902:	82 60       	ori	r24, 0x02	; 2
   10904:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10908:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   1090c:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
   10910:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
   10914:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <Cs_Count>
   10918:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <Cm_Count+0x1>
   1091c:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <Cm_Count>
   10920:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   10924:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <a_flag>
   10928:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <c_flag>
   1092c:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <d_flag>
   10930:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
   10934:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <Pass_Nr>
   10938:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
   1093c:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
   10940:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   10944:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
   10948:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   1094c:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   10950:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   10954:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   10958:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   1095c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
   10960:	f2 98       	cbi	0x1e, 2	; 30
   10962:	f5 98       	cbi	0x1e, 5	; 30
   10964:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   10968:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   1096c:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   10970:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   10974:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <b_flag>
   10978:	10 92 fd 11 	sts	0x11FD, r1	; 0x8011fd <err_3_flag>
   1097c:	f3 99       	sbic	0x1e, 3	; 30
   1097e:	0f c0       	rjmp	.+30     	; 0x1099e <main+0x6e2>
   10980:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   10984:	81 11       	cpse	r24, r1
   10986:	0b c0       	rjmp	.+22     	; 0x1099e <main+0x6e2>
   10988:	80 91 01 12 	lds	r24, 0x1201	; 0x801201 <hand_Z>
   1098c:	81 11       	cpse	r24, r1
   1098e:	05 c0       	rjmp	.+10     	; 0x1099a <main+0x6de>
   10990:	80 91 ff 11 	lds	r24, 0x11FF	; 0x8011ff <flag_hand_Z>
   10994:	81 11       	cpse	r24, r1
   10996:	c0 93 01 12 	sts	0x1201, r28	; 0x801201 <hand_Z>
   1099a:	0e 94 04 0a 	call	0x1408	; 0x1408 <_Z7H_Coderv>
   1099e:	f6 99       	sbic	0x1e, 6	; 30
   109a0:	0f c0       	rjmp	.+30     	; 0x109c0 <main+0x704>
   109a2:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   109a6:	81 11       	cpse	r24, r1
   109a8:	0b c0       	rjmp	.+22     	; 0x109c0 <main+0x704>
   109aa:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <hand_X>
   109ae:	81 11       	cpse	r24, r1
   109b0:	05 c0       	rjmp	.+10     	; 0x109bc <main+0x700>
   109b2:	80 91 fe 11 	lds	r24, 0x11FE	; 0x8011fe <flag_hand_X>
   109b6:	81 11       	cpse	r24, r1
   109b8:	c0 93 00 12 	sts	0x1200, r28	; 0x801200 <hand_X>
   109bc:	0e 94 04 0a 	call	0x1408	; 0x1408 <_Z7H_Coderv>
   109c0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   109c4:	84 50       	subi	r24, 0x04	; 4
   109c6:	82 30       	cpi	r24, 0x02	; 2
   109c8:	e8 f4       	brcc	.+58     	; 0x10a04 <main+0x748>
   109ca:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <Pass_Nr>
   109ce:	f3 99       	sbic	0x1e, 3	; 30
   109d0:	19 c0       	rjmp	.+50     	; 0x10a04 <main+0x748>
   109d2:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   109d6:	81 11       	cpse	r24, r1
   109d8:	15 c0       	rjmp	.+42     	; 0x10a04 <main+0x748>
   109da:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
   109de:	f6 98       	cbi	0x1e, 6	; 30
   109e0:	10 92 26 12 	sts	0x1226, r1	; 0x801226 <cycle_flag>
   109e4:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <Null_X_Pos>
   109e8:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <Null_X_Pos+0x1>
   109ec:	a0 91 12 12 	lds	r26, 0x1212	; 0x801212 <Null_X_Pos+0x2>
   109f0:	b0 91 13 12 	lds	r27, 0x1213	; 0x801213 <Null_X_Pos+0x3>
   109f4:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <Motor_X_Pos>
   109f8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <Motor_X_Pos+0x1>
   109fc:	a0 93 48 12 	sts	0x1248, r26	; 0x801248 <Motor_X_Pos+0x2>
   10a00:	b0 93 49 12 	sts	0x1249, r27	; 0x801249 <Motor_X_Pos+0x3>
   10a04:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <Mode>
   10a08:	e1 50       	subi	r30, 0x01	; 1
   10a0a:	e8 30       	cpi	r30, 0x08	; 8
   10a0c:	08 f0       	brcs	.+2      	; 0x10a10 <main+0x754>
   10a0e:	cc c7       	rjmp	.+3992   	; 0x119a8 <main+0x16ec>
   10a10:	f0 e0       	ldi	r31, 0x00	; 0
   10a12:	88 27       	eor	r24, r24
   10a14:	e1 5f       	subi	r30, 0xF1	; 241
   10a16:	fa 47       	sbci	r31, 0x7A	; 122
   10a18:	8f 4f       	sbci	r24, 0xFF	; 255
   10a1a:	0c 94 cb 98 	jmp	0x13196	; 0x13196 <__tablejump2__>
   10a1e:	ce 8c       	ldd	r12, Y+30	; 0x1e
   10a20:	d7 8c       	ldd	r13, Z+31	; 0x1f
   10a22:	da 8c       	ldd	r13, Y+26	; 0x1a
   10a24:	dd 8c       	ldd	r13, Y+29	; 0x1d
   10a26:	dd 8c       	ldd	r13, Y+29	; 0x1d
   10a28:	d4 8c       	ldd	r13, Z+28	; 0x1c
   10a2a:	e0 8c       	ldd	r14, Z+24	; 0x18
   10a2c:	b1 82       	std	Z+1, r11	; 0x01
   10a2e:	c0 93 db 11 	sts	0x11DB, r28	; 0x8011db <flag_j>
   10a32:	80 91 01 12 	lds	r24, 0x1201	; 0x801201 <hand_Z>
   10a36:	81 11       	cpse	r24, r1
   10a38:	03 c0       	rjmp	.+6      	; 0x10a40 <main+0x784>
   10a3a:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <hand_X>
   10a3e:	81 11       	cpse	r24, r1
   10a40:	c0 93 fd 11 	sts	0x11FD, r28	; 0x8011fd <err_3_flag>
   10a44:	ea 98       	cbi	0x1d, 2	; 29
   10a46:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10a4a:	8d 7f       	andi	r24, 0xFD	; 253
   10a4c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10a50:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10a54:	8b 7f       	andi	r24, 0xFB	; 251
   10a56:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10a5a:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   10a5e:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   10a62:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
   10a66:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
   10a6a:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
   10a6e:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
   10a72:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
   10a76:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
   10a7a:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
   10a7e:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
   10a82:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
   10a86:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
   10a8a:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
   10a8e:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
   10a92:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
   10a96:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
   10a9a:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
   10a9e:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
   10aa2:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
   10aa6:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
   10aaa:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
   10aae:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>
   10ab2:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <err_3_flag>
   10ab6:	81 11       	cpse	r24, r1
   10ab8:	54 cd       	rjmp	.-1368   	; 0x10562 <main+0x2a6>
   10aba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   10abe:	83 30       	cpi	r24, 0x03	; 3
   10ac0:	09 f4       	brne	.+2      	; 0x10ac4 <main+0x808>
   10ac2:	d6 c0       	rjmp	.+428    	; 0x10c70 <main+0x9b4>
   10ac4:	98 f4       	brcc	.+38     	; 0x10aec <main+0x830>
   10ac6:	81 30       	cpi	r24, 0x01	; 1
   10ac8:	11 f1       	breq	.+68     	; 0x10b0e <main+0x852>
   10aca:	82 30       	cpi	r24, 0x02	; 2
   10acc:	09 f0       	breq	.+2      	; 0x10ad0 <main+0x814>
   10ace:	49 cd       	rjmp	.-1390   	; 0x10562 <main+0x2a6>
   10ad0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Sub_Mode_Feed>
   10ad4:	82 30       	cpi	r24, 0x02	; 2
   10ad6:	09 f4       	brne	.+2      	; 0x10ada <main+0x81e>
   10ad8:	50 c0       	rjmp	.+160    	; 0x10b7a <main+0x8be>
   10ada:	83 30       	cpi	r24, 0x03	; 3
   10adc:	09 f4       	brne	.+2      	; 0x10ae0 <main+0x824>
   10ade:	4a c0       	rjmp	.+148    	; 0x10b74 <main+0x8b8>
   10ae0:	81 30       	cpi	r24, 0x01	; 1
   10ae2:	09 f0       	breq	.+2      	; 0x10ae6 <main+0x82a>
   10ae4:	3e cd       	rjmp	.-1412   	; 0x10562 <main+0x2a6>
   10ae6:	0e 94 42 48 	call	0x9084	; 0x9084 <_Z13Feed_Int_Leftv>
   10aea:	3b cd       	rjmp	.-1418   	; 0x10562 <main+0x2a6>
   10aec:	86 30       	cpi	r24, 0x06	; 6
   10aee:	08 f4       	brcc	.+2      	; 0x10af2 <main+0x836>
   10af0:	49 c1       	rjmp	.+658    	; 0x10d84 <main+0xac8>
   10af2:	87 30       	cpi	r24, 0x07	; 7
   10af4:	09 f0       	breq	.+2      	; 0x10af8 <main+0x83c>
   10af6:	35 cd       	rjmp	.-1430   	; 0x10562 <main+0x2a6>
   10af8:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10afc:	81 11       	cpse	r24, r1
   10afe:	31 cd       	rjmp	.-1438   	; 0x10562 <main+0x2a6>
   10b00:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10b04:	81 11       	cpse	r24, r1
   10b06:	2d cd       	rjmp	.-1446   	; 0x10562 <main+0x2a6>
   10b08:	0e 94 79 30 	call	0x60f2	; 0x60f2 <_Z10Sphere_ExtRbS_.constprop.8>
   10b0c:	2a cd       	rjmp	.-1452   	; 0x10562 <main+0x2a6>
   10b0e:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Sub_Mode_Thread>
   10b12:	82 30       	cpi	r24, 0x02	; 2
   10b14:	79 f0       	breq	.+30     	; 0x10b34 <main+0x878>
   10b16:	83 30       	cpi	r24, 0x03	; 3
   10b18:	41 f0       	breq	.+16     	; 0x10b2a <main+0x86e>
   10b1a:	81 30       	cpi	r24, 0x01	; 1
   10b1c:	09 f0       	breq	.+2      	; 0x10b20 <main+0x864>
   10b1e:	21 cd       	rjmp	.-1470   	; 0x10562 <main+0x2a6>
   10b20:	f0 99       	sbic	0x1e, 0	; 30
   10b22:	24 c2       	rjmp	.+1096   	; 0x10f6c <main+0xcb0>
   10b24:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <_Z15Thread_Int_Leftv>
   10b28:	1c cd       	rjmp	.-1480   	; 0x10562 <main+0x2a6>
   10b2a:	f0 99       	sbic	0x1e, 0	; 30
   10b2c:	24 c2       	rjmp	.+1096   	; 0x10f76 <main+0xcba>
   10b2e:	0e 94 df 38 	call	0x71be	; 0x71be <_Z15Thread_Ext_Leftv>
   10b32:	17 cd       	rjmp	.-1490   	; 0x10562 <main+0x2a6>
   10b34:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10b38:	81 11       	cpse	r24, r1
   10b3a:	13 cd       	rjmp	.-1498   	; 0x10562 <main+0x2a6>
   10b3c:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10b40:	81 11       	cpse	r24, r1
   10b42:	0f cd       	rjmp	.-1506   	; 0x10562 <main+0x2a6>
   10b44:	f0 99       	sbic	0x1e, 0	; 30
   10b46:	24 c2       	rjmp	.+1096   	; 0x10f90 <main+0xcd4>
   10b48:	80 91 4b 12 	lds	r24, 0x124B	; 0x80124b <c_flag>
   10b4c:	81 11       	cpse	r24, r1
   10b4e:	09 cd       	rjmp	.-1518   	; 0x10562 <main+0x2a6>
   10b50:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <_Z11Thread_LeftRbS_.part.18.constprop.30>
   10b54:	06 cd       	rjmp	.-1524   	; 0x10562 <main+0x2a6>
   10b56:	40 92 4c 12 	sts	0x124C, r4	; 0x80124c <Limit_Pos>
   10b5a:	50 92 4d 12 	sts	0x124D, r5	; 0x80124d <Limit_Pos+0x1>
   10b5e:	60 92 4e 12 	sts	0x124E, r6	; 0x80124e <Limit_Pos+0x2>
   10b62:	70 92 4f 12 	sts	0x124F, r7	; 0x80124f <Limit_Pos+0x3>
   10b66:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <d_flag>
   10b6a:	81 11       	cpse	r24, r1
   10b6c:	fa cc       	rjmp	.-1548   	; 0x10562 <main+0x2a6>
   10b6e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <_Z12Thread_RightRbS_.part.19.constprop.29>
   10b72:	f7 cc       	rjmp	.-1554   	; 0x10562 <main+0x2a6>
   10b74:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <_Z13Feed_Ext_Leftv>
   10b78:	f4 cc       	rjmp	.-1560   	; 0x10562 <main+0x2a6>
   10b7a:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10b7e:	81 11       	cpse	r24, r1
   10b80:	f0 cc       	rjmp	.-1568   	; 0x10562 <main+0x2a6>
   10b82:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10b86:	81 11       	cpse	r24, r1
   10b88:	ec cc       	rjmp	.-1576   	; 0x10562 <main+0x2a6>
   10b8a:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   10b8e:	81 11       	cpse	r24, r1
   10b90:	e8 cc       	rjmp	.-1584   	; 0x10562 <main+0x2a6>
   10b92:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10b96:	84 ff       	sbrs	r24, 4
   10b98:	28 c0       	rjmp	.+80     	; 0x10bea <main+0x92e>
   10b9a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
   10b9e:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   10ba2:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
   10ba6:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
   10baa:	28 17       	cp	r18, r24
   10bac:	39 07       	cpc	r19, r25
   10bae:	09 f0       	breq	.+2      	; 0x10bb2 <main+0x8f6>
   10bb0:	d8 cc       	rjmp	.-1616   	; 0x10562 <main+0x2a6>
   10bb2:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   10bb6:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   10bba:	81 11       	cpse	r24, r1
   10bbc:	d2 cc       	rjmp	.-1628   	; 0x10562 <main+0x2a6>
   10bbe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   10bc2:	84 fd       	sbrc	r24, 4
   10bc4:	0e c0       	rjmp	.+28     	; 0x10be2 <main+0x926>
   10bc6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10bca:	80 61       	ori	r24, 0x10	; 16
   10bcc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10bd0:	2f ef       	ldi	r18, 0xFF	; 255
   10bd2:	4b ed       	ldi	r20, 0xDB	; 219
   10bd4:	85 e0       	ldi	r24, 0x05	; 5
   10bd6:	21 50       	subi	r18, 0x01	; 1
   10bd8:	40 40       	sbci	r20, 0x00	; 0
   10bda:	80 40       	sbci	r24, 0x00	; 0
   10bdc:	e1 f7       	brne	.-8      	; 0x10bd6 <main+0x91a>
   10bde:	00 c0       	rjmp	.+0      	; 0x10be0 <main+0x924>
   10be0:	00 00       	nop
   10be2:	81 e0       	ldi	r24, 0x01	; 1
   10be4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
   10be8:	bc cc       	rjmp	.-1672   	; 0x10562 <main+0x2a6>
   10bea:	f3 99       	sbic	0x1e, 3	; 30
   10bec:	ba cc       	rjmp	.-1676   	; 0x10562 <main+0x2a6>
   10bee:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   10bf2:	81 11       	cpse	r24, r1
   10bf4:	b6 cc       	rjmp	.-1684   	; 0x10562 <main+0x2a6>
   10bf6:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   10bfa:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   10bfe:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   10c02:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   10c06:	28 1b       	sub	r18, r24
   10c08:	39 0b       	sbc	r19, r25
   10c0a:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   10c0e:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   10c12:	24 9f       	mul	r18, r20
   10c14:	c0 01       	movw	r24, r0
   10c16:	25 9f       	mul	r18, r21
   10c18:	90 0d       	add	r25, r0
   10c1a:	34 9f       	mul	r19, r20
   10c1c:	90 0d       	add	r25, r0
   10c1e:	11 24       	eor	r1, r1
   10c20:	88 0f       	add	r24, r24
   10c22:	99 1f       	adc	r25, r25
   10c24:	09 2e       	mov	r0, r25
   10c26:	00 0c       	add	r0, r0
   10c28:	aa 0b       	sbc	r26, r26
   10c2a:	bb 0b       	sbc	r27, r27
   10c2c:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
   10c30:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
   10c34:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
   10c38:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
   10c3c:	4a 01       	movw	r8, r20
   10c3e:	5b 01       	movw	r10, r22
   10c40:	88 1a       	sub	r8, r24
   10c42:	99 0a       	sbc	r9, r25
   10c44:	aa 0a       	sbc	r10, r26
   10c46:	bb 0a       	sbc	r11, r27
   10c48:	d5 01       	movw	r26, r10
   10c4a:	c4 01       	movw	r24, r8
   10c4c:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   10c50:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   10c54:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   10c58:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   10c5c:	48 17       	cp	r20, r24
   10c5e:	59 07       	cpc	r21, r25
   10c60:	6a 07       	cpc	r22, r26
   10c62:	7b 07       	cpc	r23, r27
   10c64:	0c f0       	brlt	.+2      	; 0x10c68 <main+0x9ac>
   10c66:	7d cc       	rjmp	.-1798   	; 0x10562 <main+0x2a6>
   10c68:	82 e0       	ldi	r24, 0x02	; 2
   10c6a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_Z13NEW_Feed_LeftRbS_h.constprop.24>
   10c6e:	79 cc       	rjmp	.-1806   	; 0x10562 <main+0x2a6>
   10c70:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Sub_Mode_aFeed>
   10c74:	82 30       	cpi	r24, 0x02	; 2
   10c76:	59 f0       	breq	.+22     	; 0x10c8e <main+0x9d2>
   10c78:	83 30       	cpi	r24, 0x03	; 3
   10c7a:	31 f0       	breq	.+12     	; 0x10c88 <main+0x9cc>
   10c7c:	81 30       	cpi	r24, 0x01	; 1
   10c7e:	09 f0       	breq	.+2      	; 0x10c82 <main+0x9c6>
   10c80:	70 cc       	rjmp	.-1824   	; 0x10562 <main+0x2a6>
   10c82:	0e 94 4e 54 	call	0xa89c	; 0xa89c <_Z18NEW_aFeed_Int_Leftv>
   10c86:	6d cc       	rjmp	.-1830   	; 0x10562 <main+0x2a6>
   10c88:	0e 94 2e 59 	call	0xb25c	; 0xb25c <_Z18NEW_aFeed_Ext_Leftv>
   10c8c:	6a cc       	rjmp	.-1836   	; 0x10562 <main+0x2a6>
   10c8e:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10c92:	81 11       	cpse	r24, r1
   10c94:	66 cc       	rjmp	.-1844   	; 0x10562 <main+0x2a6>
   10c96:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10c9a:	81 11       	cpse	r24, r1
   10c9c:	62 cc       	rjmp	.-1852   	; 0x10562 <main+0x2a6>
   10c9e:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   10ca2:	81 11       	cpse	r24, r1
   10ca4:	5e cc       	rjmp	.-1860   	; 0x10562 <main+0x2a6>
   10ca6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10caa:	84 ff       	sbrs	r24, 4
   10cac:	28 c0       	rjmp	.+80     	; 0x10cfe <main+0xa42>
   10cae:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   10cb2:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   10cb6:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   10cba:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   10cbe:	28 17       	cp	r18, r24
   10cc0:	39 07       	cpc	r19, r25
   10cc2:	09 f0       	breq	.+2      	; 0x10cc6 <main+0xa0a>
   10cc4:	4e cc       	rjmp	.-1892   	; 0x10562 <main+0x2a6>
   10cc6:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   10cca:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   10cce:	81 11       	cpse	r24, r1
   10cd0:	48 cc       	rjmp	.-1904   	; 0x10562 <main+0x2a6>
   10cd2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   10cd6:	84 fd       	sbrc	r24, 4
   10cd8:	0e c0       	rjmp	.+28     	; 0x10cf6 <main+0xa3a>
   10cda:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10cde:	80 61       	ori	r24, 0x10	; 16
   10ce0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   10ce4:	2f ef       	ldi	r18, 0xFF	; 255
   10ce6:	4b ed       	ldi	r20, 0xDB	; 219
   10ce8:	85 e0       	ldi	r24, 0x05	; 5
   10cea:	21 50       	subi	r18, 0x01	; 1
   10cec:	40 40       	sbci	r20, 0x00	; 0
   10cee:	80 40       	sbci	r24, 0x00	; 0
   10cf0:	e1 f7       	brne	.-8      	; 0x10cea <main+0xa2e>
   10cf2:	00 c0       	rjmp	.+0      	; 0x10cf4 <main+0xa38>
   10cf4:	00 00       	nop
   10cf6:	81 e0       	ldi	r24, 0x01	; 1
   10cf8:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
   10cfc:	32 cc       	rjmp	.-1948   	; 0x10562 <main+0x2a6>
   10cfe:	f3 99       	sbic	0x1e, 3	; 30
   10d00:	30 cc       	rjmp	.-1952   	; 0x10562 <main+0x2a6>
   10d02:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   10d06:	81 11       	cpse	r24, r1
   10d08:	2c cc       	rjmp	.-1960   	; 0x10562 <main+0x2a6>
   10d0a:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   10d0e:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   10d12:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   10d16:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   10d1a:	28 1b       	sub	r18, r24
   10d1c:	39 0b       	sbc	r19, r25
   10d1e:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   10d22:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   10d26:	24 9f       	mul	r18, r20
   10d28:	c0 01       	movw	r24, r0
   10d2a:	25 9f       	mul	r18, r21
   10d2c:	90 0d       	add	r25, r0
   10d2e:	34 9f       	mul	r19, r20
   10d30:	90 0d       	add	r25, r0
   10d32:	11 24       	eor	r1, r1
   10d34:	88 0f       	add	r24, r24
   10d36:	99 1f       	adc	r25, r25
   10d38:	09 2e       	mov	r0, r25
   10d3a:	00 0c       	add	r0, r0
   10d3c:	aa 0b       	sbc	r26, r26
   10d3e:	bb 0b       	sbc	r27, r27
   10d40:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
   10d44:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
   10d48:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
   10d4c:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
   10d50:	4a 01       	movw	r8, r20
   10d52:	5b 01       	movw	r10, r22
   10d54:	88 1a       	sub	r8, r24
   10d56:	99 0a       	sbc	r9, r25
   10d58:	aa 0a       	sbc	r10, r26
   10d5a:	bb 0a       	sbc	r11, r27
   10d5c:	d5 01       	movw	r26, r10
   10d5e:	c4 01       	movw	r24, r8
   10d60:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   10d64:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   10d68:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   10d6c:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   10d70:	48 17       	cp	r20, r24
   10d72:	59 07       	cpc	r21, r25
   10d74:	6a 07       	cpc	r22, r26
   10d76:	7b 07       	cpc	r23, r27
   10d78:	0c f0       	brlt	.+2      	; 0x10d7c <main+0xac0>
   10d7a:	f3 cb       	rjmp	.-2074   	; 0x10562 <main+0x2a6>
   10d7c:	82 e0       	ldi	r24, 0x02	; 2
   10d7e:	0e 94 41 1c 	call	0x3882	; 0x3882 <_Z14NEW_aFeed_LeftRbS_h.constprop.3>
   10d82:	ef cb       	rjmp	.-2082   	; 0x10562 <main+0x2a6>
   10d84:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Sub_Mode_Cone>
   10d88:	82 30       	cpi	r24, 0x02	; 2
   10d8a:	49 f0       	breq	.+18     	; 0x10d9e <main+0xae2>
   10d8c:	83 30       	cpi	r24, 0x03	; 3
   10d8e:	09 f4       	brne	.+2      	; 0x10d92 <main+0xad6>
   10d90:	6f c0       	rjmp	.+222    	; 0x10e70 <main+0xbb4>
   10d92:	81 30       	cpi	r24, 0x01	; 1
   10d94:	09 f0       	breq	.+2      	; 0x10d98 <main+0xadc>
   10d96:	e5 cb       	rjmp	.-2102   	; 0x10562 <main+0x2a6>
   10d98:	0e 94 39 5e 	call	0xbc72	; 0xbc72 <_Z17NEW_Cone_Int_Leftv>
   10d9c:	e2 cb       	rjmp	.-2108   	; 0x10562 <main+0x2a6>
   10d9e:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10da2:	81 11       	cpse	r24, r1
   10da4:	de cb       	rjmp	.-2116   	; 0x10562 <main+0x2a6>
   10da6:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10daa:	81 11       	cpse	r24, r1
   10dac:	da cb       	rjmp	.-2124   	; 0x10562 <main+0x2a6>
   10dae:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   10db2:	81 11       	cpse	r24, r1
   10db4:	d6 cb       	rjmp	.-2132   	; 0x10562 <main+0x2a6>
   10db6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10dba:	84 ff       	sbrs	r24, 4
   10dbc:	16 c0       	rjmp	.+44     	; 0x10dea <main+0xb2e>
   10dbe:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   10dc2:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   10dc6:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   10dca:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   10dce:	28 17       	cp	r18, r24
   10dd0:	39 07       	cpc	r19, r25
   10dd2:	09 f0       	breq	.+2      	; 0x10dd6 <main+0xb1a>
   10dd4:	c6 cb       	rjmp	.-2164   	; 0x10562 <main+0x2a6>
   10dd6:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   10dda:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   10dde:	81 11       	cpse	r24, r1
   10de0:	c0 cb       	rjmp	.-2176   	; 0x10562 <main+0x2a6>
   10de2:	81 e0       	ldi	r24, 0x01	; 1
   10de4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
   10de8:	bc cb       	rjmp	.-2184   	; 0x10562 <main+0x2a6>
   10dea:	f3 99       	sbic	0x1e, 3	; 30
   10dec:	ba cb       	rjmp	.-2188   	; 0x10562 <main+0x2a6>
   10dee:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   10df2:	81 11       	cpse	r24, r1
   10df4:	b6 cb       	rjmp	.-2196   	; 0x10562 <main+0x2a6>
   10df6:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   10dfa:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   10dfe:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   10e02:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   10e06:	28 1b       	sub	r18, r24
   10e08:	39 0b       	sbc	r19, r25
   10e0a:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   10e0e:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   10e12:	24 9f       	mul	r18, r20
   10e14:	c0 01       	movw	r24, r0
   10e16:	25 9f       	mul	r18, r21
   10e18:	90 0d       	add	r25, r0
   10e1a:	34 9f       	mul	r19, r20
   10e1c:	90 0d       	add	r25, r0
   10e1e:	11 24       	eor	r1, r1
   10e20:	88 0f       	add	r24, r24
   10e22:	99 1f       	adc	r25, r25
   10e24:	09 2e       	mov	r0, r25
   10e26:	00 0c       	add	r0, r0
   10e28:	aa 0b       	sbc	r26, r26
   10e2a:	bb 0b       	sbc	r27, r27
   10e2c:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
   10e30:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
   10e34:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
   10e38:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
   10e3c:	4a 01       	movw	r8, r20
   10e3e:	5b 01       	movw	r10, r22
   10e40:	88 1a       	sub	r8, r24
   10e42:	99 0a       	sbc	r9, r25
   10e44:	aa 0a       	sbc	r10, r26
   10e46:	bb 0a       	sbc	r11, r27
   10e48:	d5 01       	movw	r26, r10
   10e4a:	c4 01       	movw	r24, r8
   10e4c:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   10e50:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   10e54:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   10e58:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   10e5c:	48 17       	cp	r20, r24
   10e5e:	59 07       	cpc	r21, r25
   10e60:	6a 07       	cpc	r22, r26
   10e62:	7b 07       	cpc	r23, r27
   10e64:	0c f0       	brlt	.+2      	; 0x10e68 <main+0xbac>
   10e66:	7d cb       	rjmp	.-2310   	; 0x10562 <main+0x2a6>
   10e68:	82 e0       	ldi	r24, 0x02	; 2
   10e6a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z13NEW_Cone_LeftRbS_h.constprop.26>
   10e6e:	79 cb       	rjmp	.-2318   	; 0x10562 <main+0x2a6>
   10e70:	0e 94 41 63 	call	0xc682	; 0xc682 <_Z17NEW_Cone_Ext_Leftv>
   10e74:	76 cb       	rjmp	.-2324   	; 0x10562 <main+0x2a6>
   10e76:	c0 93 db 11 	sts	0x11DB, r28	; 0x8011db <flag_j>
   10e7a:	80 91 01 12 	lds	r24, 0x1201	; 0x801201 <hand_Z>
   10e7e:	81 11       	cpse	r24, r1
   10e80:	03 c0       	rjmp	.+6      	; 0x10e88 <main+0xbcc>
   10e82:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <hand_X>
   10e86:	81 11       	cpse	r24, r1
   10e88:	c0 93 fd 11 	sts	0x11FD, r28	; 0x8011fd <err_3_flag>
   10e8c:	ea 98       	cbi	0x1d, 2	; 29
   10e8e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10e92:	8d 7f       	andi	r24, 0xFD	; 253
   10e94:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10e98:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10e9c:	8b 7f       	andi	r24, 0xFB	; 251
   10e9e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   10ea2:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   10ea6:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   10eaa:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
   10eae:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
   10eb2:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
   10eb6:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
   10eba:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
   10ebe:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
   10ec2:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
   10ec6:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
   10eca:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
   10ece:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
   10ed2:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
   10ed6:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
   10eda:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
   10ede:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
   10ee2:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
   10ee6:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
   10eea:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
   10eee:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
   10ef2:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
   10ef6:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>
   10efa:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <err_3_flag>
   10efe:	81 11       	cpse	r24, r1
   10f00:	30 cb       	rjmp	.-2464   	; 0x10562 <main+0x2a6>
   10f02:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   10f06:	83 30       	cpi	r24, 0x03	; 3
   10f08:	09 f4       	brne	.+2      	; 0x10f0c <main+0xc50>
   10f0a:	dd c0       	rjmp	.+442    	; 0x110c6 <main+0xe0a>
   10f0c:	98 f4       	brcc	.+38     	; 0x10f34 <main+0xc78>
   10f0e:	81 30       	cpi	r24, 0x01	; 1
   10f10:	11 f1       	breq	.+68     	; 0x10f56 <main+0xc9a>
   10f12:	82 30       	cpi	r24, 0x02	; 2
   10f14:	09 f0       	breq	.+2      	; 0x10f18 <main+0xc5c>
   10f16:	25 cb       	rjmp	.-2486   	; 0x10562 <main+0x2a6>
   10f18:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Sub_Mode_Feed>
   10f1c:	82 30       	cpi	r24, 0x02	; 2
   10f1e:	09 f4       	brne	.+2      	; 0x10f22 <main+0xc66>
   10f20:	5b c0       	rjmp	.+182    	; 0x10fd8 <main+0xd1c>
   10f22:	83 30       	cpi	r24, 0x03	; 3
   10f24:	09 f4       	brne	.+2      	; 0x10f28 <main+0xc6c>
   10f26:	55 c0       	rjmp	.+170    	; 0x10fd2 <main+0xd16>
   10f28:	81 30       	cpi	r24, 0x01	; 1
   10f2a:	09 f0       	breq	.+2      	; 0x10f2e <main+0xc72>
   10f2c:	1a cb       	rjmp	.-2508   	; 0x10562 <main+0x2a6>
   10f2e:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <_Z14Feed_Int_Rightv>
   10f32:	17 cb       	rjmp	.-2514   	; 0x10562 <main+0x2a6>
   10f34:	86 30       	cpi	r24, 0x06	; 6
   10f36:	08 f0       	brcs	.+2      	; 0x10f3a <main+0xc7e>
   10f38:	14 cb       	rjmp	.-2520   	; 0x10562 <main+0x2a6>
   10f3a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Sub_Mode_Cone>
   10f3e:	82 30       	cpi	r24, 0x02	; 2
   10f40:	09 f4       	brne	.+2      	; 0x10f44 <main+0xc88>
   10f42:	47 c1       	rjmp	.+654    	; 0x111d2 <main+0xf16>
   10f44:	83 30       	cpi	r24, 0x03	; 3
   10f46:	09 f4       	brne	.+2      	; 0x10f4a <main+0xc8e>
   10f48:	a9 c1       	rjmp	.+850    	; 0x1129c <main+0xfe0>
   10f4a:	81 30       	cpi	r24, 0x01	; 1
   10f4c:	09 f0       	breq	.+2      	; 0x10f50 <main+0xc94>
   10f4e:	09 cb       	rjmp	.-2542   	; 0x10562 <main+0x2a6>
   10f50:	0e 94 b1 5b 	call	0xb762	; 0xb762 <_Z18NEW_Cone_Int_Rightv>
   10f54:	06 cb       	rjmp	.-2548   	; 0x10562 <main+0x2a6>
   10f56:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Sub_Mode_Thread>
   10f5a:	82 30       	cpi	r24, 0x02	; 2
   10f5c:	79 f0       	breq	.+30     	; 0x10f7c <main+0xcc0>
   10f5e:	83 30       	cpi	r24, 0x03	; 3
   10f60:	41 f0       	breq	.+16     	; 0x10f72 <main+0xcb6>
   10f62:	81 30       	cpi	r24, 0x01	; 1
   10f64:	09 f0       	breq	.+2      	; 0x10f68 <main+0xcac>
   10f66:	fd ca       	rjmp	.-2566   	; 0x10562 <main+0x2a6>
   10f68:	f0 99       	sbic	0x1e, 0	; 30
   10f6a:	dc cd       	rjmp	.-1096   	; 0x10b24 <main+0x868>
   10f6c:	0e 94 52 33 	call	0x66a4	; 0x66a4 <_Z16Thread_Int_Rightv>
   10f70:	f8 ca       	rjmp	.-2576   	; 0x10562 <main+0x2a6>
   10f72:	f0 99       	sbic	0x1e, 0	; 30
   10f74:	dc cd       	rjmp	.-1096   	; 0x10b2e <main+0x872>
   10f76:	0e 94 08 37 	call	0x6e10	; 0x6e10 <_Z16Thread_Ext_Rightv>
   10f7a:	f3 ca       	rjmp	.-2586   	; 0x10562 <main+0x2a6>
   10f7c:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10f80:	81 11       	cpse	r24, r1
   10f82:	ef ca       	rjmp	.-2594   	; 0x10562 <main+0x2a6>
   10f84:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10f88:	81 11       	cpse	r24, r1
   10f8a:	eb ca       	rjmp	.-2602   	; 0x10562 <main+0x2a6>
   10f8c:	f0 99       	sbic	0x1e, 0	; 30
   10f8e:	dc cd       	rjmp	.-1096   	; 0x10b48 <main+0x88c>
   10f90:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10f94:	84 ff       	sbrs	r24, 4
   10f96:	df cd       	rjmp	.-1090   	; 0x10b56 <main+0x89a>
   10f98:	80 91 55 12 	lds	r24, 0x1255	; 0x801255 <Brake_Compens>
   10f9c:	90 91 56 12 	lds	r25, 0x1256	; 0x801256 <Brake_Compens+0x1>
   10fa0:	09 2e       	mov	r0, r25
   10fa2:	00 0c       	add	r0, r0
   10fa4:	aa 0b       	sbc	r26, r26
   10fa6:	bb 0b       	sbc	r27, r27
   10fa8:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   10fac:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   10fb0:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   10fb4:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   10fb8:	84 0f       	add	r24, r20
   10fba:	95 1f       	adc	r25, r21
   10fbc:	a6 1f       	adc	r26, r22
   10fbe:	b7 1f       	adc	r27, r23
   10fc0:	80 93 4c 12 	sts	0x124C, r24	; 0x80124c <Limit_Pos>
   10fc4:	90 93 4d 12 	sts	0x124D, r25	; 0x80124d <Limit_Pos+0x1>
   10fc8:	a0 93 4e 12 	sts	0x124E, r26	; 0x80124e <Limit_Pos+0x2>
   10fcc:	b0 93 4f 12 	sts	0x124F, r27	; 0x80124f <Limit_Pos+0x3>
   10fd0:	ca cd       	rjmp	.-1132   	; 0x10b66 <main+0x8aa>
   10fd2:	0e 94 1e 4a 	call	0x943c	; 0x943c <_Z14Feed_Ext_Rightv>
   10fd6:	c5 ca       	rjmp	.-2678   	; 0x10562 <main+0x2a6>
   10fd8:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   10fdc:	81 11       	cpse	r24, r1
   10fde:	c1 ca       	rjmp	.-2686   	; 0x10562 <main+0x2a6>
   10fe0:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   10fe4:	81 11       	cpse	r24, r1
   10fe6:	bd ca       	rjmp	.-2694   	; 0x10562 <main+0x2a6>
   10fe8:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   10fec:	81 11       	cpse	r24, r1
   10fee:	b9 ca       	rjmp	.-2702   	; 0x10562 <main+0x2a6>
   10ff0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   10ff4:	84 ff       	sbrs	r24, 4
   10ff6:	28 c0       	rjmp	.+80     	; 0x11048 <main+0xd8c>
   10ff8:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
   10ffc:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   11000:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
   11004:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
   11008:	28 17       	cp	r18, r24
   1100a:	39 07       	cpc	r19, r25
   1100c:	09 f0       	breq	.+2      	; 0x11010 <main+0xd54>
   1100e:	a9 ca       	rjmp	.-2734   	; 0x10562 <main+0x2a6>
   11010:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   11014:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   11018:	81 11       	cpse	r24, r1
   1101a:	a3 ca       	rjmp	.-2746   	; 0x10562 <main+0x2a6>
   1101c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   11020:	84 fd       	sbrc	r24, 4
   11022:	0e c0       	rjmp	.+28     	; 0x11040 <main+0xd84>
   11024:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11028:	80 61       	ori	r24, 0x10	; 16
   1102a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   1102e:	2f ef       	ldi	r18, 0xFF	; 255
   11030:	4b ed       	ldi	r20, 0xDB	; 219
   11032:	85 e0       	ldi	r24, 0x05	; 5
   11034:	21 50       	subi	r18, 0x01	; 1
   11036:	40 40       	sbci	r20, 0x00	; 0
   11038:	80 40       	sbci	r24, 0x00	; 0
   1103a:	e1 f7       	brne	.-8      	; 0x11034 <main+0xd78>
   1103c:	00 c0       	rjmp	.+0      	; 0x1103e <main+0xd82>
   1103e:	00 00       	nop
   11040:	81 e0       	ldi	r24, 0x01	; 1
   11042:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
   11046:	8d ca       	rjmp	.-2790   	; 0x10562 <main+0x2a6>
   11048:	f3 99       	sbic	0x1e, 3	; 30
   1104a:	8b ca       	rjmp	.-2794   	; 0x10562 <main+0x2a6>
   1104c:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   11050:	81 11       	cpse	r24, r1
   11052:	87 ca       	rjmp	.-2802   	; 0x10562 <main+0x2a6>
   11054:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   11058:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   1105c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   11060:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11064:	28 1b       	sub	r18, r24
   11066:	39 0b       	sbc	r19, r25
   11068:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   1106c:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   11070:	24 9f       	mul	r18, r20
   11072:	c0 01       	movw	r24, r0
   11074:	25 9f       	mul	r18, r21
   11076:	90 0d       	add	r25, r0
   11078:	34 9f       	mul	r19, r20
   1107a:	90 0d       	add	r25, r0
   1107c:	11 24       	eor	r1, r1
   1107e:	88 0f       	add	r24, r24
   11080:	99 1f       	adc	r25, r25
   11082:	09 2e       	mov	r0, r25
   11084:	00 0c       	add	r0, r0
   11086:	aa 0b       	sbc	r26, r26
   11088:	bb 0b       	sbc	r27, r27
   1108a:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   1108e:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   11092:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   11096:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   1109a:	84 0f       	add	r24, r20
   1109c:	95 1f       	adc	r25, r21
   1109e:	a6 1f       	adc	r26, r22
   110a0:	b7 1f       	adc	r27, r23
   110a2:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   110a6:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   110aa:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   110ae:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   110b2:	84 17       	cp	r24, r20
   110b4:	95 07       	cpc	r25, r21
   110b6:	a6 07       	cpc	r26, r22
   110b8:	b7 07       	cpc	r27, r23
   110ba:	0c f0       	brlt	.+2      	; 0x110be <main+0xe02>
   110bc:	52 ca       	rjmp	.-2908   	; 0x10562 <main+0x2a6>
   110be:	82 e0       	ldi	r24, 0x02	; 2
   110c0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_Z14NEW_Feed_RightRbS_h.constprop.23>
   110c4:	4e ca       	rjmp	.-2916   	; 0x10562 <main+0x2a6>
   110c6:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Sub_Mode_aFeed>
   110ca:	82 30       	cpi	r24, 0x02	; 2
   110cc:	59 f0       	breq	.+22     	; 0x110e4 <main+0xe28>
   110ce:	83 30       	cpi	r24, 0x03	; 3
   110d0:	31 f0       	breq	.+12     	; 0x110de <main+0xe22>
   110d2:	81 30       	cpi	r24, 0x01	; 1
   110d4:	09 f0       	breq	.+2      	; 0x110d8 <main+0xe1c>
   110d6:	45 ca       	rjmp	.-2934   	; 0x10562 <main+0x2a6>
   110d8:	0e 94 f1 51 	call	0xa3e2	; 0xa3e2 <_Z19NEW_aFeed_Int_Rightv>
   110dc:	42 ca       	rjmp	.-2940   	; 0x10562 <main+0x2a6>
   110de:	0e 94 ab 56 	call	0xad56	; 0xad56 <_Z19NEW_aFeed_Ext_Rightv>
   110e2:	3f ca       	rjmp	.-2946   	; 0x10562 <main+0x2a6>
   110e4:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   110e8:	81 11       	cpse	r24, r1
   110ea:	3b ca       	rjmp	.-2954   	; 0x10562 <main+0x2a6>
   110ec:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   110f0:	81 11       	cpse	r24, r1
   110f2:	37 ca       	rjmp	.-2962   	; 0x10562 <main+0x2a6>
   110f4:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   110f8:	81 11       	cpse	r24, r1
   110fa:	33 ca       	rjmp	.-2970   	; 0x10562 <main+0x2a6>
   110fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   11100:	84 ff       	sbrs	r24, 4
   11102:	28 c0       	rjmp	.+80     	; 0x11154 <main+0xe98>
   11104:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   11108:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   1110c:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   11110:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   11114:	28 17       	cp	r18, r24
   11116:	39 07       	cpc	r19, r25
   11118:	09 f0       	breq	.+2      	; 0x1111c <main+0xe60>
   1111a:	23 ca       	rjmp	.-3002   	; 0x10562 <main+0x2a6>
   1111c:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   11120:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   11124:	81 11       	cpse	r24, r1
   11126:	1d ca       	rjmp	.-3014   	; 0x10562 <main+0x2a6>
   11128:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   1112c:	84 fd       	sbrc	r24, 4
   1112e:	0e c0       	rjmp	.+28     	; 0x1114c <main+0xe90>
   11130:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11134:	80 61       	ori	r24, 0x10	; 16
   11136:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   1113a:	9f ef       	ldi	r25, 0xFF	; 255
   1113c:	ab ed       	ldi	r26, 0xDB	; 219
   1113e:	b5 e0       	ldi	r27, 0x05	; 5
   11140:	91 50       	subi	r25, 0x01	; 1
   11142:	a0 40       	sbci	r26, 0x00	; 0
   11144:	b0 40       	sbci	r27, 0x00	; 0
   11146:	e1 f7       	brne	.-8      	; 0x11140 <main+0xe84>
   11148:	00 c0       	rjmp	.+0      	; 0x1114a <main+0xe8e>
   1114a:	00 00       	nop
   1114c:	81 e0       	ldi	r24, 0x01	; 1
   1114e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
   11152:	07 ca       	rjmp	.-3058   	; 0x10562 <main+0x2a6>
   11154:	f3 99       	sbic	0x1e, 3	; 30
   11156:	05 ca       	rjmp	.-3062   	; 0x10562 <main+0x2a6>
   11158:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   1115c:	81 11       	cpse	r24, r1
   1115e:	01 ca       	rjmp	.-3070   	; 0x10562 <main+0x2a6>
   11160:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   11164:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   11168:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   1116c:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11170:	28 1b       	sub	r18, r24
   11172:	39 0b       	sbc	r19, r25
   11174:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   11178:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   1117c:	24 9f       	mul	r18, r20
   1117e:	c0 01       	movw	r24, r0
   11180:	25 9f       	mul	r18, r21
   11182:	90 0d       	add	r25, r0
   11184:	34 9f       	mul	r19, r20
   11186:	90 0d       	add	r25, r0
   11188:	11 24       	eor	r1, r1
   1118a:	88 0f       	add	r24, r24
   1118c:	99 1f       	adc	r25, r25
   1118e:	09 2e       	mov	r0, r25
   11190:	00 0c       	add	r0, r0
   11192:	aa 0b       	sbc	r26, r26
   11194:	bb 0b       	sbc	r27, r27
   11196:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   1119a:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   1119e:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   111a2:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   111a6:	84 0f       	add	r24, r20
   111a8:	95 1f       	adc	r25, r21
   111aa:	a6 1f       	adc	r26, r22
   111ac:	b7 1f       	adc	r27, r23
   111ae:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   111b2:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   111b6:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   111ba:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   111be:	84 17       	cp	r24, r20
   111c0:	95 07       	cpc	r25, r21
   111c2:	a6 07       	cpc	r26, r22
   111c4:	b7 07       	cpc	r27, r23
   111c6:	0c f0       	brlt	.+2      	; 0x111ca <main+0xf0e>
   111c8:	cc c9       	rjmp	.-3176   	; 0x10562 <main+0x2a6>
   111ca:	82 e0       	ldi	r24, 0x02	; 2
   111cc:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_Z15NEW_aFeed_RightRbS_h.constprop.2>
   111d0:	c8 c9       	rjmp	.-3184   	; 0x10562 <main+0x2a6>
   111d2:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   111d6:	81 11       	cpse	r24, r1
   111d8:	c4 c9       	rjmp	.-3192   	; 0x10562 <main+0x2a6>
   111da:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   111de:	81 11       	cpse	r24, r1
   111e0:	c0 c9       	rjmp	.-3200   	; 0x10562 <main+0x2a6>
   111e2:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   111e6:	81 11       	cpse	r24, r1
   111e8:	bc c9       	rjmp	.-3208   	; 0x10562 <main+0x2a6>
   111ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   111ee:	84 ff       	sbrs	r24, 4
   111f0:	16 c0       	rjmp	.+44     	; 0x1121e <main+0xf62>
   111f2:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   111f6:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   111fa:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   111fe:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   11202:	28 17       	cp	r18, r24
   11204:	39 07       	cpc	r19, r25
   11206:	09 f0       	breq	.+2      	; 0x1120a <main+0xf4e>
   11208:	ac c9       	rjmp	.-3240   	; 0x10562 <main+0x2a6>
   1120a:	10 92 35 12 	sts	0x1235, r1	; 0x801235 <Z_NEED_RUN_RAPID_FLAG>
   1120e:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <Z_WORKING_RAPID_FLAG>
   11212:	81 11       	cpse	r24, r1
   11214:	a6 c9       	rjmp	.-3252   	; 0x10562 <main+0x2a6>
   11216:	81 e0       	ldi	r24, 0x01	; 1
   11218:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
   1121c:	a2 c9       	rjmp	.-3260   	; 0x10562 <main+0x2a6>
   1121e:	f3 99       	sbic	0x1e, 3	; 30
   11220:	a0 c9       	rjmp	.-3264   	; 0x10562 <main+0x2a6>
   11222:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <Z_NEED_RUN_FEED_FLAG>
   11226:	81 11       	cpse	r24, r1
   11228:	9c c9       	rjmp	.-3272   	; 0x10562 <main+0x2a6>
   1122a:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   1122e:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   11232:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   11236:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   1123a:	28 1b       	sub	r18, r24
   1123c:	39 0b       	sbc	r19, r25
   1123e:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   11242:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   11246:	24 9f       	mul	r18, r20
   11248:	c0 01       	movw	r24, r0
   1124a:	25 9f       	mul	r18, r21
   1124c:	90 0d       	add	r25, r0
   1124e:	34 9f       	mul	r19, r20
   11250:	90 0d       	add	r25, r0
   11252:	11 24       	eor	r1, r1
   11254:	88 0f       	add	r24, r24
   11256:	99 1f       	adc	r25, r25
   11258:	09 2e       	mov	r0, r25
   1125a:	00 0c       	add	r0, r0
   1125c:	aa 0b       	sbc	r26, r26
   1125e:	bb 0b       	sbc	r27, r27
   11260:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   11264:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   11268:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   1126c:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   11270:	84 0f       	add	r24, r20
   11272:	95 1f       	adc	r25, r21
   11274:	a6 1f       	adc	r26, r22
   11276:	b7 1f       	adc	r27, r23
   11278:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   1127c:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   11280:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   11284:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   11288:	84 17       	cp	r24, r20
   1128a:	95 07       	cpc	r25, r21
   1128c:	a6 07       	cpc	r26, r22
   1128e:	b7 07       	cpc	r27, r23
   11290:	0c f0       	brlt	.+2      	; 0x11294 <main+0xfd8>
   11292:	67 c9       	rjmp	.-3378   	; 0x10562 <main+0x2a6>
   11294:	82 e0       	ldi	r24, 0x02	; 2
   11296:	0e 94 af 13 	call	0x275e	; 0x275e <_Z14NEW_Cone_RightRbS_h.constprop.25>
   1129a:	63 c9       	rjmp	.-3386   	; 0x10562 <main+0x2a6>
   1129c:	0e 94 c1 60 	call	0xc182	; 0xc182 <_Z18NEW_Cone_Ext_Rightv>
   112a0:	60 c9       	rjmp	.-3392   	; 0x10562 <main+0x2a6>
   112a2:	c0 93 db 11 	sts	0x11DB, r28	; 0x8011db <flag_j>
   112a6:	80 91 01 12 	lds	r24, 0x1201	; 0x801201 <hand_Z>
   112aa:	81 11       	cpse	r24, r1
   112ac:	03 c0       	rjmp	.+6      	; 0x112b4 <main+0xff8>
   112ae:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <hand_X>
   112b2:	81 11       	cpse	r24, r1
   112b4:	c0 93 fd 11 	sts	0x11FD, r28	; 0x8011fd <err_3_flag>
   112b8:	ea 98       	cbi	0x1d, 2	; 29
   112ba:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   112be:	8d 7f       	andi	r24, 0xFD	; 253
   112c0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   112c4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   112c8:	8b 7f       	andi	r24, 0xFB	; 251
   112ca:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   112ce:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   112d2:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   112d6:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
   112da:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
   112de:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
   112e2:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
   112e6:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
   112ea:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
   112ee:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
   112f2:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
   112f6:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
   112fa:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
   112fe:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
   11302:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
   11306:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
   1130a:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
   1130e:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
   11312:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
   11316:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
   1131a:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
   1131e:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
   11322:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>
   11326:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <err_3_flag>
   1132a:	81 11       	cpse	r24, r1
   1132c:	1a c9       	rjmp	.-3532   	; 0x10562 <main+0x2a6>
   1132e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11332:	83 30       	cpi	r24, 0x03	; 3
   11334:	09 f4       	brne	.+2      	; 0x11338 <main+0x107c>
   11336:	da c0       	rjmp	.+436    	; 0x114ec <main+0x1230>
   11338:	88 f4       	brcc	.+34     	; 0x1135c <main+0x10a0>
   1133a:	81 30       	cpi	r24, 0x01	; 1
   1133c:	09 f4       	brne	.+2      	; 0x11340 <main+0x1084>
   1133e:	47 c0       	rjmp	.+142    	; 0x113ce <main+0x1112>
   11340:	82 30       	cpi	r24, 0x02	; 2
   11342:	09 f0       	breq	.+2      	; 0x11346 <main+0x108a>
   11344:	0e c9       	rjmp	.-3556   	; 0x10562 <main+0x2a6>
   11346:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Sub_Mode_Feed>
   1134a:	82 30       	cpi	r24, 0x02	; 2
   1134c:	09 f4       	brne	.+2      	; 0x11350 <main+0x1094>
   1134e:	51 c0       	rjmp	.+162    	; 0x113f2 <main+0x1136>
   11350:	83 30       	cpi	r24, 0x03	; 3
   11352:	09 f0       	breq	.+2      	; 0x11356 <main+0x109a>
   11354:	06 c9       	rjmp	.-3572   	; 0x10562 <main+0x2a6>
   11356:	0e 94 99 44 	call	0x8932	; 0x8932 <_Z14Feed_Ext_Frontv>
   1135a:	03 c9       	rjmp	.-3578   	; 0x10562 <main+0x2a6>
   1135c:	84 30       	cpi	r24, 0x04	; 4
   1135e:	09 f4       	brne	.+2      	; 0x11362 <main+0x10a6>
   11360:	cf c0       	rjmp	.+414    	; 0x11500 <main+0x1244>
   11362:	85 30       	cpi	r24, 0x05	; 5
   11364:	09 f0       	breq	.+2      	; 0x11368 <main+0x10ac>
   11366:	fd c8       	rjmp	.-3590   	; 0x10562 <main+0x2a6>
   11368:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   1136c:	81 11       	cpse	r24, r1
   1136e:	f9 c8       	rjmp	.-3598   	; 0x10562 <main+0x2a6>
   11370:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   11374:	81 11       	cpse	r24, r1
   11376:	f5 c8       	rjmp	.-3606   	; 0x10562 <main+0x2a6>
   11378:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   1137c:	81 11       	cpse	r24, r1
   1137e:	f1 c8       	rjmp	.-3614   	; 0x10562 <main+0x2a6>
   11380:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   11384:	84 ff       	sbrs	r24, 4
   11386:	f7 c0       	rjmp	.+494    	; 0x11576 <main+0x12ba>
   11388:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   1138c:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   11390:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   11394:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   11398:	28 17       	cp	r18, r24
   1139a:	39 07       	cpc	r19, r25
   1139c:	09 f0       	breq	.+2      	; 0x113a0 <main+0x10e4>
   1139e:	e1 c8       	rjmp	.-3646   	; 0x10562 <main+0x2a6>
   113a0:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   113a4:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   113a8:	81 11       	cpse	r24, r1
   113aa:	db c8       	rjmp	.-3658   	; 0x10562 <main+0x2a6>
   113ac:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   113b0:	83 fd       	sbrc	r24, 3
   113b2:	da c0       	rjmp	.+436    	; 0x11568 <main+0x12ac>
   113b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   113b8:	88 60       	ori	r24, 0x08	; 8
   113ba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   113be:	9f ef       	ldi	r25, 0xFF	; 255
   113c0:	ab ed       	ldi	r26, 0xDB	; 219
   113c2:	b5 e0       	ldi	r27, 0x05	; 5
   113c4:	91 50       	subi	r25, 0x01	; 1
   113c6:	a0 40       	sbci	r26, 0x00	; 0
   113c8:	b0 40       	sbci	r27, 0x00	; 0
   113ca:	e1 f7       	brne	.-8      	; 0x113c4 <main+0x1108>
   113cc:	cb c0       	rjmp	.+406    	; 0x11564 <main+0x12a8>
   113ce:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Sub_Mode_Thread>
   113d2:	82 30       	cpi	r24, 0x02	; 2
   113d4:	09 f0       	breq	.+2      	; 0x113d8 <main+0x111c>
   113d6:	c5 c8       	rjmp	.-3702   	; 0x10562 <main+0x2a6>
   113d8:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   113dc:	81 11       	cpse	r24, r1
   113de:	c1 c8       	rjmp	.-3710   	; 0x10562 <main+0x2a6>
   113e0:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   113e4:	81 11       	cpse	r24, r1
   113e6:	bd c8       	rjmp	.-3718   	; 0x10562 <main+0x2a6>
   113e8:	f0 99       	sbic	0x1e, 0	; 30
   113ea:	c7 c1       	rjmp	.+910    	; 0x1177a <main+0x14be>
   113ec:	0e 94 cd 10 	call	0x219a	; 0x219a <_Z12Thread_FrontRbS_.constprop.5>
   113f0:	b8 c8       	rjmp	.-3728   	; 0x10562 <main+0x2a6>
   113f2:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   113f6:	81 11       	cpse	r24, r1
   113f8:	b4 c8       	rjmp	.-3736   	; 0x10562 <main+0x2a6>
   113fa:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   113fe:	81 11       	cpse	r24, r1
   11400:	b0 c8       	rjmp	.-3744   	; 0x10562 <main+0x2a6>
   11402:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   11406:	81 11       	cpse	r24, r1
   11408:	ac c8       	rjmp	.-3752   	; 0x10562 <main+0x2a6>
   1140a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   1140e:	84 ff       	sbrs	r24, 4
   11410:	2a c0       	rjmp	.+84     	; 0x11466 <main+0x11aa>
   11412:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
   11416:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   1141a:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
   1141e:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
   11422:	28 17       	cp	r18, r24
   11424:	39 07       	cpc	r19, r25
   11426:	09 f0       	breq	.+2      	; 0x1142a <main+0x116e>
   11428:	9c c8       	rjmp	.-3784   	; 0x10562 <main+0x2a6>
   1142a:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   1142e:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   11432:	81 11       	cpse	r24, r1
   11434:	96 c8       	rjmp	.-3796   	; 0x10562 <main+0x2a6>
   11436:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   1143a:	83 fd       	sbrc	r24, 3
   1143c:	0e c0       	rjmp	.+28     	; 0x1145a <main+0x119e>
   1143e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11442:	88 60       	ori	r24, 0x08	; 8
   11444:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11448:	2f ef       	ldi	r18, 0xFF	; 255
   1144a:	4b ed       	ldi	r20, 0xDB	; 219
   1144c:	85 e0       	ldi	r24, 0x05	; 5
   1144e:	21 50       	subi	r18, 0x01	; 1
   11450:	40 40       	sbci	r20, 0x00	; 0
   11452:	80 40       	sbci	r24, 0x00	; 0
   11454:	e1 f7       	brne	.-8      	; 0x1144e <main+0x1192>
   11456:	00 c0       	rjmp	.+0      	; 0x11458 <main+0x119c>
   11458:	00 00       	nop
   1145a:	c0 93 31 12 	sts	0x1231, r28	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   1145e:	81 e0       	ldi	r24, 0x01	; 1
   11460:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
   11464:	7e c8       	rjmp	.-3844   	; 0x10562 <main+0x2a6>
   11466:	f6 99       	sbic	0x1e, 6	; 30
   11468:	7c c8       	rjmp	.-3848   	; 0x10562 <main+0x2a6>
   1146a:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   1146e:	81 11       	cpse	r24, r1
   11470:	78 c8       	rjmp	.-3856   	; 0x10562 <main+0x2a6>
   11472:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   11476:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   1147a:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   1147e:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11482:	28 1b       	sub	r18, r24
   11484:	39 0b       	sbc	r19, r25
   11486:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   1148a:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   1148e:	24 9f       	mul	r18, r20
   11490:	c0 01       	movw	r24, r0
   11492:	25 9f       	mul	r18, r21
   11494:	90 0d       	add	r25, r0
   11496:	34 9f       	mul	r19, r20
   11498:	90 0d       	add	r25, r0
   1149a:	11 24       	eor	r1, r1
   1149c:	88 0f       	add	r24, r24
   1149e:	99 1f       	adc	r25, r25
   114a0:	09 2e       	mov	r0, r25
   114a2:	00 0c       	add	r0, r0
   114a4:	aa 0b       	sbc	r26, r26
   114a6:	bb 0b       	sbc	r27, r27
   114a8:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
   114ac:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
   114b0:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
   114b4:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
   114b8:	4a 01       	movw	r8, r20
   114ba:	5b 01       	movw	r10, r22
   114bc:	88 1a       	sub	r8, r24
   114be:	99 0a       	sbc	r9, r25
   114c0:	aa 0a       	sbc	r10, r26
   114c2:	bb 0a       	sbc	r11, r27
   114c4:	d5 01       	movw	r26, r10
   114c6:	c4 01       	movw	r24, r8
   114c8:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   114cc:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   114d0:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   114d4:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   114d8:	48 17       	cp	r20, r24
   114da:	59 07       	cpc	r21, r25
   114dc:	6a 07       	cpc	r22, r26
   114de:	7b 07       	cpc	r23, r27
   114e0:	0c f0       	brlt	.+2      	; 0x114e4 <main+0x1228>
   114e2:	3f c8       	rjmp	.-3970   	; 0x10562 <main+0x2a6>
   114e4:	82 e0       	ldi	r24, 0x02	; 2
   114e6:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_Z14NEW_Feed_FrontRbS_h.constprop.22>
   114ea:	3b c8       	rjmp	.-3978   	; 0x10562 <main+0x2a6>
   114ec:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Sub_Mode_aFeed>
   114f0:	82 30       	cpi	r24, 0x02	; 2
   114f2:	31 f0       	breq	.+12     	; 0x11500 <main+0x1244>
   114f4:	83 30       	cpi	r24, 0x03	; 3
   114f6:	09 f0       	breq	.+2      	; 0x114fa <main+0x123e>
   114f8:	34 c8       	rjmp	.-3992   	; 0x10562 <main+0x2a6>
   114fa:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <_Z19NEW_aFeed_Ext_Frontv>
   114fe:	31 c8       	rjmp	.-3998   	; 0x10562 <main+0x2a6>
   11500:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   11504:	81 11       	cpse	r24, r1
   11506:	2d c8       	rjmp	.-4006   	; 0x10562 <main+0x2a6>
   11508:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   1150c:	81 11       	cpse	r24, r1
   1150e:	29 c8       	rjmp	.-4014   	; 0x10562 <main+0x2a6>
   11510:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   11514:	81 11       	cpse	r24, r1
   11516:	25 c8       	rjmp	.-4022   	; 0x10562 <main+0x2a6>
   11518:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   1151c:	84 ff       	sbrs	r24, 4
   1151e:	2b c0       	rjmp	.+86     	; 0x11576 <main+0x12ba>
   11520:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   11524:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   11528:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   1152c:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   11530:	28 17       	cp	r18, r24
   11532:	39 07       	cpc	r19, r25
   11534:	09 f0       	breq	.+2      	; 0x11538 <main+0x127c>
   11536:	15 c8       	rjmp	.-4054   	; 0x10562 <main+0x2a6>
   11538:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   1153c:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   11540:	81 11       	cpse	r24, r1
   11542:	0f c8       	rjmp	.-4066   	; 0x10562 <main+0x2a6>
   11544:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   11548:	83 fd       	sbrc	r24, 3
   1154a:	0e c0       	rjmp	.+28     	; 0x11568 <main+0x12ac>
   1154c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11550:	88 60       	ori	r24, 0x08	; 8
   11552:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11556:	2f ef       	ldi	r18, 0xFF	; 255
   11558:	4b ed       	ldi	r20, 0xDB	; 219
   1155a:	85 e0       	ldi	r24, 0x05	; 5
   1155c:	21 50       	subi	r18, 0x01	; 1
   1155e:	40 40       	sbci	r20, 0x00	; 0
   11560:	80 40       	sbci	r24, 0x00	; 0
   11562:	e1 f7       	brne	.-8      	; 0x1155c <main+0x12a0>
   11564:	00 c0       	rjmp	.+0      	; 0x11566 <main+0x12aa>
   11566:	00 00       	nop
   11568:	c0 93 31 12 	sts	0x1231, r28	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   1156c:	81 e0       	ldi	r24, 0x01	; 1
   1156e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
   11572:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11576:	f6 9b       	sbis	0x1e, 6	; 30
   11578:	02 c0       	rjmp	.+4      	; 0x1157e <main+0x12c2>
   1157a:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1157e:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   11582:	81 11       	cpse	r24, r1
   11584:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11588:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   1158c:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   11590:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   11594:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11598:	28 1b       	sub	r18, r24
   1159a:	39 0b       	sbc	r19, r25
   1159c:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   115a0:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   115a4:	24 9f       	mul	r18, r20
   115a6:	c0 01       	movw	r24, r0
   115a8:	25 9f       	mul	r18, r21
   115aa:	90 0d       	add	r25, r0
   115ac:	34 9f       	mul	r19, r20
   115ae:	90 0d       	add	r25, r0
   115b0:	11 24       	eor	r1, r1
   115b2:	88 0f       	add	r24, r24
   115b4:	99 1f       	adc	r25, r25
   115b6:	09 2e       	mov	r0, r25
   115b8:	00 0c       	add	r0, r0
   115ba:	aa 0b       	sbc	r26, r26
   115bc:	bb 0b       	sbc	r27, r27
   115be:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
   115c2:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
   115c6:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
   115ca:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
   115ce:	4a 01       	movw	r8, r20
   115d0:	5b 01       	movw	r10, r22
   115d2:	88 1a       	sub	r8, r24
   115d4:	99 0a       	sbc	r9, r25
   115d6:	aa 0a       	sbc	r10, r26
   115d8:	bb 0a       	sbc	r11, r27
   115da:	d5 01       	movw	r26, r10
   115dc:	c4 01       	movw	r24, r8
   115de:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   115e2:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   115e6:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   115ea:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   115ee:	48 17       	cp	r20, r24
   115f0:	59 07       	cpc	r21, r25
   115f2:	6a 07       	cpc	r22, r26
   115f4:	7b 07       	cpc	r23, r27
   115f6:	14 f0       	brlt	.+4      	; 0x115fc <main+0x1340>
   115f8:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   115fc:	82 e0       	ldi	r24, 0x02	; 2
   115fe:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_Z15NEW_aFeed_FrontRbS_h.constprop.1>
   11602:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11606:	c0 93 db 11 	sts	0x11DB, r28	; 0x8011db <flag_j>
   1160a:	80 91 01 12 	lds	r24, 0x1201	; 0x801201 <hand_Z>
   1160e:	81 11       	cpse	r24, r1
   11610:	03 c0       	rjmp	.+6      	; 0x11618 <main+0x135c>
   11612:	80 91 00 12 	lds	r24, 0x1200	; 0x801200 <hand_X>
   11616:	81 11       	cpse	r24, r1
   11618:	c0 93 fd 11 	sts	0x11FD, r28	; 0x8011fd <err_3_flag>
   1161c:	ea 98       	cbi	0x1d, 2	; 29
   1161e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   11622:	8d 7f       	andi	r24, 0xFD	; 253
   11624:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   11628:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   1162c:	8b 7f       	andi	r24, 0xFB	; 251
   1162e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   11632:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   11636:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   1163a:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
   1163e:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
   11642:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
   11646:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
   1164a:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
   1164e:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
   11652:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
   11656:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
   1165a:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
   1165e:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
   11662:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
   11666:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
   1166a:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
   1166e:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
   11672:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
   11676:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
   1167a:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
   1167e:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
   11682:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
   11686:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>
   1168a:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <err_3_flag>
   1168e:	81 11       	cpse	r24, r1
   11690:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11694:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11698:	83 30       	cpi	r24, 0x03	; 3
   1169a:	09 f4       	brne	.+2      	; 0x1169e <main+0x13e2>
   1169c:	f6 c0       	rjmp	.+492    	; 0x1188a <main+0x15ce>
   1169e:	a0 f4       	brcc	.+40     	; 0x116c8 <main+0x140c>
   116a0:	81 30       	cpi	r24, 0x01	; 1
   116a2:	09 f4       	brne	.+2      	; 0x116a6 <main+0x13ea>
   116a4:	58 c0       	rjmp	.+176    	; 0x11756 <main+0x149a>
   116a6:	82 30       	cpi	r24, 0x02	; 2
   116a8:	11 f0       	breq	.+4      	; 0x116ae <main+0x13f2>
   116aa:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116ae:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Sub_Mode_Feed>
   116b2:	82 30       	cpi	r24, 0x02	; 2
   116b4:	09 f4       	brne	.+2      	; 0x116b8 <main+0x13fc>
   116b6:	65 c0       	rjmp	.+202    	; 0x11782 <main+0x14c6>
   116b8:	83 30       	cpi	r24, 0x03	; 3
   116ba:	11 f0       	breq	.+4      	; 0x116c0 <main+0x1404>
   116bc:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116c0:	0e 94 cc 42 	call	0x8598	; 0x8598 <_Z13Feed_Ext_Rearv>
   116c4:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116c8:	84 30       	cpi	r24, 0x04	; 4
   116ca:	09 f4       	brne	.+2      	; 0x116ce <main+0x1412>
   116cc:	2f c1       	rjmp	.+606    	; 0x1192c <main+0x1670>
   116ce:	85 30       	cpi	r24, 0x05	; 5
   116d0:	11 f0       	breq	.+4      	; 0x116d6 <main+0x141a>
   116d2:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116d6:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   116da:	81 11       	cpse	r24, r1
   116dc:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116e0:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   116e4:	81 11       	cpse	r24, r1
   116e6:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116ea:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   116ee:	81 11       	cpse	r24, r1
   116f0:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   116f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   116f8:	84 ff       	sbrs	r24, 4
   116fa:	d4 c0       	rjmp	.+424    	; 0x118a4 <main+0x15e8>
   116fc:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   11700:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   11704:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   11708:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   1170c:	28 17       	cp	r18, r24
   1170e:	39 07       	cpc	r19, r25
   11710:	11 f0       	breq	.+4      	; 0x11716 <main+0x145a>
   11712:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11716:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   1171a:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   1171e:	81 11       	cpse	r24, r1
   11720:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11724:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   11728:	83 fd       	sbrc	r24, 3
   1172a:	0e c0       	rjmp	.+28     	; 0x11748 <main+0x148c>
   1172c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11730:	88 60       	ori	r24, 0x08	; 8
   11732:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11736:	9f ef       	ldi	r25, 0xFF	; 255
   11738:	ab ed       	ldi	r26, 0xDB	; 219
   1173a:	b5 e0       	ldi	r27, 0x05	; 5
   1173c:	91 50       	subi	r25, 0x01	; 1
   1173e:	a0 40       	sbci	r26, 0x00	; 0
   11740:	b0 40       	sbci	r27, 0x00	; 0
   11742:	e1 f7       	brne	.-8      	; 0x1173c <main+0x1480>
   11744:	00 c0       	rjmp	.+0      	; 0x11746 <main+0x148a>
   11746:	00 00       	nop
   11748:	c0 93 31 12 	sts	0x1231, r28	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   1174c:	81 e0       	ldi	r24, 0x01	; 1
   1174e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
   11752:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11756:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Sub_Mode_Thread>
   1175a:	82 30       	cpi	r24, 0x02	; 2
   1175c:	11 f0       	breq	.+4      	; 0x11762 <main+0x14a6>
   1175e:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11762:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   11766:	81 11       	cpse	r24, r1
   11768:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1176c:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   11770:	81 11       	cpse	r24, r1
   11772:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11776:	f0 99       	sbic	0x1e, 0	; 30
   11778:	39 ce       	rjmp	.-910    	; 0x113ec <main+0x1130>
   1177a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_Z11Thread_RearRbS_.constprop.4>
   1177e:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11782:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   11786:	81 11       	cpse	r24, r1
   11788:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1178c:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   11790:	81 11       	cpse	r24, r1
   11792:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11796:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   1179a:	81 11       	cpse	r24, r1
   1179c:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   117a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   117a4:	84 ff       	sbrs	r24, 4
   117a6:	2d c0       	rjmp	.+90     	; 0x11802 <main+0x1546>
   117a8:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
   117ac:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
   117b0:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <max_OCR5A>
   117b4:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <max_OCR5A+0x1>
   117b8:	28 17       	cp	r18, r24
   117ba:	39 07       	cpc	r19, r25
   117bc:	11 f0       	breq	.+4      	; 0x117c2 <main+0x1506>
   117be:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   117c2:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   117c6:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   117ca:	81 11       	cpse	r24, r1
   117cc:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   117d0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   117d4:	83 fd       	sbrc	r24, 3
   117d6:	0e c0       	rjmp	.+28     	; 0x117f4 <main+0x1538>
   117d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   117dc:	88 60       	ori	r24, 0x08	; 8
   117de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   117e2:	2f ef       	ldi	r18, 0xFF	; 255
   117e4:	4b ed       	ldi	r20, 0xDB	; 219
   117e6:	85 e0       	ldi	r24, 0x05	; 5
   117e8:	21 50       	subi	r18, 0x01	; 1
   117ea:	40 40       	sbci	r20, 0x00	; 0
   117ec:	80 40       	sbci	r24, 0x00	; 0
   117ee:	e1 f7       	brne	.-8      	; 0x117e8 <main+0x152c>
   117f0:	00 c0       	rjmp	.+0      	; 0x117f2 <main+0x1536>
   117f2:	00 00       	nop
   117f4:	c0 93 31 12 	sts	0x1231, r28	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   117f8:	81 e0       	ldi	r24, 0x01	; 1
   117fa:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
   117fe:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11802:	f6 9b       	sbis	0x1e, 6	; 30
   11804:	02 c0       	rjmp	.+4      	; 0x1180a <main+0x154e>
   11806:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1180a:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   1180e:	81 11       	cpse	r24, r1
   11810:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11814:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   11818:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   1181c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   11820:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11824:	28 1b       	sub	r18, r24
   11826:	39 0b       	sbc	r19, r25
   11828:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   1182c:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   11830:	24 9f       	mul	r18, r20
   11832:	c0 01       	movw	r24, r0
   11834:	25 9f       	mul	r18, r21
   11836:	90 0d       	add	r25, r0
   11838:	34 9f       	mul	r19, r20
   1183a:	90 0d       	add	r25, r0
   1183c:	11 24       	eor	r1, r1
   1183e:	88 0f       	add	r24, r24
   11840:	99 1f       	adc	r25, r25
   11842:	09 2e       	mov	r0, r25
   11844:	00 0c       	add	r0, r0
   11846:	aa 0b       	sbc	r26, r26
   11848:	bb 0b       	sbc	r27, r27
   1184a:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
   1184e:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
   11852:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
   11856:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
   1185a:	84 0f       	add	r24, r20
   1185c:	95 1f       	adc	r25, r21
   1185e:	a6 1f       	adc	r26, r22
   11860:	b7 1f       	adc	r27, r23
   11862:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   11866:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   1186a:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   1186e:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   11872:	84 17       	cp	r24, r20
   11874:	95 07       	cpc	r25, r21
   11876:	a6 07       	cpc	r26, r22
   11878:	b7 07       	cpc	r27, r23
   1187a:	14 f0       	brlt	.+4      	; 0x11880 <main+0x15c4>
   1187c:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11880:	82 e0       	ldi	r24, 0x02	; 2
   11882:	0e 94 8a 1a 	call	0x3514	; 0x3514 <_Z13NEW_Feed_RearRbS_h.constprop.21>
   11886:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1188a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Sub_Mode_aFeed>
   1188e:	82 30       	cpi	r24, 0x02	; 2
   11890:	09 f4       	brne	.+2      	; 0x11894 <main+0x15d8>
   11892:	21 cf       	rjmp	.-446    	; 0x116d6 <main+0x141a>
   11894:	83 30       	cpi	r24, 0x03	; 3
   11896:	11 f0       	breq	.+4      	; 0x1189c <main+0x15e0>
   11898:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1189c:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <_Z18NEW_aFeed_Ext_Rearv>
   118a0:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   118a4:	f6 9b       	sbis	0x1e, 6	; 30
   118a6:	02 c0       	rjmp	.+4      	; 0x118ac <main+0x15f0>
   118a8:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   118ac:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <X_NEED_RUN_FEED_FLAG>
   118b0:	81 11       	cpse	r24, r1
   118b2:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   118b6:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   118ba:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   118be:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   118c2:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   118c6:	28 1b       	sub	r18, r24
   118c8:	39 0b       	sbc	r19, r25
   118ca:	40 91 fa 09 	lds	r20, 0x09FA	; 0x8009fa <REPEAt>
   118ce:	50 91 fb 09 	lds	r21, 0x09FB	; 0x8009fb <REPEAt+0x1>
   118d2:	24 9f       	mul	r18, r20
   118d4:	c0 01       	movw	r24, r0
   118d6:	25 9f       	mul	r18, r21
   118d8:	90 0d       	add	r25, r0
   118da:	34 9f       	mul	r19, r20
   118dc:	90 0d       	add	r25, r0
   118de:	11 24       	eor	r1, r1
   118e0:	88 0f       	add	r24, r24
   118e2:	99 1f       	adc	r25, r25
   118e4:	09 2e       	mov	r0, r25
   118e6:	00 0c       	add	r0, r0
   118e8:	aa 0b       	sbc	r26, r26
   118ea:	bb 0b       	sbc	r27, r27
   118ec:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
   118f0:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
   118f4:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
   118f8:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
   118fc:	84 0f       	add	r24, r20
   118fe:	95 1f       	adc	r25, r21
   11900:	a6 1f       	adc	r26, r22
   11902:	b7 1f       	adc	r27, r23
   11904:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   11908:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   1190c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   11910:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   11914:	84 17       	cp	r24, r20
   11916:	95 07       	cpc	r25, r21
   11918:	a6 07       	cpc	r26, r22
   1191a:	b7 07       	cpc	r27, r23
   1191c:	14 f0       	brlt	.+4      	; 0x11922 <main+0x1666>
   1191e:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11922:	82 e0       	ldi	r24, 0x02	; 2
   11924:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_Z14NEW_aFeed_RearRbS_h.constprop.0>
   11928:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1192c:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <err_1_flag>
   11930:	81 11       	cpse	r24, r1
   11932:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11936:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <err_2_flag>
   1193a:	81 11       	cpse	r24, r1
   1193c:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   11940:	80 91 36 12 	lds	r24, 0x1236	; 0x801236 <SpeedMode>
   11944:	81 11       	cpse	r24, r1
   11946:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1194a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   1194e:	84 ff       	sbrs	r24, 4
   11950:	a9 cf       	rjmp	.-174    	; 0x118a4 <main+0x15e8>
   11952:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
   11956:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
   1195a:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <max_OCR4A>
   1195e:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <max_OCR4A+0x1>
   11962:	28 17       	cp	r18, r24
   11964:	39 07       	cpc	r19, r25
   11966:	11 f0       	breq	.+4      	; 0x1196c <main+0x16b0>
   11968:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1196c:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <X_NEED_RUN_RAPID_FLAG>
   11970:	80 91 29 12 	lds	r24, 0x1229	; 0x801229 <X_WORKING_RAPID_FLAG>
   11974:	81 11       	cpse	r24, r1
   11976:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   1197a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
   1197e:	83 fd       	sbrc	r24, 3
   11980:	e3 ce       	rjmp	.-570    	; 0x11748 <main+0x148c>
   11982:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   11986:	88 60       	ori	r24, 0x08	; 8
   11988:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   1198c:	2f ef       	ldi	r18, 0xFF	; 255
   1198e:	4b ed       	ldi	r20, 0xDB	; 219
   11990:	85 e0       	ldi	r24, 0x05	; 5
   11992:	21 50       	subi	r18, 0x01	; 1
   11994:	40 40       	sbci	r20, 0x00	; 0
   11996:	80 40       	sbci	r24, 0x00	; 0
   11998:	e1 f7       	brne	.-8      	; 0x11992 <main+0x16d6>
   1199a:	d4 ce       	rjmp	.-600    	; 0x11744 <main+0x1488>
   1199c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <Sub_Mode_Thread>
   119a0:	82 30       	cpi	r24, 0x02	; 2
   119a2:	11 f4       	brne	.+4      	; 0x119a8 <main+0x16ec>
   119a4:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   119a8:	ea 98       	cbi	0x1d, 2	; 29
   119aa:	0c 94 b1 82 	jmp	0x10562	; 0x10562 <main+0x2a6>
   119ae:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Sub_Mode_Feed>
   119b2:	f6 cf       	rjmp	.-20     	; 0x119a0 <main+0x16e4>
   119b4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Sub_Mode_aFeed>
   119b8:	f3 cf       	rjmp	.-26     	; 0x119a0 <main+0x16e4>
   119ba:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Sub_Mode_Cone>
   119be:	f0 cf       	rjmp	.-32     	; 0x119a0 <main+0x16e4>
   119c0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Sub_Mode_Sphere>
   119c4:	ed cf       	rjmp	.-38     	; 0x119a0 <main+0x16e4>
   119c6:	1b 3f       	cpi	r17, 0xFB	; 251
   119c8:	09 f4       	brne	.+2      	; 0x119cc <main+0x1710>
   119ca:	94 c0       	rjmp	.+296    	; 0x11af4 <main+0x1838>
   119cc:	70 f5       	brcc	.+92     	; 0x11a2a <main+0x176e>
   119ce:	17 3f       	cpi	r17, 0xF7	; 247
   119d0:	09 f4       	brne	.+2      	; 0x119d4 <main+0x1718>
   119d2:	8b c0       	rjmp	.+278    	; 0x11aea <main+0x182e>
   119d4:	10 93 0e 12 	sts	0x120E, r17	; 0x80120e <Mode_Old>
   119d8:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   119dc:	10 7e       	andi	r17, 0xE0	; 224
   119de:	80 91 0d 12 	lds	r24, 0x120D	; 0x80120d <Submode_Old>
   119e2:	18 17       	cp	r17, r24
   119e4:	09 f4       	brne	.+2      	; 0x119e8 <main+0x172c>
   119e6:	b7 c0       	rjmp	.+366    	; 0x11b56 <main+0x189a>
   119e8:	10 3a       	cpi	r17, 0xA0	; 160
   119ea:	09 f4       	brne	.+2      	; 0x119ee <main+0x1732>
   119ec:	d2 c1       	rjmp	.+932    	; 0x11d92 <main+0x1ad6>
   119ee:	10 3c       	cpi	r17, 0xC0	; 192
   119f0:	09 f4       	brne	.+2      	; 0x119f4 <main+0x1738>
   119f2:	a6 c0       	rjmp	.+332    	; 0x11b40 <main+0x1884>
   119f4:	10 36       	cpi	r17, 0x60	; 96
   119f6:	09 f0       	breq	.+2      	; 0x119fa <main+0x173e>
   119f8:	ac c0       	rjmp	.+344    	; 0x11b52 <main+0x1896>
   119fa:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   119fe:	81 30       	cpi	r24, 0x01	; 1
   11a00:	08 f4       	brcc	.+2      	; 0x11a04 <main+0x1748>
   11a02:	a7 c0       	rjmp	.+334    	; 0x11b52 <main+0x1896>
   11a04:	86 30       	cpi	r24, 0x06	; 6
   11a06:	08 f4       	brcc	.+2      	; 0x11a0a <main+0x174e>
   11a08:	a9 c1       	rjmp	.+850    	; 0x11d5c <main+0x1aa0>
   11a0a:	87 30       	cpi	r24, 0x07	; 7
   11a0c:	09 f0       	breq	.+2      	; 0x11a10 <main+0x1754>
   11a0e:	a1 c0       	rjmp	.+322    	; 0x11b52 <main+0x1896>
   11a10:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <limit_Right_flag>
   11a14:	88 23       	and	r24, r24
   11a16:	09 f4       	brne	.+2      	; 0x11a1a <main+0x175e>
   11a18:	9e c1       	rjmp	.+828    	; 0x11d56 <main+0x1a9a>
   11a1a:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <limit_Rear_flag>
   11a1e:	88 23       	and	r24, r24
   11a20:	09 f4       	brne	.+2      	; 0x11a24 <main+0x1768>
   11a22:	99 c1       	rjmp	.+818    	; 0x11d56 <main+0x1a9a>
   11a24:	00 93 1c 02 	sts	0x021C, r16	; 0x80021c <Sub_Mode_Sphere>
   11a28:	5c c1       	rjmp	.+696    	; 0x11ce2 <main+0x1a26>
   11a2a:	1d 3f       	cpi	r17, 0xFD	; 253
   11a2c:	09 f4       	brne	.+2      	; 0x11a30 <main+0x1774>
   11a2e:	7b c0       	rjmp	.+246    	; 0x11b26 <main+0x186a>
   11a30:	1e 3f       	cpi	r17, 0xFE	; 254
   11a32:	81 f6       	brne	.-96     	; 0x119d4 <main+0x1718>
   11a34:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11a38:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11a3c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11a40:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11a44:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a48:	8d 7f       	andi	r24, 0xFD	; 253
   11a4a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a4e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a52:	8b 7f       	andi	r24, 0xFB	; 251
   11a54:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a58:	e9 9a       	sbi	0x1d, 1	; 29
   11a5a:	e8 9a       	sbi	0x1d, 0	; 29
   11a5c:	88 e0       	ldi	r24, 0x08	; 8
   11a5e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <Mode>
   11a62:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z16Reset_Step_rapidv>
   11a66:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z18Reset_Ks_Km_Repeatv>
   11a6a:	0c 94 ef 82 	jmp	0x105de	; 0x105de <main+0x322>
   11a6e:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11a72:	e8 98       	cbi	0x1d, 0	; 29
   11a74:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11a78:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11a7c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11a80:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a84:	8b 7f       	andi	r24, 0xFB	; 251
   11a86:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a8a:	e9 98       	cbi	0x1d, 1	; 29
   11a8c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
   11a90:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
   11a94:	da bb       	out	0x1a, r29	; 26
   11a96:	d0 93 73 00 	sts	0x0073, r29	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11a9a:	d0 93 2b 02 	sts	0x022B, r29	; 0x80022b <Mode>
   11a9e:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z16Reset_Step_rapidv>
   11aa2:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z18Reset_Ks_Km_Repeatv>
   11aa6:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
   11aaa:	10 92 de 11 	sts	0x11DE, r1	; 0x8011de <Ap+0x1>
   11aae:	10 92 dd 11 	sts	0x11DD, r1	; 0x8011dd <Ap>
   11ab2:	0c 94 ed 82 	jmp	0x105da	; 0x105da <main+0x31e>
   11ab6:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11aba:	00 93 2b 02 	sts	0x022B, r16	; 0x80022b <Mode>
   11abe:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z16Reset_Step_rapidv>
   11ac2:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
   11ac6:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <Enc_Pos+0x1>
   11aca:	10 92 e3 11 	sts	0x11E3, r1	; 0x8011e3 <Enc_Pos>
   11ace:	ed cf       	rjmp	.-38     	; 0x11aaa <main+0x17ee>
   11ad0:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11ad4:	30 92 2b 02 	sts	0x022B, r3	; 0x80022b <Mode>
   11ad8:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z16Reset_Step_rapidv>
   11adc:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z18Reset_Ks_Km_Repeatv>
   11ae0:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
   11ae4:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <Cone_qStep>
   11ae8:	e0 cf       	rjmp	.-64     	; 0x11aaa <main+0x17ee>
   11aea:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11aee:	20 92 2b 02 	sts	0x022B, r2	; 0x80022b <Mode>
   11af2:	f2 cf       	rjmp	.-28     	; 0x11ad8 <main+0x181c>
   11af4:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11af8:	46 e0       	ldi	r20, 0x06	; 6
   11afa:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <Mode>
   11afe:	e8 98       	cbi	0x1d, 0	; 29
   11b00:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11b04:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11b08:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
   11b0c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11b10:	8d 7f       	andi	r24, 0xFD	; 253
   11b12:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11b16:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11b1a:	8b 7f       	andi	r24, 0xFB	; 251
   11b1c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
   11b20:	e9 9a       	sbi	0x1d, 1	; 29
   11b22:	0c 94 ed 82 	jmp	0x105da	; 0x105da <main+0x31e>
   11b26:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   11b2a:	87 e0       	ldi	r24, 0x07	; 7
   11b2c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <Mode>
   11b30:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z16Reset_Step_rapidv>
   11b34:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z18Reset_Ks_Km_Repeatv>
   11b38:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <Pass_Total>
   11b3c:	0c 94 ed 82 	jmp	0x105da	; 0x105da <main+0x31e>
   11b40:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11b44:	81 30       	cpi	r24, 0x01	; 1
   11b46:	28 f0       	brcs	.+10     	; 0x11b52 <main+0x1896>
   11b48:	86 30       	cpi	r24, 0x06	; 6
   11b4a:	a8 f1       	brcs	.+106    	; 0x11bb6 <main+0x18fa>
   11b4c:	87 30       	cpi	r24, 0x07	; 7
   11b4e:	09 f4       	brne	.+2      	; 0x11b52 <main+0x1896>
   11b50:	bd c0       	rjmp	.+378    	; 0x11ccc <main+0x1a10>
   11b52:	10 93 0d 12 	sts	0x120D, r17	; 0x80120d <Submode_Old>
   11b56:	1f b1       	in	r17, 0x0f	; 15
   11b58:	10 71       	andi	r17, 0x10	; 16
   11b5a:	80 91 0c 12 	lds	r24, 0x120C	; 0x80120c <Button_Sel_Old>
   11b5e:	18 13       	cpse	r17, r24
   11b60:	16 c0       	rjmp	.+44     	; 0x11b8e <main+0x18d2>
   11b62:	7c 99       	sbic	0x0f, 4	; 15
   11b64:	44 c1       	rjmp	.+648    	; 0x11dee <main+0x1b32>
   11b66:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <key_sel_flag>
   11b6a:	81 11       	cpse	r24, r1
   11b6c:	10 c0       	rjmp	.+32     	; 0x11b8e <main+0x18d2>
   11b6e:	f2 99       	sbic	0x1e, 2	; 30
   11b70:	0a c0       	rjmp	.+20     	; 0x11b86 <main+0x18ca>
   11b72:	f5 99       	sbic	0x1e, 5	; 30
   11b74:	08 c0       	rjmp	.+16     	; 0x11b86 <main+0x18ca>
   11b76:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11b7a:	87 30       	cpi	r24, 0x07	; 7
   11b7c:	09 f4       	brne	.+2      	; 0x11b80 <main+0x18c4>
   11b7e:	34 c1       	rjmp	.+616    	; 0x11de8 <main+0x1b2c>
   11b80:	88 30       	cpi	r24, 0x08	; 8
   11b82:	09 f4       	brne	.+2      	; 0x11b86 <main+0x18ca>
   11b84:	2b c1       	rjmp	.+598    	; 0x11ddc <main+0x1b20>
   11b86:	c0 93 0b 12 	sts	0x120B, r28	; 0x80120b <key_sel_flag>
   11b8a:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
   11b8e:	10 93 0c 12 	sts	0x120C, r17	; 0x80120c <Button_Sel_Old>
   11b92:	1f b1       	in	r17, 0x0f	; 15
   11b94:	1f 70       	andi	r17, 0x0F	; 15
   11b96:	80 91 0a 12 	lds	r24, 0x120A	; 0x80120a <Button_Old>
   11b9a:	18 17       	cp	r17, r24
   11b9c:	09 f4       	brne	.+2      	; 0x11ba0 <main+0x18e4>
   11b9e:	5e c1       	rjmp	.+700    	; 0x11e5c <main+0x1ba0>
   11ba0:	1b 30       	cpi	r17, 0x0B	; 11
   11ba2:	09 f4       	brne	.+2      	; 0x11ba6 <main+0x18ea>
   11ba4:	4d c1       	rjmp	.+666    	; 0x11e40 <main+0x1b84>
   11ba6:	08 f0       	brcs	.+2      	; 0x11baa <main+0x18ee>
   11ba8:	25 c1       	rjmp	.+586    	; 0x11df4 <main+0x1b38>
   11baa:	17 30       	cpi	r17, 0x07	; 7
   11bac:	09 f4       	brne	.+2      	; 0x11bb0 <main+0x18f4>
   11bae:	2e c1       	rjmp	.+604    	; 0x11e0c <main+0x1b50>
   11bb0:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
   11bb4:	31 c1       	rjmp	.+610    	; 0x11e18 <main+0x1b5c>
   11bb6:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <limit_Left_flag>
   11bba:	88 23       	and	r24, r24
   11bbc:	21 f0       	breq	.+8      	; 0x11bc6 <main+0x190a>
   11bbe:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <limit_Right_flag>
   11bc2:	81 11       	cpse	r24, r1
   11bc4:	0a c0       	rjmp	.+20     	; 0x11bda <main+0x191e>
   11bc6:	80 91 e7 11 	lds	r24, 0x11E7	; 0x8011e7 <limit_Front_flag>
   11bca:	88 23       	and	r24, r24
   11bcc:	09 f4       	brne	.+2      	; 0x11bd0 <main+0x1914>
   11bce:	71 c0       	rjmp	.+226    	; 0x11cb2 <main+0x19f6>
   11bd0:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <limit_Rear_flag>
   11bd4:	88 23       	and	r24, r24
   11bd6:	09 f4       	brne	.+2      	; 0x11bda <main+0x191e>
   11bd8:	6c c0       	rjmp	.+216    	; 0x11cb2 <main+0x19f6>
   11bda:	c0 93 be 04 	sts	0x04BE, r28	; 0x8004be <Sub_Mode_Thread>
   11bde:	c0 93 1f 02 	sts	0x021F, r28	; 0x80021f <Sub_Mode_Feed>
   11be2:	c0 93 1e 02 	sts	0x021E, r28	; 0x80021e <Sub_Mode_aFeed>
   11be6:	c0 93 1d 02 	sts	0x021D, r28	; 0x80021d <Sub_Mode_Cone>
   11bea:	10 92 e2 11 	sts	0x11E2, r1	; 0x8011e2 <err_1_flag>
   11bee:	f3 98       	cbi	0x1e, 3	; 30
   11bf0:	f6 98       	cbi	0x1e, 6	; 30
   11bf2:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
   11bf6:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
   11bfa:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   11bfe:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
   11c02:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
   11c06:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   11c0a:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
   11c0e:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   11c12:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   11c16:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   11c1a:	40 91 c3 04 	lds	r20, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   11c1e:	50 91 c4 04 	lds	r21, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   11c22:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   11c26:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   11c2a:	84 17       	cp	r24, r20
   11c2c:	95 07       	cpc	r25, r21
   11c2e:	a6 07       	cpc	r26, r22
   11c30:	b7 07       	cpc	r27, r23
   11c32:	79 f1       	breq	.+94     	; 0x11c92 <main+0x19d6>
   11c34:	40 91 f6 09 	lds	r20, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
   11c38:	50 91 f7 09 	lds	r21, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
   11c3c:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
   11c40:	70 91 f9 09 	lds	r23, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
   11c44:	84 17       	cp	r24, r20
   11c46:	95 07       	cpc	r25, r21
   11c48:	a6 07       	cpc	r26, r22
   11c4a:	b7 07       	cpc	r27, r23
   11c4c:	11 f1       	breq	.+68     	; 0x11c92 <main+0x19d6>
   11c4e:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
   11c52:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   11c56:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   11c5a:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   11c5e:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
   11c62:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
   11c66:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
   11c6a:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
   11c6e:	84 17       	cp	r24, r20
   11c70:	95 07       	cpc	r25, r21
   11c72:	a6 07       	cpc	r26, r22
   11c74:	b7 07       	cpc	r27, r23
   11c76:	69 f0       	breq	.+26     	; 0x11c92 <main+0x19d6>
   11c78:	40 91 bf 04 	lds	r20, 0x04BF	; 0x8004bf <Limit_Pos_Front>
   11c7c:	50 91 c0 04 	lds	r21, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
   11c80:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
   11c84:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
   11c88:	84 17       	cp	r24, r20
   11c8a:	95 07       	cpc	r25, r21
   11c8c:	a6 07       	cpc	r26, r22
   11c8e:	b7 07       	cpc	r27, r23
   11c90:	29 f4       	brne	.+10     	; 0x11c9c <main+0x19e0>
   11c92:	10 92 e1 11 	sts	0x11E1, r1	; 0x8011e1 <err_2_flag>
   11c96:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
   11c9a:	5b cf       	rjmp	.-330    	; 0x11b52 <main+0x1896>
   11c9c:	d0 93 be 04 	sts	0x04BE, r29	; 0x8004be <Sub_Mode_Thread>
   11ca0:	d0 93 1f 02 	sts	0x021F, r29	; 0x80021f <Sub_Mode_Feed>
   11ca4:	d0 93 1e 02 	sts	0x021E, r29	; 0x80021e <Sub_Mode_aFeed>
   11ca8:	d0 93 1d 02 	sts	0x021D, r29	; 0x80021d <Sub_Mode_Cone>
   11cac:	c0 93 e1 11 	sts	0x11E1, r28	; 0x8011e1 <err_2_flag>
   11cb0:	0a c0       	rjmp	.+20     	; 0x11cc6 <main+0x1a0a>
   11cb2:	d0 93 be 04 	sts	0x04BE, r29	; 0x8004be <Sub_Mode_Thread>
   11cb6:	d0 93 1f 02 	sts	0x021F, r29	; 0x80021f <Sub_Mode_Feed>
   11cba:	d0 93 1e 02 	sts	0x021E, r29	; 0x80021e <Sub_Mode_aFeed>
   11cbe:	d0 93 1d 02 	sts	0x021D, r29	; 0x80021d <Sub_Mode_Cone>
   11cc2:	c0 93 e2 11 	sts	0x11E2, r28	; 0x8011e2 <err_1_flag>
   11cc6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <_Z10Beep_Errorv>
   11cca:	e5 cf       	rjmp	.-54     	; 0x11c96 <main+0x19da>
   11ccc:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <limit_Right_flag>
   11cd0:	88 23       	and	r24, r24
   11cd2:	09 f4       	brne	.+2      	; 0x11cd6 <main+0x1a1a>
   11cd4:	40 c0       	rjmp	.+128    	; 0x11d56 <main+0x1a9a>
   11cd6:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <limit_Rear_flag>
   11cda:	88 23       	and	r24, r24
   11cdc:	e1 f1       	breq	.+120    	; 0x11d56 <main+0x1a9a>
   11cde:	c0 93 1c 02 	sts	0x021C, r28	; 0x80021c <Sub_Mode_Sphere>
   11ce2:	10 92 e2 11 	sts	0x11E2, r1	; 0x8011e2 <err_1_flag>
   11ce6:	f3 98       	cbi	0x1e, 3	; 30
   11ce8:	f6 98       	cbi	0x1e, 6	; 30
   11cea:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   11cee:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
   11cf2:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
   11cf6:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   11cfa:	40 91 5a 12 	lds	r20, 0x125A	; 0x80125a <Motor_Z_Pos>
   11cfe:	50 91 5b 12 	lds	r21, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   11d02:	60 91 5c 12 	lds	r22, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   11d06:	70 91 5d 12 	lds	r23, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   11d0a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   11d0e:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   11d12:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   11d16:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   11d1a:	48 17       	cp	r20, r24
   11d1c:	59 07       	cpc	r21, r25
   11d1e:	6a 07       	cpc	r22, r26
   11d20:	7b 07       	cpc	r23, r27
   11d22:	b1 f4       	brne	.+44     	; 0x11d50 <main+0x1a94>
   11d24:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <Motor_X_Pos>
   11d28:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   11d2c:	60 91 48 12 	lds	r22, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   11d30:	70 91 49 12 	lds	r23, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   11d34:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
   11d38:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
   11d3c:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
   11d40:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
   11d44:	48 17       	cp	r20, r24
   11d46:	59 07       	cpc	r21, r25
   11d48:	6a 07       	cpc	r22, r26
   11d4a:	7b 07       	cpc	r23, r27
   11d4c:	09 f4       	brne	.+2      	; 0x11d50 <main+0x1a94>
   11d4e:	a1 cf       	rjmp	.-190    	; 0x11c92 <main+0x19d6>
   11d50:	d0 93 1c 02 	sts	0x021C, r29	; 0x80021c <Sub_Mode_Sphere>
   11d54:	ab cf       	rjmp	.-170    	; 0x11cac <main+0x19f0>
   11d56:	d0 93 1c 02 	sts	0x021C, r29	; 0x80021c <Sub_Mode_Sphere>
   11d5a:	b3 cf       	rjmp	.-154    	; 0x11cc2 <main+0x1a06>
   11d5c:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <limit_Left_flag>
   11d60:	88 23       	and	r24, r24
   11d62:	21 f0       	breq	.+8      	; 0x11d6c <main+0x1ab0>
   11d64:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <limit_Right_flag>
   11d68:	81 11       	cpse	r24, r1
   11d6a:	0a c0       	rjmp	.+20     	; 0x11d80 <main+0x1ac4>
   11d6c:	80 91 e7 11 	lds	r24, 0x11E7	; 0x8011e7 <limit_Front_flag>
   11d70:	88 23       	and	r24, r24
   11d72:	09 f4       	brne	.+2      	; 0x11d76 <main+0x1aba>
   11d74:	9e cf       	rjmp	.-196    	; 0x11cb2 <main+0x19f6>
   11d76:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <limit_Rear_flag>
   11d7a:	88 23       	and	r24, r24
   11d7c:	09 f4       	brne	.+2      	; 0x11d80 <main+0x1ac4>
   11d7e:	99 cf       	rjmp	.-206    	; 0x11cb2 <main+0x19f6>
   11d80:	00 93 be 04 	sts	0x04BE, r16	; 0x8004be <Sub_Mode_Thread>
   11d84:	00 93 1f 02 	sts	0x021F, r16	; 0x80021f <Sub_Mode_Feed>
   11d88:	00 93 1e 02 	sts	0x021E, r16	; 0x80021e <Sub_Mode_aFeed>
   11d8c:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <Sub_Mode_Cone>
   11d90:	2c cf       	rjmp	.-424    	; 0x11bea <main+0x192e>
   11d92:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11d96:	86 30       	cpi	r24, 0x06	; 6
   11d98:	09 f4       	brne	.+2      	; 0x11d9c <main+0x1ae0>
   11d9a:	db ce       	rjmp	.-586    	; 0x11b52 <main+0x1896>
   11d9c:	88 30       	cpi	r24, 0x08	; 8
   11d9e:	09 f4       	brne	.+2      	; 0x11da2 <main+0x1ae6>
   11da0:	d8 ce       	rjmp	.-592    	; 0x11b52 <main+0x1896>
   11da2:	d0 93 be 04 	sts	0x04BE, r29	; 0x8004be <Sub_Mode_Thread>
   11da6:	d0 93 1f 02 	sts	0x021F, r29	; 0x80021f <Sub_Mode_Feed>
   11daa:	d0 93 1e 02 	sts	0x021E, r29	; 0x80021e <Sub_Mode_aFeed>
   11dae:	d0 93 1d 02 	sts	0x021D, r29	; 0x80021d <Sub_Mode_Cone>
   11db2:	d0 93 1c 02 	sts	0x021C, r29	; 0x80021c <Sub_Mode_Sphere>
   11db6:	10 92 e2 11 	sts	0x11E2, r1	; 0x8011e2 <err_1_flag>
   11dba:	10 92 e1 11 	sts	0x11E1, r1	; 0x8011e1 <err_2_flag>
   11dbe:	f3 98       	cbi	0x1e, 3	; 30
   11dc0:	f6 98       	cbi	0x1e, 6	; 30
   11dc2:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <Z_WORKING_RAPID_FLAG>
   11dc6:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <X_WORKING_RAPID_FLAG>
   11dca:	10 92 52 12 	sts	0x1252, r1	; 0x801252 <Ks_Count>
   11dce:	10 92 51 12 	sts	0x1251, r1	; 0x801251 <Km_Count+0x1>
   11dd2:	10 92 50 12 	sts	0x1250, r1	; 0x801250 <Km_Count>
   11dd6:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <Repeat_Count>
   11dda:	5d cf       	rjmp	.-326    	; 0x11c96 <main+0x19da>
   11ddc:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <Enc_Pos+0x1>
   11de0:	10 92 e3 11 	sts	0x11E3, r1	; 0x8011e3 <Enc_Pos>
   11de4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_Z19get_Enc_Pos_Dividerv>
   11de8:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
   11dec:	cc ce       	rjmp	.-616    	; 0x11b86 <main+0x18ca>
   11dee:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <key_sel_flag>
   11df2:	cb ce       	rjmp	.-618    	; 0x11b8a <main+0x18ce>
   11df4:	1d 30       	cpi	r17, 0x0D	; 13
   11df6:	59 f1       	breq	.+86     	; 0x11e4e <main+0x1b92>
   11df8:	1e 30       	cpi	r17, 0x0E	; 14
   11dfa:	09 f0       	breq	.+2      	; 0x11dfe <main+0x1b42>
   11dfc:	d9 ce       	rjmp	.-590    	; 0x11bb0 <main+0x18f4>
   11dfe:	80 91 09 12 	lds	r24, 0x1209	; 0x801209 <button_flag>
   11e02:	81 11       	cpse	r24, r1
   11e04:	09 c0       	rjmp	.+18     	; 0x11e18 <main+0x1b5c>
   11e06:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <_Z16Key_Left_Pressedv.part.9>
   11e0a:	06 c0       	rjmp	.+12     	; 0x11e18 <main+0x1b5c>
   11e0c:	80 91 09 12 	lds	r24, 0x1209	; 0x801209 <button_flag>
   11e10:	81 11       	cpse	r24, r1
   11e12:	02 c0       	rjmp	.+4      	; 0x11e18 <main+0x1b5c>
   11e14:	0e 94 8f 40 	call	0x811e	; 0x811e <_Z16Key_Down_Pressedv.part.8>
   11e18:	10 92 08 12 	sts	0x1208, r1	; 0x801208 <KeyCycle>
   11e1c:	10 93 0a 12 	sts	0x120A, r17	; 0x80120a <Button_Old>
   11e20:	10 b1       	in	r17, 0x00	; 0
   11e22:	15 75       	andi	r17, 0x55	; 85
   11e24:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <Limit_Button_Old>
   11e28:	18 13       	cpse	r17, r24
   11e2a:	30 c1       	rjmp	.+608    	; 0x1208c <main+0x1dd0>
   11e2c:	15 34       	cpi	r17, 0x45	; 69
   11e2e:	09 f4       	brne	.+2      	; 0x11e32 <main+0x1b76>
   11e30:	c3 c1       	rjmp	.+902    	; 0x121b8 <main+0x1efc>
   11e32:	c8 f5       	brcc	.+114    	; 0x11ea6 <main+0x1bea>
   11e34:	15 31       	cpi	r17, 0x15	; 21
   11e36:	09 f4       	brne	.+2      	; 0x11e3a <main+0x1b7e>
   11e38:	b4 c0       	rjmp	.+360    	; 0x11fa2 <main+0x1ce6>
   11e3a:	10 92 06 12 	sts	0x1206, r1	; 0x801206 <limit_button_flag>
   11e3e:	26 c1       	rjmp	.+588    	; 0x1208c <main+0x1dd0>
   11e40:	80 91 09 12 	lds	r24, 0x1209	; 0x801209 <button_flag>
   11e44:	81 11       	cpse	r24, r1
   11e46:	e8 cf       	rjmp	.-48     	; 0x11e18 <main+0x1b5c>
   11e48:	0e 94 b8 41 	call	0x8370	; 0x8370 <_Z14Key_Up_Pressedv.part.7>
   11e4c:	e5 cf       	rjmp	.-54     	; 0x11e18 <main+0x1b5c>
   11e4e:	80 91 09 12 	lds	r24, 0x1209	; 0x801209 <button_flag>
   11e52:	81 11       	cpse	r24, r1
   11e54:	e1 cf       	rjmp	.-62     	; 0x11e18 <main+0x1b5c>
   11e56:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <_Z17Key_Right_Pressedv.part.10>
   11e5a:	de cf       	rjmp	.-68     	; 0x11e18 <main+0x1b5c>
   11e5c:	80 91 08 12 	lds	r24, 0x1208	; 0x801208 <KeyCycle>
   11e60:	8f 5f       	subi	r24, 0xFF	; 255
   11e62:	80 93 08 12 	sts	0x1208, r24	; 0x801208 <KeyCycle>
   11e66:	8b 30       	cpi	r24, 0x0B	; 11
   11e68:	c8 f2       	brcs	.-78     	; 0x11e1c <main+0x1b60>
   11e6a:	17 30       	cpi	r17, 0x07	; 7
   11e6c:	39 f4       	brne	.+14     	; 0x11e7c <main+0x1bc0>
   11e6e:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
   11e72:	0e 94 8f 40 	call	0x811e	; 0x811e <_Z16Key_Down_Pressedv.part.8>
   11e76:	20 92 08 12 	sts	0x1208, r2	; 0x801208 <KeyCycle>
   11e7a:	d0 cf       	rjmp	.-96     	; 0x11e1c <main+0x1b60>
   11e7c:	1b 30       	cpi	r17, 0x0B	; 11
   11e7e:	29 f4       	brne	.+10     	; 0x11e8a <main+0x1bce>
   11e80:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
   11e84:	0e 94 b8 41 	call	0x8370	; 0x8370 <_Z14Key_Up_Pressedv.part.7>
   11e88:	f6 cf       	rjmp	.-20     	; 0x11e76 <main+0x1bba>
   11e8a:	1d 30       	cpi	r17, 0x0D	; 13
   11e8c:	29 f4       	brne	.+10     	; 0x11e98 <main+0x1bdc>
   11e8e:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
   11e92:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <_Z17Key_Right_Pressedv.part.10>
   11e96:	ef cf       	rjmp	.-34     	; 0x11e76 <main+0x1bba>
   11e98:	1e 30       	cpi	r17, 0x0E	; 14
   11e9a:	69 f7       	brne	.-38     	; 0x11e76 <main+0x1bba>
   11e9c:	10 92 09 12 	sts	0x1209, r1	; 0x801209 <button_flag>
   11ea0:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <_Z16Key_Left_Pressedv.part.9>
   11ea4:	e8 cf       	rjmp	.-48     	; 0x11e76 <main+0x1bba>
   11ea6:	11 35       	cpi	r17, 0x51	; 81
   11ea8:	09 f4       	brne	.+2      	; 0x11eac <main+0x1bf0>
   11eaa:	0b c2       	rjmp	.+1046   	; 0x122c2 <main+0x2006>
   11eac:	14 35       	cpi	r17, 0x54	; 84
   11eae:	29 f6       	brne	.-118    	; 0x11e3a <main+0x1b7e>
   11eb0:	80 91 06 12 	lds	r24, 0x1206	; 0x801206 <limit_button_flag>
   11eb4:	81 11       	cpse	r24, r1
   11eb6:	ea c0       	rjmp	.+468    	; 0x1208c <main+0x1dd0>
   11eb8:	c0 93 06 12 	sts	0x1206, r28	; 0x801206 <limit_button_flag>
   11ebc:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11ec0:	81 30       	cpi	r24, 0x01	; 1
   11ec2:	08 f4       	brcc	.+2      	; 0x11ec6 <main+0x1c0a>
   11ec4:	e3 c0       	rjmp	.+454    	; 0x1208c <main+0x1dd0>
   11ec6:	86 30       	cpi	r24, 0x06	; 6
   11ec8:	18 f0       	brcs	.+6      	; 0x11ed0 <main+0x1c14>
   11eca:	87 30       	cpi	r24, 0x07	; 7
   11ecc:	09 f0       	breq	.+2      	; 0x11ed0 <main+0x1c14>
   11ece:	de c0       	rjmp	.+444    	; 0x1208c <main+0x1dd0>
   11ed0:	f5 99       	sbic	0x1e, 5	; 30
   11ed2:	dc c0       	rjmp	.+440    	; 0x1208c <main+0x1dd0>
   11ed4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   11ed8:	80 7e       	andi	r24, 0xE0	; 224
   11eda:	80 3a       	cpi	r24, 0xA0	; 160
   11edc:	09 f0       	breq	.+2      	; 0x11ee0 <main+0x1c24>
   11ede:	d6 c0       	rjmp	.+428    	; 0x1208c <main+0x1dd0>
   11ee0:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <limit_Rear_flag>
   11ee4:	81 11       	cpse	r24, r1
   11ee6:	72 c2       	rjmp	.+1252   	; 0x123cc <main+0x2110>
   11ee8:	80 90 46 12 	lds	r8, 0x1246	; 0x801246 <Motor_X_Pos>
   11eec:	90 90 47 12 	lds	r9, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   11ef0:	a0 90 48 12 	lds	r10, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   11ef4:	b0 90 49 12 	lds	r11, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   11ef8:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   11efc:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   11f00:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   11f04:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11f08:	68 1b       	sub	r22, r24
   11f0a:	79 0b       	sbc	r23, r25
   11f0c:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
   11f10:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
   11f14:	68 9f       	mul	r22, r24
   11f16:	a0 01       	movw	r20, r0
   11f18:	69 9f       	mul	r22, r25
   11f1a:	50 0d       	add	r21, r0
   11f1c:	78 9f       	mul	r23, r24
   11f1e:	50 0d       	add	r21, r0
   11f20:	11 24       	eor	r1, r1
   11f22:	44 0f       	add	r20, r20
   11f24:	55 1f       	adc	r21, r21
   11f26:	05 2e       	mov	r0, r21
   11f28:	00 0c       	add	r0, r0
   11f2a:	66 0b       	sbc	r22, r22
   11f2c:	77 0b       	sbc	r23, r23
   11f2e:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Limit_Pos_Front>
   11f32:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <Limit_Pos_Front+0x1>
   11f36:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <Limit_Pos_Front+0x2>
   11f3a:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <Limit_Pos_Front+0x3>
   11f3e:	84 1b       	sub	r24, r20
   11f40:	95 0b       	sbc	r25, r21
   11f42:	a6 0b       	sbc	r26, r22
   11f44:	b7 0b       	sbc	r27, r23
   11f46:	88 16       	cp	r8, r24
   11f48:	99 06       	cpc	r9, r25
   11f4a:	aa 06       	cpc	r10, r26
   11f4c:	bb 06       	cpc	r11, r27
   11f4e:	0c f0       	brlt	.+2      	; 0x11f52 <main+0x1c96>
   11f50:	9d c0       	rjmp	.+314    	; 0x1208c <main+0x1dd0>
   11f52:	c0 93 e8 11 	sts	0x11E8, r28	; 0x8011e8 <limit_Rear_flag>
   11f56:	40 91 fd 09 	lds	r20, 0x09FD	; 0x8009fd <McSTEP_X>
   11f5a:	50 91 fe 09 	lds	r21, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
   11f5e:	ca 01       	movw	r24, r20
   11f60:	57 fd       	sbrc	r21, 7
   11f62:	01 96       	adiw	r24, 0x01	; 1
   11f64:	95 95       	asr	r25
   11f66:	87 95       	ror	r24
   11f68:	09 2e       	mov	r0, r25
   11f6a:	00 0c       	add	r0, r0
   11f6c:	aa 0b       	sbc	r26, r26
   11f6e:	bb 0b       	sbc	r27, r27
   11f70:	88 0d       	add	r24, r8
   11f72:	99 1d       	adc	r25, r9
   11f74:	aa 1d       	adc	r26, r10
   11f76:	bb 1d       	adc	r27, r11
   11f78:	51 95       	neg	r21
   11f7a:	41 95       	neg	r20
   11f7c:	51 09       	sbc	r21, r1
   11f7e:	05 2e       	mov	r0, r21
   11f80:	00 0c       	add	r0, r0
   11f82:	66 0b       	sbc	r22, r22
   11f84:	77 0b       	sbc	r23, r23
   11f86:	84 23       	and	r24, r20
   11f88:	95 23       	and	r25, r21
   11f8a:	a6 23       	and	r26, r22
   11f8c:	b7 23       	and	r27, r23
   11f8e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <Limit_Pos_Rear>
   11f92:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <Limit_Pos_Rear+0x1>
   11f96:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <Limit_Pos_Rear+0x2>
   11f9a:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <Limit_Pos_Rear+0x3>
   11f9e:	11 98       	cbi	0x02, 1	; 2
   11fa0:	73 c0       	rjmp	.+230    	; 0x12088 <main+0x1dcc>
   11fa2:	80 91 06 12 	lds	r24, 0x1206	; 0x801206 <limit_button_flag>
   11fa6:	81 11       	cpse	r24, r1
   11fa8:	71 c0       	rjmp	.+226    	; 0x1208c <main+0x1dd0>
   11faa:	c0 93 06 12 	sts	0x1206, r28	; 0x801206 <limit_button_flag>
   11fae:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   11fb2:	81 50       	subi	r24, 0x01	; 1
   11fb4:	85 30       	cpi	r24, 0x05	; 5
   11fb6:	08 f0       	brcs	.+2      	; 0x11fba <main+0x1cfe>
   11fb8:	69 c0       	rjmp	.+210    	; 0x1208c <main+0x1dd0>
   11fba:	f2 99       	sbic	0x1e, 2	; 30
   11fbc:	67 c0       	rjmp	.+206    	; 0x1208c <main+0x1dd0>
   11fbe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   11fc2:	80 7e       	andi	r24, 0xE0	; 224
   11fc4:	80 3a       	cpi	r24, 0xA0	; 160
   11fc6:	09 f0       	breq	.+2      	; 0x11fca <main+0x1d0e>
   11fc8:	61 c0       	rjmp	.+194    	; 0x1208c <main+0x1dd0>
   11fca:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <limit_Left_flag>
   11fce:	81 11       	cpse	r24, r1
   11fd0:	e2 c0       	rjmp	.+452    	; 0x12196 <main+0x1eda>
   11fd2:	80 90 5a 12 	lds	r8, 0x125A	; 0x80125a <Motor_Z_Pos>
   11fd6:	90 90 5b 12 	lds	r9, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   11fda:	a0 90 5c 12 	lds	r10, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   11fde:	b0 90 5d 12 	lds	r11, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   11fe2:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   11fe6:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   11fea:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   11fee:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   11ff2:	68 1b       	sub	r22, r24
   11ff4:	79 0b       	sbc	r23, r25
   11ff6:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
   11ffa:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
   11ffe:	68 9f       	mul	r22, r24
   12000:	a0 01       	movw	r20, r0
   12002:	69 9f       	mul	r22, r25
   12004:	50 0d       	add	r21, r0
   12006:	78 9f       	mul	r23, r24
   12008:	50 0d       	add	r21, r0
   1200a:	11 24       	eor	r1, r1
   1200c:	44 0f       	add	r20, r20
   1200e:	55 1f       	adc	r21, r21
   12010:	05 2e       	mov	r0, r21
   12012:	00 0c       	add	r0, r0
   12014:	66 0b       	sbc	r22, r22
   12016:	77 0b       	sbc	r23, r23
   12018:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <Limit_Pos_Right>
   1201c:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <Limit_Pos_Right+0x1>
   12020:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <Limit_Pos_Right+0x2>
   12024:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <Limit_Pos_Right+0x3>
   12028:	84 0f       	add	r24, r20
   1202a:	95 1f       	adc	r25, r21
   1202c:	a6 1f       	adc	r26, r22
   1202e:	b7 1f       	adc	r27, r23
   12030:	88 15       	cp	r24, r8
   12032:	99 05       	cpc	r25, r9
   12034:	aa 05       	cpc	r26, r10
   12036:	bb 05       	cpc	r27, r11
   12038:	4c f5       	brge	.+82     	; 0x1208c <main+0x1dd0>
   1203a:	c0 93 e5 11 	sts	0x11E5, r28	; 0x8011e5 <limit_Left_flag>
   1203e:	40 91 03 0a 	lds	r20, 0x0A03	; 0x800a03 <McSTEP_Z>
   12042:	50 91 04 0a 	lds	r21, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
   12046:	ca 01       	movw	r24, r20
   12048:	57 fd       	sbrc	r21, 7
   1204a:	01 96       	adiw	r24, 0x01	; 1
   1204c:	95 95       	asr	r25
   1204e:	87 95       	ror	r24
   12050:	09 2e       	mov	r0, r25
   12052:	00 0c       	add	r0, r0
   12054:	aa 0b       	sbc	r26, r26
   12056:	bb 0b       	sbc	r27, r27
   12058:	88 0d       	add	r24, r8
   1205a:	99 1d       	adc	r25, r9
   1205c:	aa 1d       	adc	r26, r10
   1205e:	bb 1d       	adc	r27, r11
   12060:	51 95       	neg	r21
   12062:	41 95       	neg	r20
   12064:	51 09       	sbc	r21, r1
   12066:	05 2e       	mov	r0, r21
   12068:	00 0c       	add	r0, r0
   1206a:	66 0b       	sbc	r22, r22
   1206c:	77 0b       	sbc	r23, r23
   1206e:	84 23       	and	r24, r20
   12070:	95 23       	and	r25, r21
   12072:	a6 23       	and	r26, r22
   12074:	b7 23       	and	r27, r23
   12076:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <Limit_Pos_Left>
   1207a:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <Limit_Pos_Left+0x1>
   1207e:	a0 93 f8 09 	sts	0x09F8, r26	; 0x8009f8 <Limit_Pos_Left+0x2>
   12082:	b0 93 f9 09 	sts	0x09F9, r27	; 0x8009f9 <Limit_Pos_Left+0x3>
   12086:	17 98       	cbi	0x02, 7	; 2
   12088:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z4Beepv>
   1208c:	10 93 07 12 	sts	0x1207, r17	; 0x801207 <Limit_Button_Old>
   12090:	1c b1       	in	r17, 0x0c	; 12
   12092:	10 73       	andi	r17, 0x30	; 48
   12094:	80 91 05 12 	lds	r24, 0x1205	; 0x801205 <Hand_Axis_Old>
   12098:	18 17       	cp	r17, r24
   1209a:	09 f4       	brne	.+2      	; 0x1209e <main+0x1de2>
   1209c:	5a c0       	rjmp	.+180    	; 0x12152 <main+0x1e96>
   1209e:	10 31       	cpi	r17, 0x10	; 16
   120a0:	09 f4       	brne	.+2      	; 0x120a4 <main+0x1de8>
   120a2:	a0 c1       	rjmp	.+832    	; 0x123e4 <main+0x2128>
   120a4:	10 32       	cpi	r17, 0x20	; 32
   120a6:	09 f0       	breq	.+2      	; 0x120aa <main+0x1dee>
   120a8:	ee c1       	rjmp	.+988    	; 0x12486 <main+0x21ca>
   120aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   120ae:	80 61       	ori	r24, 0x10	; 16
   120b0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   120b4:	9f ef       	ldi	r25, 0xFF	; 255
   120b6:	ab ed       	ldi	r26, 0xDB	; 219
   120b8:	b5 e0       	ldi	r27, 0x05	; 5
   120ba:	91 50       	subi	r25, 0x01	; 1
   120bc:	a0 40       	sbci	r26, 0x00	; 0
   120be:	b0 40       	sbci	r27, 0x00	; 0
   120c0:	e1 f7       	brne	.-8      	; 0x120ba <main+0x1dfe>
   120c2:	00 c0       	rjmp	.+0      	; 0x120c4 <main+0x1e08>
   120c4:	00 00       	nop
   120c6:	10 92 fe 11 	sts	0x11FE, r1	; 0x8011fe <flag_hand_X>
   120ca:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   120ce:	c0 93 ff 11 	sts	0x11FF, r28	; 0x8011ff <flag_hand_Z>
   120d2:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
   120d6:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
   120da:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
   120de:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
   120e2:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
   120e6:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
   120ea:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
   120ee:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
   120f2:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
   120f6:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
   120fa:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
   120fe:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
   12102:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <Hand_Z_Pos>
   12106:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <Hand_Z_Pos+0x1>
   1210a:	10 92 eb 11 	sts	0x11EB, r1	; 0x8011eb <Hand_Z_Pos+0x2>
   1210e:	10 92 ec 11 	sts	0x11EC, r1	; 0x8011ec <Hand_Z_Pos+0x3>
   12112:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <Motor_Z_Pos>
   12116:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   1211a:	a0 91 5c 12 	lds	r26, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   1211e:	b0 91 5d 12 	lds	r27, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   12122:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <Null_Z_Pos>
   12126:	90 93 21 12 	sts	0x1221, r25	; 0x801221 <Null_Z_Pos+0x1>
   1212a:	a0 93 22 12 	sts	0x1222, r26	; 0x801222 <Null_Z_Pos+0x2>
   1212e:	b0 93 23 12 	sts	0x1223, r27	; 0x801223 <Null_Z_Pos+0x3>
   12132:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   12136:	8b 7f       	andi	r24, 0xFB	; 251
   12138:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   1213c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
   12140:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
   12144:	d8 bb       	out	0x18, r29	; 24
   12146:	d0 93 71 00 	sts	0x0071, r29	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   1214a:	3c ba       	out	0x1c, r3	; 28
   1214c:	ea 9a       	sbi	0x1d, 2	; 29
   1214e:	10 93 05 12 	sts	0x1205, r17	; 0x801205 <Hand_Axis_Old>
   12152:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
   12156:	83 70       	andi	r24, 0x03	; 3
   12158:	90 91 04 12 	lds	r25, 0x1204	; 0x801204 <Hand_Scale_Old>
   1215c:	89 17       	cp	r24, r25
   1215e:	79 f0       	breq	.+30     	; 0x1217e <main+0x1ec2>
   12160:	81 30       	cpi	r24, 0x01	; 1
   12162:	09 f4       	brne	.+2      	; 0x12166 <main+0x1eaa>
   12164:	a8 c1       	rjmp	.+848    	; 0x124b6 <main+0x21fa>
   12166:	82 30       	cpi	r24, 0x02	; 2
   12168:	41 f4       	brne	.+16     	; 0x1217a <main+0x1ebe>
   1216a:	10 92 02 12 	sts	0x1202, r1	; 0x801202 <flag_Scale_x1>
   1216e:	c0 93 03 12 	sts	0x1203, r28	; 0x801203 <flag_Scale_x10>
   12172:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   12176:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   1217a:	80 93 04 12 	sts	0x1204, r24	; 0x801204 <Hand_Scale_Old>
   1217e:	10 92 0f 12 	sts	0x120F, r1	; 0x80120f <_WDT_TIMER_FLAG>
   12182:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   12186:	88 30       	cpi	r24, 0x08	; 8
   12188:	11 f0       	breq	.+4      	; 0x1218e <main+0x1ed2>
   1218a:	0c 94 83 82 	jmp	0x10506	; 0x10506 <main+0x24a>
   1218e:	0e 94 b6 3a 	call	0x756c	; 0x756c <_Z5Printv>
   12192:	0c 94 7d 82 	jmp	0x104fa	; 0x104fa <main+0x23e>
   12196:	10 92 e5 11 	sts	0x11E5, r1	; 0x8011e5 <limit_Left_flag>
   1219a:	81 2c       	mov	r8, r1
   1219c:	91 2c       	mov	r9, r1
   1219e:	a1 2c       	mov	r10, r1
   121a0:	a0 e4       	ldi	r26, 0x40	; 64
   121a2:	ba 2e       	mov	r11, r26
   121a4:	80 92 f6 09 	sts	0x09F6, r8	; 0x8009f6 <Limit_Pos_Left>
   121a8:	90 92 f7 09 	sts	0x09F7, r9	; 0x8009f7 <Limit_Pos_Left+0x1>
   121ac:	a0 92 f8 09 	sts	0x09F8, r10	; 0x8009f8 <Limit_Pos_Left+0x2>
   121b0:	b0 92 f9 09 	sts	0x09F9, r11	; 0x8009f9 <Limit_Pos_Left+0x3>
   121b4:	17 9a       	sbi	0x02, 7	; 2
   121b6:	68 cf       	rjmp	.-304    	; 0x12088 <main+0x1dcc>
   121b8:	80 91 06 12 	lds	r24, 0x1206	; 0x801206 <limit_button_flag>
   121bc:	81 11       	cpse	r24, r1
   121be:	66 cf       	rjmp	.-308    	; 0x1208c <main+0x1dd0>
   121c0:	c0 93 06 12 	sts	0x1206, r28	; 0x801206 <limit_button_flag>
   121c4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   121c8:	81 30       	cpi	r24, 0x01	; 1
   121ca:	08 f4       	brcc	.+2      	; 0x121ce <main+0x1f12>
   121cc:	5f cf       	rjmp	.-322    	; 0x1208c <main+0x1dd0>
   121ce:	86 30       	cpi	r24, 0x06	; 6
   121d0:	18 f0       	brcs	.+6      	; 0x121d8 <main+0x1f1c>
   121d2:	87 30       	cpi	r24, 0x07	; 7
   121d4:	09 f0       	breq	.+2      	; 0x121d8 <main+0x1f1c>
   121d6:	5a cf       	rjmp	.-332    	; 0x1208c <main+0x1dd0>
   121d8:	f2 99       	sbic	0x1e, 2	; 30
   121da:	58 cf       	rjmp	.-336    	; 0x1208c <main+0x1dd0>
   121dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   121e0:	80 7e       	andi	r24, 0xE0	; 224
   121e2:	80 3a       	cpi	r24, 0xA0	; 160
   121e4:	09 f0       	breq	.+2      	; 0x121e8 <main+0x1f2c>
   121e6:	52 cf       	rjmp	.-348    	; 0x1208c <main+0x1dd0>
   121e8:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <limit_Right_flag>
   121ec:	81 11       	cpse	r24, r1
   121ee:	5d c0       	rjmp	.+186    	; 0x122aa <main+0x1fee>
   121f0:	80 90 5a 12 	lds	r8, 0x125A	; 0x80125a <Motor_Z_Pos>
   121f4:	90 90 5b 12 	lds	r9, 0x125B	; 0x80125b <Motor_Z_Pos+0x1>
   121f8:	a0 90 5c 12 	lds	r10, 0x125C	; 0x80125c <Motor_Z_Pos+0x2>
   121fc:	b0 90 5d 12 	lds	r11, 0x125D	; 0x80125d <Motor_Z_Pos+0x3>
   12200:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   12204:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   12208:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   1220c:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   12210:	68 1b       	sub	r22, r24
   12212:	79 0b       	sbc	r23, r25
   12214:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
   12218:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
   1221c:	68 9f       	mul	r22, r24
   1221e:	a0 01       	movw	r20, r0
   12220:	69 9f       	mul	r22, r25
   12222:	50 0d       	add	r21, r0
   12224:	78 9f       	mul	r23, r24
   12226:	50 0d       	add	r21, r0
   12228:	11 24       	eor	r1, r1
   1222a:	44 0f       	add	r20, r20
   1222c:	55 1f       	adc	r21, r21
   1222e:	05 2e       	mov	r0, r21
   12230:	00 0c       	add	r0, r0
   12232:	66 0b       	sbc	r22, r22
   12234:	77 0b       	sbc	r23, r23
   12236:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <Limit_Pos_Left>
   1223a:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <Limit_Pos_Left+0x1>
   1223e:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <Limit_Pos_Left+0x2>
   12242:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <Limit_Pos_Left+0x3>
   12246:	84 1b       	sub	r24, r20
   12248:	95 0b       	sbc	r25, r21
   1224a:	a6 0b       	sbc	r26, r22
   1224c:	b7 0b       	sbc	r27, r23
   1224e:	88 16       	cp	r8, r24
   12250:	99 06       	cpc	r9, r25
   12252:	aa 06       	cpc	r10, r26
   12254:	bb 06       	cpc	r11, r27
   12256:	0c f0       	brlt	.+2      	; 0x1225a <main+0x1f9e>
   12258:	19 cf       	rjmp	.-462    	; 0x1208c <main+0x1dd0>
   1225a:	c0 93 e6 11 	sts	0x11E6, r28	; 0x8011e6 <limit_Right_flag>
   1225e:	40 91 03 0a 	lds	r20, 0x0A03	; 0x800a03 <McSTEP_Z>
   12262:	50 91 04 0a 	lds	r21, 0x0A04	; 0x800a04 <McSTEP_Z+0x1>
   12266:	ca 01       	movw	r24, r20
   12268:	57 fd       	sbrc	r21, 7
   1226a:	01 96       	adiw	r24, 0x01	; 1
   1226c:	95 95       	asr	r25
   1226e:	87 95       	ror	r24
   12270:	09 2e       	mov	r0, r25
   12272:	00 0c       	add	r0, r0
   12274:	aa 0b       	sbc	r26, r26
   12276:	bb 0b       	sbc	r27, r27
   12278:	88 0d       	add	r24, r8
   1227a:	99 1d       	adc	r25, r9
   1227c:	aa 1d       	adc	r26, r10
   1227e:	bb 1d       	adc	r27, r11
   12280:	51 95       	neg	r21
   12282:	41 95       	neg	r20
   12284:	51 09       	sbc	r21, r1
   12286:	05 2e       	mov	r0, r21
   12288:	00 0c       	add	r0, r0
   1228a:	66 0b       	sbc	r22, r22
   1228c:	77 0b       	sbc	r23, r23
   1228e:	84 23       	and	r24, r20
   12290:	95 23       	and	r25, r21
   12292:	a6 23       	and	r26, r22
   12294:	b7 23       	and	r27, r23
   12296:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <Limit_Pos_Right>
   1229a:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <Limit_Pos_Right+0x1>
   1229e:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <Limit_Pos_Right+0x2>
   122a2:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <Limit_Pos_Right+0x3>
   122a6:	15 98       	cbi	0x02, 5	; 2
   122a8:	ef ce       	rjmp	.-546    	; 0x12088 <main+0x1dcc>
   122aa:	10 92 e6 11 	sts	0x11E6, r1	; 0x8011e6 <limit_Right_flag>
   122ae:	40 92 c3 04 	sts	0x04C3, r4	; 0x8004c3 <Limit_Pos_Right>
   122b2:	50 92 c4 04 	sts	0x04C4, r5	; 0x8004c4 <Limit_Pos_Right+0x1>
   122b6:	60 92 c5 04 	sts	0x04C5, r6	; 0x8004c5 <Limit_Pos_Right+0x2>
   122ba:	70 92 c6 04 	sts	0x04C6, r7	; 0x8004c6 <Limit_Pos_Right+0x3>
   122be:	15 9a       	sbi	0x02, 5	; 2
   122c0:	e3 ce       	rjmp	.-570    	; 0x12088 <main+0x1dcc>
   122c2:	80 91 06 12 	lds	r24, 0x1206	; 0x801206 <limit_button_flag>
   122c6:	81 11       	cpse	r24, r1
   122c8:	e1 ce       	rjmp	.-574    	; 0x1208c <main+0x1dd0>
   122ca:	c0 93 06 12 	sts	0x1206, r28	; 0x801206 <limit_button_flag>
   122ce:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <Mode>
   122d2:	81 50       	subi	r24, 0x01	; 1
   122d4:	85 30       	cpi	r24, 0x05	; 5
   122d6:	08 f0       	brcs	.+2      	; 0x122da <main+0x201e>
   122d8:	d9 ce       	rjmp	.-590    	; 0x1208c <main+0x1dd0>
   122da:	f5 99       	sbic	0x1e, 5	; 30
   122dc:	d7 ce       	rjmp	.-594    	; 0x1208c <main+0x1dd0>
   122de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
   122e2:	80 7e       	andi	r24, 0xE0	; 224
   122e4:	80 3a       	cpi	r24, 0xA0	; 160
   122e6:	09 f0       	breq	.+2      	; 0x122ea <main+0x202e>
   122e8:	d1 ce       	rjmp	.-606    	; 0x1208c <main+0x1dd0>
   122ea:	80 91 e7 11 	lds	r24, 0x11E7	; 0x8011e7 <limit_Front_flag>
   122ee:	81 11       	cpse	r24, r1
   122f0:	5d c0       	rjmp	.+186    	; 0x123ac <main+0x20f0>
   122f2:	80 90 46 12 	lds	r8, 0x1246	; 0x801246 <Motor_X_Pos>
   122f6:	90 90 47 12 	lds	r9, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   122fa:	a0 90 48 12 	lds	r10, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   122fe:	b0 90 49 12 	lds	r11, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   12302:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <MIN_RAPID_MOTION>
   12306:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <MIN_RAPID_MOTION+0x1>
   1230a:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <MAX_RAPID_MOTION>
   1230e:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <MAX_RAPID_MOTION+0x1>
   12312:	68 1b       	sub	r22, r24
   12314:	79 0b       	sbc	r23, r25
   12316:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <REPEAt>
   1231a:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <REPEAt+0x1>
   1231e:	68 9f       	mul	r22, r24
   12320:	a0 01       	movw	r20, r0
   12322:	69 9f       	mul	r22, r25
   12324:	50 0d       	add	r21, r0
   12326:	78 9f       	mul	r23, r24
   12328:	50 0d       	add	r21, r0
   1232a:	11 24       	eor	r1, r1
   1232c:	44 0f       	add	r20, r20
   1232e:	55 1f       	adc	r21, r21
   12330:	05 2e       	mov	r0, r21
   12332:	00 0c       	add	r0, r0
   12334:	66 0b       	sbc	r22, r22
   12336:	77 0b       	sbc	r23, r23
   12338:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <Limit_Pos_Rear>
   1233c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <Limit_Pos_Rear+0x1>
   12340:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <Limit_Pos_Rear+0x2>
   12344:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <Limit_Pos_Rear+0x3>
   12348:	84 0f       	add	r24, r20
   1234a:	95 1f       	adc	r25, r21
   1234c:	a6 1f       	adc	r26, r22
   1234e:	b7 1f       	adc	r27, r23
   12350:	88 15       	cp	r24, r8
   12352:	99 05       	cpc	r25, r9
   12354:	aa 05       	cpc	r26, r10
   12356:	bb 05       	cpc	r27, r11
   12358:	0c f0       	brlt	.+2      	; 0x1235c <main+0x20a0>
   1235a:	98 ce       	rjmp	.-720    	; 0x1208c <main+0x1dd0>
   1235c:	c0 93 e7 11 	sts	0x11E7, r28	; 0x8011e7 <limit_Front_flag>
   12360:	40 91 fd 09 	lds	r20, 0x09FD	; 0x8009fd <McSTEP_X>
   12364:	50 91 fe 09 	lds	r21, 0x09FE	; 0x8009fe <McSTEP_X+0x1>
   12368:	ca 01       	movw	r24, r20
   1236a:	57 fd       	sbrc	r21, 7
   1236c:	01 96       	adiw	r24, 0x01	; 1
   1236e:	95 95       	asr	r25
   12370:	87 95       	ror	r24
   12372:	09 2e       	mov	r0, r25
   12374:	00 0c       	add	r0, r0
   12376:	aa 0b       	sbc	r26, r26
   12378:	bb 0b       	sbc	r27, r27
   1237a:	88 0d       	add	r24, r8
   1237c:	99 1d       	adc	r25, r9
   1237e:	aa 1d       	adc	r26, r10
   12380:	bb 1d       	adc	r27, r11
   12382:	51 95       	neg	r21
   12384:	41 95       	neg	r20
   12386:	51 09       	sbc	r21, r1
   12388:	05 2e       	mov	r0, r21
   1238a:	00 0c       	add	r0, r0
   1238c:	66 0b       	sbc	r22, r22
   1238e:	77 0b       	sbc	r23, r23
   12390:	84 23       	and	r24, r20
   12392:	95 23       	and	r25, r21
   12394:	a6 23       	and	r26, r22
   12396:	b7 23       	and	r27, r23
   12398:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
   1239c:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
   123a0:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
   123a4:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
   123a8:	13 98       	cbi	0x02, 3	; 2
   123aa:	6e ce       	rjmp	.-804    	; 0x12088 <main+0x1dcc>
   123ac:	10 92 e7 11 	sts	0x11E7, r1	; 0x8011e7 <limit_Front_flag>
   123b0:	80 e0       	ldi	r24, 0x00	; 0
   123b2:	90 e0       	ldi	r25, 0x00	; 0
   123b4:	a0 e0       	ldi	r26, 0x00	; 0
   123b6:	b0 e4       	ldi	r27, 0x40	; 64
   123b8:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Limit_Pos_Front>
   123bc:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <Limit_Pos_Front+0x1>
   123c0:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <Limit_Pos_Front+0x2>
   123c4:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <Limit_Pos_Front+0x3>
   123c8:	13 9a       	sbi	0x02, 3	; 2
   123ca:	5e ce       	rjmp	.-836    	; 0x12088 <main+0x1dcc>
   123cc:	10 92 e8 11 	sts	0x11E8, r1	; 0x8011e8 <limit_Rear_flag>
   123d0:	40 92 ba 04 	sts	0x04BA, r4	; 0x8004ba <Limit_Pos_Rear>
   123d4:	50 92 bb 04 	sts	0x04BB, r5	; 0x8004bb <Limit_Pos_Rear+0x1>
   123d8:	60 92 bc 04 	sts	0x04BC, r6	; 0x8004bc <Limit_Pos_Rear+0x2>
   123dc:	70 92 bd 04 	sts	0x04BD, r7	; 0x8004bd <Limit_Pos_Rear+0x3>
   123e0:	11 9a       	sbi	0x02, 1	; 2
   123e2:	52 ce       	rjmp	.-860    	; 0x12088 <main+0x1dcc>
   123e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   123e8:	88 60       	ori	r24, 0x08	; 8
   123ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
   123ee:	2f ef       	ldi	r18, 0xFF	; 255
   123f0:	4b ed       	ldi	r20, 0xDB	; 219
   123f2:	85 e0       	ldi	r24, 0x05	; 5
   123f4:	21 50       	subi	r18, 0x01	; 1
   123f6:	40 40       	sbci	r20, 0x00	; 0
   123f8:	80 40       	sbci	r24, 0x00	; 0
   123fa:	e1 f7       	brne	.-8      	; 0x123f4 <main+0x2138>
   123fc:	00 c0       	rjmp	.+0      	; 0x123fe <main+0x2142>
   123fe:	00 00       	nop
   12400:	10 92 ff 11 	sts	0x11FF, r1	; 0x8011ff <flag_hand_Z>
   12404:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   12408:	c0 93 fe 11 	sts	0x11FE, r28	; 0x8011fe <flag_hand_X>
   1240c:	10 92 f9 11 	sts	0x11F9, r1	; 0x8011f9 <Hand_Count>
   12410:	10 92 fa 11 	sts	0x11FA, r1	; 0x8011fa <Hand_Count+0x1>
   12414:	10 92 fb 11 	sts	0x11FB, r1	; 0x8011fb <Hand_Count+0x2>
   12418:	10 92 fc 11 	sts	0x11FC, r1	; 0x8011fc <Hand_Count+0x3>
   1241c:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <Hand_Count_New>
   12420:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <Hand_Count_New+0x1>
   12424:	10 92 f7 11 	sts	0x11F7, r1	; 0x8011f7 <Hand_Count_New+0x2>
   12428:	10 92 f8 11 	sts	0x11F8, r1	; 0x8011f8 <Hand_Count_New+0x3>
   1242c:	10 92 f1 11 	sts	0x11F1, r1	; 0x8011f1 <Hand_Count_Old>
   12430:	10 92 f2 11 	sts	0x11F2, r1	; 0x8011f2 <Hand_Count_Old+0x1>
   12434:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <Hand_Count_Old+0x2>
   12438:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <Hand_Count_Old+0x3>
   1243c:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <Hand_X_Pos>
   12440:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <Hand_X_Pos+0x1>
   12444:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <Hand_X_Pos+0x2>
   12448:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <Hand_X_Pos+0x3>
   1244c:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <Motor_X_Pos>
   12450:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <Motor_X_Pos+0x1>
   12454:	a0 91 48 12 	lds	r26, 0x1248	; 0x801248 <Motor_X_Pos+0x2>
   12458:	b0 91 49 12 	lds	r27, 0x1249	; 0x801249 <Motor_X_Pos+0x3>
   1245c:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <Null_X_Pos>
   12460:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <Null_X_Pos+0x1>
   12464:	a0 93 12 12 	sts	0x1212, r26	; 0x801212 <Null_X_Pos+0x2>
   12468:	b0 93 13 12 	sts	0x1213, r27	; 0x801213 <Null_X_Pos+0x3>
   1246c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   12470:	8d 7f       	andi	r24, 0xFD	; 253
   12472:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   12476:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
   1247a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
   1247e:	38 ba       	out	0x18, r3	; 24
   12480:	30 92 71 00 	sts	0x0071, r3	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   12484:	62 ce       	rjmp	.-828    	; 0x1214a <main+0x1e8e>
   12486:	10 92 ff 11 	sts	0x11FF, r1	; 0x8011ff <flag_hand_Z>
   1248a:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <hand_Z>
   1248e:	10 92 fe 11 	sts	0x11FE, r1	; 0x8011fe <flag_hand_X>
   12492:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <hand_X>
   12496:	0e 94 bb 09 	call	0x1376	; 0x1376 <_Z18Reset_Hand_NullPosv>
   1249a:	ea 98       	cbi	0x1d, 2	; 29
   1249c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   124a0:	8d 7f       	andi	r24, 0xFD	; 253
   124a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   124a6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   124aa:	8b 7f       	andi	r24, 0xFB	; 251
   124ac:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
   124b0:	10 92 fd 11 	sts	0x11FD, r1	; 0x8011fd <err_3_flag>
   124b4:	4c ce       	rjmp	.-872    	; 0x1214e <main+0x1e92>
   124b6:	10 92 03 12 	sts	0x1203, r1	; 0x801203 <flag_Scale_x10>
   124ba:	80 93 02 12 	sts	0x1202, r24	; 0x801202 <flag_Scale_x1>
   124be:	59 ce       	rjmp	.-846    	; 0x12172 <main+0x1eb6>

000124c0 <_GLOBAL__sub_I_Cone_Info>:
   124c0:	1f 93       	push	r17
   124c2:	cf 93       	push	r28
   124c4:	df 93       	push	r29
   124c6:	ce e5       	ldi	r28, 0x5E	; 94
   124c8:	d2 e1       	ldi	r29, 0x12	; 18
   124ca:	1b 82       	std	Y+3, r1	; 0x03
   124cc:	1a 82       	std	Y+2, r1	; 0x02
   124ce:	8b e2       	ldi	r24, 0x2B	; 43
   124d0:	9e e0       	ldi	r25, 0x0E	; 14
   124d2:	99 83       	std	Y+1, r25	; 0x01
   124d4:	88 83       	st	Y, r24
   124d6:	18 e0       	ldi	r17, 0x08	; 8
   124d8:	1c 83       	std	Y+4, r17	; 0x04
   124da:	8f ef       	ldi	r24, 0xFF	; 255
   124dc:	8d 83       	std	Y+5, r24	; 0x05
   124de:	89 e0       	ldi	r24, 0x09	; 9
   124e0:	8e 83       	std	Y+6, r24	; 0x06
   124e2:	8a e0       	ldi	r24, 0x0A	; 10
   124e4:	8f 83       	std	Y+7, r24	; 0x07
   124e6:	8b e0       	ldi	r24, 0x0B	; 11
   124e8:	88 87       	std	Y+8, r24	; 0x08
   124ea:	8c e0       	ldi	r24, 0x0C	; 12
   124ec:	89 87       	std	Y+9, r24	; 0x09
   124ee:	8d e0       	ldi	r24, 0x0D	; 13
   124f0:	8a 87       	std	Y+10, r24	; 0x0a
   124f2:	1b 86       	std	Y+11, r1	; 0x0b
   124f4:	1c 86       	std	Y+12, r1	; 0x0c
   124f6:	1d 86       	std	Y+13, r1	; 0x0d
   124f8:	1e 86       	std	Y+14, r1	; 0x0e
   124fa:	1f 86       	std	Y+15, r1	; 0x0f
   124fc:	61 e0       	ldi	r22, 0x01	; 1
   124fe:	ce 01       	movw	r24, r28
   12500:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <_ZN13LiquidCrystal5beginEhhh.constprop.35>
   12504:	8b e2       	ldi	r24, 0x2B	; 43
   12506:	9e e0       	ldi	r25, 0x0E	; 14
   12508:	99 83       	std	Y+1, r25	; 0x01
   1250a:	88 83       	st	Y, r24
   1250c:	18 8f       	std	Y+24, r17	; 0x18
   1250e:	1a 8e       	std	Y+26, r1	; 0x1a
   12510:	19 8e       	std	Y+25, r1	; 0x19
   12512:	1b 8e       	std	Y+27, r1	; 0x1b
   12514:	1c 8e       	std	Y+28, r1	; 0x1c
   12516:	df 91       	pop	r29
   12518:	cf 91       	pop	r28
   1251a:	1f 91       	pop	r17
   1251c:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_ZN22LiquidCrystal_1602_RUS13ResetAllIndexEv.constprop.37>

00012520 <dtostrf>:
   12520:	ef 92       	push	r14
   12522:	0f 93       	push	r16
   12524:	1f 93       	push	r17
   12526:	cf 93       	push	r28
   12528:	df 93       	push	r29
   1252a:	e8 01       	movw	r28, r16
   1252c:	34 e0       	ldi	r19, 0x04	; 4
   1252e:	47 fd       	sbrc	r20, 7
   12530:	34 e1       	ldi	r19, 0x14	; 20
   12532:	04 2e       	mov	r0, r20
   12534:	00 0c       	add	r0, r0
   12536:	55 0b       	sbc	r21, r21
   12538:	57 ff       	sbrs	r21, 7
   1253a:	03 c0       	rjmp	.+6      	; 0x12542 <dtostrf+0x22>
   1253c:	51 95       	neg	r21
   1253e:	41 95       	neg	r20
   12540:	51 09       	sbc	r21, r1
   12542:	e3 2e       	mov	r14, r19
   12544:	02 2f       	mov	r16, r18
   12546:	24 2f       	mov	r18, r20
   12548:	ae 01       	movw	r20, r28
   1254a:	07 d0       	rcall	.+14     	; 0x1255a <dtoa_prf>
   1254c:	ce 01       	movw	r24, r28
   1254e:	df 91       	pop	r29
   12550:	cf 91       	pop	r28
   12552:	1f 91       	pop	r17
   12554:	0f 91       	pop	r16
   12556:	ef 90       	pop	r14
   12558:	08 95       	ret

0001255a <dtoa_prf>:
   1255a:	8f 92       	push	r8
   1255c:	9f 92       	push	r9
   1255e:	af 92       	push	r10
   12560:	bf 92       	push	r11
   12562:	cf 92       	push	r12
   12564:	df 92       	push	r13
   12566:	ef 92       	push	r14
   12568:	ff 92       	push	r15
   1256a:	0f 93       	push	r16
   1256c:	1f 93       	push	r17
   1256e:	cf 93       	push	r28
   12570:	df 93       	push	r29
   12572:	00 d0       	rcall	.+0      	; 0x12574 <dtoa_prf+0x1a>
   12574:	00 d0       	rcall	.+0      	; 0x12576 <dtoa_prf+0x1c>
   12576:	00 d0       	rcall	.+0      	; 0x12578 <dtoa_prf+0x1e>
   12578:	cd b7       	in	r28, 0x3d	; 61
   1257a:	de b7       	in	r29, 0x3e	; 62
   1257c:	6a 01       	movw	r12, r20
   1257e:	f2 2e       	mov	r15, r18
   12580:	b0 2e       	mov	r11, r16
   12582:	10 2f       	mov	r17, r16
   12584:	fb e3       	ldi	r31, 0x3B	; 59
   12586:	af 2e       	mov	r10, r31
   12588:	a0 16       	cp	r10, r16
   1258a:	08 f4       	brcc	.+2      	; 0x1258e <dtoa_prf+0x34>
   1258c:	1b e3       	ldi	r17, 0x3B	; 59
   1258e:	1f 5f       	subi	r17, 0xFF	; 255
   12590:	01 2f       	mov	r16, r17
   12592:	27 e0       	ldi	r18, 0x07	; 7
   12594:	ae 01       	movw	r20, r28
   12596:	4f 5f       	subi	r20, 0xFF	; 255
   12598:	5f 4f       	sbci	r21, 0xFF	; 255
   1259a:	57 d1       	rcall	.+686    	; 0x1284a <__ftoa_engine>
   1259c:	bc 01       	movw	r22, r24
   1259e:	89 81       	ldd	r24, Y+1	; 0x01
   125a0:	98 2f       	mov	r25, r24
   125a2:	99 70       	andi	r25, 0x09	; 9
   125a4:	91 30       	cpi	r25, 0x01	; 1
   125a6:	09 f4       	brne	.+2      	; 0x125aa <dtoa_prf+0x50>
   125a8:	4e c0       	rjmp	.+156    	; 0x12646 <dtoa_prf+0xec>
   125aa:	9b e2       	ldi	r25, 0x2B	; 43
   125ac:	e1 fc       	sbrc	r14, 1
   125ae:	04 c0       	rjmp	.+8      	; 0x125b8 <dtoa_prf+0x5e>
   125b0:	9e 2d       	mov	r25, r14
   125b2:	91 70       	andi	r25, 0x01	; 1
   125b4:	e0 fc       	sbrc	r14, 0
   125b6:	49 c0       	rjmp	.+146    	; 0x1264a <dtoa_prf+0xf0>
   125b8:	5e 2d       	mov	r21, r14
   125ba:	50 71       	andi	r21, 0x10	; 16
   125bc:	e8 2f       	mov	r30, r24
   125be:	e8 70       	andi	r30, 0x08	; 8
   125c0:	83 ff       	sbrs	r24, 3
   125c2:	55 c0       	rjmp	.+170    	; 0x1266e <dtoa_prf+0x114>
   125c4:	84 e0       	ldi	r24, 0x04	; 4
   125c6:	91 11       	cpse	r25, r1
   125c8:	01 c0       	rjmp	.+2      	; 0x125cc <dtoa_prf+0x72>
   125ca:	83 e0       	ldi	r24, 0x03	; 3
   125cc:	ef 2d       	mov	r30, r15
   125ce:	e8 1b       	sub	r30, r24
   125d0:	8f 15       	cp	r24, r15
   125d2:	08 f0       	brcs	.+2      	; 0x125d6 <dtoa_prf+0x7c>
   125d4:	e0 e0       	ldi	r30, 0x00	; 0
   125d6:	d6 01       	movw	r26, r12
   125d8:	8e 2f       	mov	r24, r30
   125da:	20 e2       	ldi	r18, 0x20	; 32
   125dc:	55 23       	and	r21, r21
   125de:	c9 f1       	breq	.+114    	; 0x12652 <dtoa_prf+0xf8>
   125e0:	99 23       	and	r25, r25
   125e2:	29 f0       	breq	.+10     	; 0x125ee <dtoa_prf+0x94>
   125e4:	d6 01       	movw	r26, r12
   125e6:	9c 93       	st	X, r25
   125e8:	c6 01       	movw	r24, r12
   125ea:	01 96       	adiw	r24, 0x01	; 1
   125ec:	6c 01       	movw	r12, r24
   125ee:	96 01       	movw	r18, r12
   125f0:	2d 5f       	subi	r18, 0xFD	; 253
   125f2:	3f 4f       	sbci	r19, 0xFF	; 255
   125f4:	e2 fe       	sbrs	r14, 2
   125f6:	33 c0       	rjmp	.+102    	; 0x1265e <dtoa_prf+0x104>
   125f8:	8e e4       	ldi	r24, 0x4E	; 78
   125fa:	d6 01       	movw	r26, r12
   125fc:	8c 93       	st	X, r24
   125fe:	91 e4       	ldi	r25, 0x41	; 65
   12600:	11 96       	adiw	r26, 0x01	; 1
   12602:	9c 93       	st	X, r25
   12604:	11 97       	sbiw	r26, 0x01	; 1
   12606:	12 96       	adiw	r26, 0x02	; 2
   12608:	8c 93       	st	X, r24
   1260a:	d9 01       	movw	r26, r18
   1260c:	8e 2f       	mov	r24, r30
   1260e:	90 e2       	ldi	r25, 0x20	; 32
   12610:	81 11       	cpse	r24, r1
   12612:	2a c0       	rjmp	.+84     	; 0x12668 <dtoa_prf+0x10e>
   12614:	e2 0f       	add	r30, r18
   12616:	f3 2f       	mov	r31, r19
   12618:	f1 1d       	adc	r31, r1
   1261a:	10 82       	st	Z, r1
   1261c:	8e ef       	ldi	r24, 0xFE	; 254
   1261e:	9f ef       	ldi	r25, 0xFF	; 255
   12620:	29 96       	adiw	r28, 0x09	; 9
   12622:	0f b6       	in	r0, 0x3f	; 63
   12624:	f8 94       	cli
   12626:	de bf       	out	0x3e, r29	; 62
   12628:	0f be       	out	0x3f, r0	; 63
   1262a:	cd bf       	out	0x3d, r28	; 61
   1262c:	df 91       	pop	r29
   1262e:	cf 91       	pop	r28
   12630:	1f 91       	pop	r17
   12632:	0f 91       	pop	r16
   12634:	ff 90       	pop	r15
   12636:	ef 90       	pop	r14
   12638:	df 90       	pop	r13
   1263a:	cf 90       	pop	r12
   1263c:	bf 90       	pop	r11
   1263e:	af 90       	pop	r10
   12640:	9f 90       	pop	r9
   12642:	8f 90       	pop	r8
   12644:	08 95       	ret
   12646:	9d e2       	ldi	r25, 0x2D	; 45
   12648:	b7 cf       	rjmp	.-146    	; 0x125b8 <dtoa_prf+0x5e>
   1264a:	90 e2       	ldi	r25, 0x20	; 32
   1264c:	b5 cf       	rjmp	.-150    	; 0x125b8 <dtoa_prf+0x5e>
   1264e:	2d 93       	st	X+, r18
   12650:	81 50       	subi	r24, 0x01	; 1
   12652:	81 11       	cpse	r24, r1
   12654:	fc cf       	rjmp	.-8      	; 0x1264e <dtoa_prf+0xf4>
   12656:	ce 0e       	add	r12, r30
   12658:	d1 1c       	adc	r13, r1
   1265a:	e0 e0       	ldi	r30, 0x00	; 0
   1265c:	c1 cf       	rjmp	.-126    	; 0x125e0 <dtoa_prf+0x86>
   1265e:	8e e6       	ldi	r24, 0x6E	; 110
   12660:	d6 01       	movw	r26, r12
   12662:	8c 93       	st	X, r24
   12664:	91 e6       	ldi	r25, 0x61	; 97
   12666:	cc cf       	rjmp	.-104    	; 0x12600 <dtoa_prf+0xa6>
   12668:	9d 93       	st	X+, r25
   1266a:	81 50       	subi	r24, 0x01	; 1
   1266c:	d1 cf       	rjmp	.-94     	; 0x12610 <dtoa_prf+0xb6>
   1266e:	48 2f       	mov	r20, r24
   12670:	44 70       	andi	r20, 0x04	; 4
   12672:	82 ff       	sbrs	r24, 2
   12674:	3d c0       	rjmp	.+122    	; 0x126f0 <dtoa_prf+0x196>
   12676:	84 e0       	ldi	r24, 0x04	; 4
   12678:	91 11       	cpse	r25, r1
   1267a:	01 c0       	rjmp	.+2      	; 0x1267e <dtoa_prf+0x124>
   1267c:	83 e0       	ldi	r24, 0x03	; 3
   1267e:	8f 15       	cp	r24, r15
   12680:	10 f4       	brcc	.+4      	; 0x12686 <dtoa_prf+0x12c>
   12682:	ef 2d       	mov	r30, r15
   12684:	e8 1b       	sub	r30, r24
   12686:	d6 01       	movw	r26, r12
   12688:	8e 2f       	mov	r24, r30
   1268a:	20 e2       	ldi	r18, 0x20	; 32
   1268c:	55 23       	and	r21, r21
   1268e:	09 f1       	breq	.+66     	; 0x126d2 <dtoa_prf+0x178>
   12690:	99 23       	and	r25, r25
   12692:	29 f0       	breq	.+10     	; 0x1269e <dtoa_prf+0x144>
   12694:	d6 01       	movw	r26, r12
   12696:	9c 93       	st	X, r25
   12698:	c6 01       	movw	r24, r12
   1269a:	01 96       	adiw	r24, 0x01	; 1
   1269c:	6c 01       	movw	r12, r24
   1269e:	96 01       	movw	r18, r12
   126a0:	2d 5f       	subi	r18, 0xFD	; 253
   126a2:	3f 4f       	sbci	r19, 0xFF	; 255
   126a4:	e2 fe       	sbrs	r14, 2
   126a6:	1b c0       	rjmp	.+54     	; 0x126de <dtoa_prf+0x184>
   126a8:	89 e4       	ldi	r24, 0x49	; 73
   126aa:	d6 01       	movw	r26, r12
   126ac:	8c 93       	st	X, r24
   126ae:	8e e4       	ldi	r24, 0x4E	; 78
   126b0:	11 96       	adiw	r26, 0x01	; 1
   126b2:	8c 93       	st	X, r24
   126b4:	11 97       	sbiw	r26, 0x01	; 1
   126b6:	86 e4       	ldi	r24, 0x46	; 70
   126b8:	12 96       	adiw	r26, 0x02	; 2
   126ba:	8c 93       	st	X, r24
   126bc:	d9 01       	movw	r26, r18
   126be:	8e 2f       	mov	r24, r30
   126c0:	90 e2       	ldi	r25, 0x20	; 32
   126c2:	88 23       	and	r24, r24
   126c4:	09 f4       	brne	.+2      	; 0x126c8 <dtoa_prf+0x16e>
   126c6:	a6 cf       	rjmp	.-180    	; 0x12614 <dtoa_prf+0xba>
   126c8:	9d 93       	st	X+, r25
   126ca:	81 50       	subi	r24, 0x01	; 1
   126cc:	fa cf       	rjmp	.-12     	; 0x126c2 <dtoa_prf+0x168>
   126ce:	2d 93       	st	X+, r18
   126d0:	81 50       	subi	r24, 0x01	; 1
   126d2:	81 11       	cpse	r24, r1
   126d4:	fc cf       	rjmp	.-8      	; 0x126ce <dtoa_prf+0x174>
   126d6:	ce 0e       	add	r12, r30
   126d8:	d1 1c       	adc	r13, r1
   126da:	e0 e0       	ldi	r30, 0x00	; 0
   126dc:	d9 cf       	rjmp	.-78     	; 0x12690 <dtoa_prf+0x136>
   126de:	89 e6       	ldi	r24, 0x69	; 105
   126e0:	d6 01       	movw	r26, r12
   126e2:	8c 93       	st	X, r24
   126e4:	8e e6       	ldi	r24, 0x6E	; 110
   126e6:	11 96       	adiw	r26, 0x01	; 1
   126e8:	8c 93       	st	X, r24
   126ea:	11 97       	sbiw	r26, 0x01	; 1
   126ec:	86 e6       	ldi	r24, 0x66	; 102
   126ee:	e4 cf       	rjmp	.-56     	; 0x126b8 <dtoa_prf+0x15e>
   126f0:	9b 01       	movw	r18, r22
   126f2:	77 ff       	sbrs	r23, 7
   126f4:	02 c0       	rjmp	.+4      	; 0x126fa <dtoa_prf+0x1a0>
   126f6:	30 e0       	ldi	r19, 0x00	; 0
   126f8:	20 e0       	ldi	r18, 0x00	; 0
   126fa:	a1 e0       	ldi	r26, 0x01	; 1
   126fc:	b0 e0       	ldi	r27, 0x00	; 0
   126fe:	91 11       	cpse	r25, r1
   12700:	02 c0       	rjmp	.+4      	; 0x12706 <dtoa_prf+0x1ac>
   12702:	b0 e0       	ldi	r27, 0x00	; 0
   12704:	a0 e0       	ldi	r26, 0x00	; 0
   12706:	f9 01       	movw	r30, r18
   12708:	31 96       	adiw	r30, 0x01	; 1
   1270a:	ae 0f       	add	r26, r30
   1270c:	bf 1f       	adc	r27, r31
   1270e:	8b 2c       	mov	r8, r11
   12710:	91 2c       	mov	r9, r1
   12712:	bb 20       	and	r11, r11
   12714:	09 f4       	brne	.+2      	; 0x12718 <dtoa_prf+0x1be>
   12716:	61 c0       	rjmp	.+194    	; 0x127da <dtoa_prf+0x280>
   12718:	54 01       	movw	r10, r8
   1271a:	ef ef       	ldi	r30, 0xFF	; 255
   1271c:	ae 1a       	sub	r10, r30
   1271e:	be 0a       	sbc	r11, r30
   12720:	aa 0d       	add	r26, r10
   12722:	bb 1d       	adc	r27, r11
   12724:	fa 16       	cp	r15, r26
   12726:	1b 06       	cpc	r1, r27
   12728:	19 f0       	breq	.+6      	; 0x12730 <dtoa_prf+0x1d6>
   1272a:	14 f0       	brlt	.+4      	; 0x12730 <dtoa_prf+0x1d6>
   1272c:	4f 2d       	mov	r20, r15
   1272e:	4a 1b       	sub	r20, r26
   12730:	51 11       	cpse	r21, r1
   12732:	88 c0       	rjmp	.+272    	; 0x12844 <dtoa_prf+0x2ea>
   12734:	e3 fc       	sbrc	r14, 3
   12736:	59 c0       	rjmp	.+178    	; 0x127ea <dtoa_prf+0x290>
   12738:	76 01       	movw	r14, r12
   1273a:	a4 2f       	mov	r26, r20
   1273c:	b0 e2       	ldi	r27, 0x20	; 32
   1273e:	a1 11       	cpse	r26, r1
   12740:	4f c0       	rjmp	.+158    	; 0x127e0 <dtoa_prf+0x286>
   12742:	c4 0e       	add	r12, r20
   12744:	d1 1c       	adc	r13, r1
   12746:	99 23       	and	r25, r25
   12748:	09 f4       	brne	.+2      	; 0x1274c <dtoa_prf+0x1f2>
   1274a:	5b c0       	rjmp	.+182    	; 0x12802 <dtoa_prf+0x2a8>
   1274c:	40 e0       	ldi	r20, 0x00	; 0
   1274e:	d6 01       	movw	r26, r12
   12750:	11 96       	adiw	r26, 0x01	; 1
   12752:	f6 01       	movw	r30, r12
   12754:	90 83       	st	Z, r25
   12756:	6d 01       	movw	r12, r26
   12758:	55 23       	and	r21, r21
   1275a:	09 f4       	brne	.+2      	; 0x1275e <dtoa_prf+0x204>
   1275c:	48 c0       	rjmp	.+144    	; 0x127ee <dtoa_prf+0x294>
   1275e:	01 2f       	mov	r16, r17
   12760:	06 0f       	add	r16, r22
   12762:	9a 81       	ldd	r25, Y+2	; 0x02
   12764:	58 2f       	mov	r21, r24
   12766:	50 71       	andi	r21, 0x10	; 16
   12768:	84 ff       	sbrs	r24, 4
   1276a:	03 c0       	rjmp	.+6      	; 0x12772 <dtoa_prf+0x218>
   1276c:	91 33       	cpi	r25, 0x31	; 49
   1276e:	09 f4       	brne	.+2      	; 0x12772 <dtoa_prf+0x218>
   12770:	01 50       	subi	r16, 0x01	; 1
   12772:	10 16       	cp	r1, r16
   12774:	0c f0       	brlt	.+2      	; 0x12778 <dtoa_prf+0x21e>
   12776:	47 c0       	rjmp	.+142    	; 0x12806 <dtoa_prf+0x2ac>
   12778:	09 30       	cpi	r16, 0x09	; 9
   1277a:	08 f0       	brcs	.+2      	; 0x1277e <dtoa_prf+0x224>
   1277c:	08 e0       	ldi	r16, 0x08	; 8
   1277e:	ee e2       	ldi	r30, 0x2E	; 46
   12780:	fe 2e       	mov	r15, r30
   12782:	5b 01       	movw	r10, r22
   12784:	a0 1a       	sub	r10, r16
   12786:	b1 08       	sbc	r11, r1
   12788:	85 01       	movw	r16, r10
   1278a:	91 94       	neg	r9
   1278c:	81 94       	neg	r8
   1278e:	91 08       	sbc	r9, r1
   12790:	2f 3f       	cpi	r18, 0xFF	; 255
   12792:	32 07       	cpc	r19, r18
   12794:	29 f4       	brne	.+10     	; 0x127a0 <dtoa_prf+0x246>
   12796:	d6 01       	movw	r26, r12
   12798:	fc 92       	st	X, r15
   1279a:	f6 01       	movw	r30, r12
   1279c:	31 96       	adiw	r30, 0x01	; 1
   1279e:	6f 01       	movw	r12, r30
   127a0:	62 17       	cp	r22, r18
   127a2:	73 07       	cpc	r23, r19
   127a4:	94 f1       	brlt	.+100    	; 0x1280a <dtoa_prf+0x2b0>
   127a6:	02 17       	cp	r16, r18
   127a8:	13 07       	cpc	r17, r19
   127aa:	7c f5       	brge	.+94     	; 0x1280a <dtoa_prf+0x2b0>
   127ac:	db 01       	movw	r26, r22
   127ae:	a2 1b       	sub	r26, r18
   127b0:	b3 0b       	sbc	r27, r19
   127b2:	aa 24       	eor	r10, r10
   127b4:	a3 94       	inc	r10
   127b6:	b1 2c       	mov	r11, r1
   127b8:	ac 0e       	add	r10, r28
   127ba:	bd 1e       	adc	r11, r29
   127bc:	aa 0d       	add	r26, r10
   127be:	bb 1d       	adc	r27, r11
   127c0:	11 96       	adiw	r26, 0x01	; 1
   127c2:	8c 91       	ld	r24, X
   127c4:	21 50       	subi	r18, 0x01	; 1
   127c6:	31 09       	sbc	r19, r1
   127c8:	d6 01       	movw	r26, r12
   127ca:	11 96       	adiw	r26, 0x01	; 1
   127cc:	28 15       	cp	r18, r8
   127ce:	39 05       	cpc	r19, r9
   127d0:	f4 f0       	brlt	.+60     	; 0x1280e <dtoa_prf+0x2b4>
   127d2:	f6 01       	movw	r30, r12
   127d4:	80 83       	st	Z, r24
   127d6:	6d 01       	movw	r12, r26
   127d8:	db cf       	rjmp	.-74     	; 0x12790 <dtoa_prf+0x236>
   127da:	b1 2c       	mov	r11, r1
   127dc:	a1 2c       	mov	r10, r1
   127de:	a0 cf       	rjmp	.-192    	; 0x12720 <dtoa_prf+0x1c6>
   127e0:	f7 01       	movw	r30, r14
   127e2:	b1 93       	st	Z+, r27
   127e4:	7f 01       	movw	r14, r30
   127e6:	a1 50       	subi	r26, 0x01	; 1
   127e8:	aa cf       	rjmp	.-172    	; 0x1273e <dtoa_prf+0x1e4>
   127ea:	91 11       	cpse	r25, r1
   127ec:	b0 cf       	rjmp	.-160    	; 0x1274e <dtoa_prf+0x1f4>
   127ee:	d6 01       	movw	r26, r12
   127f0:	94 2f       	mov	r25, r20
   127f2:	50 e3       	ldi	r21, 0x30	; 48
   127f4:	02 c0       	rjmp	.+4      	; 0x127fa <dtoa_prf+0x2a0>
   127f6:	5d 93       	st	X+, r21
   127f8:	91 50       	subi	r25, 0x01	; 1
   127fa:	91 11       	cpse	r25, r1
   127fc:	fc cf       	rjmp	.-8      	; 0x127f6 <dtoa_prf+0x29c>
   127fe:	c4 0e       	add	r12, r20
   12800:	d1 1c       	adc	r13, r1
   12802:	40 e0       	ldi	r20, 0x00	; 0
   12804:	ac cf       	rjmp	.-168    	; 0x1275e <dtoa_prf+0x204>
   12806:	01 e0       	ldi	r16, 0x01	; 1
   12808:	ba cf       	rjmp	.-140    	; 0x1277e <dtoa_prf+0x224>
   1280a:	80 e3       	ldi	r24, 0x30	; 48
   1280c:	db cf       	rjmp	.-74     	; 0x127c4 <dtoa_prf+0x26a>
   1280e:	62 17       	cp	r22, r18
   12810:	73 07       	cpc	r23, r19
   12812:	31 f4       	brne	.+12     	; 0x12820 <dtoa_prf+0x2c6>
   12814:	96 33       	cpi	r25, 0x36	; 54
   12816:	88 f4       	brcc	.+34     	; 0x1283a <dtoa_prf+0x2e0>
   12818:	95 33       	cpi	r25, 0x35	; 53
   1281a:	11 f4       	brne	.+4      	; 0x12820 <dtoa_prf+0x2c6>
   1281c:	55 23       	and	r21, r21
   1281e:	69 f0       	breq	.+26     	; 0x1283a <dtoa_prf+0x2e0>
   12820:	f6 01       	movw	r30, r12
   12822:	80 83       	st	Z, r24
   12824:	fd 01       	movw	r30, r26
   12826:	84 2f       	mov	r24, r20
   12828:	90 e2       	ldi	r25, 0x20	; 32
   1282a:	81 11       	cpse	r24, r1
   1282c:	08 c0       	rjmp	.+16     	; 0x1283e <dtoa_prf+0x2e4>
   1282e:	a4 0f       	add	r26, r20
   12830:	b1 1d       	adc	r27, r1
   12832:	1c 92       	st	X, r1
   12834:	90 e0       	ldi	r25, 0x00	; 0
   12836:	80 e0       	ldi	r24, 0x00	; 0
   12838:	f3 ce       	rjmp	.-538    	; 0x12620 <dtoa_prf+0xc6>
   1283a:	81 e3       	ldi	r24, 0x31	; 49
   1283c:	f1 cf       	rjmp	.-30     	; 0x12820 <dtoa_prf+0x2c6>
   1283e:	91 93       	st	Z+, r25
   12840:	81 50       	subi	r24, 0x01	; 1
   12842:	f3 cf       	rjmp	.-26     	; 0x1282a <dtoa_prf+0x2d0>
   12844:	91 11       	cpse	r25, r1
   12846:	83 cf       	rjmp	.-250    	; 0x1274e <dtoa_prf+0x1f4>
   12848:	8a cf       	rjmp	.-236    	; 0x1275e <dtoa_prf+0x204>

0001284a <__ftoa_engine>:
   1284a:	28 30       	cpi	r18, 0x08	; 8
   1284c:	08 f0       	brcs	.+2      	; 0x12850 <__ftoa_engine+0x6>
   1284e:	27 e0       	ldi	r18, 0x07	; 7
   12850:	33 27       	eor	r19, r19
   12852:	da 01       	movw	r26, r20
   12854:	99 0f       	add	r25, r25
   12856:	31 1d       	adc	r19, r1
   12858:	87 fd       	sbrc	r24, 7
   1285a:	91 60       	ori	r25, 0x01	; 1
   1285c:	00 96       	adiw	r24, 0x00	; 0
   1285e:	61 05       	cpc	r22, r1
   12860:	71 05       	cpc	r23, r1
   12862:	39 f4       	brne	.+14     	; 0x12872 <__ftoa_engine+0x28>
   12864:	32 60       	ori	r19, 0x02	; 2
   12866:	2e 5f       	subi	r18, 0xFE	; 254
   12868:	3d 93       	st	X+, r19
   1286a:	30 e3       	ldi	r19, 0x30	; 48
   1286c:	2a 95       	dec	r18
   1286e:	e1 f7       	brne	.-8      	; 0x12868 <__ftoa_engine+0x1e>
   12870:	08 95       	ret
   12872:	9f 3f       	cpi	r25, 0xFF	; 255
   12874:	30 f0       	brcs	.+12     	; 0x12882 <__ftoa_engine+0x38>
   12876:	80 38       	cpi	r24, 0x80	; 128
   12878:	71 05       	cpc	r23, r1
   1287a:	61 05       	cpc	r22, r1
   1287c:	09 f0       	breq	.+2      	; 0x12880 <__ftoa_engine+0x36>
   1287e:	3c 5f       	subi	r19, 0xFC	; 252
   12880:	3c 5f       	subi	r19, 0xFC	; 252
   12882:	3d 93       	st	X+, r19
   12884:	91 30       	cpi	r25, 0x01	; 1
   12886:	08 f0       	brcs	.+2      	; 0x1288a <__ftoa_engine+0x40>
   12888:	80 68       	ori	r24, 0x80	; 128
   1288a:	91 1d       	adc	r25, r1
   1288c:	df 93       	push	r29
   1288e:	cf 93       	push	r28
   12890:	1f 93       	push	r17
   12892:	0f 93       	push	r16
   12894:	ff 92       	push	r15
   12896:	ef 92       	push	r14
   12898:	19 2f       	mov	r17, r25
   1289a:	98 7f       	andi	r25, 0xF8	; 248
   1289c:	96 95       	lsr	r25
   1289e:	e9 2f       	mov	r30, r25
   128a0:	96 95       	lsr	r25
   128a2:	96 95       	lsr	r25
   128a4:	e9 0f       	add	r30, r25
   128a6:	ff 27       	eor	r31, r31
   128a8:	e2 57       	subi	r30, 0x72	; 114
   128aa:	fe 4f       	sbci	r31, 0xFE	; 254
   128ac:	99 27       	eor	r25, r25
   128ae:	33 27       	eor	r19, r19
   128b0:	ee 24       	eor	r14, r14
   128b2:	ff 24       	eor	r15, r15
   128b4:	a7 01       	movw	r20, r14
   128b6:	e7 01       	movw	r28, r14
   128b8:	05 90       	lpm	r0, Z+
   128ba:	08 94       	sec
   128bc:	07 94       	ror	r0
   128be:	28 f4       	brcc	.+10     	; 0x128ca <__ftoa_engine+0x80>
   128c0:	36 0f       	add	r19, r22
   128c2:	e7 1e       	adc	r14, r23
   128c4:	f8 1e       	adc	r15, r24
   128c6:	49 1f       	adc	r20, r25
   128c8:	51 1d       	adc	r21, r1
   128ca:	66 0f       	add	r22, r22
   128cc:	77 1f       	adc	r23, r23
   128ce:	88 1f       	adc	r24, r24
   128d0:	99 1f       	adc	r25, r25
   128d2:	06 94       	lsr	r0
   128d4:	a1 f7       	brne	.-24     	; 0x128be <__ftoa_engine+0x74>
   128d6:	05 90       	lpm	r0, Z+
   128d8:	07 94       	ror	r0
   128da:	28 f4       	brcc	.+10     	; 0x128e6 <__ftoa_engine+0x9c>
   128dc:	e7 0e       	add	r14, r23
   128de:	f8 1e       	adc	r15, r24
   128e0:	49 1f       	adc	r20, r25
   128e2:	56 1f       	adc	r21, r22
   128e4:	c1 1d       	adc	r28, r1
   128e6:	77 0f       	add	r23, r23
   128e8:	88 1f       	adc	r24, r24
   128ea:	99 1f       	adc	r25, r25
   128ec:	66 1f       	adc	r22, r22
   128ee:	06 94       	lsr	r0
   128f0:	a1 f7       	brne	.-24     	; 0x128da <__ftoa_engine+0x90>
   128f2:	05 90       	lpm	r0, Z+
   128f4:	07 94       	ror	r0
   128f6:	28 f4       	brcc	.+10     	; 0x12902 <__ftoa_engine+0xb8>
   128f8:	f8 0e       	add	r15, r24
   128fa:	49 1f       	adc	r20, r25
   128fc:	56 1f       	adc	r21, r22
   128fe:	c7 1f       	adc	r28, r23
   12900:	d1 1d       	adc	r29, r1
   12902:	88 0f       	add	r24, r24
   12904:	99 1f       	adc	r25, r25
   12906:	66 1f       	adc	r22, r22
   12908:	77 1f       	adc	r23, r23
   1290a:	06 94       	lsr	r0
   1290c:	a1 f7       	brne	.-24     	; 0x128f6 <__ftoa_engine+0xac>
   1290e:	05 90       	lpm	r0, Z+
   12910:	07 94       	ror	r0
   12912:	20 f4       	brcc	.+8      	; 0x1291c <__ftoa_engine+0xd2>
   12914:	49 0f       	add	r20, r25
   12916:	56 1f       	adc	r21, r22
   12918:	c7 1f       	adc	r28, r23
   1291a:	d8 1f       	adc	r29, r24
   1291c:	99 0f       	add	r25, r25
   1291e:	66 1f       	adc	r22, r22
   12920:	77 1f       	adc	r23, r23
   12922:	88 1f       	adc	r24, r24
   12924:	06 94       	lsr	r0
   12926:	a9 f7       	brne	.-22     	; 0x12912 <__ftoa_engine+0xc8>
   12928:	84 91       	lpm	r24, Z
   1292a:	10 95       	com	r17
   1292c:	17 70       	andi	r17, 0x07	; 7
   1292e:	41 f0       	breq	.+16     	; 0x12940 <__ftoa_engine+0xf6>
   12930:	d6 95       	lsr	r29
   12932:	c7 95       	ror	r28
   12934:	57 95       	ror	r21
   12936:	47 95       	ror	r20
   12938:	f7 94       	ror	r15
   1293a:	e7 94       	ror	r14
   1293c:	1a 95       	dec	r17
   1293e:	c1 f7       	brne	.-16     	; 0x12930 <__ftoa_engine+0xe6>
   12940:	e4 e3       	ldi	r30, 0x34	; 52
   12942:	f1 e0       	ldi	r31, 0x01	; 1
   12944:	68 94       	set
   12946:	15 90       	lpm	r1, Z+
   12948:	15 91       	lpm	r17, Z+
   1294a:	35 91       	lpm	r19, Z+
   1294c:	65 91       	lpm	r22, Z+
   1294e:	95 91       	lpm	r25, Z+
   12950:	05 90       	lpm	r0, Z+
   12952:	7f e2       	ldi	r23, 0x2F	; 47
   12954:	73 95       	inc	r23
   12956:	e1 18       	sub	r14, r1
   12958:	f1 0a       	sbc	r15, r17
   1295a:	43 0b       	sbc	r20, r19
   1295c:	56 0b       	sbc	r21, r22
   1295e:	c9 0b       	sbc	r28, r25
   12960:	d0 09       	sbc	r29, r0
   12962:	c0 f7       	brcc	.-16     	; 0x12954 <__ftoa_engine+0x10a>
   12964:	e1 0c       	add	r14, r1
   12966:	f1 1e       	adc	r15, r17
   12968:	43 1f       	adc	r20, r19
   1296a:	56 1f       	adc	r21, r22
   1296c:	c9 1f       	adc	r28, r25
   1296e:	d0 1d       	adc	r29, r0
   12970:	7e f4       	brtc	.+30     	; 0x12990 <__ftoa_engine+0x146>
   12972:	70 33       	cpi	r23, 0x30	; 48
   12974:	11 f4       	brne	.+4      	; 0x1297a <__ftoa_engine+0x130>
   12976:	8a 95       	dec	r24
   12978:	e6 cf       	rjmp	.-52     	; 0x12946 <__ftoa_engine+0xfc>
   1297a:	e8 94       	clt
   1297c:	01 50       	subi	r16, 0x01	; 1
   1297e:	30 f0       	brcs	.+12     	; 0x1298c <__ftoa_engine+0x142>
   12980:	08 0f       	add	r16, r24
   12982:	0a f4       	brpl	.+2      	; 0x12986 <__ftoa_engine+0x13c>
   12984:	00 27       	eor	r16, r16
   12986:	02 17       	cp	r16, r18
   12988:	08 f4       	brcc	.+2      	; 0x1298c <__ftoa_engine+0x142>
   1298a:	20 2f       	mov	r18, r16
   1298c:	23 95       	inc	r18
   1298e:	02 2f       	mov	r16, r18
   12990:	7a 33       	cpi	r23, 0x3A	; 58
   12992:	28 f0       	brcs	.+10     	; 0x1299e <__ftoa_engine+0x154>
   12994:	79 e3       	ldi	r23, 0x39	; 57
   12996:	7d 93       	st	X+, r23
   12998:	2a 95       	dec	r18
   1299a:	e9 f7       	brne	.-6      	; 0x12996 <__ftoa_engine+0x14c>
   1299c:	10 c0       	rjmp	.+32     	; 0x129be <__ftoa_engine+0x174>
   1299e:	7d 93       	st	X+, r23
   129a0:	2a 95       	dec	r18
   129a2:	89 f6       	brne	.-94     	; 0x12946 <__ftoa_engine+0xfc>
   129a4:	06 94       	lsr	r0
   129a6:	97 95       	ror	r25
   129a8:	67 95       	ror	r22
   129aa:	37 95       	ror	r19
   129ac:	17 95       	ror	r17
   129ae:	17 94       	ror	r1
   129b0:	e1 18       	sub	r14, r1
   129b2:	f1 0a       	sbc	r15, r17
   129b4:	43 0b       	sbc	r20, r19
   129b6:	56 0b       	sbc	r21, r22
   129b8:	c9 0b       	sbc	r28, r25
   129ba:	d0 09       	sbc	r29, r0
   129bc:	98 f0       	brcs	.+38     	; 0x129e4 <__ftoa_engine+0x19a>
   129be:	23 95       	inc	r18
   129c0:	7e 91       	ld	r23, -X
   129c2:	73 95       	inc	r23
   129c4:	7a 33       	cpi	r23, 0x3A	; 58
   129c6:	08 f0       	brcs	.+2      	; 0x129ca <__ftoa_engine+0x180>
   129c8:	70 e3       	ldi	r23, 0x30	; 48
   129ca:	7c 93       	st	X, r23
   129cc:	20 13       	cpse	r18, r16
   129ce:	b8 f7       	brcc	.-18     	; 0x129be <__ftoa_engine+0x174>
   129d0:	7e 91       	ld	r23, -X
   129d2:	70 61       	ori	r23, 0x10	; 16
   129d4:	7d 93       	st	X+, r23
   129d6:	30 f0       	brcs	.+12     	; 0x129e4 <__ftoa_engine+0x19a>
   129d8:	83 95       	inc	r24
   129da:	71 e3       	ldi	r23, 0x31	; 49
   129dc:	7d 93       	st	X+, r23
   129de:	70 e3       	ldi	r23, 0x30	; 48
   129e0:	2a 95       	dec	r18
   129e2:	e1 f7       	brne	.-8      	; 0x129dc <__ftoa_engine+0x192>
   129e4:	11 24       	eor	r1, r1
   129e6:	ef 90       	pop	r14
   129e8:	ff 90       	pop	r15
   129ea:	0f 91       	pop	r16
   129ec:	1f 91       	pop	r17
   129ee:	cf 91       	pop	r28
   129f0:	df 91       	pop	r29
   129f2:	99 27       	eor	r25, r25
   129f4:	87 fd       	sbrc	r24, 7
   129f6:	90 95       	com	r25
   129f8:	08 95       	ret

000129fa <eeprom_read_dword>:
   129fa:	a6 e1       	ldi	r26, 0x16	; 22
   129fc:	b0 e0       	ldi	r27, 0x00	; 0
   129fe:	44 e0       	ldi	r20, 0x04	; 4
   12a00:	50 e0       	ldi	r21, 0x00	; 0
   12a02:	13 c0       	rjmp	.+38     	; 0x12a2a <eeprom_read_blraw>

00012a04 <eeprom_read_word>:
   12a04:	a8 e1       	ldi	r26, 0x18	; 24
   12a06:	b0 e0       	ldi	r27, 0x00	; 0
   12a08:	42 e0       	ldi	r20, 0x02	; 2
   12a0a:	50 e0       	ldi	r21, 0x00	; 0
   12a0c:	0e c0       	rjmp	.+28     	; 0x12a2a <eeprom_read_blraw>

00012a0e <eeprom_update_dword>:
   12a0e:	03 96       	adiw	r24, 0x03	; 3
   12a10:	27 2f       	mov	r18, r23
   12a12:	1a d0       	rcall	.+52     	; 0x12a48 <eeprom_update_r18>
   12a14:	18 d0       	rcall	.+48     	; 0x12a46 <eeprom_update_byte>
   12a16:	25 2f       	mov	r18, r21
   12a18:	17 d0       	rcall	.+46     	; 0x12a48 <eeprom_update_r18>
   12a1a:	24 2f       	mov	r18, r20
   12a1c:	15 c0       	rjmp	.+42     	; 0x12a48 <eeprom_update_r18>

00012a1e <eeprom_update_word>:
   12a1e:	01 96       	adiw	r24, 0x01	; 1
   12a20:	27 2f       	mov	r18, r23
   12a22:	12 d0       	rcall	.+36     	; 0x12a48 <eeprom_update_r18>
   12a24:	10 c0       	rjmp	.+32     	; 0x12a46 <eeprom_update_byte>

00012a26 <eeprom_read_block>:
   12a26:	dc 01       	movw	r26, r24
   12a28:	cb 01       	movw	r24, r22

00012a2a <eeprom_read_blraw>:
   12a2a:	fc 01       	movw	r30, r24
   12a2c:	f9 99       	sbic	0x1f, 1	; 31
   12a2e:	fe cf       	rjmp	.-4      	; 0x12a2c <eeprom_read_blraw+0x2>
   12a30:	06 c0       	rjmp	.+12     	; 0x12a3e <eeprom_read_blraw+0x14>
   12a32:	f2 bd       	out	0x22, r31	; 34
   12a34:	e1 bd       	out	0x21, r30	; 33
   12a36:	f8 9a       	sbi	0x1f, 0	; 31
   12a38:	31 96       	adiw	r30, 0x01	; 1
   12a3a:	00 b4       	in	r0, 0x20	; 32
   12a3c:	0d 92       	st	X+, r0
   12a3e:	41 50       	subi	r20, 0x01	; 1
   12a40:	50 40       	sbci	r21, 0x00	; 0
   12a42:	b8 f7       	brcc	.-18     	; 0x12a32 <eeprom_read_blraw+0x8>
   12a44:	08 95       	ret

00012a46 <eeprom_update_byte>:
   12a46:	26 2f       	mov	r18, r22

00012a48 <eeprom_update_r18>:
   12a48:	f9 99       	sbic	0x1f, 1	; 31
   12a4a:	fe cf       	rjmp	.-4      	; 0x12a48 <eeprom_update_r18>
   12a4c:	92 bd       	out	0x22, r25	; 34
   12a4e:	81 bd       	out	0x21, r24	; 33
   12a50:	f8 9a       	sbi	0x1f, 0	; 31
   12a52:	01 97       	sbiw	r24, 0x01	; 1
   12a54:	00 b4       	in	r0, 0x20	; 32
   12a56:	02 16       	cp	r0, r18
   12a58:	39 f0       	breq	.+14     	; 0x12a68 <eeprom_update_r18+0x20>
   12a5a:	1f ba       	out	0x1f, r1	; 31
   12a5c:	20 bd       	out	0x20, r18	; 32
   12a5e:	0f b6       	in	r0, 0x3f	; 63
   12a60:	f8 94       	cli
   12a62:	fa 9a       	sbi	0x1f, 2	; 31
   12a64:	f9 9a       	sbi	0x1f, 1	; 31
   12a66:	0f be       	out	0x3f, r0	; 63
   12a68:	08 95       	ret

00012a6a <__subsf3>:
   12a6a:	50 58       	subi	r21, 0x80	; 128

00012a6c <__addsf3>:
   12a6c:	bb 27       	eor	r27, r27
   12a6e:	aa 27       	eor	r26, r26
   12a70:	0e d0       	rcall	.+28     	; 0x12a8e <__addsf3x>
   12a72:	c2 c1       	rjmp	.+900    	; 0x12df8 <__fp_round>
   12a74:	b3 d1       	rcall	.+870    	; 0x12ddc <__fp_pscA>
   12a76:	30 f0       	brcs	.+12     	; 0x12a84 <__addsf3+0x18>
   12a78:	b8 d1       	rcall	.+880    	; 0x12dea <__fp_pscB>
   12a7a:	20 f0       	brcs	.+8      	; 0x12a84 <__addsf3+0x18>
   12a7c:	31 f4       	brne	.+12     	; 0x12a8a <__addsf3+0x1e>
   12a7e:	9f 3f       	cpi	r25, 0xFF	; 255
   12a80:	11 f4       	brne	.+4      	; 0x12a86 <__addsf3+0x1a>
   12a82:	1e f4       	brtc	.+6      	; 0x12a8a <__addsf3+0x1e>
   12a84:	83 c1       	rjmp	.+774    	; 0x12d8c <__fp_nan>
   12a86:	0e f4       	brtc	.+2      	; 0x12a8a <__addsf3+0x1e>
   12a88:	e0 95       	com	r30
   12a8a:	e7 fb       	bst	r30, 7
   12a8c:	79 c1       	rjmp	.+754    	; 0x12d80 <__fp_inf>

00012a8e <__addsf3x>:
   12a8e:	e9 2f       	mov	r30, r25
   12a90:	c4 d1       	rcall	.+904    	; 0x12e1a <__fp_split3>
   12a92:	80 f3       	brcs	.-32     	; 0x12a74 <__addsf3+0x8>
   12a94:	ba 17       	cp	r27, r26
   12a96:	62 07       	cpc	r22, r18
   12a98:	73 07       	cpc	r23, r19
   12a9a:	84 07       	cpc	r24, r20
   12a9c:	95 07       	cpc	r25, r21
   12a9e:	18 f0       	brcs	.+6      	; 0x12aa6 <__addsf3x+0x18>
   12aa0:	71 f4       	brne	.+28     	; 0x12abe <__addsf3x+0x30>
   12aa2:	9e f5       	brtc	.+102    	; 0x12b0a <__addsf3x+0x7c>
   12aa4:	dc c1       	rjmp	.+952    	; 0x12e5e <__fp_zero>
   12aa6:	0e f4       	brtc	.+2      	; 0x12aaa <__addsf3x+0x1c>
   12aa8:	e0 95       	com	r30
   12aaa:	0b 2e       	mov	r0, r27
   12aac:	ba 2f       	mov	r27, r26
   12aae:	a0 2d       	mov	r26, r0
   12ab0:	0b 01       	movw	r0, r22
   12ab2:	b9 01       	movw	r22, r18
   12ab4:	90 01       	movw	r18, r0
   12ab6:	0c 01       	movw	r0, r24
   12ab8:	ca 01       	movw	r24, r20
   12aba:	a0 01       	movw	r20, r0
   12abc:	11 24       	eor	r1, r1
   12abe:	ff 27       	eor	r31, r31
   12ac0:	59 1b       	sub	r21, r25
   12ac2:	99 f0       	breq	.+38     	; 0x12aea <__addsf3x+0x5c>
   12ac4:	59 3f       	cpi	r21, 0xF9	; 249
   12ac6:	50 f4       	brcc	.+20     	; 0x12adc <__addsf3x+0x4e>
   12ac8:	50 3e       	cpi	r21, 0xE0	; 224
   12aca:	68 f1       	brcs	.+90     	; 0x12b26 <__addsf3x+0x98>
   12acc:	1a 16       	cp	r1, r26
   12ace:	f0 40       	sbci	r31, 0x00	; 0
   12ad0:	a2 2f       	mov	r26, r18
   12ad2:	23 2f       	mov	r18, r19
   12ad4:	34 2f       	mov	r19, r20
   12ad6:	44 27       	eor	r20, r20
   12ad8:	58 5f       	subi	r21, 0xF8	; 248
   12ada:	f3 cf       	rjmp	.-26     	; 0x12ac2 <__addsf3x+0x34>
   12adc:	46 95       	lsr	r20
   12ade:	37 95       	ror	r19
   12ae0:	27 95       	ror	r18
   12ae2:	a7 95       	ror	r26
   12ae4:	f0 40       	sbci	r31, 0x00	; 0
   12ae6:	53 95       	inc	r21
   12ae8:	c9 f7       	brne	.-14     	; 0x12adc <__addsf3x+0x4e>
   12aea:	7e f4       	brtc	.+30     	; 0x12b0a <__addsf3x+0x7c>
   12aec:	1f 16       	cp	r1, r31
   12aee:	ba 0b       	sbc	r27, r26
   12af0:	62 0b       	sbc	r22, r18
   12af2:	73 0b       	sbc	r23, r19
   12af4:	84 0b       	sbc	r24, r20
   12af6:	ba f0       	brmi	.+46     	; 0x12b26 <__addsf3x+0x98>
   12af8:	91 50       	subi	r25, 0x01	; 1
   12afa:	a1 f0       	breq	.+40     	; 0x12b24 <__addsf3x+0x96>
   12afc:	ff 0f       	add	r31, r31
   12afe:	bb 1f       	adc	r27, r27
   12b00:	66 1f       	adc	r22, r22
   12b02:	77 1f       	adc	r23, r23
   12b04:	88 1f       	adc	r24, r24
   12b06:	c2 f7       	brpl	.-16     	; 0x12af8 <__addsf3x+0x6a>
   12b08:	0e c0       	rjmp	.+28     	; 0x12b26 <__addsf3x+0x98>
   12b0a:	ba 0f       	add	r27, r26
   12b0c:	62 1f       	adc	r22, r18
   12b0e:	73 1f       	adc	r23, r19
   12b10:	84 1f       	adc	r24, r20
   12b12:	48 f4       	brcc	.+18     	; 0x12b26 <__addsf3x+0x98>
   12b14:	87 95       	ror	r24
   12b16:	77 95       	ror	r23
   12b18:	67 95       	ror	r22
   12b1a:	b7 95       	ror	r27
   12b1c:	f7 95       	ror	r31
   12b1e:	9e 3f       	cpi	r25, 0xFE	; 254
   12b20:	08 f0       	brcs	.+2      	; 0x12b24 <__addsf3x+0x96>
   12b22:	b3 cf       	rjmp	.-154    	; 0x12a8a <__addsf3+0x1e>
   12b24:	93 95       	inc	r25
   12b26:	88 0f       	add	r24, r24
   12b28:	08 f0       	brcs	.+2      	; 0x12b2c <__addsf3x+0x9e>
   12b2a:	99 27       	eor	r25, r25
   12b2c:	ee 0f       	add	r30, r30
   12b2e:	97 95       	ror	r25
   12b30:	87 95       	ror	r24
   12b32:	08 95       	ret

00012b34 <atan>:
   12b34:	df 93       	push	r29
   12b36:	dd 27       	eor	r29, r29
   12b38:	b9 2f       	mov	r27, r25
   12b3a:	bf 77       	andi	r27, 0x7F	; 127
   12b3c:	40 e8       	ldi	r20, 0x80	; 128
   12b3e:	5f e3       	ldi	r21, 0x3F	; 63
   12b40:	16 16       	cp	r1, r22
   12b42:	17 06       	cpc	r1, r23
   12b44:	48 07       	cpc	r20, r24
   12b46:	5b 07       	cpc	r21, r27
   12b48:	10 f4       	brcc	.+4      	; 0x12b4e <atan+0x1a>
   12b4a:	d9 2f       	mov	r29, r25
   12b4c:	93 d1       	rcall	.+806    	; 0x12e74 <inverse>
   12b4e:	9f 93       	push	r25
   12b50:	8f 93       	push	r24
   12b52:	7f 93       	push	r23
   12b54:	6f 93       	push	r22
   12b56:	3a d2       	rcall	.+1140   	; 0x12fcc <square>
   12b58:	e4 ee       	ldi	r30, 0xE4	; 228
   12b5a:	f0 e0       	ldi	r31, 0x00	; 0
   12b5c:	1a d1       	rcall	.+564    	; 0x12d92 <__fp_powser>
   12b5e:	4c d1       	rcall	.+664    	; 0x12df8 <__fp_round>
   12b60:	2f 91       	pop	r18
   12b62:	3f 91       	pop	r19
   12b64:	4f 91       	pop	r20
   12b66:	5f 91       	pop	r21
   12b68:	98 d1       	rcall	.+816    	; 0x12e9a <__mulsf3x>
   12b6a:	dd 23       	and	r29, r29
   12b6c:	49 f0       	breq	.+18     	; 0x12b80 <atan+0x4c>
   12b6e:	90 58       	subi	r25, 0x80	; 128
   12b70:	a2 ea       	ldi	r26, 0xA2	; 162
   12b72:	2a ed       	ldi	r18, 0xDA	; 218
   12b74:	3f e0       	ldi	r19, 0x0F	; 15
   12b76:	49 ec       	ldi	r20, 0xC9	; 201
   12b78:	5f e3       	ldi	r21, 0x3F	; 63
   12b7a:	d0 78       	andi	r29, 0x80	; 128
   12b7c:	5d 27       	eor	r21, r29
   12b7e:	87 df       	rcall	.-242    	; 0x12a8e <__addsf3x>
   12b80:	df 91       	pop	r29
   12b82:	3a c1       	rjmp	.+628    	; 0x12df8 <__fp_round>

00012b84 <__cmpsf2>:
   12b84:	d9 d0       	rcall	.+434    	; 0x12d38 <__fp_cmp>
   12b86:	08 f4       	brcc	.+2      	; 0x12b8a <__cmpsf2+0x6>
   12b88:	81 e0       	ldi	r24, 0x01	; 1
   12b8a:	08 95       	ret

00012b8c <__divsf3>:
   12b8c:	0c d0       	rcall	.+24     	; 0x12ba6 <__divsf3x>
   12b8e:	34 c1       	rjmp	.+616    	; 0x12df8 <__fp_round>
   12b90:	2c d1       	rcall	.+600    	; 0x12dea <__fp_pscB>
   12b92:	40 f0       	brcs	.+16     	; 0x12ba4 <__divsf3+0x18>
   12b94:	23 d1       	rcall	.+582    	; 0x12ddc <__fp_pscA>
   12b96:	30 f0       	brcs	.+12     	; 0x12ba4 <__divsf3+0x18>
   12b98:	21 f4       	brne	.+8      	; 0x12ba2 <__divsf3+0x16>
   12b9a:	5f 3f       	cpi	r21, 0xFF	; 255
   12b9c:	19 f0       	breq	.+6      	; 0x12ba4 <__divsf3+0x18>
   12b9e:	f0 c0       	rjmp	.+480    	; 0x12d80 <__fp_inf>
   12ba0:	51 11       	cpse	r21, r1
   12ba2:	5e c1       	rjmp	.+700    	; 0x12e60 <__fp_szero>
   12ba4:	f3 c0       	rjmp	.+486    	; 0x12d8c <__fp_nan>

00012ba6 <__divsf3x>:
   12ba6:	39 d1       	rcall	.+626    	; 0x12e1a <__fp_split3>
   12ba8:	98 f3       	brcs	.-26     	; 0x12b90 <__divsf3+0x4>

00012baa <__divsf3_pse>:
   12baa:	99 23       	and	r25, r25
   12bac:	c9 f3       	breq	.-14     	; 0x12ba0 <__divsf3+0x14>
   12bae:	55 23       	and	r21, r21
   12bb0:	b1 f3       	breq	.-20     	; 0x12b9e <__divsf3+0x12>
   12bb2:	95 1b       	sub	r25, r21
   12bb4:	55 0b       	sbc	r21, r21
   12bb6:	bb 27       	eor	r27, r27
   12bb8:	aa 27       	eor	r26, r26
   12bba:	62 17       	cp	r22, r18
   12bbc:	73 07       	cpc	r23, r19
   12bbe:	84 07       	cpc	r24, r20
   12bc0:	38 f0       	brcs	.+14     	; 0x12bd0 <__divsf3_pse+0x26>
   12bc2:	9f 5f       	subi	r25, 0xFF	; 255
   12bc4:	5f 4f       	sbci	r21, 0xFF	; 255
   12bc6:	22 0f       	add	r18, r18
   12bc8:	33 1f       	adc	r19, r19
   12bca:	44 1f       	adc	r20, r20
   12bcc:	aa 1f       	adc	r26, r26
   12bce:	a9 f3       	breq	.-22     	; 0x12bba <__divsf3_pse+0x10>
   12bd0:	33 d0       	rcall	.+102    	; 0x12c38 <__divsf3_pse+0x8e>
   12bd2:	0e 2e       	mov	r0, r30
   12bd4:	3a f0       	brmi	.+14     	; 0x12be4 <__divsf3_pse+0x3a>
   12bd6:	e0 e8       	ldi	r30, 0x80	; 128
   12bd8:	30 d0       	rcall	.+96     	; 0x12c3a <__divsf3_pse+0x90>
   12bda:	91 50       	subi	r25, 0x01	; 1
   12bdc:	50 40       	sbci	r21, 0x00	; 0
   12bde:	e6 95       	lsr	r30
   12be0:	00 1c       	adc	r0, r0
   12be2:	ca f7       	brpl	.-14     	; 0x12bd6 <__divsf3_pse+0x2c>
   12be4:	29 d0       	rcall	.+82     	; 0x12c38 <__divsf3_pse+0x8e>
   12be6:	fe 2f       	mov	r31, r30
   12be8:	27 d0       	rcall	.+78     	; 0x12c38 <__divsf3_pse+0x8e>
   12bea:	66 0f       	add	r22, r22
   12bec:	77 1f       	adc	r23, r23
   12bee:	88 1f       	adc	r24, r24
   12bf0:	bb 1f       	adc	r27, r27
   12bf2:	26 17       	cp	r18, r22
   12bf4:	37 07       	cpc	r19, r23
   12bf6:	48 07       	cpc	r20, r24
   12bf8:	ab 07       	cpc	r26, r27
   12bfa:	b0 e8       	ldi	r27, 0x80	; 128
   12bfc:	09 f0       	breq	.+2      	; 0x12c00 <__divsf3_pse+0x56>
   12bfe:	bb 0b       	sbc	r27, r27
   12c00:	80 2d       	mov	r24, r0
   12c02:	bf 01       	movw	r22, r30
   12c04:	ff 27       	eor	r31, r31
   12c06:	93 58       	subi	r25, 0x83	; 131
   12c08:	5f 4f       	sbci	r21, 0xFF	; 255
   12c0a:	2a f0       	brmi	.+10     	; 0x12c16 <__divsf3_pse+0x6c>
   12c0c:	9e 3f       	cpi	r25, 0xFE	; 254
   12c0e:	51 05       	cpc	r21, r1
   12c10:	68 f0       	brcs	.+26     	; 0x12c2c <__divsf3_pse+0x82>
   12c12:	b6 c0       	rjmp	.+364    	; 0x12d80 <__fp_inf>
   12c14:	25 c1       	rjmp	.+586    	; 0x12e60 <__fp_szero>
   12c16:	5f 3f       	cpi	r21, 0xFF	; 255
   12c18:	ec f3       	brlt	.-6      	; 0x12c14 <__divsf3_pse+0x6a>
   12c1a:	98 3e       	cpi	r25, 0xE8	; 232
   12c1c:	dc f3       	brlt	.-10     	; 0x12c14 <__divsf3_pse+0x6a>
   12c1e:	86 95       	lsr	r24
   12c20:	77 95       	ror	r23
   12c22:	67 95       	ror	r22
   12c24:	b7 95       	ror	r27
   12c26:	f7 95       	ror	r31
   12c28:	9f 5f       	subi	r25, 0xFF	; 255
   12c2a:	c9 f7       	brne	.-14     	; 0x12c1e <__divsf3_pse+0x74>
   12c2c:	88 0f       	add	r24, r24
   12c2e:	91 1d       	adc	r25, r1
   12c30:	96 95       	lsr	r25
   12c32:	87 95       	ror	r24
   12c34:	97 f9       	bld	r25, 7
   12c36:	08 95       	ret
   12c38:	e1 e0       	ldi	r30, 0x01	; 1
   12c3a:	66 0f       	add	r22, r22
   12c3c:	77 1f       	adc	r23, r23
   12c3e:	88 1f       	adc	r24, r24
   12c40:	bb 1f       	adc	r27, r27
   12c42:	62 17       	cp	r22, r18
   12c44:	73 07       	cpc	r23, r19
   12c46:	84 07       	cpc	r24, r20
   12c48:	ba 07       	cpc	r27, r26
   12c4a:	20 f0       	brcs	.+8      	; 0x12c54 <__divsf3_pse+0xaa>
   12c4c:	62 1b       	sub	r22, r18
   12c4e:	73 0b       	sbc	r23, r19
   12c50:	84 0b       	sbc	r24, r20
   12c52:	ba 0b       	sbc	r27, r26
   12c54:	ee 1f       	adc	r30, r30
   12c56:	88 f7       	brcc	.-30     	; 0x12c3a <__divsf3_pse+0x90>
   12c58:	e0 95       	com	r30
   12c5a:	08 95       	ret

00012c5c <__fixsfsi>:
   12c5c:	04 d0       	rcall	.+8      	; 0x12c66 <__fixunssfsi>
   12c5e:	68 94       	set
   12c60:	b1 11       	cpse	r27, r1
   12c62:	fe c0       	rjmp	.+508    	; 0x12e60 <__fp_szero>
   12c64:	08 95       	ret

00012c66 <__fixunssfsi>:
   12c66:	e1 d0       	rcall	.+450    	; 0x12e2a <__fp_splitA>
   12c68:	88 f0       	brcs	.+34     	; 0x12c8c <__fixunssfsi+0x26>
   12c6a:	9f 57       	subi	r25, 0x7F	; 127
   12c6c:	90 f0       	brcs	.+36     	; 0x12c92 <__fixunssfsi+0x2c>
   12c6e:	b9 2f       	mov	r27, r25
   12c70:	99 27       	eor	r25, r25
   12c72:	b7 51       	subi	r27, 0x17	; 23
   12c74:	a0 f0       	brcs	.+40     	; 0x12c9e <__fixunssfsi+0x38>
   12c76:	d1 f0       	breq	.+52     	; 0x12cac <__fixunssfsi+0x46>
   12c78:	66 0f       	add	r22, r22
   12c7a:	77 1f       	adc	r23, r23
   12c7c:	88 1f       	adc	r24, r24
   12c7e:	99 1f       	adc	r25, r25
   12c80:	1a f0       	brmi	.+6      	; 0x12c88 <__fixunssfsi+0x22>
   12c82:	ba 95       	dec	r27
   12c84:	c9 f7       	brne	.-14     	; 0x12c78 <__fixunssfsi+0x12>
   12c86:	12 c0       	rjmp	.+36     	; 0x12cac <__fixunssfsi+0x46>
   12c88:	b1 30       	cpi	r27, 0x01	; 1
   12c8a:	81 f0       	breq	.+32     	; 0x12cac <__fixunssfsi+0x46>
   12c8c:	e8 d0       	rcall	.+464    	; 0x12e5e <__fp_zero>
   12c8e:	b1 e0       	ldi	r27, 0x01	; 1
   12c90:	08 95       	ret
   12c92:	e5 c0       	rjmp	.+458    	; 0x12e5e <__fp_zero>
   12c94:	67 2f       	mov	r22, r23
   12c96:	78 2f       	mov	r23, r24
   12c98:	88 27       	eor	r24, r24
   12c9a:	b8 5f       	subi	r27, 0xF8	; 248
   12c9c:	39 f0       	breq	.+14     	; 0x12cac <__fixunssfsi+0x46>
   12c9e:	b9 3f       	cpi	r27, 0xF9	; 249
   12ca0:	cc f3       	brlt	.-14     	; 0x12c94 <__fixunssfsi+0x2e>
   12ca2:	86 95       	lsr	r24
   12ca4:	77 95       	ror	r23
   12ca6:	67 95       	ror	r22
   12ca8:	b3 95       	inc	r27
   12caa:	d9 f7       	brne	.-10     	; 0x12ca2 <__fixunssfsi+0x3c>
   12cac:	3e f4       	brtc	.+14     	; 0x12cbc <__fixunssfsi+0x56>
   12cae:	90 95       	com	r25
   12cb0:	80 95       	com	r24
   12cb2:	70 95       	com	r23
   12cb4:	61 95       	neg	r22
   12cb6:	7f 4f       	sbci	r23, 0xFF	; 255
   12cb8:	8f 4f       	sbci	r24, 0xFF	; 255
   12cba:	9f 4f       	sbci	r25, 0xFF	; 255
   12cbc:	08 95       	ret

00012cbe <__floatunsisf>:
   12cbe:	e8 94       	clt
   12cc0:	09 c0       	rjmp	.+18     	; 0x12cd4 <__floatsisf+0x12>

00012cc2 <__floatsisf>:
   12cc2:	97 fb       	bst	r25, 7
   12cc4:	3e f4       	brtc	.+14     	; 0x12cd4 <__floatsisf+0x12>
   12cc6:	90 95       	com	r25
   12cc8:	80 95       	com	r24
   12cca:	70 95       	com	r23
   12ccc:	61 95       	neg	r22
   12cce:	7f 4f       	sbci	r23, 0xFF	; 255
   12cd0:	8f 4f       	sbci	r24, 0xFF	; 255
   12cd2:	9f 4f       	sbci	r25, 0xFF	; 255
   12cd4:	99 23       	and	r25, r25
   12cd6:	a9 f0       	breq	.+42     	; 0x12d02 <__floatsisf+0x40>
   12cd8:	f9 2f       	mov	r31, r25
   12cda:	96 e9       	ldi	r25, 0x96	; 150
   12cdc:	bb 27       	eor	r27, r27
   12cde:	93 95       	inc	r25
   12ce0:	f6 95       	lsr	r31
   12ce2:	87 95       	ror	r24
   12ce4:	77 95       	ror	r23
   12ce6:	67 95       	ror	r22
   12ce8:	b7 95       	ror	r27
   12cea:	f1 11       	cpse	r31, r1
   12cec:	f8 cf       	rjmp	.-16     	; 0x12cde <__floatsisf+0x1c>
   12cee:	fa f4       	brpl	.+62     	; 0x12d2e <__floatsisf+0x6c>
   12cf0:	bb 0f       	add	r27, r27
   12cf2:	11 f4       	brne	.+4      	; 0x12cf8 <__floatsisf+0x36>
   12cf4:	60 ff       	sbrs	r22, 0
   12cf6:	1b c0       	rjmp	.+54     	; 0x12d2e <__floatsisf+0x6c>
   12cf8:	6f 5f       	subi	r22, 0xFF	; 255
   12cfa:	7f 4f       	sbci	r23, 0xFF	; 255
   12cfc:	8f 4f       	sbci	r24, 0xFF	; 255
   12cfe:	9f 4f       	sbci	r25, 0xFF	; 255
   12d00:	16 c0       	rjmp	.+44     	; 0x12d2e <__floatsisf+0x6c>
   12d02:	88 23       	and	r24, r24
   12d04:	11 f0       	breq	.+4      	; 0x12d0a <__floatsisf+0x48>
   12d06:	96 e9       	ldi	r25, 0x96	; 150
   12d08:	11 c0       	rjmp	.+34     	; 0x12d2c <__floatsisf+0x6a>
   12d0a:	77 23       	and	r23, r23
   12d0c:	21 f0       	breq	.+8      	; 0x12d16 <__floatsisf+0x54>
   12d0e:	9e e8       	ldi	r25, 0x8E	; 142
   12d10:	87 2f       	mov	r24, r23
   12d12:	76 2f       	mov	r23, r22
   12d14:	05 c0       	rjmp	.+10     	; 0x12d20 <__floatsisf+0x5e>
   12d16:	66 23       	and	r22, r22
   12d18:	71 f0       	breq	.+28     	; 0x12d36 <__floatsisf+0x74>
   12d1a:	96 e8       	ldi	r25, 0x86	; 134
   12d1c:	86 2f       	mov	r24, r22
   12d1e:	70 e0       	ldi	r23, 0x00	; 0
   12d20:	60 e0       	ldi	r22, 0x00	; 0
   12d22:	2a f0       	brmi	.+10     	; 0x12d2e <__floatsisf+0x6c>
   12d24:	9a 95       	dec	r25
   12d26:	66 0f       	add	r22, r22
   12d28:	77 1f       	adc	r23, r23
   12d2a:	88 1f       	adc	r24, r24
   12d2c:	da f7       	brpl	.-10     	; 0x12d24 <__floatsisf+0x62>
   12d2e:	88 0f       	add	r24, r24
   12d30:	96 95       	lsr	r25
   12d32:	87 95       	ror	r24
   12d34:	97 f9       	bld	r25, 7
   12d36:	08 95       	ret

00012d38 <__fp_cmp>:
   12d38:	99 0f       	add	r25, r25
   12d3a:	00 08       	sbc	r0, r0
   12d3c:	55 0f       	add	r21, r21
   12d3e:	aa 0b       	sbc	r26, r26
   12d40:	e0 e8       	ldi	r30, 0x80	; 128
   12d42:	fe ef       	ldi	r31, 0xFE	; 254
   12d44:	16 16       	cp	r1, r22
   12d46:	17 06       	cpc	r1, r23
   12d48:	e8 07       	cpc	r30, r24
   12d4a:	f9 07       	cpc	r31, r25
   12d4c:	c0 f0       	brcs	.+48     	; 0x12d7e <__fp_cmp+0x46>
   12d4e:	12 16       	cp	r1, r18
   12d50:	13 06       	cpc	r1, r19
   12d52:	e4 07       	cpc	r30, r20
   12d54:	f5 07       	cpc	r31, r21
   12d56:	98 f0       	brcs	.+38     	; 0x12d7e <__fp_cmp+0x46>
   12d58:	62 1b       	sub	r22, r18
   12d5a:	73 0b       	sbc	r23, r19
   12d5c:	84 0b       	sbc	r24, r20
   12d5e:	95 0b       	sbc	r25, r21
   12d60:	39 f4       	brne	.+14     	; 0x12d70 <__fp_cmp+0x38>
   12d62:	0a 26       	eor	r0, r26
   12d64:	61 f0       	breq	.+24     	; 0x12d7e <__fp_cmp+0x46>
   12d66:	23 2b       	or	r18, r19
   12d68:	24 2b       	or	r18, r20
   12d6a:	25 2b       	or	r18, r21
   12d6c:	21 f4       	brne	.+8      	; 0x12d76 <__fp_cmp+0x3e>
   12d6e:	08 95       	ret
   12d70:	0a 26       	eor	r0, r26
   12d72:	09 f4       	brne	.+2      	; 0x12d76 <__fp_cmp+0x3e>
   12d74:	a1 40       	sbci	r26, 0x01	; 1
   12d76:	a6 95       	lsr	r26
   12d78:	8f ef       	ldi	r24, 0xFF	; 255
   12d7a:	81 1d       	adc	r24, r1
   12d7c:	81 1d       	adc	r24, r1
   12d7e:	08 95       	ret

00012d80 <__fp_inf>:
   12d80:	97 f9       	bld	r25, 7
   12d82:	9f 67       	ori	r25, 0x7F	; 127
   12d84:	80 e8       	ldi	r24, 0x80	; 128
   12d86:	70 e0       	ldi	r23, 0x00	; 0
   12d88:	60 e0       	ldi	r22, 0x00	; 0
   12d8a:	08 95       	ret

00012d8c <__fp_nan>:
   12d8c:	9f ef       	ldi	r25, 0xFF	; 255
   12d8e:	80 ec       	ldi	r24, 0xC0	; 192
   12d90:	08 95       	ret

00012d92 <__fp_powser>:
   12d92:	df 93       	push	r29
   12d94:	cf 93       	push	r28
   12d96:	1f 93       	push	r17
   12d98:	0f 93       	push	r16
   12d9a:	ff 92       	push	r15
   12d9c:	ef 92       	push	r14
   12d9e:	df 92       	push	r13
   12da0:	7b 01       	movw	r14, r22
   12da2:	8c 01       	movw	r16, r24
   12da4:	68 94       	set
   12da6:	05 c0       	rjmp	.+10     	; 0x12db2 <__fp_powser+0x20>
   12da8:	da 2e       	mov	r13, r26
   12daa:	ef 01       	movw	r28, r30
   12dac:	76 d0       	rcall	.+236    	; 0x12e9a <__mulsf3x>
   12dae:	fe 01       	movw	r30, r28
   12db0:	e8 94       	clt
   12db2:	a5 91       	lpm	r26, Z+
   12db4:	25 91       	lpm	r18, Z+
   12db6:	35 91       	lpm	r19, Z+
   12db8:	45 91       	lpm	r20, Z+
   12dba:	55 91       	lpm	r21, Z+
   12dbc:	ae f3       	brts	.-22     	; 0x12da8 <__fp_powser+0x16>
   12dbe:	ef 01       	movw	r28, r30
   12dc0:	66 de       	rcall	.-820    	; 0x12a8e <__addsf3x>
   12dc2:	fe 01       	movw	r30, r28
   12dc4:	97 01       	movw	r18, r14
   12dc6:	a8 01       	movw	r20, r16
   12dc8:	da 94       	dec	r13
   12dca:	79 f7       	brne	.-34     	; 0x12daa <__fp_powser+0x18>
   12dcc:	df 90       	pop	r13
   12dce:	ef 90       	pop	r14
   12dd0:	ff 90       	pop	r15
   12dd2:	0f 91       	pop	r16
   12dd4:	1f 91       	pop	r17
   12dd6:	cf 91       	pop	r28
   12dd8:	df 91       	pop	r29
   12dda:	08 95       	ret

00012ddc <__fp_pscA>:
   12ddc:	00 24       	eor	r0, r0
   12dde:	0a 94       	dec	r0
   12de0:	16 16       	cp	r1, r22
   12de2:	17 06       	cpc	r1, r23
   12de4:	18 06       	cpc	r1, r24
   12de6:	09 06       	cpc	r0, r25
   12de8:	08 95       	ret

00012dea <__fp_pscB>:
   12dea:	00 24       	eor	r0, r0
   12dec:	0a 94       	dec	r0
   12dee:	12 16       	cp	r1, r18
   12df0:	13 06       	cpc	r1, r19
   12df2:	14 06       	cpc	r1, r20
   12df4:	05 06       	cpc	r0, r21
   12df6:	08 95       	ret

00012df8 <__fp_round>:
   12df8:	09 2e       	mov	r0, r25
   12dfa:	03 94       	inc	r0
   12dfc:	00 0c       	add	r0, r0
   12dfe:	11 f4       	brne	.+4      	; 0x12e04 <__fp_round+0xc>
   12e00:	88 23       	and	r24, r24
   12e02:	52 f0       	brmi	.+20     	; 0x12e18 <__fp_round+0x20>
   12e04:	bb 0f       	add	r27, r27
   12e06:	40 f4       	brcc	.+16     	; 0x12e18 <__fp_round+0x20>
   12e08:	bf 2b       	or	r27, r31
   12e0a:	11 f4       	brne	.+4      	; 0x12e10 <__fp_round+0x18>
   12e0c:	60 ff       	sbrs	r22, 0
   12e0e:	04 c0       	rjmp	.+8      	; 0x12e18 <__fp_round+0x20>
   12e10:	6f 5f       	subi	r22, 0xFF	; 255
   12e12:	7f 4f       	sbci	r23, 0xFF	; 255
   12e14:	8f 4f       	sbci	r24, 0xFF	; 255
   12e16:	9f 4f       	sbci	r25, 0xFF	; 255
   12e18:	08 95       	ret

00012e1a <__fp_split3>:
   12e1a:	57 fd       	sbrc	r21, 7
   12e1c:	90 58       	subi	r25, 0x80	; 128
   12e1e:	44 0f       	add	r20, r20
   12e20:	55 1f       	adc	r21, r21
   12e22:	59 f0       	breq	.+22     	; 0x12e3a <__fp_splitA+0x10>
   12e24:	5f 3f       	cpi	r21, 0xFF	; 255
   12e26:	71 f0       	breq	.+28     	; 0x12e44 <__fp_splitA+0x1a>
   12e28:	47 95       	ror	r20

00012e2a <__fp_splitA>:
   12e2a:	88 0f       	add	r24, r24
   12e2c:	97 fb       	bst	r25, 7
   12e2e:	99 1f       	adc	r25, r25
   12e30:	61 f0       	breq	.+24     	; 0x12e4a <__fp_splitA+0x20>
   12e32:	9f 3f       	cpi	r25, 0xFF	; 255
   12e34:	79 f0       	breq	.+30     	; 0x12e54 <__fp_splitA+0x2a>
   12e36:	87 95       	ror	r24
   12e38:	08 95       	ret
   12e3a:	12 16       	cp	r1, r18
   12e3c:	13 06       	cpc	r1, r19
   12e3e:	14 06       	cpc	r1, r20
   12e40:	55 1f       	adc	r21, r21
   12e42:	f2 cf       	rjmp	.-28     	; 0x12e28 <__fp_split3+0xe>
   12e44:	46 95       	lsr	r20
   12e46:	f1 df       	rcall	.-30     	; 0x12e2a <__fp_splitA>
   12e48:	08 c0       	rjmp	.+16     	; 0x12e5a <__fp_splitA+0x30>
   12e4a:	16 16       	cp	r1, r22
   12e4c:	17 06       	cpc	r1, r23
   12e4e:	18 06       	cpc	r1, r24
   12e50:	99 1f       	adc	r25, r25
   12e52:	f1 cf       	rjmp	.-30     	; 0x12e36 <__fp_splitA+0xc>
   12e54:	86 95       	lsr	r24
   12e56:	71 05       	cpc	r23, r1
   12e58:	61 05       	cpc	r22, r1
   12e5a:	08 94       	sec
   12e5c:	08 95       	ret

00012e5e <__fp_zero>:
   12e5e:	e8 94       	clt

00012e60 <__fp_szero>:
   12e60:	bb 27       	eor	r27, r27
   12e62:	66 27       	eor	r22, r22
   12e64:	77 27       	eor	r23, r23
   12e66:	cb 01       	movw	r24, r22
   12e68:	97 f9       	bld	r25, 7
   12e6a:	08 95       	ret

00012e6c <__gesf2>:
   12e6c:	65 df       	rcall	.-310    	; 0x12d38 <__fp_cmp>
   12e6e:	08 f4       	brcc	.+2      	; 0x12e72 <__gesf2+0x6>
   12e70:	8f ef       	ldi	r24, 0xFF	; 255
   12e72:	08 95       	ret

00012e74 <inverse>:
   12e74:	9b 01       	movw	r18, r22
   12e76:	ac 01       	movw	r20, r24
   12e78:	60 e0       	ldi	r22, 0x00	; 0
   12e7a:	70 e0       	ldi	r23, 0x00	; 0
   12e7c:	80 e8       	ldi	r24, 0x80	; 128
   12e7e:	9f e3       	ldi	r25, 0x3F	; 63
   12e80:	85 ce       	rjmp	.-758    	; 0x12b8c <__divsf3>

00012e82 <__mulsf3>:
   12e82:	0b d0       	rcall	.+22     	; 0x12e9a <__mulsf3x>
   12e84:	b9 cf       	rjmp	.-142    	; 0x12df8 <__fp_round>
   12e86:	aa df       	rcall	.-172    	; 0x12ddc <__fp_pscA>
   12e88:	28 f0       	brcs	.+10     	; 0x12e94 <__mulsf3+0x12>
   12e8a:	af df       	rcall	.-162    	; 0x12dea <__fp_pscB>
   12e8c:	18 f0       	brcs	.+6      	; 0x12e94 <__mulsf3+0x12>
   12e8e:	95 23       	and	r25, r21
   12e90:	09 f0       	breq	.+2      	; 0x12e94 <__mulsf3+0x12>
   12e92:	76 cf       	rjmp	.-276    	; 0x12d80 <__fp_inf>
   12e94:	7b cf       	rjmp	.-266    	; 0x12d8c <__fp_nan>
   12e96:	11 24       	eor	r1, r1
   12e98:	e3 cf       	rjmp	.-58     	; 0x12e60 <__fp_szero>

00012e9a <__mulsf3x>:
   12e9a:	bf df       	rcall	.-130    	; 0x12e1a <__fp_split3>
   12e9c:	a0 f3       	brcs	.-24     	; 0x12e86 <__mulsf3+0x4>

00012e9e <__mulsf3_pse>:
   12e9e:	95 9f       	mul	r25, r21
   12ea0:	d1 f3       	breq	.-12     	; 0x12e96 <__mulsf3+0x14>
   12ea2:	95 0f       	add	r25, r21
   12ea4:	50 e0       	ldi	r21, 0x00	; 0
   12ea6:	55 1f       	adc	r21, r21
   12ea8:	62 9f       	mul	r22, r18
   12eaa:	f0 01       	movw	r30, r0
   12eac:	72 9f       	mul	r23, r18
   12eae:	bb 27       	eor	r27, r27
   12eb0:	f0 0d       	add	r31, r0
   12eb2:	b1 1d       	adc	r27, r1
   12eb4:	63 9f       	mul	r22, r19
   12eb6:	aa 27       	eor	r26, r26
   12eb8:	f0 0d       	add	r31, r0
   12eba:	b1 1d       	adc	r27, r1
   12ebc:	aa 1f       	adc	r26, r26
   12ebe:	64 9f       	mul	r22, r20
   12ec0:	66 27       	eor	r22, r22
   12ec2:	b0 0d       	add	r27, r0
   12ec4:	a1 1d       	adc	r26, r1
   12ec6:	66 1f       	adc	r22, r22
   12ec8:	82 9f       	mul	r24, r18
   12eca:	22 27       	eor	r18, r18
   12ecc:	b0 0d       	add	r27, r0
   12ece:	a1 1d       	adc	r26, r1
   12ed0:	62 1f       	adc	r22, r18
   12ed2:	73 9f       	mul	r23, r19
   12ed4:	b0 0d       	add	r27, r0
   12ed6:	a1 1d       	adc	r26, r1
   12ed8:	62 1f       	adc	r22, r18
   12eda:	83 9f       	mul	r24, r19
   12edc:	a0 0d       	add	r26, r0
   12ede:	61 1d       	adc	r22, r1
   12ee0:	22 1f       	adc	r18, r18
   12ee2:	74 9f       	mul	r23, r20
   12ee4:	33 27       	eor	r19, r19
   12ee6:	a0 0d       	add	r26, r0
   12ee8:	61 1d       	adc	r22, r1
   12eea:	23 1f       	adc	r18, r19
   12eec:	84 9f       	mul	r24, r20
   12eee:	60 0d       	add	r22, r0
   12ef0:	21 1d       	adc	r18, r1
   12ef2:	82 2f       	mov	r24, r18
   12ef4:	76 2f       	mov	r23, r22
   12ef6:	6a 2f       	mov	r22, r26
   12ef8:	11 24       	eor	r1, r1
   12efa:	9f 57       	subi	r25, 0x7F	; 127
   12efc:	50 40       	sbci	r21, 0x00	; 0
   12efe:	8a f0       	brmi	.+34     	; 0x12f22 <__mulsf3_pse+0x84>
   12f00:	e1 f0       	breq	.+56     	; 0x12f3a <__mulsf3_pse+0x9c>
   12f02:	88 23       	and	r24, r24
   12f04:	4a f0       	brmi	.+18     	; 0x12f18 <__mulsf3_pse+0x7a>
   12f06:	ee 0f       	add	r30, r30
   12f08:	ff 1f       	adc	r31, r31
   12f0a:	bb 1f       	adc	r27, r27
   12f0c:	66 1f       	adc	r22, r22
   12f0e:	77 1f       	adc	r23, r23
   12f10:	88 1f       	adc	r24, r24
   12f12:	91 50       	subi	r25, 0x01	; 1
   12f14:	50 40       	sbci	r21, 0x00	; 0
   12f16:	a9 f7       	brne	.-22     	; 0x12f02 <__mulsf3_pse+0x64>
   12f18:	9e 3f       	cpi	r25, 0xFE	; 254
   12f1a:	51 05       	cpc	r21, r1
   12f1c:	70 f0       	brcs	.+28     	; 0x12f3a <__mulsf3_pse+0x9c>
   12f1e:	30 cf       	rjmp	.-416    	; 0x12d80 <__fp_inf>
   12f20:	9f cf       	rjmp	.-194    	; 0x12e60 <__fp_szero>
   12f22:	5f 3f       	cpi	r21, 0xFF	; 255
   12f24:	ec f3       	brlt	.-6      	; 0x12f20 <__mulsf3_pse+0x82>
   12f26:	98 3e       	cpi	r25, 0xE8	; 232
   12f28:	dc f3       	brlt	.-10     	; 0x12f20 <__mulsf3_pse+0x82>
   12f2a:	86 95       	lsr	r24
   12f2c:	77 95       	ror	r23
   12f2e:	67 95       	ror	r22
   12f30:	b7 95       	ror	r27
   12f32:	f7 95       	ror	r31
   12f34:	e7 95       	ror	r30
   12f36:	9f 5f       	subi	r25, 0xFF	; 255
   12f38:	c1 f7       	brne	.-16     	; 0x12f2a <__mulsf3_pse+0x8c>
   12f3a:	fe 2b       	or	r31, r30
   12f3c:	88 0f       	add	r24, r24
   12f3e:	91 1d       	adc	r25, r1
   12f40:	96 95       	lsr	r25
   12f42:	87 95       	ror	r24
   12f44:	97 f9       	bld	r25, 7
   12f46:	08 95       	ret
   12f48:	11 f4       	brne	.+4      	; 0x12f4e <__mulsf3_pse+0xb0>
   12f4a:	0e f4       	brtc	.+2      	; 0x12f4e <__mulsf3_pse+0xb0>
   12f4c:	1f cf       	rjmp	.-450    	; 0x12d8c <__fp_nan>
   12f4e:	61 c0       	rjmp	.+194    	; 0x13012 <__fp_mpack>

00012f50 <sqrt>:
   12f50:	6c df       	rcall	.-296    	; 0x12e2a <__fp_splitA>
   12f52:	d0 f3       	brcs	.-12     	; 0x12f48 <__mulsf3_pse+0xaa>
   12f54:	99 23       	and	r25, r25
   12f56:	d9 f3       	breq	.-10     	; 0x12f4e <__mulsf3_pse+0xb0>
   12f58:	ce f3       	brts	.-14     	; 0x12f4c <__mulsf3_pse+0xae>
   12f5a:	9f 57       	subi	r25, 0x7F	; 127
   12f5c:	55 0b       	sbc	r21, r21
   12f5e:	87 ff       	sbrs	r24, 7
   12f60:	66 d0       	rcall	.+204    	; 0x1302e <__fp_norm2>
   12f62:	00 24       	eor	r0, r0
   12f64:	a0 e6       	ldi	r26, 0x60	; 96
   12f66:	40 ea       	ldi	r20, 0xA0	; 160
   12f68:	90 01       	movw	r18, r0
   12f6a:	80 58       	subi	r24, 0x80	; 128
   12f6c:	56 95       	lsr	r21
   12f6e:	97 95       	ror	r25
   12f70:	28 f4       	brcc	.+10     	; 0x12f7c <sqrt+0x2c>
   12f72:	80 5c       	subi	r24, 0xC0	; 192
   12f74:	66 0f       	add	r22, r22
   12f76:	77 1f       	adc	r23, r23
   12f78:	88 1f       	adc	r24, r24
   12f7a:	20 f0       	brcs	.+8      	; 0x12f84 <sqrt+0x34>
   12f7c:	26 17       	cp	r18, r22
   12f7e:	37 07       	cpc	r19, r23
   12f80:	48 07       	cpc	r20, r24
   12f82:	30 f4       	brcc	.+12     	; 0x12f90 <sqrt+0x40>
   12f84:	62 1b       	sub	r22, r18
   12f86:	73 0b       	sbc	r23, r19
   12f88:	84 0b       	sbc	r24, r20
   12f8a:	20 29       	or	r18, r0
   12f8c:	31 29       	or	r19, r1
   12f8e:	4a 2b       	or	r20, r26
   12f90:	a6 95       	lsr	r26
   12f92:	17 94       	ror	r1
   12f94:	07 94       	ror	r0
   12f96:	20 25       	eor	r18, r0
   12f98:	31 25       	eor	r19, r1
   12f9a:	4a 27       	eor	r20, r26
   12f9c:	58 f7       	brcc	.-42     	; 0x12f74 <sqrt+0x24>
   12f9e:	66 0f       	add	r22, r22
   12fa0:	77 1f       	adc	r23, r23
   12fa2:	88 1f       	adc	r24, r24
   12fa4:	20 f0       	brcs	.+8      	; 0x12fae <sqrt+0x5e>
   12fa6:	26 17       	cp	r18, r22
   12fa8:	37 07       	cpc	r19, r23
   12faa:	48 07       	cpc	r20, r24
   12fac:	30 f4       	brcc	.+12     	; 0x12fba <sqrt+0x6a>
   12fae:	62 0b       	sbc	r22, r18
   12fb0:	73 0b       	sbc	r23, r19
   12fb2:	84 0b       	sbc	r24, r20
   12fb4:	20 0d       	add	r18, r0
   12fb6:	31 1d       	adc	r19, r1
   12fb8:	41 1d       	adc	r20, r1
   12fba:	a0 95       	com	r26
   12fbc:	81 f7       	brne	.-32     	; 0x12f9e <sqrt+0x4e>
   12fbe:	b9 01       	movw	r22, r18
   12fc0:	84 2f       	mov	r24, r20
   12fc2:	91 58       	subi	r25, 0x81	; 129
   12fc4:	88 0f       	add	r24, r24
   12fc6:	96 95       	lsr	r25
   12fc8:	87 95       	ror	r24
   12fca:	08 95       	ret

00012fcc <square>:
   12fcc:	9b 01       	movw	r18, r22
   12fce:	ac 01       	movw	r20, r24
   12fd0:	58 cf       	rjmp	.-336    	; 0x12e82 <__mulsf3>

00012fd2 <tan>:
   12fd2:	df 93       	push	r29
   12fd4:	d9 2f       	mov	r29, r25
   12fd6:	44 d0       	rcall	.+136    	; 0x13060 <__fp_rempio2>
   12fd8:	e6 95       	lsr	r30
   12fda:	d7 95       	ror	r29
   12fdc:	2a ed       	ldi	r18, 0xDA	; 218
   12fde:	3f e0       	ldi	r19, 0x0F	; 15
   12fe0:	49 e4       	ldi	r20, 0x49	; 73
   12fe2:	5f e3       	ldi	r21, 0x3F	; 63
   12fe4:	b3 3a       	cpi	r27, 0xA3	; 163
   12fe6:	62 07       	cpc	r22, r18
   12fe8:	73 07       	cpc	r23, r19
   12fea:	84 07       	cpc	r24, r20
   12fec:	95 07       	cpc	r25, r21
   12fee:	d7 95       	ror	r29
   12ff0:	2a f0       	brmi	.+10     	; 0x12ffc <tan+0x2a>
   12ff2:	a2 ea       	ldi	r26, 0xA2	; 162
   12ff4:	49 ec       	ldi	r20, 0xC9	; 201
   12ff6:	90 68       	ori	r25, 0x80	; 128
   12ff8:	4a dd       	rcall	.-1388   	; 0x12a8e <__addsf3x>
   12ffa:	fe de       	rcall	.-516    	; 0x12df8 <__fp_round>
   12ffc:	e1 e1       	ldi	r30, 0x11	; 17
   12ffe:	f1 e0       	ldi	r31, 0x01	; 1
   13000:	1d d0       	rcall	.+58     	; 0x1303c <__fp_powsodd>
   13002:	dd 0f       	add	r29, r29
   13004:	0b f0       	brvs	.+2      	; 0x13008 <tan+0x36>
   13006:	36 df       	rcall	.-404    	; 0x12e74 <inverse>
   13008:	dd 0f       	add	r29, r29
   1300a:	0b f4       	brvc	.+2      	; 0x1300e <tan+0x3c>
   1300c:	90 58       	subi	r25, 0x80	; 128
   1300e:	df 91       	pop	r29
   13010:	08 95       	ret

00013012 <__fp_mpack>:
   13012:	9f 3f       	cpi	r25, 0xFF	; 255
   13014:	31 f0       	breq	.+12     	; 0x13022 <__fp_mpack_finite+0xc>

00013016 <__fp_mpack_finite>:
   13016:	91 50       	subi	r25, 0x01	; 1
   13018:	20 f4       	brcc	.+8      	; 0x13022 <__fp_mpack_finite+0xc>
   1301a:	87 95       	ror	r24
   1301c:	77 95       	ror	r23
   1301e:	67 95       	ror	r22
   13020:	b7 95       	ror	r27
   13022:	88 0f       	add	r24, r24
   13024:	91 1d       	adc	r25, r1
   13026:	96 95       	lsr	r25
   13028:	87 95       	ror	r24
   1302a:	97 f9       	bld	r25, 7
   1302c:	08 95       	ret

0001302e <__fp_norm2>:
   1302e:	91 50       	subi	r25, 0x01	; 1
   13030:	50 40       	sbci	r21, 0x00	; 0
   13032:	66 0f       	add	r22, r22
   13034:	77 1f       	adc	r23, r23
   13036:	88 1f       	adc	r24, r24
   13038:	d2 f7       	brpl	.-12     	; 0x1302e <__fp_norm2>
   1303a:	08 95       	ret

0001303c <__fp_powsodd>:
   1303c:	9f 93       	push	r25
   1303e:	8f 93       	push	r24
   13040:	7f 93       	push	r23
   13042:	6f 93       	push	r22
   13044:	ff 93       	push	r31
   13046:	ef 93       	push	r30
   13048:	9b 01       	movw	r18, r22
   1304a:	ac 01       	movw	r20, r24
   1304c:	1a df       	rcall	.-460    	; 0x12e82 <__mulsf3>
   1304e:	ef 91       	pop	r30
   13050:	ff 91       	pop	r31
   13052:	9f de       	rcall	.-706    	; 0x12d92 <__fp_powser>
   13054:	2f 91       	pop	r18
   13056:	3f 91       	pop	r19
   13058:	4f 91       	pop	r20
   1305a:	5f 91       	pop	r21
   1305c:	12 cf       	rjmp	.-476    	; 0x12e82 <__mulsf3>
   1305e:	96 ce       	rjmp	.-724    	; 0x12d8c <__fp_nan>

00013060 <__fp_rempio2>:
   13060:	e4 de       	rcall	.-568    	; 0x12e2a <__fp_splitA>
   13062:	e8 f3       	brcs	.-6      	; 0x1305e <__fp_powsodd+0x22>
   13064:	e8 94       	clt
   13066:	e0 e0       	ldi	r30, 0x00	; 0
   13068:	bb 27       	eor	r27, r27
   1306a:	9f 57       	subi	r25, 0x7F	; 127
   1306c:	f0 f0       	brcs	.+60     	; 0x130aa <__fp_rempio2+0x4a>
   1306e:	2a ed       	ldi	r18, 0xDA	; 218
   13070:	3f e0       	ldi	r19, 0x0F	; 15
   13072:	49 ec       	ldi	r20, 0xC9	; 201
   13074:	06 c0       	rjmp	.+12     	; 0x13082 <__fp_rempio2+0x22>
   13076:	ee 0f       	add	r30, r30
   13078:	bb 0f       	add	r27, r27
   1307a:	66 1f       	adc	r22, r22
   1307c:	77 1f       	adc	r23, r23
   1307e:	88 1f       	adc	r24, r24
   13080:	28 f0       	brcs	.+10     	; 0x1308c <__fp_rempio2+0x2c>
   13082:	b2 3a       	cpi	r27, 0xA2	; 162
   13084:	62 07       	cpc	r22, r18
   13086:	73 07       	cpc	r23, r19
   13088:	84 07       	cpc	r24, r20
   1308a:	28 f0       	brcs	.+10     	; 0x13096 <__fp_rempio2+0x36>
   1308c:	b2 5a       	subi	r27, 0xA2	; 162
   1308e:	62 0b       	sbc	r22, r18
   13090:	73 0b       	sbc	r23, r19
   13092:	84 0b       	sbc	r24, r20
   13094:	e3 95       	inc	r30
   13096:	9a 95       	dec	r25
   13098:	72 f7       	brpl	.-36     	; 0x13076 <__fp_rempio2+0x16>
   1309a:	80 38       	cpi	r24, 0x80	; 128
   1309c:	30 f4       	brcc	.+12     	; 0x130aa <__fp_rempio2+0x4a>
   1309e:	9a 95       	dec	r25
   130a0:	bb 0f       	add	r27, r27
   130a2:	66 1f       	adc	r22, r22
   130a4:	77 1f       	adc	r23, r23
   130a6:	88 1f       	adc	r24, r24
   130a8:	d2 f7       	brpl	.-12     	; 0x1309e <__fp_rempio2+0x3e>
   130aa:	90 48       	sbci	r25, 0x80	; 128
   130ac:	b4 cf       	rjmp	.-152    	; 0x13016 <__fp_mpack_finite>

000130ae <__mulsi3>:
   130ae:	db 01       	movw	r26, r22
   130b0:	8f 93       	push	r24
   130b2:	9f 93       	push	r25
   130b4:	93 d0       	rcall	.+294    	; 0x131dc <__muluhisi3>
   130b6:	bf 91       	pop	r27
   130b8:	af 91       	pop	r26
   130ba:	a2 9f       	mul	r26, r18
   130bc:	80 0d       	add	r24, r0
   130be:	91 1d       	adc	r25, r1
   130c0:	a3 9f       	mul	r26, r19
   130c2:	90 0d       	add	r25, r0
   130c4:	b2 9f       	mul	r27, r18
   130c6:	90 0d       	add	r25, r0
   130c8:	11 24       	eor	r1, r1
   130ca:	08 95       	ret

000130cc <__udivmodhi4>:
   130cc:	aa 1b       	sub	r26, r26
   130ce:	bb 1b       	sub	r27, r27
   130d0:	51 e1       	ldi	r21, 0x11	; 17
   130d2:	07 c0       	rjmp	.+14     	; 0x130e2 <__udivmodhi4_ep>

000130d4 <__udivmodhi4_loop>:
   130d4:	aa 1f       	adc	r26, r26
   130d6:	bb 1f       	adc	r27, r27
   130d8:	a6 17       	cp	r26, r22
   130da:	b7 07       	cpc	r27, r23
   130dc:	10 f0       	brcs	.+4      	; 0x130e2 <__udivmodhi4_ep>
   130de:	a6 1b       	sub	r26, r22
   130e0:	b7 0b       	sbc	r27, r23

000130e2 <__udivmodhi4_ep>:
   130e2:	88 1f       	adc	r24, r24
   130e4:	99 1f       	adc	r25, r25
   130e6:	5a 95       	dec	r21
   130e8:	a9 f7       	brne	.-22     	; 0x130d4 <__udivmodhi4_loop>
   130ea:	80 95       	com	r24
   130ec:	90 95       	com	r25
   130ee:	bc 01       	movw	r22, r24
   130f0:	cd 01       	movw	r24, r26
   130f2:	08 95       	ret

000130f4 <__divmodhi4>:
   130f4:	97 fb       	bst	r25, 7
   130f6:	07 2e       	mov	r0, r23
   130f8:	16 f4       	brtc	.+4      	; 0x130fe <__divmodhi4+0xa>
   130fa:	00 94       	com	r0
   130fc:	06 d0       	rcall	.+12     	; 0x1310a <__divmodhi4_neg1>
   130fe:	77 fd       	sbrc	r23, 7
   13100:	08 d0       	rcall	.+16     	; 0x13112 <__divmodhi4_neg2>
   13102:	e4 df       	rcall	.-56     	; 0x130cc <__udivmodhi4>
   13104:	07 fc       	sbrc	r0, 7
   13106:	05 d0       	rcall	.+10     	; 0x13112 <__divmodhi4_neg2>
   13108:	3e f4       	brtc	.+14     	; 0x13118 <__divmodhi4_exit>

0001310a <__divmodhi4_neg1>:
   1310a:	90 95       	com	r25
   1310c:	81 95       	neg	r24
   1310e:	9f 4f       	sbci	r25, 0xFF	; 255
   13110:	08 95       	ret

00013112 <__divmodhi4_neg2>:
   13112:	70 95       	com	r23
   13114:	61 95       	neg	r22
   13116:	7f 4f       	sbci	r23, 0xFF	; 255

00013118 <__divmodhi4_exit>:
   13118:	08 95       	ret

0001311a <__udivmodsi4>:
   1311a:	a1 e2       	ldi	r26, 0x21	; 33
   1311c:	1a 2e       	mov	r1, r26
   1311e:	aa 1b       	sub	r26, r26
   13120:	bb 1b       	sub	r27, r27
   13122:	fd 01       	movw	r30, r26
   13124:	0d c0       	rjmp	.+26     	; 0x13140 <__udivmodsi4_ep>

00013126 <__udivmodsi4_loop>:
   13126:	aa 1f       	adc	r26, r26
   13128:	bb 1f       	adc	r27, r27
   1312a:	ee 1f       	adc	r30, r30
   1312c:	ff 1f       	adc	r31, r31
   1312e:	a2 17       	cp	r26, r18
   13130:	b3 07       	cpc	r27, r19
   13132:	e4 07       	cpc	r30, r20
   13134:	f5 07       	cpc	r31, r21
   13136:	20 f0       	brcs	.+8      	; 0x13140 <__udivmodsi4_ep>
   13138:	a2 1b       	sub	r26, r18
   1313a:	b3 0b       	sbc	r27, r19
   1313c:	e4 0b       	sbc	r30, r20
   1313e:	f5 0b       	sbc	r31, r21

00013140 <__udivmodsi4_ep>:
   13140:	66 1f       	adc	r22, r22
   13142:	77 1f       	adc	r23, r23
   13144:	88 1f       	adc	r24, r24
   13146:	99 1f       	adc	r25, r25
   13148:	1a 94       	dec	r1
   1314a:	69 f7       	brne	.-38     	; 0x13126 <__udivmodsi4_loop>
   1314c:	60 95       	com	r22
   1314e:	70 95       	com	r23
   13150:	80 95       	com	r24
   13152:	90 95       	com	r25
   13154:	9b 01       	movw	r18, r22
   13156:	ac 01       	movw	r20, r24
   13158:	bd 01       	movw	r22, r26
   1315a:	cf 01       	movw	r24, r30
   1315c:	08 95       	ret

0001315e <__divmodsi4>:
   1315e:	05 2e       	mov	r0, r21
   13160:	97 fb       	bst	r25, 7
   13162:	16 f4       	brtc	.+4      	; 0x13168 <__divmodsi4+0xa>
   13164:	00 94       	com	r0
   13166:	0f d0       	rcall	.+30     	; 0x13186 <__negsi2>
   13168:	57 fd       	sbrc	r21, 7
   1316a:	05 d0       	rcall	.+10     	; 0x13176 <__divmodsi4_neg2>
   1316c:	d6 df       	rcall	.-84     	; 0x1311a <__udivmodsi4>
   1316e:	07 fc       	sbrc	r0, 7
   13170:	02 d0       	rcall	.+4      	; 0x13176 <__divmodsi4_neg2>
   13172:	46 f4       	brtc	.+16     	; 0x13184 <__divmodsi4_exit>
   13174:	08 c0       	rjmp	.+16     	; 0x13186 <__negsi2>

00013176 <__divmodsi4_neg2>:
   13176:	50 95       	com	r21
   13178:	40 95       	com	r20
   1317a:	30 95       	com	r19
   1317c:	21 95       	neg	r18
   1317e:	3f 4f       	sbci	r19, 0xFF	; 255
   13180:	4f 4f       	sbci	r20, 0xFF	; 255
   13182:	5f 4f       	sbci	r21, 0xFF	; 255

00013184 <__divmodsi4_exit>:
   13184:	08 95       	ret

00013186 <__negsi2>:
   13186:	90 95       	com	r25
   13188:	80 95       	com	r24
   1318a:	70 95       	com	r23
   1318c:	61 95       	neg	r22
   1318e:	7f 4f       	sbci	r23, 0xFF	; 255
   13190:	8f 4f       	sbci	r24, 0xFF	; 255
   13192:	9f 4f       	sbci	r25, 0xFF	; 255
   13194:	08 95       	ret

00013196 <__tablejump2__>:
   13196:	ee 0f       	add	r30, r30
   13198:	ff 1f       	adc	r31, r31
   1319a:	88 1f       	adc	r24, r24
   1319c:	8b bf       	out	0x3b, r24	; 59
   1319e:	07 90       	elpm	r0, Z+
   131a0:	f6 91       	elpm	r31, Z
   131a2:	e0 2d       	mov	r30, r0
   131a4:	19 94       	eijmp

000131a6 <__mulhisi3>:
   131a6:	05 d0       	rcall	.+10     	; 0x131b2 <__umulhisi3>
   131a8:	33 23       	and	r19, r19
   131aa:	12 f4       	brpl	.+4      	; 0x131b0 <__mulhisi3+0xa>
   131ac:	8a 1b       	sub	r24, r26
   131ae:	9b 0b       	sbc	r25, r27
   131b0:	10 c0       	rjmp	.+32     	; 0x131d2 <__usmulhisi3_tail>

000131b2 <__umulhisi3>:
   131b2:	a2 9f       	mul	r26, r18
   131b4:	b0 01       	movw	r22, r0
   131b6:	b3 9f       	mul	r27, r19
   131b8:	c0 01       	movw	r24, r0
   131ba:	a3 9f       	mul	r26, r19
   131bc:	70 0d       	add	r23, r0
   131be:	81 1d       	adc	r24, r1
   131c0:	11 24       	eor	r1, r1
   131c2:	91 1d       	adc	r25, r1
   131c4:	b2 9f       	mul	r27, r18
   131c6:	70 0d       	add	r23, r0
   131c8:	81 1d       	adc	r24, r1
   131ca:	11 24       	eor	r1, r1
   131cc:	91 1d       	adc	r25, r1
   131ce:	08 95       	ret

000131d0 <__usmulhisi3>:
   131d0:	f0 df       	rcall	.-32     	; 0x131b2 <__umulhisi3>

000131d2 <__usmulhisi3_tail>:
   131d2:	b7 ff       	sbrs	r27, 7
   131d4:	08 95       	ret
   131d6:	82 1b       	sub	r24, r18
   131d8:	93 0b       	sbc	r25, r19
   131da:	08 95       	ret

000131dc <__muluhisi3>:
   131dc:	ea df       	rcall	.-44     	; 0x131b2 <__umulhisi3>
   131de:	a5 9f       	mul	r26, r21
   131e0:	90 0d       	add	r25, r0
   131e2:	b4 9f       	mul	r27, r20
   131e4:	90 0d       	add	r25, r0
   131e6:	a4 9f       	mul	r26, r20
   131e8:	80 0d       	add	r24, r0
   131ea:	91 1d       	adc	r25, r1
   131ec:	11 24       	eor	r1, r1
   131ee:	08 95       	ret

000131f0 <__mulshisi3>:
   131f0:	b7 ff       	sbrs	r27, 7
   131f2:	f4 cf       	rjmp	.-24     	; 0x131dc <__muluhisi3>

000131f4 <__mulohisi3>:
   131f4:	f3 df       	rcall	.-26     	; 0x131dc <__muluhisi3>
   131f6:	82 1b       	sub	r24, r18
   131f8:	93 0b       	sbc	r25, r19
   131fa:	08 95       	ret

000131fc <strcpy>:
   131fc:	fb 01       	movw	r30, r22
   131fe:	dc 01       	movw	r26, r24
   13200:	01 90       	ld	r0, Z+
   13202:	0d 92       	st	X+, r0
   13204:	00 20       	and	r0, r0
   13206:	e1 f7       	brne	.-8      	; 0x13200 <strcpy+0x4>
   13208:	08 95       	ret

0001320a <snprintf>:
   1320a:	0f 93       	push	r16
   1320c:	1f 93       	push	r17
   1320e:	cf 93       	push	r28
   13210:	df 93       	push	r29
   13212:	cd b7       	in	r28, 0x3d	; 61
   13214:	de b7       	in	r29, 0x3e	; 62
   13216:	2e 97       	sbiw	r28, 0x0e	; 14
   13218:	0f b6       	in	r0, 0x3f	; 63
   1321a:	f8 94       	cli
   1321c:	de bf       	out	0x3e, r29	; 62
   1321e:	0f be       	out	0x3f, r0	; 63
   13220:	cd bf       	out	0x3d, r28	; 61
   13222:	0e 89       	ldd	r16, Y+22	; 0x16
   13224:	1f 89       	ldd	r17, Y+23	; 0x17
   13226:	88 8d       	ldd	r24, Y+24	; 0x18
   13228:	99 8d       	ldd	r25, Y+25	; 0x19
   1322a:	26 e0       	ldi	r18, 0x06	; 6
   1322c:	2c 83       	std	Y+4, r18	; 0x04
   1322e:	1a 83       	std	Y+2, r17	; 0x02
   13230:	09 83       	std	Y+1, r16	; 0x01
   13232:	97 ff       	sbrs	r25, 7
   13234:	02 c0       	rjmp	.+4      	; 0x1323a <snprintf+0x30>
   13236:	80 e0       	ldi	r24, 0x00	; 0
   13238:	90 e8       	ldi	r25, 0x80	; 128
   1323a:	01 97       	sbiw	r24, 0x01	; 1
   1323c:	9e 83       	std	Y+6, r25	; 0x06
   1323e:	8d 83       	std	Y+5, r24	; 0x05
   13240:	ae 01       	movw	r20, r28
   13242:	44 5e       	subi	r20, 0xE4	; 228
   13244:	5f 4f       	sbci	r21, 0xFF	; 255
   13246:	6a 8d       	ldd	r22, Y+26	; 0x1a
   13248:	7b 8d       	ldd	r23, Y+27	; 0x1b
   1324a:	ce 01       	movw	r24, r28
   1324c:	01 96       	adiw	r24, 0x01	; 1
   1324e:	19 d0       	rcall	.+50     	; 0x13282 <vfprintf>
   13250:	4d 81       	ldd	r20, Y+5	; 0x05
   13252:	5e 81       	ldd	r21, Y+6	; 0x06
   13254:	57 fd       	sbrc	r21, 7
   13256:	0a c0       	rjmp	.+20     	; 0x1326c <snprintf+0x62>
   13258:	2f 81       	ldd	r18, Y+7	; 0x07
   1325a:	38 85       	ldd	r19, Y+8	; 0x08
   1325c:	42 17       	cp	r20, r18
   1325e:	53 07       	cpc	r21, r19
   13260:	0c f4       	brge	.+2      	; 0x13264 <snprintf+0x5a>
   13262:	9a 01       	movw	r18, r20
   13264:	02 0f       	add	r16, r18
   13266:	13 1f       	adc	r17, r19
   13268:	f8 01       	movw	r30, r16
   1326a:	10 82       	st	Z, r1
   1326c:	2e 96       	adiw	r28, 0x0e	; 14
   1326e:	0f b6       	in	r0, 0x3f	; 63
   13270:	f8 94       	cli
   13272:	de bf       	out	0x3e, r29	; 62
   13274:	0f be       	out	0x3f, r0	; 63
   13276:	cd bf       	out	0x3d, r28	; 61
   13278:	df 91       	pop	r29
   1327a:	cf 91       	pop	r28
   1327c:	1f 91       	pop	r17
   1327e:	0f 91       	pop	r16
   13280:	08 95       	ret

00013282 <vfprintf>:
   13282:	2f 92       	push	r2
   13284:	3f 92       	push	r3
   13286:	4f 92       	push	r4
   13288:	5f 92       	push	r5
   1328a:	6f 92       	push	r6
   1328c:	7f 92       	push	r7
   1328e:	8f 92       	push	r8
   13290:	9f 92       	push	r9
   13292:	af 92       	push	r10
   13294:	bf 92       	push	r11
   13296:	cf 92       	push	r12
   13298:	df 92       	push	r13
   1329a:	ef 92       	push	r14
   1329c:	ff 92       	push	r15
   1329e:	0f 93       	push	r16
   132a0:	1f 93       	push	r17
   132a2:	cf 93       	push	r28
   132a4:	df 93       	push	r29
   132a6:	00 d0       	rcall	.+0      	; 0x132a8 <vfprintf+0x26>
   132a8:	00 d0       	rcall	.+0      	; 0x132aa <vfprintf+0x28>
   132aa:	00 d0       	rcall	.+0      	; 0x132ac <vfprintf+0x2a>
   132ac:	1f 92       	push	r1
   132ae:	1f 92       	push	r1
   132b0:	cd b7       	in	r28, 0x3d	; 61
   132b2:	de b7       	in	r29, 0x3e	; 62
   132b4:	7c 01       	movw	r14, r24
   132b6:	3b 01       	movw	r6, r22
   132b8:	8a 01       	movw	r16, r20
   132ba:	fc 01       	movw	r30, r24
   132bc:	17 82       	std	Z+7, r1	; 0x07
   132be:	16 82       	std	Z+6, r1	; 0x06
   132c0:	83 81       	ldd	r24, Z+3	; 0x03
   132c2:	81 ff       	sbrs	r24, 1
   132c4:	d0 c1       	rjmp	.+928    	; 0x13666 <vfprintf+0x3e4>
   132c6:	ce 01       	movw	r24, r28
   132c8:	01 96       	adiw	r24, 0x01	; 1
   132ca:	5c 01       	movw	r10, r24
   132cc:	f7 01       	movw	r30, r14
   132ce:	93 81       	ldd	r25, Z+3	; 0x03
   132d0:	f3 01       	movw	r30, r6
   132d2:	93 fd       	sbrc	r25, 3
   132d4:	85 91       	lpm	r24, Z+
   132d6:	93 ff       	sbrs	r25, 3
   132d8:	81 91       	ld	r24, Z+
   132da:	3f 01       	movw	r6, r30
   132dc:	88 23       	and	r24, r24
   132de:	09 f4       	brne	.+2      	; 0x132e2 <vfprintf+0x60>
   132e0:	49 c1       	rjmp	.+658    	; 0x13574 <vfprintf+0x2f2>
   132e2:	85 32       	cpi	r24, 0x25	; 37
   132e4:	39 f4       	brne	.+14     	; 0x132f4 <vfprintf+0x72>
   132e6:	93 fd       	sbrc	r25, 3
   132e8:	85 91       	lpm	r24, Z+
   132ea:	93 ff       	sbrs	r25, 3
   132ec:	81 91       	ld	r24, Z+
   132ee:	3f 01       	movw	r6, r30
   132f0:	85 32       	cpi	r24, 0x25	; 37
   132f2:	21 f4       	brne	.+8      	; 0x132fc <vfprintf+0x7a>
   132f4:	b7 01       	movw	r22, r14
   132f6:	90 e0       	ldi	r25, 0x00	; 0
   132f8:	cf d1       	rcall	.+926    	; 0x13698 <fputc>
   132fa:	e8 cf       	rjmp	.-48     	; 0x132cc <vfprintf+0x4a>
   132fc:	91 2c       	mov	r9, r1
   132fe:	21 2c       	mov	r2, r1
   13300:	31 2c       	mov	r3, r1
   13302:	ff e1       	ldi	r31, 0x1F	; 31
   13304:	f3 15       	cp	r31, r3
   13306:	38 f0       	brcs	.+14     	; 0x13316 <vfprintf+0x94>
   13308:	8b 32       	cpi	r24, 0x2B	; 43
   1330a:	11 f1       	breq	.+68     	; 0x13350 <vfprintf+0xce>
   1330c:	90 f4       	brcc	.+36     	; 0x13332 <vfprintf+0xb0>
   1330e:	80 32       	cpi	r24, 0x20	; 32
   13310:	09 f1       	breq	.+66     	; 0x13354 <vfprintf+0xd2>
   13312:	83 32       	cpi	r24, 0x23	; 35
   13314:	29 f1       	breq	.+74     	; 0x13360 <vfprintf+0xde>
   13316:	37 fc       	sbrc	r3, 7
   13318:	3c c0       	rjmp	.+120    	; 0x13392 <vfprintf+0x110>
   1331a:	20 ed       	ldi	r18, 0xD0	; 208
   1331c:	28 0f       	add	r18, r24
   1331e:	2a 30       	cpi	r18, 0x0A	; 10
   13320:	50 f5       	brcc	.+84     	; 0x13376 <vfprintf+0xf4>
   13322:	36 fe       	sbrs	r3, 6
   13324:	20 c0       	rjmp	.+64     	; 0x13366 <vfprintf+0xe4>
   13326:	8a e0       	ldi	r24, 0x0A	; 10
   13328:	98 9e       	mul	r9, r24
   1332a:	20 0d       	add	r18, r0
   1332c:	11 24       	eor	r1, r1
   1332e:	92 2e       	mov	r9, r18
   13330:	06 c0       	rjmp	.+12     	; 0x1333e <vfprintf+0xbc>
   13332:	8d 32       	cpi	r24, 0x2D	; 45
   13334:	91 f0       	breq	.+36     	; 0x1335a <vfprintf+0xd8>
   13336:	80 33       	cpi	r24, 0x30	; 48
   13338:	71 f7       	brne	.-36     	; 0x13316 <vfprintf+0x94>
   1333a:	68 94       	set
   1333c:	30 f8       	bld	r3, 0
   1333e:	f3 01       	movw	r30, r6
   13340:	93 fd       	sbrc	r25, 3
   13342:	85 91       	lpm	r24, Z+
   13344:	93 ff       	sbrs	r25, 3
   13346:	81 91       	ld	r24, Z+
   13348:	3f 01       	movw	r6, r30
   1334a:	81 11       	cpse	r24, r1
   1334c:	da cf       	rjmp	.-76     	; 0x13302 <vfprintf+0x80>
   1334e:	21 c0       	rjmp	.+66     	; 0x13392 <vfprintf+0x110>
   13350:	68 94       	set
   13352:	31 f8       	bld	r3, 1
   13354:	68 94       	set
   13356:	32 f8       	bld	r3, 2
   13358:	f2 cf       	rjmp	.-28     	; 0x1333e <vfprintf+0xbc>
   1335a:	68 94       	set
   1335c:	33 f8       	bld	r3, 3
   1335e:	ef cf       	rjmp	.-34     	; 0x1333e <vfprintf+0xbc>
   13360:	68 94       	set
   13362:	34 f8       	bld	r3, 4
   13364:	ec cf       	rjmp	.-40     	; 0x1333e <vfprintf+0xbc>
   13366:	ea e0       	ldi	r30, 0x0A	; 10
   13368:	2e 9e       	mul	r2, r30
   1336a:	20 0d       	add	r18, r0
   1336c:	11 24       	eor	r1, r1
   1336e:	22 2e       	mov	r2, r18
   13370:	68 94       	set
   13372:	35 f8       	bld	r3, 5
   13374:	e4 cf       	rjmp	.-56     	; 0x1333e <vfprintf+0xbc>
   13376:	8e 32       	cpi	r24, 0x2E	; 46
   13378:	29 f4       	brne	.+10     	; 0x13384 <vfprintf+0x102>
   1337a:	36 fc       	sbrc	r3, 6
   1337c:	fb c0       	rjmp	.+502    	; 0x13574 <vfprintf+0x2f2>
   1337e:	68 94       	set
   13380:	36 f8       	bld	r3, 6
   13382:	dd cf       	rjmp	.-70     	; 0x1333e <vfprintf+0xbc>
   13384:	8c 36       	cpi	r24, 0x6C	; 108
   13386:	19 f4       	brne	.+6      	; 0x1338e <vfprintf+0x10c>
   13388:	68 94       	set
   1338a:	37 f8       	bld	r3, 7
   1338c:	d8 cf       	rjmp	.-80     	; 0x1333e <vfprintf+0xbc>
   1338e:	88 36       	cpi	r24, 0x68	; 104
   13390:	b1 f2       	breq	.-84     	; 0x1333e <vfprintf+0xbc>
   13392:	98 2f       	mov	r25, r24
   13394:	9f 7d       	andi	r25, 0xDF	; 223
   13396:	95 54       	subi	r25, 0x45	; 69
   13398:	93 30       	cpi	r25, 0x03	; 3
   1339a:	d8 f0       	brcs	.+54     	; 0x133d2 <vfprintf+0x150>
   1339c:	83 36       	cpi	r24, 0x63	; 99
   1339e:	91 f1       	breq	.+100    	; 0x13404 <vfprintf+0x182>
   133a0:	83 37       	cpi	r24, 0x73	; 115
   133a2:	b1 f1       	breq	.+108    	; 0x13410 <vfprintf+0x18e>
   133a4:	83 35       	cpi	r24, 0x53	; 83
   133a6:	09 f0       	breq	.+2      	; 0x133aa <vfprintf+0x128>
   133a8:	5e c0       	rjmp	.+188    	; 0x13466 <vfprintf+0x1e4>
   133aa:	28 01       	movw	r4, r16
   133ac:	f2 e0       	ldi	r31, 0x02	; 2
   133ae:	4f 0e       	add	r4, r31
   133b0:	51 1c       	adc	r5, r1
   133b2:	f8 01       	movw	r30, r16
   133b4:	c0 80       	ld	r12, Z
   133b6:	d1 80       	ldd	r13, Z+1	; 0x01
   133b8:	69 2d       	mov	r22, r9
   133ba:	70 e0       	ldi	r23, 0x00	; 0
   133bc:	36 fc       	sbrc	r3, 6
   133be:	02 c0       	rjmp	.+4      	; 0x133c4 <vfprintf+0x142>
   133c0:	6f ef       	ldi	r22, 0xFF	; 255
   133c2:	7f ef       	ldi	r23, 0xFF	; 255
   133c4:	c6 01       	movw	r24, r12
   133c6:	52 d1       	rcall	.+676    	; 0x1366c <strnlen_P>
   133c8:	4c 01       	movw	r8, r24
   133ca:	68 94       	set
   133cc:	37 f8       	bld	r3, 7
   133ce:	82 01       	movw	r16, r4
   133d0:	0a c0       	rjmp	.+20     	; 0x133e6 <vfprintf+0x164>
   133d2:	0c 5f       	subi	r16, 0xFC	; 252
   133d4:	1f 4f       	sbci	r17, 0xFF	; 255
   133d6:	ff e3       	ldi	r31, 0x3F	; 63
   133d8:	f9 83       	std	Y+1, r31	; 0x01
   133da:	88 24       	eor	r8, r8
   133dc:	83 94       	inc	r8
   133de:	91 2c       	mov	r9, r1
   133e0:	65 01       	movw	r12, r10
   133e2:	e8 94       	clt
   133e4:	37 f8       	bld	r3, 7
   133e6:	33 fe       	sbrs	r3, 3
   133e8:	2a c0       	rjmp	.+84     	; 0x1343e <vfprintf+0x1bc>
   133ea:	52 2c       	mov	r5, r2
   133ec:	81 14       	cp	r8, r1
   133ee:	91 04       	cpc	r9, r1
   133f0:	59 f5       	brne	.+86     	; 0x13448 <vfprintf+0x1c6>
   133f2:	55 20       	and	r5, r5
   133f4:	09 f4       	brne	.+2      	; 0x133f8 <vfprintf+0x176>
   133f6:	6a cf       	rjmp	.-300    	; 0x132cc <vfprintf+0x4a>
   133f8:	b7 01       	movw	r22, r14
   133fa:	80 e2       	ldi	r24, 0x20	; 32
   133fc:	90 e0       	ldi	r25, 0x00	; 0
   133fe:	4c d1       	rcall	.+664    	; 0x13698 <fputc>
   13400:	5a 94       	dec	r5
   13402:	f7 cf       	rjmp	.-18     	; 0x133f2 <vfprintf+0x170>
   13404:	f8 01       	movw	r30, r16
   13406:	80 81       	ld	r24, Z
   13408:	89 83       	std	Y+1, r24	; 0x01
   1340a:	0e 5f       	subi	r16, 0xFE	; 254
   1340c:	1f 4f       	sbci	r17, 0xFF	; 255
   1340e:	e5 cf       	rjmp	.-54     	; 0x133da <vfprintf+0x158>
   13410:	28 01       	movw	r4, r16
   13412:	f2 e0       	ldi	r31, 0x02	; 2
   13414:	4f 0e       	add	r4, r31
   13416:	51 1c       	adc	r5, r1
   13418:	f8 01       	movw	r30, r16
   1341a:	c0 80       	ld	r12, Z
   1341c:	d1 80       	ldd	r13, Z+1	; 0x01
   1341e:	69 2d       	mov	r22, r9
   13420:	70 e0       	ldi	r23, 0x00	; 0
   13422:	36 fc       	sbrc	r3, 6
   13424:	02 c0       	rjmp	.+4      	; 0x1342a <vfprintf+0x1a8>
   13426:	6f ef       	ldi	r22, 0xFF	; 255
   13428:	7f ef       	ldi	r23, 0xFF	; 255
   1342a:	c6 01       	movw	r24, r12
   1342c:	2a d1       	rcall	.+596    	; 0x13682 <strnlen>
   1342e:	4c 01       	movw	r8, r24
   13430:	82 01       	movw	r16, r4
   13432:	d7 cf       	rjmp	.-82     	; 0x133e2 <vfprintf+0x160>
   13434:	b7 01       	movw	r22, r14
   13436:	80 e2       	ldi	r24, 0x20	; 32
   13438:	90 e0       	ldi	r25, 0x00	; 0
   1343a:	2e d1       	rcall	.+604    	; 0x13698 <fputc>
   1343c:	2a 94       	dec	r2
   1343e:	28 14       	cp	r2, r8
   13440:	19 04       	cpc	r1, r9
   13442:	09 f0       	breq	.+2      	; 0x13446 <vfprintf+0x1c4>
   13444:	b8 f7       	brcc	.-18     	; 0x13434 <vfprintf+0x1b2>
   13446:	d1 cf       	rjmp	.-94     	; 0x133ea <vfprintf+0x168>
   13448:	f6 01       	movw	r30, r12
   1344a:	37 fc       	sbrc	r3, 7
   1344c:	85 91       	lpm	r24, Z+
   1344e:	37 fe       	sbrs	r3, 7
   13450:	81 91       	ld	r24, Z+
   13452:	6f 01       	movw	r12, r30
   13454:	b7 01       	movw	r22, r14
   13456:	90 e0       	ldi	r25, 0x00	; 0
   13458:	1f d1       	rcall	.+574    	; 0x13698 <fputc>
   1345a:	51 10       	cpse	r5, r1
   1345c:	5a 94       	dec	r5
   1345e:	f1 e0       	ldi	r31, 0x01	; 1
   13460:	8f 1a       	sub	r8, r31
   13462:	91 08       	sbc	r9, r1
   13464:	c3 cf       	rjmp	.-122    	; 0x133ec <vfprintf+0x16a>
   13466:	84 36       	cpi	r24, 0x64	; 100
   13468:	19 f0       	breq	.+6      	; 0x13470 <vfprintf+0x1ee>
   1346a:	89 36       	cpi	r24, 0x69	; 105
   1346c:	09 f0       	breq	.+2      	; 0x13470 <vfprintf+0x1ee>
   1346e:	73 c0       	rjmp	.+230    	; 0x13556 <vfprintf+0x2d4>
   13470:	f8 01       	movw	r30, r16
   13472:	37 fe       	sbrs	r3, 7
   13474:	67 c0       	rjmp	.+206    	; 0x13544 <vfprintf+0x2c2>
   13476:	60 81       	ld	r22, Z
   13478:	71 81       	ldd	r23, Z+1	; 0x01
   1347a:	82 81       	ldd	r24, Z+2	; 0x02
   1347c:	93 81       	ldd	r25, Z+3	; 0x03
   1347e:	0c 5f       	subi	r16, 0xFC	; 252
   13480:	1f 4f       	sbci	r17, 0xFF	; 255
   13482:	f3 2d       	mov	r31, r3
   13484:	ff 76       	andi	r31, 0x6F	; 111
   13486:	3f 2e       	mov	r3, r31
   13488:	97 ff       	sbrs	r25, 7
   1348a:	09 c0       	rjmp	.+18     	; 0x1349e <vfprintf+0x21c>
   1348c:	90 95       	com	r25
   1348e:	80 95       	com	r24
   13490:	70 95       	com	r23
   13492:	61 95       	neg	r22
   13494:	7f 4f       	sbci	r23, 0xFF	; 255
   13496:	8f 4f       	sbci	r24, 0xFF	; 255
   13498:	9f 4f       	sbci	r25, 0xFF	; 255
   1349a:	68 94       	set
   1349c:	37 f8       	bld	r3, 7
   1349e:	2a e0       	ldi	r18, 0x0A	; 10
   134a0:	30 e0       	ldi	r19, 0x00	; 0
   134a2:	a5 01       	movw	r20, r10
   134a4:	29 d1       	rcall	.+594    	; 0x136f8 <__ultoa_invert>
   134a6:	c8 2e       	mov	r12, r24
   134a8:	ca 18       	sub	r12, r10
   134aa:	8c 2c       	mov	r8, r12
   134ac:	43 2c       	mov	r4, r3
   134ae:	36 fe       	sbrs	r3, 6
   134b0:	0c c0       	rjmp	.+24     	; 0x134ca <vfprintf+0x248>
   134b2:	e8 94       	clt
   134b4:	40 f8       	bld	r4, 0
   134b6:	c9 14       	cp	r12, r9
   134b8:	40 f4       	brcc	.+16     	; 0x134ca <vfprintf+0x248>
   134ba:	34 fe       	sbrs	r3, 4
   134bc:	05 c0       	rjmp	.+10     	; 0x134c8 <vfprintf+0x246>
   134be:	32 fc       	sbrc	r3, 2
   134c0:	03 c0       	rjmp	.+6      	; 0x134c8 <vfprintf+0x246>
   134c2:	f3 2d       	mov	r31, r3
   134c4:	fe 7e       	andi	r31, 0xEE	; 238
   134c6:	4f 2e       	mov	r4, r31
   134c8:	89 2c       	mov	r8, r9
   134ca:	44 fe       	sbrs	r4, 4
   134cc:	a6 c0       	rjmp	.+332    	; 0x1361a <vfprintf+0x398>
   134ce:	fe 01       	movw	r30, r28
   134d0:	ec 0d       	add	r30, r12
   134d2:	f1 1d       	adc	r31, r1
   134d4:	80 81       	ld	r24, Z
   134d6:	80 33       	cpi	r24, 0x30	; 48
   134d8:	09 f0       	breq	.+2      	; 0x134dc <vfprintf+0x25a>
   134da:	98 c0       	rjmp	.+304    	; 0x1360c <vfprintf+0x38a>
   134dc:	24 2d       	mov	r18, r4
   134de:	29 7e       	andi	r18, 0xE9	; 233
   134e0:	42 2e       	mov	r4, r18
   134e2:	84 2d       	mov	r24, r4
   134e4:	88 70       	andi	r24, 0x08	; 8
   134e6:	58 2e       	mov	r5, r24
   134e8:	43 fc       	sbrc	r4, 3
   134ea:	a5 c0       	rjmp	.+330    	; 0x13636 <vfprintf+0x3b4>
   134ec:	40 fe       	sbrs	r4, 0
   134ee:	9f c0       	rjmp	.+318    	; 0x1362e <vfprintf+0x3ac>
   134f0:	9c 2c       	mov	r9, r12
   134f2:	82 14       	cp	r8, r2
   134f4:	18 f4       	brcc	.+6      	; 0x134fc <vfprintf+0x27a>
   134f6:	2c 0c       	add	r2, r12
   134f8:	92 2c       	mov	r9, r2
   134fa:	98 18       	sub	r9, r8
   134fc:	44 fe       	sbrs	r4, 4
   134fe:	a1 c0       	rjmp	.+322    	; 0x13642 <vfprintf+0x3c0>
   13500:	b7 01       	movw	r22, r14
   13502:	80 e3       	ldi	r24, 0x30	; 48
   13504:	90 e0       	ldi	r25, 0x00	; 0
   13506:	c8 d0       	rcall	.+400    	; 0x13698 <fputc>
   13508:	42 fe       	sbrs	r4, 2
   1350a:	08 c0       	rjmp	.+16     	; 0x1351c <vfprintf+0x29a>
   1350c:	88 e7       	ldi	r24, 0x78	; 120
   1350e:	90 e0       	ldi	r25, 0x00	; 0
   13510:	41 fe       	sbrs	r4, 1
   13512:	02 c0       	rjmp	.+4      	; 0x13518 <vfprintf+0x296>
   13514:	88 e5       	ldi	r24, 0x58	; 88
   13516:	90 e0       	ldi	r25, 0x00	; 0
   13518:	b7 01       	movw	r22, r14
   1351a:	be d0       	rcall	.+380    	; 0x13698 <fputc>
   1351c:	c9 14       	cp	r12, r9
   1351e:	08 f4       	brcc	.+2      	; 0x13522 <vfprintf+0x2a0>
   13520:	9c c0       	rjmp	.+312    	; 0x1365a <vfprintf+0x3d8>
   13522:	ca 94       	dec	r12
   13524:	d1 2c       	mov	r13, r1
   13526:	9f ef       	ldi	r25, 0xFF	; 255
   13528:	c9 1a       	sub	r12, r25
   1352a:	d9 0a       	sbc	r13, r25
   1352c:	ca 0c       	add	r12, r10
   1352e:	db 1c       	adc	r13, r11
   13530:	f6 01       	movw	r30, r12
   13532:	82 91       	ld	r24, -Z
   13534:	6f 01       	movw	r12, r30
   13536:	b7 01       	movw	r22, r14
   13538:	90 e0       	ldi	r25, 0x00	; 0
   1353a:	ae d0       	rcall	.+348    	; 0x13698 <fputc>
   1353c:	ac 14       	cp	r10, r12
   1353e:	bd 04       	cpc	r11, r13
   13540:	b9 f7       	brne	.-18     	; 0x13530 <vfprintf+0x2ae>
   13542:	57 cf       	rjmp	.-338    	; 0x133f2 <vfprintf+0x170>
   13544:	60 81       	ld	r22, Z
   13546:	71 81       	ldd	r23, Z+1	; 0x01
   13548:	07 2e       	mov	r0, r23
   1354a:	00 0c       	add	r0, r0
   1354c:	88 0b       	sbc	r24, r24
   1354e:	99 0b       	sbc	r25, r25
   13550:	0e 5f       	subi	r16, 0xFE	; 254
   13552:	1f 4f       	sbci	r17, 0xFF	; 255
   13554:	96 cf       	rjmp	.-212    	; 0x13482 <vfprintf+0x200>
   13556:	d3 2c       	mov	r13, r3
   13558:	e8 94       	clt
   1355a:	d4 f8       	bld	r13, 4
   1355c:	2a e0       	ldi	r18, 0x0A	; 10
   1355e:	30 e0       	ldi	r19, 0x00	; 0
   13560:	85 37       	cpi	r24, 0x75	; 117
   13562:	e1 f1       	breq	.+120    	; 0x135dc <vfprintf+0x35a>
   13564:	23 2d       	mov	r18, r3
   13566:	29 7f       	andi	r18, 0xF9	; 249
   13568:	d2 2e       	mov	r13, r18
   1356a:	8f 36       	cpi	r24, 0x6F	; 111
   1356c:	a9 f1       	breq	.+106    	; 0x135d8 <vfprintf+0x356>
   1356e:	f0 f4       	brcc	.+60     	; 0x135ac <vfprintf+0x32a>
   13570:	88 35       	cpi	r24, 0x58	; 88
   13572:	51 f1       	breq	.+84     	; 0x135c8 <vfprintf+0x346>
   13574:	f7 01       	movw	r30, r14
   13576:	86 81       	ldd	r24, Z+6	; 0x06
   13578:	97 81       	ldd	r25, Z+7	; 0x07
   1357a:	2b 96       	adiw	r28, 0x0b	; 11
   1357c:	0f b6       	in	r0, 0x3f	; 63
   1357e:	f8 94       	cli
   13580:	de bf       	out	0x3e, r29	; 62
   13582:	0f be       	out	0x3f, r0	; 63
   13584:	cd bf       	out	0x3d, r28	; 61
   13586:	df 91       	pop	r29
   13588:	cf 91       	pop	r28
   1358a:	1f 91       	pop	r17
   1358c:	0f 91       	pop	r16
   1358e:	ff 90       	pop	r15
   13590:	ef 90       	pop	r14
   13592:	df 90       	pop	r13
   13594:	cf 90       	pop	r12
   13596:	bf 90       	pop	r11
   13598:	af 90       	pop	r10
   1359a:	9f 90       	pop	r9
   1359c:	8f 90       	pop	r8
   1359e:	7f 90       	pop	r7
   135a0:	6f 90       	pop	r6
   135a2:	5f 90       	pop	r5
   135a4:	4f 90       	pop	r4
   135a6:	3f 90       	pop	r3
   135a8:	2f 90       	pop	r2
   135aa:	08 95       	ret
   135ac:	80 37       	cpi	r24, 0x70	; 112
   135ae:	49 f0       	breq	.+18     	; 0x135c2 <vfprintf+0x340>
   135b0:	88 37       	cpi	r24, 0x78	; 120
   135b2:	01 f7       	brne	.-64     	; 0x13574 <vfprintf+0x2f2>
   135b4:	d4 fe       	sbrs	r13, 4
   135b6:	02 c0       	rjmp	.+4      	; 0x135bc <vfprintf+0x33a>
   135b8:	68 94       	set
   135ba:	d2 f8       	bld	r13, 2
   135bc:	20 e1       	ldi	r18, 0x10	; 16
   135be:	30 e0       	ldi	r19, 0x00	; 0
   135c0:	0d c0       	rjmp	.+26     	; 0x135dc <vfprintf+0x35a>
   135c2:	68 94       	set
   135c4:	d4 f8       	bld	r13, 4
   135c6:	f6 cf       	rjmp	.-20     	; 0x135b4 <vfprintf+0x332>
   135c8:	34 fe       	sbrs	r3, 4
   135ca:	03 c0       	rjmp	.+6      	; 0x135d2 <vfprintf+0x350>
   135cc:	82 2f       	mov	r24, r18
   135ce:	86 60       	ori	r24, 0x06	; 6
   135d0:	d8 2e       	mov	r13, r24
   135d2:	20 e1       	ldi	r18, 0x10	; 16
   135d4:	32 e0       	ldi	r19, 0x02	; 2
   135d6:	02 c0       	rjmp	.+4      	; 0x135dc <vfprintf+0x35a>
   135d8:	28 e0       	ldi	r18, 0x08	; 8
   135da:	30 e0       	ldi	r19, 0x00	; 0
   135dc:	f8 01       	movw	r30, r16
   135de:	d7 fe       	sbrs	r13, 7
   135e0:	0e c0       	rjmp	.+28     	; 0x135fe <vfprintf+0x37c>
   135e2:	60 81       	ld	r22, Z
   135e4:	71 81       	ldd	r23, Z+1	; 0x01
   135e6:	82 81       	ldd	r24, Z+2	; 0x02
   135e8:	93 81       	ldd	r25, Z+3	; 0x03
   135ea:	0c 5f       	subi	r16, 0xFC	; 252
   135ec:	1f 4f       	sbci	r17, 0xFF	; 255
   135ee:	a5 01       	movw	r20, r10
   135f0:	83 d0       	rcall	.+262    	; 0x136f8 <__ultoa_invert>
   135f2:	c8 2e       	mov	r12, r24
   135f4:	ca 18       	sub	r12, r10
   135f6:	3d 2c       	mov	r3, r13
   135f8:	e8 94       	clt
   135fa:	37 f8       	bld	r3, 7
   135fc:	56 cf       	rjmp	.-340    	; 0x134aa <vfprintf+0x228>
   135fe:	60 81       	ld	r22, Z
   13600:	71 81       	ldd	r23, Z+1	; 0x01
   13602:	90 e0       	ldi	r25, 0x00	; 0
   13604:	80 e0       	ldi	r24, 0x00	; 0
   13606:	0e 5f       	subi	r16, 0xFE	; 254
   13608:	1f 4f       	sbci	r17, 0xFF	; 255
   1360a:	f1 cf       	rjmp	.-30     	; 0x135ee <vfprintf+0x36c>
   1360c:	42 fc       	sbrc	r4, 2
   1360e:	02 c0       	rjmp	.+4      	; 0x13614 <vfprintf+0x392>
   13610:	83 94       	inc	r8
   13612:	67 cf       	rjmp	.-306    	; 0x134e2 <vfprintf+0x260>
   13614:	83 94       	inc	r8
   13616:	83 94       	inc	r8
   13618:	64 cf       	rjmp	.-312    	; 0x134e2 <vfprintf+0x260>
   1361a:	84 2d       	mov	r24, r4
   1361c:	86 78       	andi	r24, 0x86	; 134
   1361e:	09 f4       	brne	.+2      	; 0x13622 <vfprintf+0x3a0>
   13620:	60 cf       	rjmp	.-320    	; 0x134e2 <vfprintf+0x260>
   13622:	f6 cf       	rjmp	.-20     	; 0x13610 <vfprintf+0x38e>
   13624:	b7 01       	movw	r22, r14
   13626:	80 e2       	ldi	r24, 0x20	; 32
   13628:	90 e0       	ldi	r25, 0x00	; 0
   1362a:	36 d0       	rcall	.+108    	; 0x13698 <fputc>
   1362c:	83 94       	inc	r8
   1362e:	82 14       	cp	r8, r2
   13630:	c8 f3       	brcs	.-14     	; 0x13624 <vfprintf+0x3a2>
   13632:	51 2c       	mov	r5, r1
   13634:	63 cf       	rjmp	.-314    	; 0x134fc <vfprintf+0x27a>
   13636:	52 2c       	mov	r5, r2
   13638:	58 18       	sub	r5, r8
   1363a:	82 14       	cp	r8, r2
   1363c:	08 f4       	brcc	.+2      	; 0x13640 <vfprintf+0x3be>
   1363e:	5e cf       	rjmp	.-324    	; 0x134fc <vfprintf+0x27a>
   13640:	f8 cf       	rjmp	.-16     	; 0x13632 <vfprintf+0x3b0>
   13642:	84 2d       	mov	r24, r4
   13644:	86 78       	andi	r24, 0x86	; 134
   13646:	09 f4       	brne	.+2      	; 0x1364a <vfprintf+0x3c8>
   13648:	69 cf       	rjmp	.-302    	; 0x1351c <vfprintf+0x29a>
   1364a:	8b e2       	ldi	r24, 0x2B	; 43
   1364c:	41 fe       	sbrs	r4, 1
   1364e:	80 e2       	ldi	r24, 0x20	; 32
   13650:	47 fc       	sbrc	r4, 7
   13652:	8d e2       	ldi	r24, 0x2D	; 45
   13654:	b7 01       	movw	r22, r14
   13656:	90 e0       	ldi	r25, 0x00	; 0
   13658:	60 cf       	rjmp	.-320    	; 0x1351a <vfprintf+0x298>
   1365a:	b7 01       	movw	r22, r14
   1365c:	80 e3       	ldi	r24, 0x30	; 48
   1365e:	90 e0       	ldi	r25, 0x00	; 0
   13660:	1b d0       	rcall	.+54     	; 0x13698 <fputc>
   13662:	9a 94       	dec	r9
   13664:	5b cf       	rjmp	.-330    	; 0x1351c <vfprintf+0x29a>
   13666:	8f ef       	ldi	r24, 0xFF	; 255
   13668:	9f ef       	ldi	r25, 0xFF	; 255
   1366a:	87 cf       	rjmp	.-242    	; 0x1357a <vfprintf+0x2f8>

0001366c <strnlen_P>:
   1366c:	fc 01       	movw	r30, r24
   1366e:	05 90       	lpm	r0, Z+
   13670:	61 50       	subi	r22, 0x01	; 1
   13672:	70 40       	sbci	r23, 0x00	; 0
   13674:	01 10       	cpse	r0, r1
   13676:	d8 f7       	brcc	.-10     	; 0x1366e <strnlen_P+0x2>
   13678:	80 95       	com	r24
   1367a:	90 95       	com	r25
   1367c:	8e 0f       	add	r24, r30
   1367e:	9f 1f       	adc	r25, r31
   13680:	08 95       	ret

00013682 <strnlen>:
   13682:	fc 01       	movw	r30, r24
   13684:	61 50       	subi	r22, 0x01	; 1
   13686:	70 40       	sbci	r23, 0x00	; 0
   13688:	01 90       	ld	r0, Z+
   1368a:	01 10       	cpse	r0, r1
   1368c:	d8 f7       	brcc	.-10     	; 0x13684 <strnlen+0x2>
   1368e:	80 95       	com	r24
   13690:	90 95       	com	r25
   13692:	8e 0f       	add	r24, r30
   13694:	9f 1f       	adc	r25, r31
   13696:	08 95       	ret

00013698 <fputc>:
   13698:	0f 93       	push	r16
   1369a:	1f 93       	push	r17
   1369c:	cf 93       	push	r28
   1369e:	df 93       	push	r29
   136a0:	18 2f       	mov	r17, r24
   136a2:	09 2f       	mov	r16, r25
   136a4:	eb 01       	movw	r28, r22
   136a6:	8b 81       	ldd	r24, Y+3	; 0x03
   136a8:	81 fd       	sbrc	r24, 1
   136aa:	09 c0       	rjmp	.+18     	; 0x136be <fputc+0x26>
   136ac:	1f ef       	ldi	r17, 0xFF	; 255
   136ae:	0f ef       	ldi	r16, 0xFF	; 255
   136b0:	81 2f       	mov	r24, r17
   136b2:	90 2f       	mov	r25, r16
   136b4:	df 91       	pop	r29
   136b6:	cf 91       	pop	r28
   136b8:	1f 91       	pop	r17
   136ba:	0f 91       	pop	r16
   136bc:	08 95       	ret
   136be:	82 ff       	sbrs	r24, 2
   136c0:	14 c0       	rjmp	.+40     	; 0x136ea <fputc+0x52>
   136c2:	2e 81       	ldd	r18, Y+6	; 0x06
   136c4:	3f 81       	ldd	r19, Y+7	; 0x07
   136c6:	8c 81       	ldd	r24, Y+4	; 0x04
   136c8:	9d 81       	ldd	r25, Y+5	; 0x05
   136ca:	28 17       	cp	r18, r24
   136cc:	39 07       	cpc	r19, r25
   136ce:	3c f4       	brge	.+14     	; 0x136de <fputc+0x46>
   136d0:	e8 81       	ld	r30, Y
   136d2:	f9 81       	ldd	r31, Y+1	; 0x01
   136d4:	cf 01       	movw	r24, r30
   136d6:	01 96       	adiw	r24, 0x01	; 1
   136d8:	99 83       	std	Y+1, r25	; 0x01
   136da:	88 83       	st	Y, r24
   136dc:	10 83       	st	Z, r17
   136de:	8e 81       	ldd	r24, Y+6	; 0x06
   136e0:	9f 81       	ldd	r25, Y+7	; 0x07
   136e2:	01 96       	adiw	r24, 0x01	; 1
   136e4:	9f 83       	std	Y+7, r25	; 0x07
   136e6:	8e 83       	std	Y+6, r24	; 0x06
   136e8:	e3 cf       	rjmp	.-58     	; 0x136b0 <fputc+0x18>
   136ea:	e8 85       	ldd	r30, Y+8	; 0x08
   136ec:	f9 85       	ldd	r31, Y+9	; 0x09
   136ee:	81 2f       	mov	r24, r17
   136f0:	19 95       	eicall
   136f2:	89 2b       	or	r24, r25
   136f4:	a1 f3       	breq	.-24     	; 0x136de <fputc+0x46>
   136f6:	da cf       	rjmp	.-76     	; 0x136ac <fputc+0x14>

000136f8 <__ultoa_invert>:
   136f8:	fa 01       	movw	r30, r20
   136fa:	aa 27       	eor	r26, r26
   136fc:	28 30       	cpi	r18, 0x08	; 8
   136fe:	51 f1       	breq	.+84     	; 0x13754 <__ultoa_invert+0x5c>
   13700:	20 31       	cpi	r18, 0x10	; 16
   13702:	81 f1       	breq	.+96     	; 0x13764 <__ultoa_invert+0x6c>
   13704:	e8 94       	clt
   13706:	6f 93       	push	r22
   13708:	6e 7f       	andi	r22, 0xFE	; 254
   1370a:	6e 5f       	subi	r22, 0xFE	; 254
   1370c:	7f 4f       	sbci	r23, 0xFF	; 255
   1370e:	8f 4f       	sbci	r24, 0xFF	; 255
   13710:	9f 4f       	sbci	r25, 0xFF	; 255
   13712:	af 4f       	sbci	r26, 0xFF	; 255
   13714:	b1 e0       	ldi	r27, 0x01	; 1
   13716:	3e d0       	rcall	.+124    	; 0x13794 <__ultoa_invert+0x9c>
   13718:	b4 e0       	ldi	r27, 0x04	; 4
   1371a:	3c d0       	rcall	.+120    	; 0x13794 <__ultoa_invert+0x9c>
   1371c:	67 0f       	add	r22, r23
   1371e:	78 1f       	adc	r23, r24
   13720:	89 1f       	adc	r24, r25
   13722:	9a 1f       	adc	r25, r26
   13724:	a1 1d       	adc	r26, r1
   13726:	68 0f       	add	r22, r24
   13728:	79 1f       	adc	r23, r25
   1372a:	8a 1f       	adc	r24, r26
   1372c:	91 1d       	adc	r25, r1
   1372e:	a1 1d       	adc	r26, r1
   13730:	6a 0f       	add	r22, r26
   13732:	71 1d       	adc	r23, r1
   13734:	81 1d       	adc	r24, r1
   13736:	91 1d       	adc	r25, r1
   13738:	a1 1d       	adc	r26, r1
   1373a:	20 d0       	rcall	.+64     	; 0x1377c <__ultoa_invert+0x84>
   1373c:	09 f4       	brne	.+2      	; 0x13740 <__ultoa_invert+0x48>
   1373e:	68 94       	set
   13740:	3f 91       	pop	r19
   13742:	2a e0       	ldi	r18, 0x0A	; 10
   13744:	26 9f       	mul	r18, r22
   13746:	11 24       	eor	r1, r1
   13748:	30 19       	sub	r19, r0
   1374a:	30 5d       	subi	r19, 0xD0	; 208
   1374c:	31 93       	st	Z+, r19
   1374e:	de f6       	brtc	.-74     	; 0x13706 <__ultoa_invert+0xe>
   13750:	cf 01       	movw	r24, r30
   13752:	08 95       	ret
   13754:	46 2f       	mov	r20, r22
   13756:	47 70       	andi	r20, 0x07	; 7
   13758:	40 5d       	subi	r20, 0xD0	; 208
   1375a:	41 93       	st	Z+, r20
   1375c:	b3 e0       	ldi	r27, 0x03	; 3
   1375e:	0f d0       	rcall	.+30     	; 0x1377e <__ultoa_invert+0x86>
   13760:	c9 f7       	brne	.-14     	; 0x13754 <__ultoa_invert+0x5c>
   13762:	f6 cf       	rjmp	.-20     	; 0x13750 <__ultoa_invert+0x58>
   13764:	46 2f       	mov	r20, r22
   13766:	4f 70       	andi	r20, 0x0F	; 15
   13768:	40 5d       	subi	r20, 0xD0	; 208
   1376a:	4a 33       	cpi	r20, 0x3A	; 58
   1376c:	18 f0       	brcs	.+6      	; 0x13774 <__ultoa_invert+0x7c>
   1376e:	49 5d       	subi	r20, 0xD9	; 217
   13770:	31 fd       	sbrc	r19, 1
   13772:	40 52       	subi	r20, 0x20	; 32
   13774:	41 93       	st	Z+, r20
   13776:	02 d0       	rcall	.+4      	; 0x1377c <__ultoa_invert+0x84>
   13778:	a9 f7       	brne	.-22     	; 0x13764 <__ultoa_invert+0x6c>
   1377a:	ea cf       	rjmp	.-44     	; 0x13750 <__ultoa_invert+0x58>
   1377c:	b4 e0       	ldi	r27, 0x04	; 4
   1377e:	a6 95       	lsr	r26
   13780:	97 95       	ror	r25
   13782:	87 95       	ror	r24
   13784:	77 95       	ror	r23
   13786:	67 95       	ror	r22
   13788:	ba 95       	dec	r27
   1378a:	c9 f7       	brne	.-14     	; 0x1377e <__ultoa_invert+0x86>
   1378c:	00 97       	sbiw	r24, 0x00	; 0
   1378e:	61 05       	cpc	r22, r1
   13790:	71 05       	cpc	r23, r1
   13792:	08 95       	ret
   13794:	9b 01       	movw	r18, r22
   13796:	ac 01       	movw	r20, r24
   13798:	0a 2e       	mov	r0, r26
   1379a:	06 94       	lsr	r0
   1379c:	57 95       	ror	r21
   1379e:	47 95       	ror	r20
   137a0:	37 95       	ror	r19
   137a2:	27 95       	ror	r18
   137a4:	ba 95       	dec	r27
   137a6:	c9 f7       	brne	.-14     	; 0x1379a <__ultoa_invert+0xa2>
   137a8:	62 0f       	add	r22, r18
   137aa:	73 1f       	adc	r23, r19
   137ac:	84 1f       	adc	r24, r20
   137ae:	95 1f       	adc	r25, r21
   137b0:	a0 1d       	adc	r26, r0
   137b2:	08 95       	ret

000137b4 <_exit>:
   137b4:	f8 94       	cli

000137b6 <__stop_program>:
   137b6:	ff cf       	rjmp	.-2      	; 0x137b6 <__stop_program>
